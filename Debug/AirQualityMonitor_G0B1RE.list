
AirQualityMonitor_G0B1RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e1c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010ac  08008ed8  08008ed8  00009ed8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f84  08009f84  0000b1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009f84  08009f84  0000af84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f8c  08009f8c  0000b1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f8c  08009f8c  0000af8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009f90  08009f90  0000af90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08009f94  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  200001dc  0800a170  0000b1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000049c  0800a170  0000b49c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012540  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cda  00000000  00000000  0001d744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  00020420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001c605  00000000  00000000  000213b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000153f6  00000000  00000000  0003d9b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000b9eb0  00000000  00000000  00052dab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0010cc5b  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000bfb  00000000  00000000  0010cc9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004658  00000000  00000000  0010d89c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00111ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001dc 	.word	0x200001dc
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08008ec0 	.word	0x08008ec0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001e0 	.word	0x200001e0
 8000100:	08008ec0 	.word	0x08008ec0

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			@ (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	@ 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			@ (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	@ 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	@ 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			@ (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			@ (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8b1 	bl	80015a0 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 fff5 	bl	8001438 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8a3 	bl	80015a0 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f899 	bl	80015a0 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f81f 	bl	80014c0 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f815 	bl	80014c0 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	@ (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	@ (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			@ (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f806 	bl	80004e4 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__udivmoddi4>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	4657      	mov	r7, sl
 80004e8:	464e      	mov	r6, r9
 80004ea:	4645      	mov	r5, r8
 80004ec:	46de      	mov	lr, fp
 80004ee:	b5e0      	push	{r5, r6, r7, lr}
 80004f0:	0004      	movs	r4, r0
 80004f2:	000d      	movs	r5, r1
 80004f4:	4692      	mov	sl, r2
 80004f6:	4699      	mov	r9, r3
 80004f8:	b083      	sub	sp, #12
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d830      	bhi.n	8000560 <__udivmoddi4+0x7c>
 80004fe:	d02d      	beq.n	800055c <__udivmoddi4+0x78>
 8000500:	4649      	mov	r1, r9
 8000502:	4650      	mov	r0, sl
 8000504:	f002 f878 	bl	80025f8 <__clzdi2>
 8000508:	0029      	movs	r1, r5
 800050a:	0006      	movs	r6, r0
 800050c:	0020      	movs	r0, r4
 800050e:	f002 f873 	bl	80025f8 <__clzdi2>
 8000512:	1a33      	subs	r3, r6, r0
 8000514:	4698      	mov	r8, r3
 8000516:	3b20      	subs	r3, #32
 8000518:	d434      	bmi.n	8000584 <__udivmoddi4+0xa0>
 800051a:	469b      	mov	fp, r3
 800051c:	4653      	mov	r3, sl
 800051e:	465a      	mov	r2, fp
 8000520:	4093      	lsls	r3, r2
 8000522:	4642      	mov	r2, r8
 8000524:	001f      	movs	r7, r3
 8000526:	4653      	mov	r3, sl
 8000528:	4093      	lsls	r3, r2
 800052a:	001e      	movs	r6, r3
 800052c:	42af      	cmp	r7, r5
 800052e:	d83b      	bhi.n	80005a8 <__udivmoddi4+0xc4>
 8000530:	42af      	cmp	r7, r5
 8000532:	d100      	bne.n	8000536 <__udivmoddi4+0x52>
 8000534:	e079      	b.n	800062a <__udivmoddi4+0x146>
 8000536:	465b      	mov	r3, fp
 8000538:	1ba4      	subs	r4, r4, r6
 800053a:	41bd      	sbcs	r5, r7
 800053c:	2b00      	cmp	r3, #0
 800053e:	da00      	bge.n	8000542 <__udivmoddi4+0x5e>
 8000540:	e076      	b.n	8000630 <__udivmoddi4+0x14c>
 8000542:	2200      	movs	r2, #0
 8000544:	2300      	movs	r3, #0
 8000546:	9200      	str	r2, [sp, #0]
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	2301      	movs	r3, #1
 800054c:	465a      	mov	r2, fp
 800054e:	4093      	lsls	r3, r2
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	2301      	movs	r3, #1
 8000554:	4642      	mov	r2, r8
 8000556:	4093      	lsls	r3, r2
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	e029      	b.n	80005b0 <__udivmoddi4+0xcc>
 800055c:	4282      	cmp	r2, r0
 800055e:	d9cf      	bls.n	8000500 <__udivmoddi4+0x1c>
 8000560:	2200      	movs	r2, #0
 8000562:	2300      	movs	r3, #0
 8000564:	9200      	str	r2, [sp, #0]
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <__udivmoddi4+0x8e>
 800056e:	601c      	str	r4, [r3, #0]
 8000570:	605d      	str	r5, [r3, #4]
 8000572:	9800      	ldr	r0, [sp, #0]
 8000574:	9901      	ldr	r1, [sp, #4]
 8000576:	b003      	add	sp, #12
 8000578:	bcf0      	pop	{r4, r5, r6, r7}
 800057a:	46bb      	mov	fp, r7
 800057c:	46b2      	mov	sl, r6
 800057e:	46a9      	mov	r9, r5
 8000580:	46a0      	mov	r8, r4
 8000582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000584:	4642      	mov	r2, r8
 8000586:	469b      	mov	fp, r3
 8000588:	2320      	movs	r3, #32
 800058a:	1a9b      	subs	r3, r3, r2
 800058c:	4652      	mov	r2, sl
 800058e:	40da      	lsrs	r2, r3
 8000590:	4641      	mov	r1, r8
 8000592:	0013      	movs	r3, r2
 8000594:	464a      	mov	r2, r9
 8000596:	408a      	lsls	r2, r1
 8000598:	0017      	movs	r7, r2
 800059a:	4642      	mov	r2, r8
 800059c:	431f      	orrs	r7, r3
 800059e:	4653      	mov	r3, sl
 80005a0:	4093      	lsls	r3, r2
 80005a2:	001e      	movs	r6, r3
 80005a4:	42af      	cmp	r7, r5
 80005a6:	d9c3      	bls.n	8000530 <__udivmoddi4+0x4c>
 80005a8:	2200      	movs	r2, #0
 80005aa:	2300      	movs	r3, #0
 80005ac:	9200      	str	r2, [sp, #0]
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	4643      	mov	r3, r8
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d0d8      	beq.n	8000568 <__udivmoddi4+0x84>
 80005b6:	07fb      	lsls	r3, r7, #31
 80005b8:	0872      	lsrs	r2, r6, #1
 80005ba:	431a      	orrs	r2, r3
 80005bc:	4646      	mov	r6, r8
 80005be:	087b      	lsrs	r3, r7, #1
 80005c0:	e00e      	b.n	80005e0 <__udivmoddi4+0xfc>
 80005c2:	42ab      	cmp	r3, r5
 80005c4:	d101      	bne.n	80005ca <__udivmoddi4+0xe6>
 80005c6:	42a2      	cmp	r2, r4
 80005c8:	d80c      	bhi.n	80005e4 <__udivmoddi4+0x100>
 80005ca:	1aa4      	subs	r4, r4, r2
 80005cc:	419d      	sbcs	r5, r3
 80005ce:	2001      	movs	r0, #1
 80005d0:	1924      	adds	r4, r4, r4
 80005d2:	416d      	adcs	r5, r5
 80005d4:	2100      	movs	r1, #0
 80005d6:	3e01      	subs	r6, #1
 80005d8:	1824      	adds	r4, r4, r0
 80005da:	414d      	adcs	r5, r1
 80005dc:	2e00      	cmp	r6, #0
 80005de:	d006      	beq.n	80005ee <__udivmoddi4+0x10a>
 80005e0:	42ab      	cmp	r3, r5
 80005e2:	d9ee      	bls.n	80005c2 <__udivmoddi4+0xde>
 80005e4:	3e01      	subs	r6, #1
 80005e6:	1924      	adds	r4, r4, r4
 80005e8:	416d      	adcs	r5, r5
 80005ea:	2e00      	cmp	r6, #0
 80005ec:	d1f8      	bne.n	80005e0 <__udivmoddi4+0xfc>
 80005ee:	9800      	ldr	r0, [sp, #0]
 80005f0:	9901      	ldr	r1, [sp, #4]
 80005f2:	465b      	mov	r3, fp
 80005f4:	1900      	adds	r0, r0, r4
 80005f6:	4169      	adcs	r1, r5
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	db24      	blt.n	8000646 <__udivmoddi4+0x162>
 80005fc:	002b      	movs	r3, r5
 80005fe:	465a      	mov	r2, fp
 8000600:	4644      	mov	r4, r8
 8000602:	40d3      	lsrs	r3, r2
 8000604:	002a      	movs	r2, r5
 8000606:	40e2      	lsrs	r2, r4
 8000608:	001c      	movs	r4, r3
 800060a:	465b      	mov	r3, fp
 800060c:	0015      	movs	r5, r2
 800060e:	2b00      	cmp	r3, #0
 8000610:	db2a      	blt.n	8000668 <__udivmoddi4+0x184>
 8000612:	0026      	movs	r6, r4
 8000614:	409e      	lsls	r6, r3
 8000616:	0033      	movs	r3, r6
 8000618:	0026      	movs	r6, r4
 800061a:	4647      	mov	r7, r8
 800061c:	40be      	lsls	r6, r7
 800061e:	0032      	movs	r2, r6
 8000620:	1a80      	subs	r0, r0, r2
 8000622:	4199      	sbcs	r1, r3
 8000624:	9000      	str	r0, [sp, #0]
 8000626:	9101      	str	r1, [sp, #4]
 8000628:	e79e      	b.n	8000568 <__udivmoddi4+0x84>
 800062a:	42a3      	cmp	r3, r4
 800062c:	d8bc      	bhi.n	80005a8 <__udivmoddi4+0xc4>
 800062e:	e782      	b.n	8000536 <__udivmoddi4+0x52>
 8000630:	4642      	mov	r2, r8
 8000632:	2320      	movs	r3, #32
 8000634:	2100      	movs	r1, #0
 8000636:	1a9b      	subs	r3, r3, r2
 8000638:	2200      	movs	r2, #0
 800063a:	9100      	str	r1, [sp, #0]
 800063c:	9201      	str	r2, [sp, #4]
 800063e:	2201      	movs	r2, #1
 8000640:	40da      	lsrs	r2, r3
 8000642:	9201      	str	r2, [sp, #4]
 8000644:	e785      	b.n	8000552 <__udivmoddi4+0x6e>
 8000646:	4642      	mov	r2, r8
 8000648:	2320      	movs	r3, #32
 800064a:	1a9b      	subs	r3, r3, r2
 800064c:	002a      	movs	r2, r5
 800064e:	4646      	mov	r6, r8
 8000650:	409a      	lsls	r2, r3
 8000652:	0023      	movs	r3, r4
 8000654:	40f3      	lsrs	r3, r6
 8000656:	4644      	mov	r4, r8
 8000658:	4313      	orrs	r3, r2
 800065a:	002a      	movs	r2, r5
 800065c:	40e2      	lsrs	r2, r4
 800065e:	001c      	movs	r4, r3
 8000660:	465b      	mov	r3, fp
 8000662:	0015      	movs	r5, r2
 8000664:	2b00      	cmp	r3, #0
 8000666:	dad4      	bge.n	8000612 <__udivmoddi4+0x12e>
 8000668:	4642      	mov	r2, r8
 800066a:	002f      	movs	r7, r5
 800066c:	2320      	movs	r3, #32
 800066e:	0026      	movs	r6, r4
 8000670:	4097      	lsls	r7, r2
 8000672:	1a9b      	subs	r3, r3, r2
 8000674:	40de      	lsrs	r6, r3
 8000676:	003b      	movs	r3, r7
 8000678:	4333      	orrs	r3, r6
 800067a:	e7cd      	b.n	8000618 <__udivmoddi4+0x134>

0800067c <__aeabi_dadd>:
 800067c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067e:	464f      	mov	r7, r9
 8000680:	4646      	mov	r6, r8
 8000682:	46d6      	mov	lr, sl
 8000684:	b5c0      	push	{r6, r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	9000      	str	r0, [sp, #0]
 800068a:	9101      	str	r1, [sp, #4]
 800068c:	030e      	lsls	r6, r1, #12
 800068e:	004c      	lsls	r4, r1, #1
 8000690:	0fcd      	lsrs	r5, r1, #31
 8000692:	0a71      	lsrs	r1, r6, #9
 8000694:	9e00      	ldr	r6, [sp, #0]
 8000696:	005f      	lsls	r7, r3, #1
 8000698:	0f76      	lsrs	r6, r6, #29
 800069a:	430e      	orrs	r6, r1
 800069c:	9900      	ldr	r1, [sp, #0]
 800069e:	9200      	str	r2, [sp, #0]
 80006a0:	9301      	str	r3, [sp, #4]
 80006a2:	00c9      	lsls	r1, r1, #3
 80006a4:	4689      	mov	r9, r1
 80006a6:	0319      	lsls	r1, r3, #12
 80006a8:	0d7b      	lsrs	r3, r7, #21
 80006aa:	4698      	mov	r8, r3
 80006ac:	9b01      	ldr	r3, [sp, #4]
 80006ae:	0a49      	lsrs	r1, r1, #9
 80006b0:	0fdb      	lsrs	r3, r3, #31
 80006b2:	469c      	mov	ip, r3
 80006b4:	9b00      	ldr	r3, [sp, #0]
 80006b6:	9a00      	ldr	r2, [sp, #0]
 80006b8:	0f5b      	lsrs	r3, r3, #29
 80006ba:	430b      	orrs	r3, r1
 80006bc:	4641      	mov	r1, r8
 80006be:	0d64      	lsrs	r4, r4, #21
 80006c0:	00d2      	lsls	r2, r2, #3
 80006c2:	1a61      	subs	r1, r4, r1
 80006c4:	4565      	cmp	r5, ip
 80006c6:	d100      	bne.n	80006ca <__aeabi_dadd+0x4e>
 80006c8:	e0a6      	b.n	8000818 <__aeabi_dadd+0x19c>
 80006ca:	2900      	cmp	r1, #0
 80006cc:	dd72      	ble.n	80007b4 <__aeabi_dadd+0x138>
 80006ce:	4647      	mov	r7, r8
 80006d0:	2f00      	cmp	r7, #0
 80006d2:	d100      	bne.n	80006d6 <__aeabi_dadd+0x5a>
 80006d4:	e0dd      	b.n	8000892 <__aeabi_dadd+0x216>
 80006d6:	4fcc      	ldr	r7, [pc, #816]	@ (8000a08 <__aeabi_dadd+0x38c>)
 80006d8:	42bc      	cmp	r4, r7
 80006da:	d100      	bne.n	80006de <__aeabi_dadd+0x62>
 80006dc:	e19a      	b.n	8000a14 <__aeabi_dadd+0x398>
 80006de:	2701      	movs	r7, #1
 80006e0:	2938      	cmp	r1, #56	@ 0x38
 80006e2:	dc17      	bgt.n	8000714 <__aeabi_dadd+0x98>
 80006e4:	2780      	movs	r7, #128	@ 0x80
 80006e6:	043f      	lsls	r7, r7, #16
 80006e8:	433b      	orrs	r3, r7
 80006ea:	291f      	cmp	r1, #31
 80006ec:	dd00      	ble.n	80006f0 <__aeabi_dadd+0x74>
 80006ee:	e1dd      	b.n	8000aac <__aeabi_dadd+0x430>
 80006f0:	2720      	movs	r7, #32
 80006f2:	1a78      	subs	r0, r7, r1
 80006f4:	001f      	movs	r7, r3
 80006f6:	4087      	lsls	r7, r0
 80006f8:	46ba      	mov	sl, r7
 80006fa:	0017      	movs	r7, r2
 80006fc:	40cf      	lsrs	r7, r1
 80006fe:	4684      	mov	ip, r0
 8000700:	0038      	movs	r0, r7
 8000702:	4657      	mov	r7, sl
 8000704:	4307      	orrs	r7, r0
 8000706:	4660      	mov	r0, ip
 8000708:	4082      	lsls	r2, r0
 800070a:	40cb      	lsrs	r3, r1
 800070c:	1e50      	subs	r0, r2, #1
 800070e:	4182      	sbcs	r2, r0
 8000710:	1af6      	subs	r6, r6, r3
 8000712:	4317      	orrs	r7, r2
 8000714:	464b      	mov	r3, r9
 8000716:	1bdf      	subs	r7, r3, r7
 8000718:	45b9      	cmp	r9, r7
 800071a:	4180      	sbcs	r0, r0
 800071c:	4240      	negs	r0, r0
 800071e:	1a36      	subs	r6, r6, r0
 8000720:	0233      	lsls	r3, r6, #8
 8000722:	d400      	bmi.n	8000726 <__aeabi_dadd+0xaa>
 8000724:	e0ff      	b.n	8000926 <__aeabi_dadd+0x2aa>
 8000726:	0276      	lsls	r6, r6, #9
 8000728:	0a76      	lsrs	r6, r6, #9
 800072a:	2e00      	cmp	r6, #0
 800072c:	d100      	bne.n	8000730 <__aeabi_dadd+0xb4>
 800072e:	e13c      	b.n	80009aa <__aeabi_dadd+0x32e>
 8000730:	0030      	movs	r0, r6
 8000732:	f001 ff43 	bl	80025bc <__clzsi2>
 8000736:	0003      	movs	r3, r0
 8000738:	3b08      	subs	r3, #8
 800073a:	2120      	movs	r1, #32
 800073c:	0038      	movs	r0, r7
 800073e:	1aca      	subs	r2, r1, r3
 8000740:	40d0      	lsrs	r0, r2
 8000742:	409e      	lsls	r6, r3
 8000744:	0002      	movs	r2, r0
 8000746:	409f      	lsls	r7, r3
 8000748:	4332      	orrs	r2, r6
 800074a:	429c      	cmp	r4, r3
 800074c:	dd00      	ble.n	8000750 <__aeabi_dadd+0xd4>
 800074e:	e1a6      	b.n	8000a9e <__aeabi_dadd+0x422>
 8000750:	1b18      	subs	r0, r3, r4
 8000752:	3001      	adds	r0, #1
 8000754:	1a09      	subs	r1, r1, r0
 8000756:	003e      	movs	r6, r7
 8000758:	408f      	lsls	r7, r1
 800075a:	40c6      	lsrs	r6, r0
 800075c:	1e7b      	subs	r3, r7, #1
 800075e:	419f      	sbcs	r7, r3
 8000760:	0013      	movs	r3, r2
 8000762:	408b      	lsls	r3, r1
 8000764:	4337      	orrs	r7, r6
 8000766:	431f      	orrs	r7, r3
 8000768:	40c2      	lsrs	r2, r0
 800076a:	003b      	movs	r3, r7
 800076c:	0016      	movs	r6, r2
 800076e:	2400      	movs	r4, #0
 8000770:	4313      	orrs	r3, r2
 8000772:	d100      	bne.n	8000776 <__aeabi_dadd+0xfa>
 8000774:	e1df      	b.n	8000b36 <__aeabi_dadd+0x4ba>
 8000776:	077b      	lsls	r3, r7, #29
 8000778:	d100      	bne.n	800077c <__aeabi_dadd+0x100>
 800077a:	e332      	b.n	8000de2 <__aeabi_dadd+0x766>
 800077c:	230f      	movs	r3, #15
 800077e:	003a      	movs	r2, r7
 8000780:	403b      	ands	r3, r7
 8000782:	2b04      	cmp	r3, #4
 8000784:	d004      	beq.n	8000790 <__aeabi_dadd+0x114>
 8000786:	1d3a      	adds	r2, r7, #4
 8000788:	42ba      	cmp	r2, r7
 800078a:	41bf      	sbcs	r7, r7
 800078c:	427f      	negs	r7, r7
 800078e:	19f6      	adds	r6, r6, r7
 8000790:	0233      	lsls	r3, r6, #8
 8000792:	d400      	bmi.n	8000796 <__aeabi_dadd+0x11a>
 8000794:	e323      	b.n	8000dde <__aeabi_dadd+0x762>
 8000796:	4b9c      	ldr	r3, [pc, #624]	@ (8000a08 <__aeabi_dadd+0x38c>)
 8000798:	3401      	adds	r4, #1
 800079a:	429c      	cmp	r4, r3
 800079c:	d100      	bne.n	80007a0 <__aeabi_dadd+0x124>
 800079e:	e0b4      	b.n	800090a <__aeabi_dadd+0x28e>
 80007a0:	4b9a      	ldr	r3, [pc, #616]	@ (8000a0c <__aeabi_dadd+0x390>)
 80007a2:	0564      	lsls	r4, r4, #21
 80007a4:	401e      	ands	r6, r3
 80007a6:	0d64      	lsrs	r4, r4, #21
 80007a8:	0777      	lsls	r7, r6, #29
 80007aa:	08d2      	lsrs	r2, r2, #3
 80007ac:	0276      	lsls	r6, r6, #9
 80007ae:	4317      	orrs	r7, r2
 80007b0:	0b36      	lsrs	r6, r6, #12
 80007b2:	e0ac      	b.n	800090e <__aeabi_dadd+0x292>
 80007b4:	2900      	cmp	r1, #0
 80007b6:	d100      	bne.n	80007ba <__aeabi_dadd+0x13e>
 80007b8:	e07e      	b.n	80008b8 <__aeabi_dadd+0x23c>
 80007ba:	4641      	mov	r1, r8
 80007bc:	1b09      	subs	r1, r1, r4
 80007be:	2c00      	cmp	r4, #0
 80007c0:	d000      	beq.n	80007c4 <__aeabi_dadd+0x148>
 80007c2:	e160      	b.n	8000a86 <__aeabi_dadd+0x40a>
 80007c4:	0034      	movs	r4, r6
 80007c6:	4648      	mov	r0, r9
 80007c8:	4304      	orrs	r4, r0
 80007ca:	d100      	bne.n	80007ce <__aeabi_dadd+0x152>
 80007cc:	e1c9      	b.n	8000b62 <__aeabi_dadd+0x4e6>
 80007ce:	1e4c      	subs	r4, r1, #1
 80007d0:	2901      	cmp	r1, #1
 80007d2:	d100      	bne.n	80007d6 <__aeabi_dadd+0x15a>
 80007d4:	e22e      	b.n	8000c34 <__aeabi_dadd+0x5b8>
 80007d6:	4d8c      	ldr	r5, [pc, #560]	@ (8000a08 <__aeabi_dadd+0x38c>)
 80007d8:	42a9      	cmp	r1, r5
 80007da:	d100      	bne.n	80007de <__aeabi_dadd+0x162>
 80007dc:	e224      	b.n	8000c28 <__aeabi_dadd+0x5ac>
 80007de:	2701      	movs	r7, #1
 80007e0:	2c38      	cmp	r4, #56	@ 0x38
 80007e2:	dc11      	bgt.n	8000808 <__aeabi_dadd+0x18c>
 80007e4:	0021      	movs	r1, r4
 80007e6:	291f      	cmp	r1, #31
 80007e8:	dd00      	ble.n	80007ec <__aeabi_dadd+0x170>
 80007ea:	e20b      	b.n	8000c04 <__aeabi_dadd+0x588>
 80007ec:	2420      	movs	r4, #32
 80007ee:	0037      	movs	r7, r6
 80007f0:	4648      	mov	r0, r9
 80007f2:	1a64      	subs	r4, r4, r1
 80007f4:	40a7      	lsls	r7, r4
 80007f6:	40c8      	lsrs	r0, r1
 80007f8:	4307      	orrs	r7, r0
 80007fa:	4648      	mov	r0, r9
 80007fc:	40a0      	lsls	r0, r4
 80007fe:	40ce      	lsrs	r6, r1
 8000800:	1e44      	subs	r4, r0, #1
 8000802:	41a0      	sbcs	r0, r4
 8000804:	1b9b      	subs	r3, r3, r6
 8000806:	4307      	orrs	r7, r0
 8000808:	1bd7      	subs	r7, r2, r7
 800080a:	42ba      	cmp	r2, r7
 800080c:	4192      	sbcs	r2, r2
 800080e:	4252      	negs	r2, r2
 8000810:	4665      	mov	r5, ip
 8000812:	4644      	mov	r4, r8
 8000814:	1a9e      	subs	r6, r3, r2
 8000816:	e783      	b.n	8000720 <__aeabi_dadd+0xa4>
 8000818:	2900      	cmp	r1, #0
 800081a:	dc00      	bgt.n	800081e <__aeabi_dadd+0x1a2>
 800081c:	e09c      	b.n	8000958 <__aeabi_dadd+0x2dc>
 800081e:	4647      	mov	r7, r8
 8000820:	2f00      	cmp	r7, #0
 8000822:	d167      	bne.n	80008f4 <__aeabi_dadd+0x278>
 8000824:	001f      	movs	r7, r3
 8000826:	4317      	orrs	r7, r2
 8000828:	d100      	bne.n	800082c <__aeabi_dadd+0x1b0>
 800082a:	e0e4      	b.n	80009f6 <__aeabi_dadd+0x37a>
 800082c:	1e48      	subs	r0, r1, #1
 800082e:	2901      	cmp	r1, #1
 8000830:	d100      	bne.n	8000834 <__aeabi_dadd+0x1b8>
 8000832:	e19b      	b.n	8000b6c <__aeabi_dadd+0x4f0>
 8000834:	4f74      	ldr	r7, [pc, #464]	@ (8000a08 <__aeabi_dadd+0x38c>)
 8000836:	42b9      	cmp	r1, r7
 8000838:	d100      	bne.n	800083c <__aeabi_dadd+0x1c0>
 800083a:	e0eb      	b.n	8000a14 <__aeabi_dadd+0x398>
 800083c:	2701      	movs	r7, #1
 800083e:	0001      	movs	r1, r0
 8000840:	2838      	cmp	r0, #56	@ 0x38
 8000842:	dc11      	bgt.n	8000868 <__aeabi_dadd+0x1ec>
 8000844:	291f      	cmp	r1, #31
 8000846:	dd00      	ble.n	800084a <__aeabi_dadd+0x1ce>
 8000848:	e1c7      	b.n	8000bda <__aeabi_dadd+0x55e>
 800084a:	2720      	movs	r7, #32
 800084c:	1a78      	subs	r0, r7, r1
 800084e:	001f      	movs	r7, r3
 8000850:	4684      	mov	ip, r0
 8000852:	4087      	lsls	r7, r0
 8000854:	0010      	movs	r0, r2
 8000856:	40c8      	lsrs	r0, r1
 8000858:	4307      	orrs	r7, r0
 800085a:	4660      	mov	r0, ip
 800085c:	4082      	lsls	r2, r0
 800085e:	40cb      	lsrs	r3, r1
 8000860:	1e50      	subs	r0, r2, #1
 8000862:	4182      	sbcs	r2, r0
 8000864:	18f6      	adds	r6, r6, r3
 8000866:	4317      	orrs	r7, r2
 8000868:	444f      	add	r7, r9
 800086a:	454f      	cmp	r7, r9
 800086c:	4180      	sbcs	r0, r0
 800086e:	4240      	negs	r0, r0
 8000870:	1836      	adds	r6, r6, r0
 8000872:	0233      	lsls	r3, r6, #8
 8000874:	d557      	bpl.n	8000926 <__aeabi_dadd+0x2aa>
 8000876:	4b64      	ldr	r3, [pc, #400]	@ (8000a08 <__aeabi_dadd+0x38c>)
 8000878:	3401      	adds	r4, #1
 800087a:	429c      	cmp	r4, r3
 800087c:	d045      	beq.n	800090a <__aeabi_dadd+0x28e>
 800087e:	2101      	movs	r1, #1
 8000880:	4b62      	ldr	r3, [pc, #392]	@ (8000a0c <__aeabi_dadd+0x390>)
 8000882:	087a      	lsrs	r2, r7, #1
 8000884:	401e      	ands	r6, r3
 8000886:	4039      	ands	r1, r7
 8000888:	430a      	orrs	r2, r1
 800088a:	07f7      	lsls	r7, r6, #31
 800088c:	4317      	orrs	r7, r2
 800088e:	0876      	lsrs	r6, r6, #1
 8000890:	e771      	b.n	8000776 <__aeabi_dadd+0xfa>
 8000892:	001f      	movs	r7, r3
 8000894:	4317      	orrs	r7, r2
 8000896:	d100      	bne.n	800089a <__aeabi_dadd+0x21e>
 8000898:	e0ad      	b.n	80009f6 <__aeabi_dadd+0x37a>
 800089a:	1e4f      	subs	r7, r1, #1
 800089c:	46bc      	mov	ip, r7
 800089e:	2901      	cmp	r1, #1
 80008a0:	d100      	bne.n	80008a4 <__aeabi_dadd+0x228>
 80008a2:	e182      	b.n	8000baa <__aeabi_dadd+0x52e>
 80008a4:	4f58      	ldr	r7, [pc, #352]	@ (8000a08 <__aeabi_dadd+0x38c>)
 80008a6:	42b9      	cmp	r1, r7
 80008a8:	d100      	bne.n	80008ac <__aeabi_dadd+0x230>
 80008aa:	e190      	b.n	8000bce <__aeabi_dadd+0x552>
 80008ac:	4661      	mov	r1, ip
 80008ae:	2701      	movs	r7, #1
 80008b0:	2938      	cmp	r1, #56	@ 0x38
 80008b2:	dd00      	ble.n	80008b6 <__aeabi_dadd+0x23a>
 80008b4:	e72e      	b.n	8000714 <__aeabi_dadd+0x98>
 80008b6:	e718      	b.n	80006ea <__aeabi_dadd+0x6e>
 80008b8:	4f55      	ldr	r7, [pc, #340]	@ (8000a10 <__aeabi_dadd+0x394>)
 80008ba:	1c61      	adds	r1, r4, #1
 80008bc:	4239      	tst	r1, r7
 80008be:	d000      	beq.n	80008c2 <__aeabi_dadd+0x246>
 80008c0:	e0d0      	b.n	8000a64 <__aeabi_dadd+0x3e8>
 80008c2:	0031      	movs	r1, r6
 80008c4:	4648      	mov	r0, r9
 80008c6:	001f      	movs	r7, r3
 80008c8:	4301      	orrs	r1, r0
 80008ca:	4317      	orrs	r7, r2
 80008cc:	2c00      	cmp	r4, #0
 80008ce:	d000      	beq.n	80008d2 <__aeabi_dadd+0x256>
 80008d0:	e13d      	b.n	8000b4e <__aeabi_dadd+0x4d2>
 80008d2:	2900      	cmp	r1, #0
 80008d4:	d100      	bne.n	80008d8 <__aeabi_dadd+0x25c>
 80008d6:	e1bc      	b.n	8000c52 <__aeabi_dadd+0x5d6>
 80008d8:	2f00      	cmp	r7, #0
 80008da:	d000      	beq.n	80008de <__aeabi_dadd+0x262>
 80008dc:	e1bf      	b.n	8000c5e <__aeabi_dadd+0x5e2>
 80008de:	464b      	mov	r3, r9
 80008e0:	2100      	movs	r1, #0
 80008e2:	08d8      	lsrs	r0, r3, #3
 80008e4:	0777      	lsls	r7, r6, #29
 80008e6:	4307      	orrs	r7, r0
 80008e8:	08f0      	lsrs	r0, r6, #3
 80008ea:	0306      	lsls	r6, r0, #12
 80008ec:	054c      	lsls	r4, r1, #21
 80008ee:	0b36      	lsrs	r6, r6, #12
 80008f0:	0d64      	lsrs	r4, r4, #21
 80008f2:	e00c      	b.n	800090e <__aeabi_dadd+0x292>
 80008f4:	4f44      	ldr	r7, [pc, #272]	@ (8000a08 <__aeabi_dadd+0x38c>)
 80008f6:	42bc      	cmp	r4, r7
 80008f8:	d100      	bne.n	80008fc <__aeabi_dadd+0x280>
 80008fa:	e08b      	b.n	8000a14 <__aeabi_dadd+0x398>
 80008fc:	2701      	movs	r7, #1
 80008fe:	2938      	cmp	r1, #56	@ 0x38
 8000900:	dcb2      	bgt.n	8000868 <__aeabi_dadd+0x1ec>
 8000902:	2780      	movs	r7, #128	@ 0x80
 8000904:	043f      	lsls	r7, r7, #16
 8000906:	433b      	orrs	r3, r7
 8000908:	e79c      	b.n	8000844 <__aeabi_dadd+0x1c8>
 800090a:	2600      	movs	r6, #0
 800090c:	2700      	movs	r7, #0
 800090e:	0524      	lsls	r4, r4, #20
 8000910:	4334      	orrs	r4, r6
 8000912:	07ed      	lsls	r5, r5, #31
 8000914:	432c      	orrs	r4, r5
 8000916:	0038      	movs	r0, r7
 8000918:	0021      	movs	r1, r4
 800091a:	b002      	add	sp, #8
 800091c:	bce0      	pop	{r5, r6, r7}
 800091e:	46ba      	mov	sl, r7
 8000920:	46b1      	mov	r9, r6
 8000922:	46a8      	mov	r8, r5
 8000924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000926:	077b      	lsls	r3, r7, #29
 8000928:	d004      	beq.n	8000934 <__aeabi_dadd+0x2b8>
 800092a:	230f      	movs	r3, #15
 800092c:	403b      	ands	r3, r7
 800092e:	2b04      	cmp	r3, #4
 8000930:	d000      	beq.n	8000934 <__aeabi_dadd+0x2b8>
 8000932:	e728      	b.n	8000786 <__aeabi_dadd+0x10a>
 8000934:	08f8      	lsrs	r0, r7, #3
 8000936:	4b34      	ldr	r3, [pc, #208]	@ (8000a08 <__aeabi_dadd+0x38c>)
 8000938:	0777      	lsls	r7, r6, #29
 800093a:	4307      	orrs	r7, r0
 800093c:	08f0      	lsrs	r0, r6, #3
 800093e:	429c      	cmp	r4, r3
 8000940:	d000      	beq.n	8000944 <__aeabi_dadd+0x2c8>
 8000942:	e24a      	b.n	8000dda <__aeabi_dadd+0x75e>
 8000944:	003b      	movs	r3, r7
 8000946:	4303      	orrs	r3, r0
 8000948:	d059      	beq.n	80009fe <__aeabi_dadd+0x382>
 800094a:	2680      	movs	r6, #128	@ 0x80
 800094c:	0336      	lsls	r6, r6, #12
 800094e:	4306      	orrs	r6, r0
 8000950:	0336      	lsls	r6, r6, #12
 8000952:	4c2d      	ldr	r4, [pc, #180]	@ (8000a08 <__aeabi_dadd+0x38c>)
 8000954:	0b36      	lsrs	r6, r6, #12
 8000956:	e7da      	b.n	800090e <__aeabi_dadd+0x292>
 8000958:	2900      	cmp	r1, #0
 800095a:	d061      	beq.n	8000a20 <__aeabi_dadd+0x3a4>
 800095c:	4641      	mov	r1, r8
 800095e:	1b09      	subs	r1, r1, r4
 8000960:	2c00      	cmp	r4, #0
 8000962:	d100      	bne.n	8000966 <__aeabi_dadd+0x2ea>
 8000964:	e0b9      	b.n	8000ada <__aeabi_dadd+0x45e>
 8000966:	4c28      	ldr	r4, [pc, #160]	@ (8000a08 <__aeabi_dadd+0x38c>)
 8000968:	45a0      	cmp	r8, r4
 800096a:	d100      	bne.n	800096e <__aeabi_dadd+0x2f2>
 800096c:	e1a5      	b.n	8000cba <__aeabi_dadd+0x63e>
 800096e:	2701      	movs	r7, #1
 8000970:	2938      	cmp	r1, #56	@ 0x38
 8000972:	dc13      	bgt.n	800099c <__aeabi_dadd+0x320>
 8000974:	2480      	movs	r4, #128	@ 0x80
 8000976:	0424      	lsls	r4, r4, #16
 8000978:	4326      	orrs	r6, r4
 800097a:	291f      	cmp	r1, #31
 800097c:	dd00      	ble.n	8000980 <__aeabi_dadd+0x304>
 800097e:	e1c8      	b.n	8000d12 <__aeabi_dadd+0x696>
 8000980:	2420      	movs	r4, #32
 8000982:	0037      	movs	r7, r6
 8000984:	4648      	mov	r0, r9
 8000986:	1a64      	subs	r4, r4, r1
 8000988:	40a7      	lsls	r7, r4
 800098a:	40c8      	lsrs	r0, r1
 800098c:	4307      	orrs	r7, r0
 800098e:	4648      	mov	r0, r9
 8000990:	40a0      	lsls	r0, r4
 8000992:	40ce      	lsrs	r6, r1
 8000994:	1e44      	subs	r4, r0, #1
 8000996:	41a0      	sbcs	r0, r4
 8000998:	199b      	adds	r3, r3, r6
 800099a:	4307      	orrs	r7, r0
 800099c:	18bf      	adds	r7, r7, r2
 800099e:	4297      	cmp	r7, r2
 80009a0:	4192      	sbcs	r2, r2
 80009a2:	4252      	negs	r2, r2
 80009a4:	4644      	mov	r4, r8
 80009a6:	18d6      	adds	r6, r2, r3
 80009a8:	e763      	b.n	8000872 <__aeabi_dadd+0x1f6>
 80009aa:	0038      	movs	r0, r7
 80009ac:	f001 fe06 	bl	80025bc <__clzsi2>
 80009b0:	0003      	movs	r3, r0
 80009b2:	3318      	adds	r3, #24
 80009b4:	2b1f      	cmp	r3, #31
 80009b6:	dc00      	bgt.n	80009ba <__aeabi_dadd+0x33e>
 80009b8:	e6bf      	b.n	800073a <__aeabi_dadd+0xbe>
 80009ba:	003a      	movs	r2, r7
 80009bc:	3808      	subs	r0, #8
 80009be:	4082      	lsls	r2, r0
 80009c0:	429c      	cmp	r4, r3
 80009c2:	dd00      	ble.n	80009c6 <__aeabi_dadd+0x34a>
 80009c4:	e083      	b.n	8000ace <__aeabi_dadd+0x452>
 80009c6:	1b1b      	subs	r3, r3, r4
 80009c8:	1c58      	adds	r0, r3, #1
 80009ca:	281f      	cmp	r0, #31
 80009cc:	dc00      	bgt.n	80009d0 <__aeabi_dadd+0x354>
 80009ce:	e1b4      	b.n	8000d3a <__aeabi_dadd+0x6be>
 80009d0:	0017      	movs	r7, r2
 80009d2:	3b1f      	subs	r3, #31
 80009d4:	40df      	lsrs	r7, r3
 80009d6:	2820      	cmp	r0, #32
 80009d8:	d005      	beq.n	80009e6 <__aeabi_dadd+0x36a>
 80009da:	2340      	movs	r3, #64	@ 0x40
 80009dc:	1a1b      	subs	r3, r3, r0
 80009de:	409a      	lsls	r2, r3
 80009e0:	1e53      	subs	r3, r2, #1
 80009e2:	419a      	sbcs	r2, r3
 80009e4:	4317      	orrs	r7, r2
 80009e6:	2400      	movs	r4, #0
 80009e8:	2f00      	cmp	r7, #0
 80009ea:	d00a      	beq.n	8000a02 <__aeabi_dadd+0x386>
 80009ec:	077b      	lsls	r3, r7, #29
 80009ee:	d000      	beq.n	80009f2 <__aeabi_dadd+0x376>
 80009f0:	e6c4      	b.n	800077c <__aeabi_dadd+0x100>
 80009f2:	0026      	movs	r6, r4
 80009f4:	e79e      	b.n	8000934 <__aeabi_dadd+0x2b8>
 80009f6:	464b      	mov	r3, r9
 80009f8:	000c      	movs	r4, r1
 80009fa:	08d8      	lsrs	r0, r3, #3
 80009fc:	e79b      	b.n	8000936 <__aeabi_dadd+0x2ba>
 80009fe:	2700      	movs	r7, #0
 8000a00:	4c01      	ldr	r4, [pc, #4]	@ (8000a08 <__aeabi_dadd+0x38c>)
 8000a02:	2600      	movs	r6, #0
 8000a04:	e783      	b.n	800090e <__aeabi_dadd+0x292>
 8000a06:	46c0      	nop			@ (mov r8, r8)
 8000a08:	000007ff 	.word	0x000007ff
 8000a0c:	ff7fffff 	.word	0xff7fffff
 8000a10:	000007fe 	.word	0x000007fe
 8000a14:	464b      	mov	r3, r9
 8000a16:	0777      	lsls	r7, r6, #29
 8000a18:	08d8      	lsrs	r0, r3, #3
 8000a1a:	4307      	orrs	r7, r0
 8000a1c:	08f0      	lsrs	r0, r6, #3
 8000a1e:	e791      	b.n	8000944 <__aeabi_dadd+0x2c8>
 8000a20:	4fcd      	ldr	r7, [pc, #820]	@ (8000d58 <__aeabi_dadd+0x6dc>)
 8000a22:	1c61      	adds	r1, r4, #1
 8000a24:	4239      	tst	r1, r7
 8000a26:	d16b      	bne.n	8000b00 <__aeabi_dadd+0x484>
 8000a28:	0031      	movs	r1, r6
 8000a2a:	4648      	mov	r0, r9
 8000a2c:	4301      	orrs	r1, r0
 8000a2e:	2c00      	cmp	r4, #0
 8000a30:	d000      	beq.n	8000a34 <__aeabi_dadd+0x3b8>
 8000a32:	e14b      	b.n	8000ccc <__aeabi_dadd+0x650>
 8000a34:	001f      	movs	r7, r3
 8000a36:	4317      	orrs	r7, r2
 8000a38:	2900      	cmp	r1, #0
 8000a3a:	d100      	bne.n	8000a3e <__aeabi_dadd+0x3c2>
 8000a3c:	e181      	b.n	8000d42 <__aeabi_dadd+0x6c6>
 8000a3e:	2f00      	cmp	r7, #0
 8000a40:	d100      	bne.n	8000a44 <__aeabi_dadd+0x3c8>
 8000a42:	e74c      	b.n	80008de <__aeabi_dadd+0x262>
 8000a44:	444a      	add	r2, r9
 8000a46:	454a      	cmp	r2, r9
 8000a48:	4180      	sbcs	r0, r0
 8000a4a:	18f6      	adds	r6, r6, r3
 8000a4c:	4240      	negs	r0, r0
 8000a4e:	1836      	adds	r6, r6, r0
 8000a50:	0233      	lsls	r3, r6, #8
 8000a52:	d500      	bpl.n	8000a56 <__aeabi_dadd+0x3da>
 8000a54:	e1b0      	b.n	8000db8 <__aeabi_dadd+0x73c>
 8000a56:	0017      	movs	r7, r2
 8000a58:	4691      	mov	r9, r2
 8000a5a:	4337      	orrs	r7, r6
 8000a5c:	d000      	beq.n	8000a60 <__aeabi_dadd+0x3e4>
 8000a5e:	e73e      	b.n	80008de <__aeabi_dadd+0x262>
 8000a60:	2600      	movs	r6, #0
 8000a62:	e754      	b.n	800090e <__aeabi_dadd+0x292>
 8000a64:	4649      	mov	r1, r9
 8000a66:	1a89      	subs	r1, r1, r2
 8000a68:	4688      	mov	r8, r1
 8000a6a:	45c1      	cmp	r9, r8
 8000a6c:	41bf      	sbcs	r7, r7
 8000a6e:	1af1      	subs	r1, r6, r3
 8000a70:	427f      	negs	r7, r7
 8000a72:	1bc9      	subs	r1, r1, r7
 8000a74:	020f      	lsls	r7, r1, #8
 8000a76:	d461      	bmi.n	8000b3c <__aeabi_dadd+0x4c0>
 8000a78:	4647      	mov	r7, r8
 8000a7a:	430f      	orrs	r7, r1
 8000a7c:	d100      	bne.n	8000a80 <__aeabi_dadd+0x404>
 8000a7e:	e0bd      	b.n	8000bfc <__aeabi_dadd+0x580>
 8000a80:	000e      	movs	r6, r1
 8000a82:	4647      	mov	r7, r8
 8000a84:	e651      	b.n	800072a <__aeabi_dadd+0xae>
 8000a86:	4cb5      	ldr	r4, [pc, #724]	@ (8000d5c <__aeabi_dadd+0x6e0>)
 8000a88:	45a0      	cmp	r8, r4
 8000a8a:	d100      	bne.n	8000a8e <__aeabi_dadd+0x412>
 8000a8c:	e100      	b.n	8000c90 <__aeabi_dadd+0x614>
 8000a8e:	2701      	movs	r7, #1
 8000a90:	2938      	cmp	r1, #56	@ 0x38
 8000a92:	dd00      	ble.n	8000a96 <__aeabi_dadd+0x41a>
 8000a94:	e6b8      	b.n	8000808 <__aeabi_dadd+0x18c>
 8000a96:	2480      	movs	r4, #128	@ 0x80
 8000a98:	0424      	lsls	r4, r4, #16
 8000a9a:	4326      	orrs	r6, r4
 8000a9c:	e6a3      	b.n	80007e6 <__aeabi_dadd+0x16a>
 8000a9e:	4eb0      	ldr	r6, [pc, #704]	@ (8000d60 <__aeabi_dadd+0x6e4>)
 8000aa0:	1ae4      	subs	r4, r4, r3
 8000aa2:	4016      	ands	r6, r2
 8000aa4:	077b      	lsls	r3, r7, #29
 8000aa6:	d000      	beq.n	8000aaa <__aeabi_dadd+0x42e>
 8000aa8:	e73f      	b.n	800092a <__aeabi_dadd+0x2ae>
 8000aaa:	e743      	b.n	8000934 <__aeabi_dadd+0x2b8>
 8000aac:	000f      	movs	r7, r1
 8000aae:	0018      	movs	r0, r3
 8000ab0:	3f20      	subs	r7, #32
 8000ab2:	40f8      	lsrs	r0, r7
 8000ab4:	4684      	mov	ip, r0
 8000ab6:	2920      	cmp	r1, #32
 8000ab8:	d003      	beq.n	8000ac2 <__aeabi_dadd+0x446>
 8000aba:	2740      	movs	r7, #64	@ 0x40
 8000abc:	1a79      	subs	r1, r7, r1
 8000abe:	408b      	lsls	r3, r1
 8000ac0:	431a      	orrs	r2, r3
 8000ac2:	1e53      	subs	r3, r2, #1
 8000ac4:	419a      	sbcs	r2, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	0017      	movs	r7, r2
 8000aca:	431f      	orrs	r7, r3
 8000acc:	e622      	b.n	8000714 <__aeabi_dadd+0x98>
 8000ace:	48a4      	ldr	r0, [pc, #656]	@ (8000d60 <__aeabi_dadd+0x6e4>)
 8000ad0:	1ae1      	subs	r1, r4, r3
 8000ad2:	4010      	ands	r0, r2
 8000ad4:	0747      	lsls	r7, r0, #29
 8000ad6:	08c0      	lsrs	r0, r0, #3
 8000ad8:	e707      	b.n	80008ea <__aeabi_dadd+0x26e>
 8000ada:	0034      	movs	r4, r6
 8000adc:	4648      	mov	r0, r9
 8000ade:	4304      	orrs	r4, r0
 8000ae0:	d100      	bne.n	8000ae4 <__aeabi_dadd+0x468>
 8000ae2:	e0fa      	b.n	8000cda <__aeabi_dadd+0x65e>
 8000ae4:	1e4c      	subs	r4, r1, #1
 8000ae6:	2901      	cmp	r1, #1
 8000ae8:	d100      	bne.n	8000aec <__aeabi_dadd+0x470>
 8000aea:	e0d7      	b.n	8000c9c <__aeabi_dadd+0x620>
 8000aec:	4f9b      	ldr	r7, [pc, #620]	@ (8000d5c <__aeabi_dadd+0x6e0>)
 8000aee:	42b9      	cmp	r1, r7
 8000af0:	d100      	bne.n	8000af4 <__aeabi_dadd+0x478>
 8000af2:	e0e2      	b.n	8000cba <__aeabi_dadd+0x63e>
 8000af4:	2701      	movs	r7, #1
 8000af6:	2c38      	cmp	r4, #56	@ 0x38
 8000af8:	dd00      	ble.n	8000afc <__aeabi_dadd+0x480>
 8000afa:	e74f      	b.n	800099c <__aeabi_dadd+0x320>
 8000afc:	0021      	movs	r1, r4
 8000afe:	e73c      	b.n	800097a <__aeabi_dadd+0x2fe>
 8000b00:	4c96      	ldr	r4, [pc, #600]	@ (8000d5c <__aeabi_dadd+0x6e0>)
 8000b02:	42a1      	cmp	r1, r4
 8000b04:	d100      	bne.n	8000b08 <__aeabi_dadd+0x48c>
 8000b06:	e0dd      	b.n	8000cc4 <__aeabi_dadd+0x648>
 8000b08:	444a      	add	r2, r9
 8000b0a:	454a      	cmp	r2, r9
 8000b0c:	4180      	sbcs	r0, r0
 8000b0e:	18f3      	adds	r3, r6, r3
 8000b10:	4240      	negs	r0, r0
 8000b12:	1818      	adds	r0, r3, r0
 8000b14:	07c7      	lsls	r7, r0, #31
 8000b16:	0852      	lsrs	r2, r2, #1
 8000b18:	4317      	orrs	r7, r2
 8000b1a:	0846      	lsrs	r6, r0, #1
 8000b1c:	0752      	lsls	r2, r2, #29
 8000b1e:	d005      	beq.n	8000b2c <__aeabi_dadd+0x4b0>
 8000b20:	220f      	movs	r2, #15
 8000b22:	000c      	movs	r4, r1
 8000b24:	403a      	ands	r2, r7
 8000b26:	2a04      	cmp	r2, #4
 8000b28:	d000      	beq.n	8000b2c <__aeabi_dadd+0x4b0>
 8000b2a:	e62c      	b.n	8000786 <__aeabi_dadd+0x10a>
 8000b2c:	0776      	lsls	r6, r6, #29
 8000b2e:	08ff      	lsrs	r7, r7, #3
 8000b30:	4337      	orrs	r7, r6
 8000b32:	0900      	lsrs	r0, r0, #4
 8000b34:	e6d9      	b.n	80008ea <__aeabi_dadd+0x26e>
 8000b36:	2700      	movs	r7, #0
 8000b38:	2600      	movs	r6, #0
 8000b3a:	e6e8      	b.n	800090e <__aeabi_dadd+0x292>
 8000b3c:	4649      	mov	r1, r9
 8000b3e:	1a57      	subs	r7, r2, r1
 8000b40:	42ba      	cmp	r2, r7
 8000b42:	4192      	sbcs	r2, r2
 8000b44:	1b9e      	subs	r6, r3, r6
 8000b46:	4252      	negs	r2, r2
 8000b48:	4665      	mov	r5, ip
 8000b4a:	1ab6      	subs	r6, r6, r2
 8000b4c:	e5ed      	b.n	800072a <__aeabi_dadd+0xae>
 8000b4e:	2900      	cmp	r1, #0
 8000b50:	d000      	beq.n	8000b54 <__aeabi_dadd+0x4d8>
 8000b52:	e0c6      	b.n	8000ce2 <__aeabi_dadd+0x666>
 8000b54:	2f00      	cmp	r7, #0
 8000b56:	d167      	bne.n	8000c28 <__aeabi_dadd+0x5ac>
 8000b58:	2680      	movs	r6, #128	@ 0x80
 8000b5a:	2500      	movs	r5, #0
 8000b5c:	4c7f      	ldr	r4, [pc, #508]	@ (8000d5c <__aeabi_dadd+0x6e0>)
 8000b5e:	0336      	lsls	r6, r6, #12
 8000b60:	e6d5      	b.n	800090e <__aeabi_dadd+0x292>
 8000b62:	4665      	mov	r5, ip
 8000b64:	000c      	movs	r4, r1
 8000b66:	001e      	movs	r6, r3
 8000b68:	08d0      	lsrs	r0, r2, #3
 8000b6a:	e6e4      	b.n	8000936 <__aeabi_dadd+0x2ba>
 8000b6c:	444a      	add	r2, r9
 8000b6e:	454a      	cmp	r2, r9
 8000b70:	4180      	sbcs	r0, r0
 8000b72:	18f3      	adds	r3, r6, r3
 8000b74:	4240      	negs	r0, r0
 8000b76:	1818      	adds	r0, r3, r0
 8000b78:	0011      	movs	r1, r2
 8000b7a:	0203      	lsls	r3, r0, #8
 8000b7c:	d400      	bmi.n	8000b80 <__aeabi_dadd+0x504>
 8000b7e:	e096      	b.n	8000cae <__aeabi_dadd+0x632>
 8000b80:	4b77      	ldr	r3, [pc, #476]	@ (8000d60 <__aeabi_dadd+0x6e4>)
 8000b82:	0849      	lsrs	r1, r1, #1
 8000b84:	4018      	ands	r0, r3
 8000b86:	07c3      	lsls	r3, r0, #31
 8000b88:	430b      	orrs	r3, r1
 8000b8a:	0844      	lsrs	r4, r0, #1
 8000b8c:	0749      	lsls	r1, r1, #29
 8000b8e:	d100      	bne.n	8000b92 <__aeabi_dadd+0x516>
 8000b90:	e129      	b.n	8000de6 <__aeabi_dadd+0x76a>
 8000b92:	220f      	movs	r2, #15
 8000b94:	401a      	ands	r2, r3
 8000b96:	2a04      	cmp	r2, #4
 8000b98:	d100      	bne.n	8000b9c <__aeabi_dadd+0x520>
 8000b9a:	e0ea      	b.n	8000d72 <__aeabi_dadd+0x6f6>
 8000b9c:	1d1f      	adds	r7, r3, #4
 8000b9e:	429f      	cmp	r7, r3
 8000ba0:	41b6      	sbcs	r6, r6
 8000ba2:	4276      	negs	r6, r6
 8000ba4:	1936      	adds	r6, r6, r4
 8000ba6:	2402      	movs	r4, #2
 8000ba8:	e6c4      	b.n	8000934 <__aeabi_dadd+0x2b8>
 8000baa:	4649      	mov	r1, r9
 8000bac:	1a8f      	subs	r7, r1, r2
 8000bae:	45b9      	cmp	r9, r7
 8000bb0:	4180      	sbcs	r0, r0
 8000bb2:	1af6      	subs	r6, r6, r3
 8000bb4:	4240      	negs	r0, r0
 8000bb6:	1a36      	subs	r6, r6, r0
 8000bb8:	0233      	lsls	r3, r6, #8
 8000bba:	d406      	bmi.n	8000bca <__aeabi_dadd+0x54e>
 8000bbc:	0773      	lsls	r3, r6, #29
 8000bbe:	08ff      	lsrs	r7, r7, #3
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	431f      	orrs	r7, r3
 8000bc4:	08f0      	lsrs	r0, r6, #3
 8000bc6:	e690      	b.n	80008ea <__aeabi_dadd+0x26e>
 8000bc8:	4665      	mov	r5, ip
 8000bca:	2401      	movs	r4, #1
 8000bcc:	e5ab      	b.n	8000726 <__aeabi_dadd+0xaa>
 8000bce:	464b      	mov	r3, r9
 8000bd0:	0777      	lsls	r7, r6, #29
 8000bd2:	08d8      	lsrs	r0, r3, #3
 8000bd4:	4307      	orrs	r7, r0
 8000bd6:	08f0      	lsrs	r0, r6, #3
 8000bd8:	e6b4      	b.n	8000944 <__aeabi_dadd+0x2c8>
 8000bda:	000f      	movs	r7, r1
 8000bdc:	0018      	movs	r0, r3
 8000bde:	3f20      	subs	r7, #32
 8000be0:	40f8      	lsrs	r0, r7
 8000be2:	4684      	mov	ip, r0
 8000be4:	2920      	cmp	r1, #32
 8000be6:	d003      	beq.n	8000bf0 <__aeabi_dadd+0x574>
 8000be8:	2740      	movs	r7, #64	@ 0x40
 8000bea:	1a79      	subs	r1, r7, r1
 8000bec:	408b      	lsls	r3, r1
 8000bee:	431a      	orrs	r2, r3
 8000bf0:	1e53      	subs	r3, r2, #1
 8000bf2:	419a      	sbcs	r2, r3
 8000bf4:	4663      	mov	r3, ip
 8000bf6:	0017      	movs	r7, r2
 8000bf8:	431f      	orrs	r7, r3
 8000bfa:	e635      	b.n	8000868 <__aeabi_dadd+0x1ec>
 8000bfc:	2500      	movs	r5, #0
 8000bfe:	2400      	movs	r4, #0
 8000c00:	2600      	movs	r6, #0
 8000c02:	e684      	b.n	800090e <__aeabi_dadd+0x292>
 8000c04:	000c      	movs	r4, r1
 8000c06:	0035      	movs	r5, r6
 8000c08:	3c20      	subs	r4, #32
 8000c0a:	40e5      	lsrs	r5, r4
 8000c0c:	2920      	cmp	r1, #32
 8000c0e:	d005      	beq.n	8000c1c <__aeabi_dadd+0x5a0>
 8000c10:	2440      	movs	r4, #64	@ 0x40
 8000c12:	1a61      	subs	r1, r4, r1
 8000c14:	408e      	lsls	r6, r1
 8000c16:	4649      	mov	r1, r9
 8000c18:	4331      	orrs	r1, r6
 8000c1a:	4689      	mov	r9, r1
 8000c1c:	4648      	mov	r0, r9
 8000c1e:	1e41      	subs	r1, r0, #1
 8000c20:	4188      	sbcs	r0, r1
 8000c22:	0007      	movs	r7, r0
 8000c24:	432f      	orrs	r7, r5
 8000c26:	e5ef      	b.n	8000808 <__aeabi_dadd+0x18c>
 8000c28:	08d2      	lsrs	r2, r2, #3
 8000c2a:	075f      	lsls	r7, r3, #29
 8000c2c:	4665      	mov	r5, ip
 8000c2e:	4317      	orrs	r7, r2
 8000c30:	08d8      	lsrs	r0, r3, #3
 8000c32:	e687      	b.n	8000944 <__aeabi_dadd+0x2c8>
 8000c34:	1a17      	subs	r7, r2, r0
 8000c36:	42ba      	cmp	r2, r7
 8000c38:	4192      	sbcs	r2, r2
 8000c3a:	1b9e      	subs	r6, r3, r6
 8000c3c:	4252      	negs	r2, r2
 8000c3e:	1ab6      	subs	r6, r6, r2
 8000c40:	0233      	lsls	r3, r6, #8
 8000c42:	d4c1      	bmi.n	8000bc8 <__aeabi_dadd+0x54c>
 8000c44:	0773      	lsls	r3, r6, #29
 8000c46:	08ff      	lsrs	r7, r7, #3
 8000c48:	4665      	mov	r5, ip
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	431f      	orrs	r7, r3
 8000c4e:	08f0      	lsrs	r0, r6, #3
 8000c50:	e64b      	b.n	80008ea <__aeabi_dadd+0x26e>
 8000c52:	2f00      	cmp	r7, #0
 8000c54:	d07b      	beq.n	8000d4e <__aeabi_dadd+0x6d2>
 8000c56:	4665      	mov	r5, ip
 8000c58:	001e      	movs	r6, r3
 8000c5a:	4691      	mov	r9, r2
 8000c5c:	e63f      	b.n	80008de <__aeabi_dadd+0x262>
 8000c5e:	1a81      	subs	r1, r0, r2
 8000c60:	4688      	mov	r8, r1
 8000c62:	45c1      	cmp	r9, r8
 8000c64:	41a4      	sbcs	r4, r4
 8000c66:	1af1      	subs	r1, r6, r3
 8000c68:	4264      	negs	r4, r4
 8000c6a:	1b09      	subs	r1, r1, r4
 8000c6c:	2480      	movs	r4, #128	@ 0x80
 8000c6e:	0424      	lsls	r4, r4, #16
 8000c70:	4221      	tst	r1, r4
 8000c72:	d077      	beq.n	8000d64 <__aeabi_dadd+0x6e8>
 8000c74:	1a10      	subs	r0, r2, r0
 8000c76:	4282      	cmp	r2, r0
 8000c78:	4192      	sbcs	r2, r2
 8000c7a:	0007      	movs	r7, r0
 8000c7c:	1b9e      	subs	r6, r3, r6
 8000c7e:	4252      	negs	r2, r2
 8000c80:	1ab6      	subs	r6, r6, r2
 8000c82:	4337      	orrs	r7, r6
 8000c84:	d000      	beq.n	8000c88 <__aeabi_dadd+0x60c>
 8000c86:	e0a0      	b.n	8000dca <__aeabi_dadd+0x74e>
 8000c88:	4665      	mov	r5, ip
 8000c8a:	2400      	movs	r4, #0
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e63e      	b.n	800090e <__aeabi_dadd+0x292>
 8000c90:	075f      	lsls	r7, r3, #29
 8000c92:	08d2      	lsrs	r2, r2, #3
 8000c94:	4665      	mov	r5, ip
 8000c96:	4317      	orrs	r7, r2
 8000c98:	08d8      	lsrs	r0, r3, #3
 8000c9a:	e653      	b.n	8000944 <__aeabi_dadd+0x2c8>
 8000c9c:	1881      	adds	r1, r0, r2
 8000c9e:	4291      	cmp	r1, r2
 8000ca0:	4192      	sbcs	r2, r2
 8000ca2:	18f0      	adds	r0, r6, r3
 8000ca4:	4252      	negs	r2, r2
 8000ca6:	1880      	adds	r0, r0, r2
 8000ca8:	0203      	lsls	r3, r0, #8
 8000caa:	d500      	bpl.n	8000cae <__aeabi_dadd+0x632>
 8000cac:	e768      	b.n	8000b80 <__aeabi_dadd+0x504>
 8000cae:	0747      	lsls	r7, r0, #29
 8000cb0:	08c9      	lsrs	r1, r1, #3
 8000cb2:	430f      	orrs	r7, r1
 8000cb4:	08c0      	lsrs	r0, r0, #3
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	e617      	b.n	80008ea <__aeabi_dadd+0x26e>
 8000cba:	08d2      	lsrs	r2, r2, #3
 8000cbc:	075f      	lsls	r7, r3, #29
 8000cbe:	4317      	orrs	r7, r2
 8000cc0:	08d8      	lsrs	r0, r3, #3
 8000cc2:	e63f      	b.n	8000944 <__aeabi_dadd+0x2c8>
 8000cc4:	000c      	movs	r4, r1
 8000cc6:	2600      	movs	r6, #0
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e620      	b.n	800090e <__aeabi_dadd+0x292>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	d156      	bne.n	8000d7e <__aeabi_dadd+0x702>
 8000cd0:	075f      	lsls	r7, r3, #29
 8000cd2:	08d2      	lsrs	r2, r2, #3
 8000cd4:	4317      	orrs	r7, r2
 8000cd6:	08d8      	lsrs	r0, r3, #3
 8000cd8:	e634      	b.n	8000944 <__aeabi_dadd+0x2c8>
 8000cda:	000c      	movs	r4, r1
 8000cdc:	001e      	movs	r6, r3
 8000cde:	08d0      	lsrs	r0, r2, #3
 8000ce0:	e629      	b.n	8000936 <__aeabi_dadd+0x2ba>
 8000ce2:	08c1      	lsrs	r1, r0, #3
 8000ce4:	0770      	lsls	r0, r6, #29
 8000ce6:	4301      	orrs	r1, r0
 8000ce8:	08f0      	lsrs	r0, r6, #3
 8000cea:	2f00      	cmp	r7, #0
 8000cec:	d062      	beq.n	8000db4 <__aeabi_dadd+0x738>
 8000cee:	2480      	movs	r4, #128	@ 0x80
 8000cf0:	0324      	lsls	r4, r4, #12
 8000cf2:	4220      	tst	r0, r4
 8000cf4:	d007      	beq.n	8000d06 <__aeabi_dadd+0x68a>
 8000cf6:	08de      	lsrs	r6, r3, #3
 8000cf8:	4226      	tst	r6, r4
 8000cfa:	d104      	bne.n	8000d06 <__aeabi_dadd+0x68a>
 8000cfc:	4665      	mov	r5, ip
 8000cfe:	0030      	movs	r0, r6
 8000d00:	08d1      	lsrs	r1, r2, #3
 8000d02:	075b      	lsls	r3, r3, #29
 8000d04:	4319      	orrs	r1, r3
 8000d06:	0f4f      	lsrs	r7, r1, #29
 8000d08:	00c9      	lsls	r1, r1, #3
 8000d0a:	08c9      	lsrs	r1, r1, #3
 8000d0c:	077f      	lsls	r7, r7, #29
 8000d0e:	430f      	orrs	r7, r1
 8000d10:	e618      	b.n	8000944 <__aeabi_dadd+0x2c8>
 8000d12:	000c      	movs	r4, r1
 8000d14:	0030      	movs	r0, r6
 8000d16:	3c20      	subs	r4, #32
 8000d18:	40e0      	lsrs	r0, r4
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	2920      	cmp	r1, #32
 8000d1e:	d005      	beq.n	8000d2c <__aeabi_dadd+0x6b0>
 8000d20:	2440      	movs	r4, #64	@ 0x40
 8000d22:	1a61      	subs	r1, r4, r1
 8000d24:	408e      	lsls	r6, r1
 8000d26:	4649      	mov	r1, r9
 8000d28:	4331      	orrs	r1, r6
 8000d2a:	4689      	mov	r9, r1
 8000d2c:	4648      	mov	r0, r9
 8000d2e:	1e41      	subs	r1, r0, #1
 8000d30:	4188      	sbcs	r0, r1
 8000d32:	4661      	mov	r1, ip
 8000d34:	0007      	movs	r7, r0
 8000d36:	430f      	orrs	r7, r1
 8000d38:	e630      	b.n	800099c <__aeabi_dadd+0x320>
 8000d3a:	2120      	movs	r1, #32
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	1a09      	subs	r1, r1, r0
 8000d40:	e50e      	b.n	8000760 <__aeabi_dadd+0xe4>
 8000d42:	001e      	movs	r6, r3
 8000d44:	2f00      	cmp	r7, #0
 8000d46:	d000      	beq.n	8000d4a <__aeabi_dadd+0x6ce>
 8000d48:	e522      	b.n	8000790 <__aeabi_dadd+0x114>
 8000d4a:	2400      	movs	r4, #0
 8000d4c:	e758      	b.n	8000c00 <__aeabi_dadd+0x584>
 8000d4e:	2500      	movs	r5, #0
 8000d50:	2400      	movs	r4, #0
 8000d52:	2600      	movs	r6, #0
 8000d54:	e5db      	b.n	800090e <__aeabi_dadd+0x292>
 8000d56:	46c0      	nop			@ (mov r8, r8)
 8000d58:	000007fe 	.word	0x000007fe
 8000d5c:	000007ff 	.word	0x000007ff
 8000d60:	ff7fffff 	.word	0xff7fffff
 8000d64:	4647      	mov	r7, r8
 8000d66:	430f      	orrs	r7, r1
 8000d68:	d100      	bne.n	8000d6c <__aeabi_dadd+0x6f0>
 8000d6a:	e747      	b.n	8000bfc <__aeabi_dadd+0x580>
 8000d6c:	000e      	movs	r6, r1
 8000d6e:	46c1      	mov	r9, r8
 8000d70:	e5b5      	b.n	80008de <__aeabi_dadd+0x262>
 8000d72:	08df      	lsrs	r7, r3, #3
 8000d74:	0764      	lsls	r4, r4, #29
 8000d76:	2102      	movs	r1, #2
 8000d78:	4327      	orrs	r7, r4
 8000d7a:	0900      	lsrs	r0, r0, #4
 8000d7c:	e5b5      	b.n	80008ea <__aeabi_dadd+0x26e>
 8000d7e:	0019      	movs	r1, r3
 8000d80:	08c0      	lsrs	r0, r0, #3
 8000d82:	0777      	lsls	r7, r6, #29
 8000d84:	4307      	orrs	r7, r0
 8000d86:	4311      	orrs	r1, r2
 8000d88:	08f0      	lsrs	r0, r6, #3
 8000d8a:	2900      	cmp	r1, #0
 8000d8c:	d100      	bne.n	8000d90 <__aeabi_dadd+0x714>
 8000d8e:	e5d9      	b.n	8000944 <__aeabi_dadd+0x2c8>
 8000d90:	2180      	movs	r1, #128	@ 0x80
 8000d92:	0309      	lsls	r1, r1, #12
 8000d94:	4208      	tst	r0, r1
 8000d96:	d007      	beq.n	8000da8 <__aeabi_dadd+0x72c>
 8000d98:	08dc      	lsrs	r4, r3, #3
 8000d9a:	420c      	tst	r4, r1
 8000d9c:	d104      	bne.n	8000da8 <__aeabi_dadd+0x72c>
 8000d9e:	08d2      	lsrs	r2, r2, #3
 8000da0:	075b      	lsls	r3, r3, #29
 8000da2:	431a      	orrs	r2, r3
 8000da4:	0017      	movs	r7, r2
 8000da6:	0020      	movs	r0, r4
 8000da8:	0f7b      	lsrs	r3, r7, #29
 8000daa:	00ff      	lsls	r7, r7, #3
 8000dac:	08ff      	lsrs	r7, r7, #3
 8000dae:	075b      	lsls	r3, r3, #29
 8000db0:	431f      	orrs	r7, r3
 8000db2:	e5c7      	b.n	8000944 <__aeabi_dadd+0x2c8>
 8000db4:	000f      	movs	r7, r1
 8000db6:	e5c5      	b.n	8000944 <__aeabi_dadd+0x2c8>
 8000db8:	4b12      	ldr	r3, [pc, #72]	@ (8000e04 <__aeabi_dadd+0x788>)
 8000dba:	08d2      	lsrs	r2, r2, #3
 8000dbc:	4033      	ands	r3, r6
 8000dbe:	075f      	lsls	r7, r3, #29
 8000dc0:	025b      	lsls	r3, r3, #9
 8000dc2:	2401      	movs	r4, #1
 8000dc4:	4317      	orrs	r7, r2
 8000dc6:	0b1e      	lsrs	r6, r3, #12
 8000dc8:	e5a1      	b.n	800090e <__aeabi_dadd+0x292>
 8000dca:	4226      	tst	r6, r4
 8000dcc:	d012      	beq.n	8000df4 <__aeabi_dadd+0x778>
 8000dce:	4b0d      	ldr	r3, [pc, #52]	@ (8000e04 <__aeabi_dadd+0x788>)
 8000dd0:	4665      	mov	r5, ip
 8000dd2:	0002      	movs	r2, r0
 8000dd4:	2401      	movs	r4, #1
 8000dd6:	401e      	ands	r6, r3
 8000dd8:	e4e6      	b.n	80007a8 <__aeabi_dadd+0x12c>
 8000dda:	0021      	movs	r1, r4
 8000ddc:	e585      	b.n	80008ea <__aeabi_dadd+0x26e>
 8000dde:	0017      	movs	r7, r2
 8000de0:	e5a8      	b.n	8000934 <__aeabi_dadd+0x2b8>
 8000de2:	003a      	movs	r2, r7
 8000de4:	e4d4      	b.n	8000790 <__aeabi_dadd+0x114>
 8000de6:	08db      	lsrs	r3, r3, #3
 8000de8:	0764      	lsls	r4, r4, #29
 8000dea:	431c      	orrs	r4, r3
 8000dec:	0027      	movs	r7, r4
 8000dee:	2102      	movs	r1, #2
 8000df0:	0900      	lsrs	r0, r0, #4
 8000df2:	e57a      	b.n	80008ea <__aeabi_dadd+0x26e>
 8000df4:	08c0      	lsrs	r0, r0, #3
 8000df6:	0777      	lsls	r7, r6, #29
 8000df8:	4307      	orrs	r7, r0
 8000dfa:	4665      	mov	r5, ip
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	08f0      	lsrs	r0, r6, #3
 8000e00:	e573      	b.n	80008ea <__aeabi_dadd+0x26e>
 8000e02:	46c0      	nop			@ (mov r8, r8)
 8000e04:	ff7fffff 	.word	0xff7fffff

08000e08 <__aeabi_ddiv>:
 8000e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e0a:	46de      	mov	lr, fp
 8000e0c:	4645      	mov	r5, r8
 8000e0e:	4657      	mov	r7, sl
 8000e10:	464e      	mov	r6, r9
 8000e12:	b5e0      	push	{r5, r6, r7, lr}
 8000e14:	b087      	sub	sp, #28
 8000e16:	9200      	str	r2, [sp, #0]
 8000e18:	9301      	str	r3, [sp, #4]
 8000e1a:	030b      	lsls	r3, r1, #12
 8000e1c:	0b1b      	lsrs	r3, r3, #12
 8000e1e:	469b      	mov	fp, r3
 8000e20:	0fca      	lsrs	r2, r1, #31
 8000e22:	004b      	lsls	r3, r1, #1
 8000e24:	0004      	movs	r4, r0
 8000e26:	4680      	mov	r8, r0
 8000e28:	0d5b      	lsrs	r3, r3, #21
 8000e2a:	9202      	str	r2, [sp, #8]
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_ddiv+0x28>
 8000e2e:	e098      	b.n	8000f62 <__aeabi_ddiv+0x15a>
 8000e30:	4a7c      	ldr	r2, [pc, #496]	@ (8001024 <__aeabi_ddiv+0x21c>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d037      	beq.n	8000ea6 <__aeabi_ddiv+0x9e>
 8000e36:	4659      	mov	r1, fp
 8000e38:	0f42      	lsrs	r2, r0, #29
 8000e3a:	00c9      	lsls	r1, r1, #3
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	2180      	movs	r1, #128	@ 0x80
 8000e40:	0409      	lsls	r1, r1, #16
 8000e42:	4311      	orrs	r1, r2
 8000e44:	00c2      	lsls	r2, r0, #3
 8000e46:	4690      	mov	r8, r2
 8000e48:	4a77      	ldr	r2, [pc, #476]	@ (8001028 <__aeabi_ddiv+0x220>)
 8000e4a:	4689      	mov	r9, r1
 8000e4c:	4692      	mov	sl, r2
 8000e4e:	449a      	add	sl, r3
 8000e50:	2300      	movs	r3, #0
 8000e52:	2400      	movs	r4, #0
 8000e54:	9303      	str	r3, [sp, #12]
 8000e56:	9e00      	ldr	r6, [sp, #0]
 8000e58:	9f01      	ldr	r7, [sp, #4]
 8000e5a:	033b      	lsls	r3, r7, #12
 8000e5c:	0b1b      	lsrs	r3, r3, #12
 8000e5e:	469b      	mov	fp, r3
 8000e60:	007b      	lsls	r3, r7, #1
 8000e62:	0030      	movs	r0, r6
 8000e64:	0d5b      	lsrs	r3, r3, #21
 8000e66:	0ffd      	lsrs	r5, r7, #31
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d059      	beq.n	8000f20 <__aeabi_ddiv+0x118>
 8000e6c:	4a6d      	ldr	r2, [pc, #436]	@ (8001024 <__aeabi_ddiv+0x21c>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d048      	beq.n	8000f04 <__aeabi_ddiv+0xfc>
 8000e72:	4659      	mov	r1, fp
 8000e74:	0f72      	lsrs	r2, r6, #29
 8000e76:	00c9      	lsls	r1, r1, #3
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	2180      	movs	r1, #128	@ 0x80
 8000e7c:	0409      	lsls	r1, r1, #16
 8000e7e:	4311      	orrs	r1, r2
 8000e80:	468b      	mov	fp, r1
 8000e82:	4969      	ldr	r1, [pc, #420]	@ (8001028 <__aeabi_ddiv+0x220>)
 8000e84:	00f2      	lsls	r2, r6, #3
 8000e86:	468c      	mov	ip, r1
 8000e88:	4651      	mov	r1, sl
 8000e8a:	4463      	add	r3, ip
 8000e8c:	1acb      	subs	r3, r1, r3
 8000e8e:	469a      	mov	sl, r3
 8000e90:	2100      	movs	r1, #0
 8000e92:	9e02      	ldr	r6, [sp, #8]
 8000e94:	406e      	eors	r6, r5
 8000e96:	b2f6      	uxtb	r6, r6
 8000e98:	2c0f      	cmp	r4, #15
 8000e9a:	d900      	bls.n	8000e9e <__aeabi_ddiv+0x96>
 8000e9c:	e0ce      	b.n	800103c <__aeabi_ddiv+0x234>
 8000e9e:	4b63      	ldr	r3, [pc, #396]	@ (800102c <__aeabi_ddiv+0x224>)
 8000ea0:	00a4      	lsls	r4, r4, #2
 8000ea2:	591b      	ldr	r3, [r3, r4]
 8000ea4:	469f      	mov	pc, r3
 8000ea6:	465a      	mov	r2, fp
 8000ea8:	4302      	orrs	r2, r0
 8000eaa:	4691      	mov	r9, r2
 8000eac:	d000      	beq.n	8000eb0 <__aeabi_ddiv+0xa8>
 8000eae:	e090      	b.n	8000fd2 <__aeabi_ddiv+0x1ca>
 8000eb0:	469a      	mov	sl, r3
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	4690      	mov	r8, r2
 8000eb6:	2408      	movs	r4, #8
 8000eb8:	9303      	str	r3, [sp, #12]
 8000eba:	e7cc      	b.n	8000e56 <__aeabi_ddiv+0x4e>
 8000ebc:	46cb      	mov	fp, r9
 8000ebe:	4642      	mov	r2, r8
 8000ec0:	9d02      	ldr	r5, [sp, #8]
 8000ec2:	9903      	ldr	r1, [sp, #12]
 8000ec4:	2902      	cmp	r1, #2
 8000ec6:	d100      	bne.n	8000eca <__aeabi_ddiv+0xc2>
 8000ec8:	e1de      	b.n	8001288 <__aeabi_ddiv+0x480>
 8000eca:	2903      	cmp	r1, #3
 8000ecc:	d100      	bne.n	8000ed0 <__aeabi_ddiv+0xc8>
 8000ece:	e08d      	b.n	8000fec <__aeabi_ddiv+0x1e4>
 8000ed0:	2901      	cmp	r1, #1
 8000ed2:	d000      	beq.n	8000ed6 <__aeabi_ddiv+0xce>
 8000ed4:	e179      	b.n	80011ca <__aeabi_ddiv+0x3c2>
 8000ed6:	002e      	movs	r6, r5
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2300      	movs	r3, #0
 8000edc:	2400      	movs	r4, #0
 8000ede:	4690      	mov	r8, r2
 8000ee0:	051b      	lsls	r3, r3, #20
 8000ee2:	4323      	orrs	r3, r4
 8000ee4:	07f6      	lsls	r6, r6, #31
 8000ee6:	4333      	orrs	r3, r6
 8000ee8:	4640      	mov	r0, r8
 8000eea:	0019      	movs	r1, r3
 8000eec:	b007      	add	sp, #28
 8000eee:	bcf0      	pop	{r4, r5, r6, r7}
 8000ef0:	46bb      	mov	fp, r7
 8000ef2:	46b2      	mov	sl, r6
 8000ef4:	46a9      	mov	r9, r5
 8000ef6:	46a0      	mov	r8, r4
 8000ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000efa:	2200      	movs	r2, #0
 8000efc:	2400      	movs	r4, #0
 8000efe:	4690      	mov	r8, r2
 8000f00:	4b48      	ldr	r3, [pc, #288]	@ (8001024 <__aeabi_ddiv+0x21c>)
 8000f02:	e7ed      	b.n	8000ee0 <__aeabi_ddiv+0xd8>
 8000f04:	465a      	mov	r2, fp
 8000f06:	9b00      	ldr	r3, [sp, #0]
 8000f08:	431a      	orrs	r2, r3
 8000f0a:	4b49      	ldr	r3, [pc, #292]	@ (8001030 <__aeabi_ddiv+0x228>)
 8000f0c:	469c      	mov	ip, r3
 8000f0e:	44e2      	add	sl, ip
 8000f10:	2a00      	cmp	r2, #0
 8000f12:	d159      	bne.n	8000fc8 <__aeabi_ddiv+0x1c0>
 8000f14:	2302      	movs	r3, #2
 8000f16:	431c      	orrs	r4, r3
 8000f18:	2300      	movs	r3, #0
 8000f1a:	2102      	movs	r1, #2
 8000f1c:	469b      	mov	fp, r3
 8000f1e:	e7b8      	b.n	8000e92 <__aeabi_ddiv+0x8a>
 8000f20:	465a      	mov	r2, fp
 8000f22:	9b00      	ldr	r3, [sp, #0]
 8000f24:	431a      	orrs	r2, r3
 8000f26:	d049      	beq.n	8000fbc <__aeabi_ddiv+0x1b4>
 8000f28:	465b      	mov	r3, fp
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_ddiv+0x128>
 8000f2e:	e19c      	b.n	800126a <__aeabi_ddiv+0x462>
 8000f30:	4658      	mov	r0, fp
 8000f32:	f001 fb43 	bl	80025bc <__clzsi2>
 8000f36:	0002      	movs	r2, r0
 8000f38:	0003      	movs	r3, r0
 8000f3a:	3a0b      	subs	r2, #11
 8000f3c:	271d      	movs	r7, #29
 8000f3e:	9e00      	ldr	r6, [sp, #0]
 8000f40:	1aba      	subs	r2, r7, r2
 8000f42:	0019      	movs	r1, r3
 8000f44:	4658      	mov	r0, fp
 8000f46:	40d6      	lsrs	r6, r2
 8000f48:	3908      	subs	r1, #8
 8000f4a:	4088      	lsls	r0, r1
 8000f4c:	0032      	movs	r2, r6
 8000f4e:	4302      	orrs	r2, r0
 8000f50:	4693      	mov	fp, r2
 8000f52:	9a00      	ldr	r2, [sp, #0]
 8000f54:	408a      	lsls	r2, r1
 8000f56:	4937      	ldr	r1, [pc, #220]	@ (8001034 <__aeabi_ddiv+0x22c>)
 8000f58:	4453      	add	r3, sl
 8000f5a:	468a      	mov	sl, r1
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	449a      	add	sl, r3
 8000f60:	e797      	b.n	8000e92 <__aeabi_ddiv+0x8a>
 8000f62:	465b      	mov	r3, fp
 8000f64:	4303      	orrs	r3, r0
 8000f66:	4699      	mov	r9, r3
 8000f68:	d021      	beq.n	8000fae <__aeabi_ddiv+0x1a6>
 8000f6a:	465b      	mov	r3, fp
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d100      	bne.n	8000f72 <__aeabi_ddiv+0x16a>
 8000f70:	e169      	b.n	8001246 <__aeabi_ddiv+0x43e>
 8000f72:	4658      	mov	r0, fp
 8000f74:	f001 fb22 	bl	80025bc <__clzsi2>
 8000f78:	230b      	movs	r3, #11
 8000f7a:	425b      	negs	r3, r3
 8000f7c:	469c      	mov	ip, r3
 8000f7e:	0002      	movs	r2, r0
 8000f80:	4484      	add	ip, r0
 8000f82:	4666      	mov	r6, ip
 8000f84:	231d      	movs	r3, #29
 8000f86:	1b9b      	subs	r3, r3, r6
 8000f88:	0026      	movs	r6, r4
 8000f8a:	0011      	movs	r1, r2
 8000f8c:	4658      	mov	r0, fp
 8000f8e:	40de      	lsrs	r6, r3
 8000f90:	3908      	subs	r1, #8
 8000f92:	4088      	lsls	r0, r1
 8000f94:	0033      	movs	r3, r6
 8000f96:	4303      	orrs	r3, r0
 8000f98:	4699      	mov	r9, r3
 8000f9a:	0023      	movs	r3, r4
 8000f9c:	408b      	lsls	r3, r1
 8000f9e:	4698      	mov	r8, r3
 8000fa0:	4b25      	ldr	r3, [pc, #148]	@ (8001038 <__aeabi_ddiv+0x230>)
 8000fa2:	2400      	movs	r4, #0
 8000fa4:	1a9b      	subs	r3, r3, r2
 8000fa6:	469a      	mov	sl, r3
 8000fa8:	2300      	movs	r3, #0
 8000faa:	9303      	str	r3, [sp, #12]
 8000fac:	e753      	b.n	8000e56 <__aeabi_ddiv+0x4e>
 8000fae:	2300      	movs	r3, #0
 8000fb0:	4698      	mov	r8, r3
 8000fb2:	469a      	mov	sl, r3
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	2404      	movs	r4, #4
 8000fb8:	9303      	str	r3, [sp, #12]
 8000fba:	e74c      	b.n	8000e56 <__aeabi_ddiv+0x4e>
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	431c      	orrs	r4, r3
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	469b      	mov	fp, r3
 8000fc6:	e764      	b.n	8000e92 <__aeabi_ddiv+0x8a>
 8000fc8:	2303      	movs	r3, #3
 8000fca:	0032      	movs	r2, r6
 8000fcc:	2103      	movs	r1, #3
 8000fce:	431c      	orrs	r4, r3
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_ddiv+0x8a>
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	46d9      	mov	r9, fp
 8000fd8:	240c      	movs	r4, #12
 8000fda:	9303      	str	r3, [sp, #12]
 8000fdc:	e73b      	b.n	8000e56 <__aeabi_ddiv+0x4e>
 8000fde:	2300      	movs	r3, #0
 8000fe0:	2480      	movs	r4, #128	@ 0x80
 8000fe2:	4698      	mov	r8, r3
 8000fe4:	2600      	movs	r6, #0
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8001024 <__aeabi_ddiv+0x21c>)
 8000fe8:	0324      	lsls	r4, r4, #12
 8000fea:	e779      	b.n	8000ee0 <__aeabi_ddiv+0xd8>
 8000fec:	2480      	movs	r4, #128	@ 0x80
 8000fee:	465b      	mov	r3, fp
 8000ff0:	0324      	lsls	r4, r4, #12
 8000ff2:	431c      	orrs	r4, r3
 8000ff4:	0324      	lsls	r4, r4, #12
 8000ff6:	002e      	movs	r6, r5
 8000ff8:	4690      	mov	r8, r2
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8001024 <__aeabi_ddiv+0x21c>)
 8000ffc:	0b24      	lsrs	r4, r4, #12
 8000ffe:	e76f      	b.n	8000ee0 <__aeabi_ddiv+0xd8>
 8001000:	2480      	movs	r4, #128	@ 0x80
 8001002:	464b      	mov	r3, r9
 8001004:	0324      	lsls	r4, r4, #12
 8001006:	4223      	tst	r3, r4
 8001008:	d002      	beq.n	8001010 <__aeabi_ddiv+0x208>
 800100a:	465b      	mov	r3, fp
 800100c:	4223      	tst	r3, r4
 800100e:	d0f0      	beq.n	8000ff2 <__aeabi_ddiv+0x1ea>
 8001010:	2480      	movs	r4, #128	@ 0x80
 8001012:	464b      	mov	r3, r9
 8001014:	0324      	lsls	r4, r4, #12
 8001016:	431c      	orrs	r4, r3
 8001018:	0324      	lsls	r4, r4, #12
 800101a:	9e02      	ldr	r6, [sp, #8]
 800101c:	4b01      	ldr	r3, [pc, #4]	@ (8001024 <__aeabi_ddiv+0x21c>)
 800101e:	0b24      	lsrs	r4, r4, #12
 8001020:	e75e      	b.n	8000ee0 <__aeabi_ddiv+0xd8>
 8001022:	46c0      	nop			@ (mov r8, r8)
 8001024:	000007ff 	.word	0x000007ff
 8001028:	fffffc01 	.word	0xfffffc01
 800102c:	08008f64 	.word	0x08008f64
 8001030:	fffff801 	.word	0xfffff801
 8001034:	000003f3 	.word	0x000003f3
 8001038:	fffffc0d 	.word	0xfffffc0d
 800103c:	45cb      	cmp	fp, r9
 800103e:	d200      	bcs.n	8001042 <__aeabi_ddiv+0x23a>
 8001040:	e0f8      	b.n	8001234 <__aeabi_ddiv+0x42c>
 8001042:	d100      	bne.n	8001046 <__aeabi_ddiv+0x23e>
 8001044:	e0f3      	b.n	800122e <__aeabi_ddiv+0x426>
 8001046:	2301      	movs	r3, #1
 8001048:	425b      	negs	r3, r3
 800104a:	469c      	mov	ip, r3
 800104c:	4644      	mov	r4, r8
 800104e:	4648      	mov	r0, r9
 8001050:	2500      	movs	r5, #0
 8001052:	44e2      	add	sl, ip
 8001054:	465b      	mov	r3, fp
 8001056:	0e17      	lsrs	r7, r2, #24
 8001058:	021b      	lsls	r3, r3, #8
 800105a:	431f      	orrs	r7, r3
 800105c:	0c19      	lsrs	r1, r3, #16
 800105e:	043b      	lsls	r3, r7, #16
 8001060:	0212      	lsls	r2, r2, #8
 8001062:	9700      	str	r7, [sp, #0]
 8001064:	0c1f      	lsrs	r7, r3, #16
 8001066:	4691      	mov	r9, r2
 8001068:	9102      	str	r1, [sp, #8]
 800106a:	9703      	str	r7, [sp, #12]
 800106c:	f7ff f8ec 	bl	8000248 <__aeabi_uidivmod>
 8001070:	0002      	movs	r2, r0
 8001072:	437a      	muls	r2, r7
 8001074:	040b      	lsls	r3, r1, #16
 8001076:	0c21      	lsrs	r1, r4, #16
 8001078:	4680      	mov	r8, r0
 800107a:	4319      	orrs	r1, r3
 800107c:	428a      	cmp	r2, r1
 800107e:	d909      	bls.n	8001094 <__aeabi_ddiv+0x28c>
 8001080:	9f00      	ldr	r7, [sp, #0]
 8001082:	2301      	movs	r3, #1
 8001084:	46bc      	mov	ip, r7
 8001086:	425b      	negs	r3, r3
 8001088:	4461      	add	r1, ip
 800108a:	469c      	mov	ip, r3
 800108c:	44e0      	add	r8, ip
 800108e:	428f      	cmp	r7, r1
 8001090:	d800      	bhi.n	8001094 <__aeabi_ddiv+0x28c>
 8001092:	e15c      	b.n	800134e <__aeabi_ddiv+0x546>
 8001094:	1a88      	subs	r0, r1, r2
 8001096:	9902      	ldr	r1, [sp, #8]
 8001098:	f7ff f8d6 	bl	8000248 <__aeabi_uidivmod>
 800109c:	9a03      	ldr	r2, [sp, #12]
 800109e:	0424      	lsls	r4, r4, #16
 80010a0:	4342      	muls	r2, r0
 80010a2:	0409      	lsls	r1, r1, #16
 80010a4:	0c24      	lsrs	r4, r4, #16
 80010a6:	0003      	movs	r3, r0
 80010a8:	430c      	orrs	r4, r1
 80010aa:	42a2      	cmp	r2, r4
 80010ac:	d906      	bls.n	80010bc <__aeabi_ddiv+0x2b4>
 80010ae:	9900      	ldr	r1, [sp, #0]
 80010b0:	3b01      	subs	r3, #1
 80010b2:	468c      	mov	ip, r1
 80010b4:	4464      	add	r4, ip
 80010b6:	42a1      	cmp	r1, r4
 80010b8:	d800      	bhi.n	80010bc <__aeabi_ddiv+0x2b4>
 80010ba:	e142      	b.n	8001342 <__aeabi_ddiv+0x53a>
 80010bc:	1aa0      	subs	r0, r4, r2
 80010be:	4642      	mov	r2, r8
 80010c0:	0412      	lsls	r2, r2, #16
 80010c2:	431a      	orrs	r2, r3
 80010c4:	4693      	mov	fp, r2
 80010c6:	464b      	mov	r3, r9
 80010c8:	4659      	mov	r1, fp
 80010ca:	0c1b      	lsrs	r3, r3, #16
 80010cc:	001f      	movs	r7, r3
 80010ce:	9304      	str	r3, [sp, #16]
 80010d0:	040b      	lsls	r3, r1, #16
 80010d2:	4649      	mov	r1, r9
 80010d4:	0409      	lsls	r1, r1, #16
 80010d6:	0c09      	lsrs	r1, r1, #16
 80010d8:	000c      	movs	r4, r1
 80010da:	0c1b      	lsrs	r3, r3, #16
 80010dc:	435c      	muls	r4, r3
 80010de:	0c12      	lsrs	r2, r2, #16
 80010e0:	437b      	muls	r3, r7
 80010e2:	4688      	mov	r8, r1
 80010e4:	4351      	muls	r1, r2
 80010e6:	437a      	muls	r2, r7
 80010e8:	0c27      	lsrs	r7, r4, #16
 80010ea:	46bc      	mov	ip, r7
 80010ec:	185b      	adds	r3, r3, r1
 80010ee:	4463      	add	r3, ip
 80010f0:	4299      	cmp	r1, r3
 80010f2:	d903      	bls.n	80010fc <__aeabi_ddiv+0x2f4>
 80010f4:	2180      	movs	r1, #128	@ 0x80
 80010f6:	0249      	lsls	r1, r1, #9
 80010f8:	468c      	mov	ip, r1
 80010fa:	4462      	add	r2, ip
 80010fc:	0c19      	lsrs	r1, r3, #16
 80010fe:	0424      	lsls	r4, r4, #16
 8001100:	041b      	lsls	r3, r3, #16
 8001102:	0c24      	lsrs	r4, r4, #16
 8001104:	188a      	adds	r2, r1, r2
 8001106:	191c      	adds	r4, r3, r4
 8001108:	4290      	cmp	r0, r2
 800110a:	d302      	bcc.n	8001112 <__aeabi_ddiv+0x30a>
 800110c:	d116      	bne.n	800113c <__aeabi_ddiv+0x334>
 800110e:	42a5      	cmp	r5, r4
 8001110:	d214      	bcs.n	800113c <__aeabi_ddiv+0x334>
 8001112:	465b      	mov	r3, fp
 8001114:	9f00      	ldr	r7, [sp, #0]
 8001116:	3b01      	subs	r3, #1
 8001118:	444d      	add	r5, r9
 800111a:	9305      	str	r3, [sp, #20]
 800111c:	454d      	cmp	r5, r9
 800111e:	419b      	sbcs	r3, r3
 8001120:	46bc      	mov	ip, r7
 8001122:	425b      	negs	r3, r3
 8001124:	4463      	add	r3, ip
 8001126:	18c0      	adds	r0, r0, r3
 8001128:	4287      	cmp	r7, r0
 800112a:	d300      	bcc.n	800112e <__aeabi_ddiv+0x326>
 800112c:	e102      	b.n	8001334 <__aeabi_ddiv+0x52c>
 800112e:	4282      	cmp	r2, r0
 8001130:	d900      	bls.n	8001134 <__aeabi_ddiv+0x32c>
 8001132:	e129      	b.n	8001388 <__aeabi_ddiv+0x580>
 8001134:	d100      	bne.n	8001138 <__aeabi_ddiv+0x330>
 8001136:	e124      	b.n	8001382 <__aeabi_ddiv+0x57a>
 8001138:	9b05      	ldr	r3, [sp, #20]
 800113a:	469b      	mov	fp, r3
 800113c:	1b2c      	subs	r4, r5, r4
 800113e:	42a5      	cmp	r5, r4
 8001140:	41ad      	sbcs	r5, r5
 8001142:	9b00      	ldr	r3, [sp, #0]
 8001144:	1a80      	subs	r0, r0, r2
 8001146:	426d      	negs	r5, r5
 8001148:	1b40      	subs	r0, r0, r5
 800114a:	4283      	cmp	r3, r0
 800114c:	d100      	bne.n	8001150 <__aeabi_ddiv+0x348>
 800114e:	e10f      	b.n	8001370 <__aeabi_ddiv+0x568>
 8001150:	9902      	ldr	r1, [sp, #8]
 8001152:	f7ff f879 	bl	8000248 <__aeabi_uidivmod>
 8001156:	9a03      	ldr	r2, [sp, #12]
 8001158:	040b      	lsls	r3, r1, #16
 800115a:	4342      	muls	r2, r0
 800115c:	0c21      	lsrs	r1, r4, #16
 800115e:	0005      	movs	r5, r0
 8001160:	4319      	orrs	r1, r3
 8001162:	428a      	cmp	r2, r1
 8001164:	d900      	bls.n	8001168 <__aeabi_ddiv+0x360>
 8001166:	e0cb      	b.n	8001300 <__aeabi_ddiv+0x4f8>
 8001168:	1a88      	subs	r0, r1, r2
 800116a:	9902      	ldr	r1, [sp, #8]
 800116c:	f7ff f86c 	bl	8000248 <__aeabi_uidivmod>
 8001170:	9a03      	ldr	r2, [sp, #12]
 8001172:	0424      	lsls	r4, r4, #16
 8001174:	4342      	muls	r2, r0
 8001176:	0409      	lsls	r1, r1, #16
 8001178:	0c24      	lsrs	r4, r4, #16
 800117a:	0003      	movs	r3, r0
 800117c:	430c      	orrs	r4, r1
 800117e:	42a2      	cmp	r2, r4
 8001180:	d900      	bls.n	8001184 <__aeabi_ddiv+0x37c>
 8001182:	e0ca      	b.n	800131a <__aeabi_ddiv+0x512>
 8001184:	4641      	mov	r1, r8
 8001186:	1aa4      	subs	r4, r4, r2
 8001188:	042a      	lsls	r2, r5, #16
 800118a:	431a      	orrs	r2, r3
 800118c:	9f04      	ldr	r7, [sp, #16]
 800118e:	0413      	lsls	r3, r2, #16
 8001190:	0c1b      	lsrs	r3, r3, #16
 8001192:	4359      	muls	r1, r3
 8001194:	4640      	mov	r0, r8
 8001196:	437b      	muls	r3, r7
 8001198:	469c      	mov	ip, r3
 800119a:	0c15      	lsrs	r5, r2, #16
 800119c:	4368      	muls	r0, r5
 800119e:	0c0b      	lsrs	r3, r1, #16
 80011a0:	4484      	add	ip, r0
 80011a2:	4463      	add	r3, ip
 80011a4:	437d      	muls	r5, r7
 80011a6:	4298      	cmp	r0, r3
 80011a8:	d903      	bls.n	80011b2 <__aeabi_ddiv+0x3aa>
 80011aa:	2080      	movs	r0, #128	@ 0x80
 80011ac:	0240      	lsls	r0, r0, #9
 80011ae:	4684      	mov	ip, r0
 80011b0:	4465      	add	r5, ip
 80011b2:	0c18      	lsrs	r0, r3, #16
 80011b4:	0409      	lsls	r1, r1, #16
 80011b6:	041b      	lsls	r3, r3, #16
 80011b8:	0c09      	lsrs	r1, r1, #16
 80011ba:	1940      	adds	r0, r0, r5
 80011bc:	185b      	adds	r3, r3, r1
 80011be:	4284      	cmp	r4, r0
 80011c0:	d327      	bcc.n	8001212 <__aeabi_ddiv+0x40a>
 80011c2:	d023      	beq.n	800120c <__aeabi_ddiv+0x404>
 80011c4:	2301      	movs	r3, #1
 80011c6:	0035      	movs	r5, r6
 80011c8:	431a      	orrs	r2, r3
 80011ca:	4b94      	ldr	r3, [pc, #592]	@ (800141c <__aeabi_ddiv+0x614>)
 80011cc:	4453      	add	r3, sl
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	dd60      	ble.n	8001294 <__aeabi_ddiv+0x48c>
 80011d2:	0751      	lsls	r1, r2, #29
 80011d4:	d000      	beq.n	80011d8 <__aeabi_ddiv+0x3d0>
 80011d6:	e086      	b.n	80012e6 <__aeabi_ddiv+0x4de>
 80011d8:	002e      	movs	r6, r5
 80011da:	08d1      	lsrs	r1, r2, #3
 80011dc:	465a      	mov	r2, fp
 80011de:	01d2      	lsls	r2, r2, #7
 80011e0:	d506      	bpl.n	80011f0 <__aeabi_ddiv+0x3e8>
 80011e2:	465a      	mov	r2, fp
 80011e4:	4b8e      	ldr	r3, [pc, #568]	@ (8001420 <__aeabi_ddiv+0x618>)
 80011e6:	401a      	ands	r2, r3
 80011e8:	2380      	movs	r3, #128	@ 0x80
 80011ea:	4693      	mov	fp, r2
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	4453      	add	r3, sl
 80011f0:	4a8c      	ldr	r2, [pc, #560]	@ (8001424 <__aeabi_ddiv+0x61c>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	dd00      	ble.n	80011f8 <__aeabi_ddiv+0x3f0>
 80011f6:	e680      	b.n	8000efa <__aeabi_ddiv+0xf2>
 80011f8:	465a      	mov	r2, fp
 80011fa:	0752      	lsls	r2, r2, #29
 80011fc:	430a      	orrs	r2, r1
 80011fe:	4690      	mov	r8, r2
 8001200:	465a      	mov	r2, fp
 8001202:	055b      	lsls	r3, r3, #21
 8001204:	0254      	lsls	r4, r2, #9
 8001206:	0b24      	lsrs	r4, r4, #12
 8001208:	0d5b      	lsrs	r3, r3, #21
 800120a:	e669      	b.n	8000ee0 <__aeabi_ddiv+0xd8>
 800120c:	0035      	movs	r5, r6
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0db      	beq.n	80011ca <__aeabi_ddiv+0x3c2>
 8001212:	9d00      	ldr	r5, [sp, #0]
 8001214:	1e51      	subs	r1, r2, #1
 8001216:	46ac      	mov	ip, r5
 8001218:	4464      	add	r4, ip
 800121a:	42ac      	cmp	r4, r5
 800121c:	d200      	bcs.n	8001220 <__aeabi_ddiv+0x418>
 800121e:	e09e      	b.n	800135e <__aeabi_ddiv+0x556>
 8001220:	4284      	cmp	r4, r0
 8001222:	d200      	bcs.n	8001226 <__aeabi_ddiv+0x41e>
 8001224:	e0e1      	b.n	80013ea <__aeabi_ddiv+0x5e2>
 8001226:	d100      	bne.n	800122a <__aeabi_ddiv+0x422>
 8001228:	e0ee      	b.n	8001408 <__aeabi_ddiv+0x600>
 800122a:	000a      	movs	r2, r1
 800122c:	e7ca      	b.n	80011c4 <__aeabi_ddiv+0x3bc>
 800122e:	4542      	cmp	r2, r8
 8001230:	d900      	bls.n	8001234 <__aeabi_ddiv+0x42c>
 8001232:	e708      	b.n	8001046 <__aeabi_ddiv+0x23e>
 8001234:	464b      	mov	r3, r9
 8001236:	07dc      	lsls	r4, r3, #31
 8001238:	0858      	lsrs	r0, r3, #1
 800123a:	4643      	mov	r3, r8
 800123c:	085b      	lsrs	r3, r3, #1
 800123e:	431c      	orrs	r4, r3
 8001240:	4643      	mov	r3, r8
 8001242:	07dd      	lsls	r5, r3, #31
 8001244:	e706      	b.n	8001054 <__aeabi_ddiv+0x24c>
 8001246:	f001 f9b9 	bl	80025bc <__clzsi2>
 800124a:	2315      	movs	r3, #21
 800124c:	469c      	mov	ip, r3
 800124e:	4484      	add	ip, r0
 8001250:	0002      	movs	r2, r0
 8001252:	4663      	mov	r3, ip
 8001254:	3220      	adds	r2, #32
 8001256:	2b1c      	cmp	r3, #28
 8001258:	dc00      	bgt.n	800125c <__aeabi_ddiv+0x454>
 800125a:	e692      	b.n	8000f82 <__aeabi_ddiv+0x17a>
 800125c:	0023      	movs	r3, r4
 800125e:	3808      	subs	r0, #8
 8001260:	4083      	lsls	r3, r0
 8001262:	4699      	mov	r9, r3
 8001264:	2300      	movs	r3, #0
 8001266:	4698      	mov	r8, r3
 8001268:	e69a      	b.n	8000fa0 <__aeabi_ddiv+0x198>
 800126a:	f001 f9a7 	bl	80025bc <__clzsi2>
 800126e:	0002      	movs	r2, r0
 8001270:	0003      	movs	r3, r0
 8001272:	3215      	adds	r2, #21
 8001274:	3320      	adds	r3, #32
 8001276:	2a1c      	cmp	r2, #28
 8001278:	dc00      	bgt.n	800127c <__aeabi_ddiv+0x474>
 800127a:	e65f      	b.n	8000f3c <__aeabi_ddiv+0x134>
 800127c:	9900      	ldr	r1, [sp, #0]
 800127e:	3808      	subs	r0, #8
 8001280:	4081      	lsls	r1, r0
 8001282:	2200      	movs	r2, #0
 8001284:	468b      	mov	fp, r1
 8001286:	e666      	b.n	8000f56 <__aeabi_ddiv+0x14e>
 8001288:	2200      	movs	r2, #0
 800128a:	002e      	movs	r6, r5
 800128c:	2400      	movs	r4, #0
 800128e:	4690      	mov	r8, r2
 8001290:	4b65      	ldr	r3, [pc, #404]	@ (8001428 <__aeabi_ddiv+0x620>)
 8001292:	e625      	b.n	8000ee0 <__aeabi_ddiv+0xd8>
 8001294:	002e      	movs	r6, r5
 8001296:	2101      	movs	r1, #1
 8001298:	1ac9      	subs	r1, r1, r3
 800129a:	2938      	cmp	r1, #56	@ 0x38
 800129c:	dd00      	ble.n	80012a0 <__aeabi_ddiv+0x498>
 800129e:	e61b      	b.n	8000ed8 <__aeabi_ddiv+0xd0>
 80012a0:	291f      	cmp	r1, #31
 80012a2:	dc7e      	bgt.n	80013a2 <__aeabi_ddiv+0x59a>
 80012a4:	4861      	ldr	r0, [pc, #388]	@ (800142c <__aeabi_ddiv+0x624>)
 80012a6:	0014      	movs	r4, r2
 80012a8:	4450      	add	r0, sl
 80012aa:	465b      	mov	r3, fp
 80012ac:	4082      	lsls	r2, r0
 80012ae:	4083      	lsls	r3, r0
 80012b0:	40cc      	lsrs	r4, r1
 80012b2:	1e50      	subs	r0, r2, #1
 80012b4:	4182      	sbcs	r2, r0
 80012b6:	4323      	orrs	r3, r4
 80012b8:	431a      	orrs	r2, r3
 80012ba:	465b      	mov	r3, fp
 80012bc:	40cb      	lsrs	r3, r1
 80012be:	0751      	lsls	r1, r2, #29
 80012c0:	d009      	beq.n	80012d6 <__aeabi_ddiv+0x4ce>
 80012c2:	210f      	movs	r1, #15
 80012c4:	4011      	ands	r1, r2
 80012c6:	2904      	cmp	r1, #4
 80012c8:	d005      	beq.n	80012d6 <__aeabi_ddiv+0x4ce>
 80012ca:	1d11      	adds	r1, r2, #4
 80012cc:	4291      	cmp	r1, r2
 80012ce:	4192      	sbcs	r2, r2
 80012d0:	4252      	negs	r2, r2
 80012d2:	189b      	adds	r3, r3, r2
 80012d4:	000a      	movs	r2, r1
 80012d6:	0219      	lsls	r1, r3, #8
 80012d8:	d400      	bmi.n	80012dc <__aeabi_ddiv+0x4d4>
 80012da:	e09b      	b.n	8001414 <__aeabi_ddiv+0x60c>
 80012dc:	2200      	movs	r2, #0
 80012de:	2301      	movs	r3, #1
 80012e0:	2400      	movs	r4, #0
 80012e2:	4690      	mov	r8, r2
 80012e4:	e5fc      	b.n	8000ee0 <__aeabi_ddiv+0xd8>
 80012e6:	210f      	movs	r1, #15
 80012e8:	4011      	ands	r1, r2
 80012ea:	2904      	cmp	r1, #4
 80012ec:	d100      	bne.n	80012f0 <__aeabi_ddiv+0x4e8>
 80012ee:	e773      	b.n	80011d8 <__aeabi_ddiv+0x3d0>
 80012f0:	1d11      	adds	r1, r2, #4
 80012f2:	4291      	cmp	r1, r2
 80012f4:	4192      	sbcs	r2, r2
 80012f6:	4252      	negs	r2, r2
 80012f8:	002e      	movs	r6, r5
 80012fa:	08c9      	lsrs	r1, r1, #3
 80012fc:	4493      	add	fp, r2
 80012fe:	e76d      	b.n	80011dc <__aeabi_ddiv+0x3d4>
 8001300:	9b00      	ldr	r3, [sp, #0]
 8001302:	3d01      	subs	r5, #1
 8001304:	469c      	mov	ip, r3
 8001306:	4461      	add	r1, ip
 8001308:	428b      	cmp	r3, r1
 800130a:	d900      	bls.n	800130e <__aeabi_ddiv+0x506>
 800130c:	e72c      	b.n	8001168 <__aeabi_ddiv+0x360>
 800130e:	428a      	cmp	r2, r1
 8001310:	d800      	bhi.n	8001314 <__aeabi_ddiv+0x50c>
 8001312:	e729      	b.n	8001168 <__aeabi_ddiv+0x360>
 8001314:	1e85      	subs	r5, r0, #2
 8001316:	4461      	add	r1, ip
 8001318:	e726      	b.n	8001168 <__aeabi_ddiv+0x360>
 800131a:	9900      	ldr	r1, [sp, #0]
 800131c:	3b01      	subs	r3, #1
 800131e:	468c      	mov	ip, r1
 8001320:	4464      	add	r4, ip
 8001322:	42a1      	cmp	r1, r4
 8001324:	d900      	bls.n	8001328 <__aeabi_ddiv+0x520>
 8001326:	e72d      	b.n	8001184 <__aeabi_ddiv+0x37c>
 8001328:	42a2      	cmp	r2, r4
 800132a:	d800      	bhi.n	800132e <__aeabi_ddiv+0x526>
 800132c:	e72a      	b.n	8001184 <__aeabi_ddiv+0x37c>
 800132e:	1e83      	subs	r3, r0, #2
 8001330:	4464      	add	r4, ip
 8001332:	e727      	b.n	8001184 <__aeabi_ddiv+0x37c>
 8001334:	4287      	cmp	r7, r0
 8001336:	d000      	beq.n	800133a <__aeabi_ddiv+0x532>
 8001338:	e6fe      	b.n	8001138 <__aeabi_ddiv+0x330>
 800133a:	45a9      	cmp	r9, r5
 800133c:	d900      	bls.n	8001340 <__aeabi_ddiv+0x538>
 800133e:	e6fb      	b.n	8001138 <__aeabi_ddiv+0x330>
 8001340:	e6f5      	b.n	800112e <__aeabi_ddiv+0x326>
 8001342:	42a2      	cmp	r2, r4
 8001344:	d800      	bhi.n	8001348 <__aeabi_ddiv+0x540>
 8001346:	e6b9      	b.n	80010bc <__aeabi_ddiv+0x2b4>
 8001348:	1e83      	subs	r3, r0, #2
 800134a:	4464      	add	r4, ip
 800134c:	e6b6      	b.n	80010bc <__aeabi_ddiv+0x2b4>
 800134e:	428a      	cmp	r2, r1
 8001350:	d800      	bhi.n	8001354 <__aeabi_ddiv+0x54c>
 8001352:	e69f      	b.n	8001094 <__aeabi_ddiv+0x28c>
 8001354:	46bc      	mov	ip, r7
 8001356:	1e83      	subs	r3, r0, #2
 8001358:	4698      	mov	r8, r3
 800135a:	4461      	add	r1, ip
 800135c:	e69a      	b.n	8001094 <__aeabi_ddiv+0x28c>
 800135e:	000a      	movs	r2, r1
 8001360:	4284      	cmp	r4, r0
 8001362:	d000      	beq.n	8001366 <__aeabi_ddiv+0x55e>
 8001364:	e72e      	b.n	80011c4 <__aeabi_ddiv+0x3bc>
 8001366:	454b      	cmp	r3, r9
 8001368:	d000      	beq.n	800136c <__aeabi_ddiv+0x564>
 800136a:	e72b      	b.n	80011c4 <__aeabi_ddiv+0x3bc>
 800136c:	0035      	movs	r5, r6
 800136e:	e72c      	b.n	80011ca <__aeabi_ddiv+0x3c2>
 8001370:	4b2a      	ldr	r3, [pc, #168]	@ (800141c <__aeabi_ddiv+0x614>)
 8001372:	4a2f      	ldr	r2, [pc, #188]	@ (8001430 <__aeabi_ddiv+0x628>)
 8001374:	4453      	add	r3, sl
 8001376:	4592      	cmp	sl, r2
 8001378:	db43      	blt.n	8001402 <__aeabi_ddiv+0x5fa>
 800137a:	2201      	movs	r2, #1
 800137c:	2100      	movs	r1, #0
 800137e:	4493      	add	fp, r2
 8001380:	e72c      	b.n	80011dc <__aeabi_ddiv+0x3d4>
 8001382:	42ac      	cmp	r4, r5
 8001384:	d800      	bhi.n	8001388 <__aeabi_ddiv+0x580>
 8001386:	e6d7      	b.n	8001138 <__aeabi_ddiv+0x330>
 8001388:	2302      	movs	r3, #2
 800138a:	425b      	negs	r3, r3
 800138c:	469c      	mov	ip, r3
 800138e:	9900      	ldr	r1, [sp, #0]
 8001390:	444d      	add	r5, r9
 8001392:	454d      	cmp	r5, r9
 8001394:	419b      	sbcs	r3, r3
 8001396:	44e3      	add	fp, ip
 8001398:	468c      	mov	ip, r1
 800139a:	425b      	negs	r3, r3
 800139c:	4463      	add	r3, ip
 800139e:	18c0      	adds	r0, r0, r3
 80013a0:	e6cc      	b.n	800113c <__aeabi_ddiv+0x334>
 80013a2:	201f      	movs	r0, #31
 80013a4:	4240      	negs	r0, r0
 80013a6:	1ac3      	subs	r3, r0, r3
 80013a8:	4658      	mov	r0, fp
 80013aa:	40d8      	lsrs	r0, r3
 80013ac:	2920      	cmp	r1, #32
 80013ae:	d004      	beq.n	80013ba <__aeabi_ddiv+0x5b2>
 80013b0:	4659      	mov	r1, fp
 80013b2:	4b20      	ldr	r3, [pc, #128]	@ (8001434 <__aeabi_ddiv+0x62c>)
 80013b4:	4453      	add	r3, sl
 80013b6:	4099      	lsls	r1, r3
 80013b8:	430a      	orrs	r2, r1
 80013ba:	1e53      	subs	r3, r2, #1
 80013bc:	419a      	sbcs	r2, r3
 80013be:	2307      	movs	r3, #7
 80013c0:	0019      	movs	r1, r3
 80013c2:	4302      	orrs	r2, r0
 80013c4:	2400      	movs	r4, #0
 80013c6:	4011      	ands	r1, r2
 80013c8:	4213      	tst	r3, r2
 80013ca:	d009      	beq.n	80013e0 <__aeabi_ddiv+0x5d8>
 80013cc:	3308      	adds	r3, #8
 80013ce:	4013      	ands	r3, r2
 80013d0:	2b04      	cmp	r3, #4
 80013d2:	d01d      	beq.n	8001410 <__aeabi_ddiv+0x608>
 80013d4:	1d13      	adds	r3, r2, #4
 80013d6:	4293      	cmp	r3, r2
 80013d8:	4189      	sbcs	r1, r1
 80013da:	001a      	movs	r2, r3
 80013dc:	4249      	negs	r1, r1
 80013de:	0749      	lsls	r1, r1, #29
 80013e0:	08d2      	lsrs	r2, r2, #3
 80013e2:	430a      	orrs	r2, r1
 80013e4:	4690      	mov	r8, r2
 80013e6:	2300      	movs	r3, #0
 80013e8:	e57a      	b.n	8000ee0 <__aeabi_ddiv+0xd8>
 80013ea:	4649      	mov	r1, r9
 80013ec:	9f00      	ldr	r7, [sp, #0]
 80013ee:	004d      	lsls	r5, r1, #1
 80013f0:	454d      	cmp	r5, r9
 80013f2:	4189      	sbcs	r1, r1
 80013f4:	46bc      	mov	ip, r7
 80013f6:	4249      	negs	r1, r1
 80013f8:	4461      	add	r1, ip
 80013fa:	46a9      	mov	r9, r5
 80013fc:	3a02      	subs	r2, #2
 80013fe:	1864      	adds	r4, r4, r1
 8001400:	e7ae      	b.n	8001360 <__aeabi_ddiv+0x558>
 8001402:	2201      	movs	r2, #1
 8001404:	4252      	negs	r2, r2
 8001406:	e746      	b.n	8001296 <__aeabi_ddiv+0x48e>
 8001408:	4599      	cmp	r9, r3
 800140a:	d3ee      	bcc.n	80013ea <__aeabi_ddiv+0x5e2>
 800140c:	000a      	movs	r2, r1
 800140e:	e7aa      	b.n	8001366 <__aeabi_ddiv+0x55e>
 8001410:	2100      	movs	r1, #0
 8001412:	e7e5      	b.n	80013e0 <__aeabi_ddiv+0x5d8>
 8001414:	0759      	lsls	r1, r3, #29
 8001416:	025b      	lsls	r3, r3, #9
 8001418:	0b1c      	lsrs	r4, r3, #12
 800141a:	e7e1      	b.n	80013e0 <__aeabi_ddiv+0x5d8>
 800141c:	000003ff 	.word	0x000003ff
 8001420:	feffffff 	.word	0xfeffffff
 8001424:	000007fe 	.word	0x000007fe
 8001428:	000007ff 	.word	0x000007ff
 800142c:	0000041e 	.word	0x0000041e
 8001430:	fffffc02 	.word	0xfffffc02
 8001434:	0000043e 	.word	0x0000043e

08001438 <__eqdf2>:
 8001438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800143a:	4657      	mov	r7, sl
 800143c:	46de      	mov	lr, fp
 800143e:	464e      	mov	r6, r9
 8001440:	4645      	mov	r5, r8
 8001442:	b5e0      	push	{r5, r6, r7, lr}
 8001444:	000d      	movs	r5, r1
 8001446:	0004      	movs	r4, r0
 8001448:	0fe8      	lsrs	r0, r5, #31
 800144a:	4683      	mov	fp, r0
 800144c:	0309      	lsls	r1, r1, #12
 800144e:	0fd8      	lsrs	r0, r3, #31
 8001450:	0b09      	lsrs	r1, r1, #12
 8001452:	4682      	mov	sl, r0
 8001454:	4819      	ldr	r0, [pc, #100]	@ (80014bc <__eqdf2+0x84>)
 8001456:	468c      	mov	ip, r1
 8001458:	031f      	lsls	r7, r3, #12
 800145a:	0069      	lsls	r1, r5, #1
 800145c:	005e      	lsls	r6, r3, #1
 800145e:	0d49      	lsrs	r1, r1, #21
 8001460:	0b3f      	lsrs	r7, r7, #12
 8001462:	0d76      	lsrs	r6, r6, #21
 8001464:	4281      	cmp	r1, r0
 8001466:	d018      	beq.n	800149a <__eqdf2+0x62>
 8001468:	4286      	cmp	r6, r0
 800146a:	d00f      	beq.n	800148c <__eqdf2+0x54>
 800146c:	2001      	movs	r0, #1
 800146e:	42b1      	cmp	r1, r6
 8001470:	d10d      	bne.n	800148e <__eqdf2+0x56>
 8001472:	45bc      	cmp	ip, r7
 8001474:	d10b      	bne.n	800148e <__eqdf2+0x56>
 8001476:	4294      	cmp	r4, r2
 8001478:	d109      	bne.n	800148e <__eqdf2+0x56>
 800147a:	45d3      	cmp	fp, sl
 800147c:	d01c      	beq.n	80014b8 <__eqdf2+0x80>
 800147e:	2900      	cmp	r1, #0
 8001480:	d105      	bne.n	800148e <__eqdf2+0x56>
 8001482:	4660      	mov	r0, ip
 8001484:	4320      	orrs	r0, r4
 8001486:	1e43      	subs	r3, r0, #1
 8001488:	4198      	sbcs	r0, r3
 800148a:	e000      	b.n	800148e <__eqdf2+0x56>
 800148c:	2001      	movs	r0, #1
 800148e:	bcf0      	pop	{r4, r5, r6, r7}
 8001490:	46bb      	mov	fp, r7
 8001492:	46b2      	mov	sl, r6
 8001494:	46a9      	mov	r9, r5
 8001496:	46a0      	mov	r8, r4
 8001498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800149a:	2001      	movs	r0, #1
 800149c:	428e      	cmp	r6, r1
 800149e:	d1f6      	bne.n	800148e <__eqdf2+0x56>
 80014a0:	4661      	mov	r1, ip
 80014a2:	4339      	orrs	r1, r7
 80014a4:	000f      	movs	r7, r1
 80014a6:	4317      	orrs	r7, r2
 80014a8:	4327      	orrs	r7, r4
 80014aa:	d1f0      	bne.n	800148e <__eqdf2+0x56>
 80014ac:	465b      	mov	r3, fp
 80014ae:	4652      	mov	r2, sl
 80014b0:	1a98      	subs	r0, r3, r2
 80014b2:	1e43      	subs	r3, r0, #1
 80014b4:	4198      	sbcs	r0, r3
 80014b6:	e7ea      	b.n	800148e <__eqdf2+0x56>
 80014b8:	2000      	movs	r0, #0
 80014ba:	e7e8      	b.n	800148e <__eqdf2+0x56>
 80014bc:	000007ff 	.word	0x000007ff

080014c0 <__gedf2>:
 80014c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014c2:	4657      	mov	r7, sl
 80014c4:	464e      	mov	r6, r9
 80014c6:	4645      	mov	r5, r8
 80014c8:	46de      	mov	lr, fp
 80014ca:	b5e0      	push	{r5, r6, r7, lr}
 80014cc:	000d      	movs	r5, r1
 80014ce:	030e      	lsls	r6, r1, #12
 80014d0:	0049      	lsls	r1, r1, #1
 80014d2:	0d49      	lsrs	r1, r1, #21
 80014d4:	468a      	mov	sl, r1
 80014d6:	0fdf      	lsrs	r7, r3, #31
 80014d8:	0fe9      	lsrs	r1, r5, #31
 80014da:	46bc      	mov	ip, r7
 80014dc:	b083      	sub	sp, #12
 80014de:	4f2f      	ldr	r7, [pc, #188]	@ (800159c <__gedf2+0xdc>)
 80014e0:	0004      	movs	r4, r0
 80014e2:	4680      	mov	r8, r0
 80014e4:	9101      	str	r1, [sp, #4]
 80014e6:	0058      	lsls	r0, r3, #1
 80014e8:	0319      	lsls	r1, r3, #12
 80014ea:	4691      	mov	r9, r2
 80014ec:	0b36      	lsrs	r6, r6, #12
 80014ee:	0b09      	lsrs	r1, r1, #12
 80014f0:	0d40      	lsrs	r0, r0, #21
 80014f2:	45ba      	cmp	sl, r7
 80014f4:	d01d      	beq.n	8001532 <__gedf2+0x72>
 80014f6:	42b8      	cmp	r0, r7
 80014f8:	d00d      	beq.n	8001516 <__gedf2+0x56>
 80014fa:	4657      	mov	r7, sl
 80014fc:	2f00      	cmp	r7, #0
 80014fe:	d12a      	bne.n	8001556 <__gedf2+0x96>
 8001500:	4334      	orrs	r4, r6
 8001502:	2800      	cmp	r0, #0
 8001504:	d124      	bne.n	8001550 <__gedf2+0x90>
 8001506:	430a      	orrs	r2, r1
 8001508:	d036      	beq.n	8001578 <__gedf2+0xb8>
 800150a:	2c00      	cmp	r4, #0
 800150c:	d141      	bne.n	8001592 <__gedf2+0xd2>
 800150e:	4663      	mov	r3, ip
 8001510:	0058      	lsls	r0, r3, #1
 8001512:	3801      	subs	r0, #1
 8001514:	e015      	b.n	8001542 <__gedf2+0x82>
 8001516:	4311      	orrs	r1, r2
 8001518:	d138      	bne.n	800158c <__gedf2+0xcc>
 800151a:	4653      	mov	r3, sl
 800151c:	2b00      	cmp	r3, #0
 800151e:	d101      	bne.n	8001524 <__gedf2+0x64>
 8001520:	4326      	orrs	r6, r4
 8001522:	d0f4      	beq.n	800150e <__gedf2+0x4e>
 8001524:	9b01      	ldr	r3, [sp, #4]
 8001526:	4563      	cmp	r3, ip
 8001528:	d107      	bne.n	800153a <__gedf2+0x7a>
 800152a:	9b01      	ldr	r3, [sp, #4]
 800152c:	0058      	lsls	r0, r3, #1
 800152e:	3801      	subs	r0, #1
 8001530:	e007      	b.n	8001542 <__gedf2+0x82>
 8001532:	4326      	orrs	r6, r4
 8001534:	d12a      	bne.n	800158c <__gedf2+0xcc>
 8001536:	4550      	cmp	r0, sl
 8001538:	d021      	beq.n	800157e <__gedf2+0xbe>
 800153a:	2001      	movs	r0, #1
 800153c:	9b01      	ldr	r3, [sp, #4]
 800153e:	425f      	negs	r7, r3
 8001540:	4338      	orrs	r0, r7
 8001542:	b003      	add	sp, #12
 8001544:	bcf0      	pop	{r4, r5, r6, r7}
 8001546:	46bb      	mov	fp, r7
 8001548:	46b2      	mov	sl, r6
 800154a:	46a9      	mov	r9, r5
 800154c:	46a0      	mov	r8, r4
 800154e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001550:	2c00      	cmp	r4, #0
 8001552:	d0dc      	beq.n	800150e <__gedf2+0x4e>
 8001554:	e7e6      	b.n	8001524 <__gedf2+0x64>
 8001556:	2800      	cmp	r0, #0
 8001558:	d0ef      	beq.n	800153a <__gedf2+0x7a>
 800155a:	9b01      	ldr	r3, [sp, #4]
 800155c:	4563      	cmp	r3, ip
 800155e:	d1ec      	bne.n	800153a <__gedf2+0x7a>
 8001560:	4582      	cmp	sl, r0
 8001562:	dcea      	bgt.n	800153a <__gedf2+0x7a>
 8001564:	dbe1      	blt.n	800152a <__gedf2+0x6a>
 8001566:	428e      	cmp	r6, r1
 8001568:	d8e7      	bhi.n	800153a <__gedf2+0x7a>
 800156a:	d1de      	bne.n	800152a <__gedf2+0x6a>
 800156c:	45c8      	cmp	r8, r9
 800156e:	d8e4      	bhi.n	800153a <__gedf2+0x7a>
 8001570:	2000      	movs	r0, #0
 8001572:	45c8      	cmp	r8, r9
 8001574:	d2e5      	bcs.n	8001542 <__gedf2+0x82>
 8001576:	e7d8      	b.n	800152a <__gedf2+0x6a>
 8001578:	2c00      	cmp	r4, #0
 800157a:	d0e2      	beq.n	8001542 <__gedf2+0x82>
 800157c:	e7dd      	b.n	800153a <__gedf2+0x7a>
 800157e:	4311      	orrs	r1, r2
 8001580:	d104      	bne.n	800158c <__gedf2+0xcc>
 8001582:	9b01      	ldr	r3, [sp, #4]
 8001584:	4563      	cmp	r3, ip
 8001586:	d1d8      	bne.n	800153a <__gedf2+0x7a>
 8001588:	2000      	movs	r0, #0
 800158a:	e7da      	b.n	8001542 <__gedf2+0x82>
 800158c:	2002      	movs	r0, #2
 800158e:	4240      	negs	r0, r0
 8001590:	e7d7      	b.n	8001542 <__gedf2+0x82>
 8001592:	9b01      	ldr	r3, [sp, #4]
 8001594:	4563      	cmp	r3, ip
 8001596:	d0e6      	beq.n	8001566 <__gedf2+0xa6>
 8001598:	e7cf      	b.n	800153a <__gedf2+0x7a>
 800159a:	46c0      	nop			@ (mov r8, r8)
 800159c:	000007ff 	.word	0x000007ff

080015a0 <__ledf2>:
 80015a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a2:	4657      	mov	r7, sl
 80015a4:	464e      	mov	r6, r9
 80015a6:	4645      	mov	r5, r8
 80015a8:	46de      	mov	lr, fp
 80015aa:	b5e0      	push	{r5, r6, r7, lr}
 80015ac:	000d      	movs	r5, r1
 80015ae:	030e      	lsls	r6, r1, #12
 80015b0:	0049      	lsls	r1, r1, #1
 80015b2:	0d49      	lsrs	r1, r1, #21
 80015b4:	468a      	mov	sl, r1
 80015b6:	0fdf      	lsrs	r7, r3, #31
 80015b8:	0fe9      	lsrs	r1, r5, #31
 80015ba:	46bc      	mov	ip, r7
 80015bc:	b083      	sub	sp, #12
 80015be:	4f2e      	ldr	r7, [pc, #184]	@ (8001678 <__ledf2+0xd8>)
 80015c0:	0004      	movs	r4, r0
 80015c2:	4680      	mov	r8, r0
 80015c4:	9101      	str	r1, [sp, #4]
 80015c6:	0058      	lsls	r0, r3, #1
 80015c8:	0319      	lsls	r1, r3, #12
 80015ca:	4691      	mov	r9, r2
 80015cc:	0b36      	lsrs	r6, r6, #12
 80015ce:	0b09      	lsrs	r1, r1, #12
 80015d0:	0d40      	lsrs	r0, r0, #21
 80015d2:	45ba      	cmp	sl, r7
 80015d4:	d01e      	beq.n	8001614 <__ledf2+0x74>
 80015d6:	42b8      	cmp	r0, r7
 80015d8:	d00d      	beq.n	80015f6 <__ledf2+0x56>
 80015da:	4657      	mov	r7, sl
 80015dc:	2f00      	cmp	r7, #0
 80015de:	d127      	bne.n	8001630 <__ledf2+0x90>
 80015e0:	4334      	orrs	r4, r6
 80015e2:	2800      	cmp	r0, #0
 80015e4:	d133      	bne.n	800164e <__ledf2+0xae>
 80015e6:	430a      	orrs	r2, r1
 80015e8:	d034      	beq.n	8001654 <__ledf2+0xb4>
 80015ea:	2c00      	cmp	r4, #0
 80015ec:	d140      	bne.n	8001670 <__ledf2+0xd0>
 80015ee:	4663      	mov	r3, ip
 80015f0:	0058      	lsls	r0, r3, #1
 80015f2:	3801      	subs	r0, #1
 80015f4:	e015      	b.n	8001622 <__ledf2+0x82>
 80015f6:	4311      	orrs	r1, r2
 80015f8:	d112      	bne.n	8001620 <__ledf2+0x80>
 80015fa:	4653      	mov	r3, sl
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <__ledf2+0x64>
 8001600:	4326      	orrs	r6, r4
 8001602:	d0f4      	beq.n	80015ee <__ledf2+0x4e>
 8001604:	9b01      	ldr	r3, [sp, #4]
 8001606:	4563      	cmp	r3, ip
 8001608:	d01d      	beq.n	8001646 <__ledf2+0xa6>
 800160a:	2001      	movs	r0, #1
 800160c:	9b01      	ldr	r3, [sp, #4]
 800160e:	425f      	negs	r7, r3
 8001610:	4338      	orrs	r0, r7
 8001612:	e006      	b.n	8001622 <__ledf2+0x82>
 8001614:	4326      	orrs	r6, r4
 8001616:	d103      	bne.n	8001620 <__ledf2+0x80>
 8001618:	4550      	cmp	r0, sl
 800161a:	d1f6      	bne.n	800160a <__ledf2+0x6a>
 800161c:	4311      	orrs	r1, r2
 800161e:	d01c      	beq.n	800165a <__ledf2+0xba>
 8001620:	2002      	movs	r0, #2
 8001622:	b003      	add	sp, #12
 8001624:	bcf0      	pop	{r4, r5, r6, r7}
 8001626:	46bb      	mov	fp, r7
 8001628:	46b2      	mov	sl, r6
 800162a:	46a9      	mov	r9, r5
 800162c:	46a0      	mov	r8, r4
 800162e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001630:	2800      	cmp	r0, #0
 8001632:	d0ea      	beq.n	800160a <__ledf2+0x6a>
 8001634:	9b01      	ldr	r3, [sp, #4]
 8001636:	4563      	cmp	r3, ip
 8001638:	d1e7      	bne.n	800160a <__ledf2+0x6a>
 800163a:	4582      	cmp	sl, r0
 800163c:	dce5      	bgt.n	800160a <__ledf2+0x6a>
 800163e:	db02      	blt.n	8001646 <__ledf2+0xa6>
 8001640:	428e      	cmp	r6, r1
 8001642:	d8e2      	bhi.n	800160a <__ledf2+0x6a>
 8001644:	d00e      	beq.n	8001664 <__ledf2+0xc4>
 8001646:	9b01      	ldr	r3, [sp, #4]
 8001648:	0058      	lsls	r0, r3, #1
 800164a:	3801      	subs	r0, #1
 800164c:	e7e9      	b.n	8001622 <__ledf2+0x82>
 800164e:	2c00      	cmp	r4, #0
 8001650:	d0cd      	beq.n	80015ee <__ledf2+0x4e>
 8001652:	e7d7      	b.n	8001604 <__ledf2+0x64>
 8001654:	2c00      	cmp	r4, #0
 8001656:	d0e4      	beq.n	8001622 <__ledf2+0x82>
 8001658:	e7d7      	b.n	800160a <__ledf2+0x6a>
 800165a:	9b01      	ldr	r3, [sp, #4]
 800165c:	2000      	movs	r0, #0
 800165e:	4563      	cmp	r3, ip
 8001660:	d0df      	beq.n	8001622 <__ledf2+0x82>
 8001662:	e7d2      	b.n	800160a <__ledf2+0x6a>
 8001664:	45c8      	cmp	r8, r9
 8001666:	d8d0      	bhi.n	800160a <__ledf2+0x6a>
 8001668:	2000      	movs	r0, #0
 800166a:	45c8      	cmp	r8, r9
 800166c:	d2d9      	bcs.n	8001622 <__ledf2+0x82>
 800166e:	e7ea      	b.n	8001646 <__ledf2+0xa6>
 8001670:	9b01      	ldr	r3, [sp, #4]
 8001672:	4563      	cmp	r3, ip
 8001674:	d0e4      	beq.n	8001640 <__ledf2+0xa0>
 8001676:	e7c8      	b.n	800160a <__ledf2+0x6a>
 8001678:	000007ff 	.word	0x000007ff

0800167c <__aeabi_dmul>:
 800167c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800167e:	4657      	mov	r7, sl
 8001680:	464e      	mov	r6, r9
 8001682:	46de      	mov	lr, fp
 8001684:	4645      	mov	r5, r8
 8001686:	b5e0      	push	{r5, r6, r7, lr}
 8001688:	001f      	movs	r7, r3
 800168a:	030b      	lsls	r3, r1, #12
 800168c:	0b1b      	lsrs	r3, r3, #12
 800168e:	0016      	movs	r6, r2
 8001690:	469a      	mov	sl, r3
 8001692:	0fca      	lsrs	r2, r1, #31
 8001694:	004b      	lsls	r3, r1, #1
 8001696:	0004      	movs	r4, r0
 8001698:	4691      	mov	r9, r2
 800169a:	b085      	sub	sp, #20
 800169c:	0d5b      	lsrs	r3, r3, #21
 800169e:	d100      	bne.n	80016a2 <__aeabi_dmul+0x26>
 80016a0:	e1cf      	b.n	8001a42 <__aeabi_dmul+0x3c6>
 80016a2:	4acd      	ldr	r2, [pc, #820]	@ (80019d8 <__aeabi_dmul+0x35c>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d055      	beq.n	8001754 <__aeabi_dmul+0xd8>
 80016a8:	4651      	mov	r1, sl
 80016aa:	0f42      	lsrs	r2, r0, #29
 80016ac:	00c9      	lsls	r1, r1, #3
 80016ae:	430a      	orrs	r2, r1
 80016b0:	2180      	movs	r1, #128	@ 0x80
 80016b2:	0409      	lsls	r1, r1, #16
 80016b4:	4311      	orrs	r1, r2
 80016b6:	00c2      	lsls	r2, r0, #3
 80016b8:	4690      	mov	r8, r2
 80016ba:	4ac8      	ldr	r2, [pc, #800]	@ (80019dc <__aeabi_dmul+0x360>)
 80016bc:	468a      	mov	sl, r1
 80016be:	4693      	mov	fp, r2
 80016c0:	449b      	add	fp, r3
 80016c2:	2300      	movs	r3, #0
 80016c4:	2500      	movs	r5, #0
 80016c6:	9302      	str	r3, [sp, #8]
 80016c8:	033c      	lsls	r4, r7, #12
 80016ca:	007b      	lsls	r3, r7, #1
 80016cc:	0ffa      	lsrs	r2, r7, #31
 80016ce:	9601      	str	r6, [sp, #4]
 80016d0:	0b24      	lsrs	r4, r4, #12
 80016d2:	0d5b      	lsrs	r3, r3, #21
 80016d4:	9200      	str	r2, [sp, #0]
 80016d6:	d100      	bne.n	80016da <__aeabi_dmul+0x5e>
 80016d8:	e188      	b.n	80019ec <__aeabi_dmul+0x370>
 80016da:	4abf      	ldr	r2, [pc, #764]	@ (80019d8 <__aeabi_dmul+0x35c>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d100      	bne.n	80016e2 <__aeabi_dmul+0x66>
 80016e0:	e092      	b.n	8001808 <__aeabi_dmul+0x18c>
 80016e2:	4abe      	ldr	r2, [pc, #760]	@ (80019dc <__aeabi_dmul+0x360>)
 80016e4:	4694      	mov	ip, r2
 80016e6:	4463      	add	r3, ip
 80016e8:	449b      	add	fp, r3
 80016ea:	2d0a      	cmp	r5, #10
 80016ec:	dc42      	bgt.n	8001774 <__aeabi_dmul+0xf8>
 80016ee:	00e4      	lsls	r4, r4, #3
 80016f0:	0f73      	lsrs	r3, r6, #29
 80016f2:	4323      	orrs	r3, r4
 80016f4:	2480      	movs	r4, #128	@ 0x80
 80016f6:	4649      	mov	r1, r9
 80016f8:	0424      	lsls	r4, r4, #16
 80016fa:	431c      	orrs	r4, r3
 80016fc:	00f3      	lsls	r3, r6, #3
 80016fe:	9301      	str	r3, [sp, #4]
 8001700:	9b00      	ldr	r3, [sp, #0]
 8001702:	2000      	movs	r0, #0
 8001704:	4059      	eors	r1, r3
 8001706:	b2cb      	uxtb	r3, r1
 8001708:	9303      	str	r3, [sp, #12]
 800170a:	2d02      	cmp	r5, #2
 800170c:	dc00      	bgt.n	8001710 <__aeabi_dmul+0x94>
 800170e:	e094      	b.n	800183a <__aeabi_dmul+0x1be>
 8001710:	2301      	movs	r3, #1
 8001712:	40ab      	lsls	r3, r5
 8001714:	001d      	movs	r5, r3
 8001716:	23a6      	movs	r3, #166	@ 0xa6
 8001718:	002a      	movs	r2, r5
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	401a      	ands	r2, r3
 800171e:	421d      	tst	r5, r3
 8001720:	d000      	beq.n	8001724 <__aeabi_dmul+0xa8>
 8001722:	e229      	b.n	8001b78 <__aeabi_dmul+0x4fc>
 8001724:	2390      	movs	r3, #144	@ 0x90
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	421d      	tst	r5, r3
 800172a:	d100      	bne.n	800172e <__aeabi_dmul+0xb2>
 800172c:	e24d      	b.n	8001bca <__aeabi_dmul+0x54e>
 800172e:	2300      	movs	r3, #0
 8001730:	2480      	movs	r4, #128	@ 0x80
 8001732:	4699      	mov	r9, r3
 8001734:	0324      	lsls	r4, r4, #12
 8001736:	4ba8      	ldr	r3, [pc, #672]	@ (80019d8 <__aeabi_dmul+0x35c>)
 8001738:	0010      	movs	r0, r2
 800173a:	464a      	mov	r2, r9
 800173c:	051b      	lsls	r3, r3, #20
 800173e:	4323      	orrs	r3, r4
 8001740:	07d2      	lsls	r2, r2, #31
 8001742:	4313      	orrs	r3, r2
 8001744:	0019      	movs	r1, r3
 8001746:	b005      	add	sp, #20
 8001748:	bcf0      	pop	{r4, r5, r6, r7}
 800174a:	46bb      	mov	fp, r7
 800174c:	46b2      	mov	sl, r6
 800174e:	46a9      	mov	r9, r5
 8001750:	46a0      	mov	r8, r4
 8001752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001754:	4652      	mov	r2, sl
 8001756:	4302      	orrs	r2, r0
 8001758:	4690      	mov	r8, r2
 800175a:	d000      	beq.n	800175e <__aeabi_dmul+0xe2>
 800175c:	e1ac      	b.n	8001ab8 <__aeabi_dmul+0x43c>
 800175e:	469b      	mov	fp, r3
 8001760:	2302      	movs	r3, #2
 8001762:	4692      	mov	sl, r2
 8001764:	2508      	movs	r5, #8
 8001766:	9302      	str	r3, [sp, #8]
 8001768:	e7ae      	b.n	80016c8 <__aeabi_dmul+0x4c>
 800176a:	9b00      	ldr	r3, [sp, #0]
 800176c:	46a2      	mov	sl, r4
 800176e:	4699      	mov	r9, r3
 8001770:	9b01      	ldr	r3, [sp, #4]
 8001772:	4698      	mov	r8, r3
 8001774:	9b02      	ldr	r3, [sp, #8]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d100      	bne.n	800177c <__aeabi_dmul+0x100>
 800177a:	e1ca      	b.n	8001b12 <__aeabi_dmul+0x496>
 800177c:	2b03      	cmp	r3, #3
 800177e:	d100      	bne.n	8001782 <__aeabi_dmul+0x106>
 8001780:	e192      	b.n	8001aa8 <__aeabi_dmul+0x42c>
 8001782:	2b01      	cmp	r3, #1
 8001784:	d110      	bne.n	80017a8 <__aeabi_dmul+0x12c>
 8001786:	2300      	movs	r3, #0
 8001788:	2400      	movs	r4, #0
 800178a:	2200      	movs	r2, #0
 800178c:	e7d4      	b.n	8001738 <__aeabi_dmul+0xbc>
 800178e:	2201      	movs	r2, #1
 8001790:	087b      	lsrs	r3, r7, #1
 8001792:	403a      	ands	r2, r7
 8001794:	4313      	orrs	r3, r2
 8001796:	4652      	mov	r2, sl
 8001798:	07d2      	lsls	r2, r2, #31
 800179a:	4313      	orrs	r3, r2
 800179c:	4698      	mov	r8, r3
 800179e:	4653      	mov	r3, sl
 80017a0:	085b      	lsrs	r3, r3, #1
 80017a2:	469a      	mov	sl, r3
 80017a4:	9b03      	ldr	r3, [sp, #12]
 80017a6:	4699      	mov	r9, r3
 80017a8:	465b      	mov	r3, fp
 80017aa:	1c58      	adds	r0, r3, #1
 80017ac:	2380      	movs	r3, #128	@ 0x80
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	445b      	add	r3, fp
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	dc00      	bgt.n	80017b8 <__aeabi_dmul+0x13c>
 80017b6:	e1b1      	b.n	8001b1c <__aeabi_dmul+0x4a0>
 80017b8:	4642      	mov	r2, r8
 80017ba:	0752      	lsls	r2, r2, #29
 80017bc:	d00b      	beq.n	80017d6 <__aeabi_dmul+0x15a>
 80017be:	220f      	movs	r2, #15
 80017c0:	4641      	mov	r1, r8
 80017c2:	400a      	ands	r2, r1
 80017c4:	2a04      	cmp	r2, #4
 80017c6:	d006      	beq.n	80017d6 <__aeabi_dmul+0x15a>
 80017c8:	4642      	mov	r2, r8
 80017ca:	1d11      	adds	r1, r2, #4
 80017cc:	4541      	cmp	r1, r8
 80017ce:	4192      	sbcs	r2, r2
 80017d0:	4688      	mov	r8, r1
 80017d2:	4252      	negs	r2, r2
 80017d4:	4492      	add	sl, r2
 80017d6:	4652      	mov	r2, sl
 80017d8:	01d2      	lsls	r2, r2, #7
 80017da:	d506      	bpl.n	80017ea <__aeabi_dmul+0x16e>
 80017dc:	4652      	mov	r2, sl
 80017de:	4b80      	ldr	r3, [pc, #512]	@ (80019e0 <__aeabi_dmul+0x364>)
 80017e0:	401a      	ands	r2, r3
 80017e2:	2380      	movs	r3, #128	@ 0x80
 80017e4:	4692      	mov	sl, r2
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	18c3      	adds	r3, r0, r3
 80017ea:	4a7e      	ldr	r2, [pc, #504]	@ (80019e4 <__aeabi_dmul+0x368>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	dd00      	ble.n	80017f2 <__aeabi_dmul+0x176>
 80017f0:	e18f      	b.n	8001b12 <__aeabi_dmul+0x496>
 80017f2:	4642      	mov	r2, r8
 80017f4:	08d1      	lsrs	r1, r2, #3
 80017f6:	4652      	mov	r2, sl
 80017f8:	0752      	lsls	r2, r2, #29
 80017fa:	430a      	orrs	r2, r1
 80017fc:	4651      	mov	r1, sl
 80017fe:	055b      	lsls	r3, r3, #21
 8001800:	024c      	lsls	r4, r1, #9
 8001802:	0b24      	lsrs	r4, r4, #12
 8001804:	0d5b      	lsrs	r3, r3, #21
 8001806:	e797      	b.n	8001738 <__aeabi_dmul+0xbc>
 8001808:	4b73      	ldr	r3, [pc, #460]	@ (80019d8 <__aeabi_dmul+0x35c>)
 800180a:	4326      	orrs	r6, r4
 800180c:	469c      	mov	ip, r3
 800180e:	44e3      	add	fp, ip
 8001810:	2e00      	cmp	r6, #0
 8001812:	d100      	bne.n	8001816 <__aeabi_dmul+0x19a>
 8001814:	e16f      	b.n	8001af6 <__aeabi_dmul+0x47a>
 8001816:	2303      	movs	r3, #3
 8001818:	4649      	mov	r1, r9
 800181a:	431d      	orrs	r5, r3
 800181c:	9b00      	ldr	r3, [sp, #0]
 800181e:	4059      	eors	r1, r3
 8001820:	b2cb      	uxtb	r3, r1
 8001822:	9303      	str	r3, [sp, #12]
 8001824:	2d0a      	cmp	r5, #10
 8001826:	dd00      	ble.n	800182a <__aeabi_dmul+0x1ae>
 8001828:	e133      	b.n	8001a92 <__aeabi_dmul+0x416>
 800182a:	2301      	movs	r3, #1
 800182c:	40ab      	lsls	r3, r5
 800182e:	001d      	movs	r5, r3
 8001830:	2303      	movs	r3, #3
 8001832:	9302      	str	r3, [sp, #8]
 8001834:	2288      	movs	r2, #136	@ 0x88
 8001836:	422a      	tst	r2, r5
 8001838:	d197      	bne.n	800176a <__aeabi_dmul+0xee>
 800183a:	4642      	mov	r2, r8
 800183c:	4643      	mov	r3, r8
 800183e:	0412      	lsls	r2, r2, #16
 8001840:	0c12      	lsrs	r2, r2, #16
 8001842:	0016      	movs	r6, r2
 8001844:	9801      	ldr	r0, [sp, #4]
 8001846:	0c1d      	lsrs	r5, r3, #16
 8001848:	0c03      	lsrs	r3, r0, #16
 800184a:	0400      	lsls	r0, r0, #16
 800184c:	0c00      	lsrs	r0, r0, #16
 800184e:	4346      	muls	r6, r0
 8001850:	46b4      	mov	ip, r6
 8001852:	001e      	movs	r6, r3
 8001854:	436e      	muls	r6, r5
 8001856:	9600      	str	r6, [sp, #0]
 8001858:	0016      	movs	r6, r2
 800185a:	0007      	movs	r7, r0
 800185c:	435e      	muls	r6, r3
 800185e:	4661      	mov	r1, ip
 8001860:	46b0      	mov	r8, r6
 8001862:	436f      	muls	r7, r5
 8001864:	0c0e      	lsrs	r6, r1, #16
 8001866:	44b8      	add	r8, r7
 8001868:	4446      	add	r6, r8
 800186a:	42b7      	cmp	r7, r6
 800186c:	d905      	bls.n	800187a <__aeabi_dmul+0x1fe>
 800186e:	2180      	movs	r1, #128	@ 0x80
 8001870:	0249      	lsls	r1, r1, #9
 8001872:	4688      	mov	r8, r1
 8001874:	9f00      	ldr	r7, [sp, #0]
 8001876:	4447      	add	r7, r8
 8001878:	9700      	str	r7, [sp, #0]
 800187a:	4661      	mov	r1, ip
 800187c:	0409      	lsls	r1, r1, #16
 800187e:	0c09      	lsrs	r1, r1, #16
 8001880:	0c37      	lsrs	r7, r6, #16
 8001882:	0436      	lsls	r6, r6, #16
 8001884:	468c      	mov	ip, r1
 8001886:	0031      	movs	r1, r6
 8001888:	4461      	add	r1, ip
 800188a:	9101      	str	r1, [sp, #4]
 800188c:	0011      	movs	r1, r2
 800188e:	0c26      	lsrs	r6, r4, #16
 8001890:	0424      	lsls	r4, r4, #16
 8001892:	0c24      	lsrs	r4, r4, #16
 8001894:	4361      	muls	r1, r4
 8001896:	468c      	mov	ip, r1
 8001898:	0021      	movs	r1, r4
 800189a:	4369      	muls	r1, r5
 800189c:	4689      	mov	r9, r1
 800189e:	4661      	mov	r1, ip
 80018a0:	0c09      	lsrs	r1, r1, #16
 80018a2:	4688      	mov	r8, r1
 80018a4:	4372      	muls	r2, r6
 80018a6:	444a      	add	r2, r9
 80018a8:	4442      	add	r2, r8
 80018aa:	4375      	muls	r5, r6
 80018ac:	4591      	cmp	r9, r2
 80018ae:	d903      	bls.n	80018b8 <__aeabi_dmul+0x23c>
 80018b0:	2180      	movs	r1, #128	@ 0x80
 80018b2:	0249      	lsls	r1, r1, #9
 80018b4:	4688      	mov	r8, r1
 80018b6:	4445      	add	r5, r8
 80018b8:	0c11      	lsrs	r1, r2, #16
 80018ba:	4688      	mov	r8, r1
 80018bc:	4661      	mov	r1, ip
 80018be:	0409      	lsls	r1, r1, #16
 80018c0:	0c09      	lsrs	r1, r1, #16
 80018c2:	468c      	mov	ip, r1
 80018c4:	0412      	lsls	r2, r2, #16
 80018c6:	4462      	add	r2, ip
 80018c8:	18b9      	adds	r1, r7, r2
 80018ca:	9102      	str	r1, [sp, #8]
 80018cc:	4651      	mov	r1, sl
 80018ce:	0c09      	lsrs	r1, r1, #16
 80018d0:	468c      	mov	ip, r1
 80018d2:	4651      	mov	r1, sl
 80018d4:	040f      	lsls	r7, r1, #16
 80018d6:	0c3f      	lsrs	r7, r7, #16
 80018d8:	0039      	movs	r1, r7
 80018da:	4341      	muls	r1, r0
 80018dc:	4445      	add	r5, r8
 80018de:	4688      	mov	r8, r1
 80018e0:	4661      	mov	r1, ip
 80018e2:	4341      	muls	r1, r0
 80018e4:	468a      	mov	sl, r1
 80018e6:	4641      	mov	r1, r8
 80018e8:	4660      	mov	r0, ip
 80018ea:	0c09      	lsrs	r1, r1, #16
 80018ec:	4689      	mov	r9, r1
 80018ee:	4358      	muls	r0, r3
 80018f0:	437b      	muls	r3, r7
 80018f2:	4453      	add	r3, sl
 80018f4:	444b      	add	r3, r9
 80018f6:	459a      	cmp	sl, r3
 80018f8:	d903      	bls.n	8001902 <__aeabi_dmul+0x286>
 80018fa:	2180      	movs	r1, #128	@ 0x80
 80018fc:	0249      	lsls	r1, r1, #9
 80018fe:	4689      	mov	r9, r1
 8001900:	4448      	add	r0, r9
 8001902:	0c19      	lsrs	r1, r3, #16
 8001904:	4689      	mov	r9, r1
 8001906:	4641      	mov	r1, r8
 8001908:	0409      	lsls	r1, r1, #16
 800190a:	0c09      	lsrs	r1, r1, #16
 800190c:	4688      	mov	r8, r1
 800190e:	0039      	movs	r1, r7
 8001910:	4361      	muls	r1, r4
 8001912:	041b      	lsls	r3, r3, #16
 8001914:	4443      	add	r3, r8
 8001916:	4688      	mov	r8, r1
 8001918:	4661      	mov	r1, ip
 800191a:	434c      	muls	r4, r1
 800191c:	4371      	muls	r1, r6
 800191e:	468c      	mov	ip, r1
 8001920:	4641      	mov	r1, r8
 8001922:	4377      	muls	r7, r6
 8001924:	0c0e      	lsrs	r6, r1, #16
 8001926:	193f      	adds	r7, r7, r4
 8001928:	19f6      	adds	r6, r6, r7
 800192a:	4448      	add	r0, r9
 800192c:	42b4      	cmp	r4, r6
 800192e:	d903      	bls.n	8001938 <__aeabi_dmul+0x2bc>
 8001930:	2180      	movs	r1, #128	@ 0x80
 8001932:	0249      	lsls	r1, r1, #9
 8001934:	4689      	mov	r9, r1
 8001936:	44cc      	add	ip, r9
 8001938:	9902      	ldr	r1, [sp, #8]
 800193a:	9f00      	ldr	r7, [sp, #0]
 800193c:	4689      	mov	r9, r1
 800193e:	0431      	lsls	r1, r6, #16
 8001940:	444f      	add	r7, r9
 8001942:	4689      	mov	r9, r1
 8001944:	4641      	mov	r1, r8
 8001946:	4297      	cmp	r7, r2
 8001948:	4192      	sbcs	r2, r2
 800194a:	040c      	lsls	r4, r1, #16
 800194c:	0c24      	lsrs	r4, r4, #16
 800194e:	444c      	add	r4, r9
 8001950:	18ff      	adds	r7, r7, r3
 8001952:	4252      	negs	r2, r2
 8001954:	1964      	adds	r4, r4, r5
 8001956:	18a1      	adds	r1, r4, r2
 8001958:	429f      	cmp	r7, r3
 800195a:	419b      	sbcs	r3, r3
 800195c:	4688      	mov	r8, r1
 800195e:	4682      	mov	sl, r0
 8001960:	425b      	negs	r3, r3
 8001962:	4699      	mov	r9, r3
 8001964:	4590      	cmp	r8, r2
 8001966:	4192      	sbcs	r2, r2
 8001968:	42ac      	cmp	r4, r5
 800196a:	41a4      	sbcs	r4, r4
 800196c:	44c2      	add	sl, r8
 800196e:	44d1      	add	r9, sl
 8001970:	4252      	negs	r2, r2
 8001972:	4264      	negs	r4, r4
 8001974:	4314      	orrs	r4, r2
 8001976:	4599      	cmp	r9, r3
 8001978:	419b      	sbcs	r3, r3
 800197a:	4582      	cmp	sl, r0
 800197c:	4192      	sbcs	r2, r2
 800197e:	425b      	negs	r3, r3
 8001980:	4252      	negs	r2, r2
 8001982:	4313      	orrs	r3, r2
 8001984:	464a      	mov	r2, r9
 8001986:	0c36      	lsrs	r6, r6, #16
 8001988:	19a4      	adds	r4, r4, r6
 800198a:	18e3      	adds	r3, r4, r3
 800198c:	4463      	add	r3, ip
 800198e:	025b      	lsls	r3, r3, #9
 8001990:	0dd2      	lsrs	r2, r2, #23
 8001992:	431a      	orrs	r2, r3
 8001994:	9901      	ldr	r1, [sp, #4]
 8001996:	4692      	mov	sl, r2
 8001998:	027a      	lsls	r2, r7, #9
 800199a:	430a      	orrs	r2, r1
 800199c:	1e50      	subs	r0, r2, #1
 800199e:	4182      	sbcs	r2, r0
 80019a0:	0dff      	lsrs	r7, r7, #23
 80019a2:	4317      	orrs	r7, r2
 80019a4:	464a      	mov	r2, r9
 80019a6:	0252      	lsls	r2, r2, #9
 80019a8:	4317      	orrs	r7, r2
 80019aa:	46b8      	mov	r8, r7
 80019ac:	01db      	lsls	r3, r3, #7
 80019ae:	d500      	bpl.n	80019b2 <__aeabi_dmul+0x336>
 80019b0:	e6ed      	b.n	800178e <__aeabi_dmul+0x112>
 80019b2:	4b0d      	ldr	r3, [pc, #52]	@ (80019e8 <__aeabi_dmul+0x36c>)
 80019b4:	9a03      	ldr	r2, [sp, #12]
 80019b6:	445b      	add	r3, fp
 80019b8:	4691      	mov	r9, r2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	dc00      	bgt.n	80019c0 <__aeabi_dmul+0x344>
 80019be:	e0ac      	b.n	8001b1a <__aeabi_dmul+0x49e>
 80019c0:	003a      	movs	r2, r7
 80019c2:	0752      	lsls	r2, r2, #29
 80019c4:	d100      	bne.n	80019c8 <__aeabi_dmul+0x34c>
 80019c6:	e710      	b.n	80017ea <__aeabi_dmul+0x16e>
 80019c8:	220f      	movs	r2, #15
 80019ca:	4658      	mov	r0, fp
 80019cc:	403a      	ands	r2, r7
 80019ce:	2a04      	cmp	r2, #4
 80019d0:	d000      	beq.n	80019d4 <__aeabi_dmul+0x358>
 80019d2:	e6f9      	b.n	80017c8 <__aeabi_dmul+0x14c>
 80019d4:	e709      	b.n	80017ea <__aeabi_dmul+0x16e>
 80019d6:	46c0      	nop			@ (mov r8, r8)
 80019d8:	000007ff 	.word	0x000007ff
 80019dc:	fffffc01 	.word	0xfffffc01
 80019e0:	feffffff 	.word	0xfeffffff
 80019e4:	000007fe 	.word	0x000007fe
 80019e8:	000003ff 	.word	0x000003ff
 80019ec:	0022      	movs	r2, r4
 80019ee:	4332      	orrs	r2, r6
 80019f0:	d06f      	beq.n	8001ad2 <__aeabi_dmul+0x456>
 80019f2:	2c00      	cmp	r4, #0
 80019f4:	d100      	bne.n	80019f8 <__aeabi_dmul+0x37c>
 80019f6:	e0c2      	b.n	8001b7e <__aeabi_dmul+0x502>
 80019f8:	0020      	movs	r0, r4
 80019fa:	f000 fddf 	bl	80025bc <__clzsi2>
 80019fe:	0002      	movs	r2, r0
 8001a00:	0003      	movs	r3, r0
 8001a02:	3a0b      	subs	r2, #11
 8001a04:	201d      	movs	r0, #29
 8001a06:	1a82      	subs	r2, r0, r2
 8001a08:	0030      	movs	r0, r6
 8001a0a:	0019      	movs	r1, r3
 8001a0c:	40d0      	lsrs	r0, r2
 8001a0e:	3908      	subs	r1, #8
 8001a10:	408c      	lsls	r4, r1
 8001a12:	0002      	movs	r2, r0
 8001a14:	4322      	orrs	r2, r4
 8001a16:	0034      	movs	r4, r6
 8001a18:	408c      	lsls	r4, r1
 8001a1a:	4659      	mov	r1, fp
 8001a1c:	1acb      	subs	r3, r1, r3
 8001a1e:	4986      	ldr	r1, [pc, #536]	@ (8001c38 <__aeabi_dmul+0x5bc>)
 8001a20:	468b      	mov	fp, r1
 8001a22:	449b      	add	fp, r3
 8001a24:	2d0a      	cmp	r5, #10
 8001a26:	dd00      	ble.n	8001a2a <__aeabi_dmul+0x3ae>
 8001a28:	e6a4      	b.n	8001774 <__aeabi_dmul+0xf8>
 8001a2a:	4649      	mov	r1, r9
 8001a2c:	9b00      	ldr	r3, [sp, #0]
 8001a2e:	9401      	str	r4, [sp, #4]
 8001a30:	4059      	eors	r1, r3
 8001a32:	b2cb      	uxtb	r3, r1
 8001a34:	0014      	movs	r4, r2
 8001a36:	2000      	movs	r0, #0
 8001a38:	9303      	str	r3, [sp, #12]
 8001a3a:	2d02      	cmp	r5, #2
 8001a3c:	dd00      	ble.n	8001a40 <__aeabi_dmul+0x3c4>
 8001a3e:	e667      	b.n	8001710 <__aeabi_dmul+0x94>
 8001a40:	e6fb      	b.n	800183a <__aeabi_dmul+0x1be>
 8001a42:	4653      	mov	r3, sl
 8001a44:	4303      	orrs	r3, r0
 8001a46:	4698      	mov	r8, r3
 8001a48:	d03c      	beq.n	8001ac4 <__aeabi_dmul+0x448>
 8001a4a:	4653      	mov	r3, sl
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d100      	bne.n	8001a52 <__aeabi_dmul+0x3d6>
 8001a50:	e0a3      	b.n	8001b9a <__aeabi_dmul+0x51e>
 8001a52:	4650      	mov	r0, sl
 8001a54:	f000 fdb2 	bl	80025bc <__clzsi2>
 8001a58:	230b      	movs	r3, #11
 8001a5a:	425b      	negs	r3, r3
 8001a5c:	469c      	mov	ip, r3
 8001a5e:	0002      	movs	r2, r0
 8001a60:	4484      	add	ip, r0
 8001a62:	0011      	movs	r1, r2
 8001a64:	4650      	mov	r0, sl
 8001a66:	3908      	subs	r1, #8
 8001a68:	4088      	lsls	r0, r1
 8001a6a:	231d      	movs	r3, #29
 8001a6c:	4680      	mov	r8, r0
 8001a6e:	4660      	mov	r0, ip
 8001a70:	1a1b      	subs	r3, r3, r0
 8001a72:	0020      	movs	r0, r4
 8001a74:	40d8      	lsrs	r0, r3
 8001a76:	0003      	movs	r3, r0
 8001a78:	4640      	mov	r0, r8
 8001a7a:	4303      	orrs	r3, r0
 8001a7c:	469a      	mov	sl, r3
 8001a7e:	0023      	movs	r3, r4
 8001a80:	408b      	lsls	r3, r1
 8001a82:	4698      	mov	r8, r3
 8001a84:	4b6c      	ldr	r3, [pc, #432]	@ (8001c38 <__aeabi_dmul+0x5bc>)
 8001a86:	2500      	movs	r5, #0
 8001a88:	1a9b      	subs	r3, r3, r2
 8001a8a:	469b      	mov	fp, r3
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	9302      	str	r3, [sp, #8]
 8001a90:	e61a      	b.n	80016c8 <__aeabi_dmul+0x4c>
 8001a92:	2d0f      	cmp	r5, #15
 8001a94:	d000      	beq.n	8001a98 <__aeabi_dmul+0x41c>
 8001a96:	e0c9      	b.n	8001c2c <__aeabi_dmul+0x5b0>
 8001a98:	2380      	movs	r3, #128	@ 0x80
 8001a9a:	4652      	mov	r2, sl
 8001a9c:	031b      	lsls	r3, r3, #12
 8001a9e:	421a      	tst	r2, r3
 8001aa0:	d002      	beq.n	8001aa8 <__aeabi_dmul+0x42c>
 8001aa2:	421c      	tst	r4, r3
 8001aa4:	d100      	bne.n	8001aa8 <__aeabi_dmul+0x42c>
 8001aa6:	e092      	b.n	8001bce <__aeabi_dmul+0x552>
 8001aa8:	2480      	movs	r4, #128	@ 0x80
 8001aaa:	4653      	mov	r3, sl
 8001aac:	0324      	lsls	r4, r4, #12
 8001aae:	431c      	orrs	r4, r3
 8001ab0:	0324      	lsls	r4, r4, #12
 8001ab2:	4642      	mov	r2, r8
 8001ab4:	0b24      	lsrs	r4, r4, #12
 8001ab6:	e63e      	b.n	8001736 <__aeabi_dmul+0xba>
 8001ab8:	469b      	mov	fp, r3
 8001aba:	2303      	movs	r3, #3
 8001abc:	4680      	mov	r8, r0
 8001abe:	250c      	movs	r5, #12
 8001ac0:	9302      	str	r3, [sp, #8]
 8001ac2:	e601      	b.n	80016c8 <__aeabi_dmul+0x4c>
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	469a      	mov	sl, r3
 8001ac8:	469b      	mov	fp, r3
 8001aca:	3301      	adds	r3, #1
 8001acc:	2504      	movs	r5, #4
 8001ace:	9302      	str	r3, [sp, #8]
 8001ad0:	e5fa      	b.n	80016c8 <__aeabi_dmul+0x4c>
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	430d      	orrs	r5, r1
 8001ad6:	2d0a      	cmp	r5, #10
 8001ad8:	dd00      	ble.n	8001adc <__aeabi_dmul+0x460>
 8001ada:	e64b      	b.n	8001774 <__aeabi_dmul+0xf8>
 8001adc:	4649      	mov	r1, r9
 8001ade:	9800      	ldr	r0, [sp, #0]
 8001ae0:	4041      	eors	r1, r0
 8001ae2:	b2c9      	uxtb	r1, r1
 8001ae4:	9103      	str	r1, [sp, #12]
 8001ae6:	2d02      	cmp	r5, #2
 8001ae8:	dc00      	bgt.n	8001aec <__aeabi_dmul+0x470>
 8001aea:	e096      	b.n	8001c1a <__aeabi_dmul+0x59e>
 8001aec:	2300      	movs	r3, #0
 8001aee:	2400      	movs	r4, #0
 8001af0:	2001      	movs	r0, #1
 8001af2:	9301      	str	r3, [sp, #4]
 8001af4:	e60c      	b.n	8001710 <__aeabi_dmul+0x94>
 8001af6:	4649      	mov	r1, r9
 8001af8:	2302      	movs	r3, #2
 8001afa:	9a00      	ldr	r2, [sp, #0]
 8001afc:	432b      	orrs	r3, r5
 8001afe:	4051      	eors	r1, r2
 8001b00:	b2ca      	uxtb	r2, r1
 8001b02:	9203      	str	r2, [sp, #12]
 8001b04:	2b0a      	cmp	r3, #10
 8001b06:	dd00      	ble.n	8001b0a <__aeabi_dmul+0x48e>
 8001b08:	e634      	b.n	8001774 <__aeabi_dmul+0xf8>
 8001b0a:	2d00      	cmp	r5, #0
 8001b0c:	d157      	bne.n	8001bbe <__aeabi_dmul+0x542>
 8001b0e:	9b03      	ldr	r3, [sp, #12]
 8001b10:	4699      	mov	r9, r3
 8001b12:	2400      	movs	r4, #0
 8001b14:	2200      	movs	r2, #0
 8001b16:	4b49      	ldr	r3, [pc, #292]	@ (8001c3c <__aeabi_dmul+0x5c0>)
 8001b18:	e60e      	b.n	8001738 <__aeabi_dmul+0xbc>
 8001b1a:	4658      	mov	r0, fp
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	1ac9      	subs	r1, r1, r3
 8001b20:	2938      	cmp	r1, #56	@ 0x38
 8001b22:	dd00      	ble.n	8001b26 <__aeabi_dmul+0x4aa>
 8001b24:	e62f      	b.n	8001786 <__aeabi_dmul+0x10a>
 8001b26:	291f      	cmp	r1, #31
 8001b28:	dd56      	ble.n	8001bd8 <__aeabi_dmul+0x55c>
 8001b2a:	221f      	movs	r2, #31
 8001b2c:	4654      	mov	r4, sl
 8001b2e:	4252      	negs	r2, r2
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	40dc      	lsrs	r4, r3
 8001b34:	2920      	cmp	r1, #32
 8001b36:	d007      	beq.n	8001b48 <__aeabi_dmul+0x4cc>
 8001b38:	4b41      	ldr	r3, [pc, #260]	@ (8001c40 <__aeabi_dmul+0x5c4>)
 8001b3a:	4642      	mov	r2, r8
 8001b3c:	469c      	mov	ip, r3
 8001b3e:	4653      	mov	r3, sl
 8001b40:	4460      	add	r0, ip
 8001b42:	4083      	lsls	r3, r0
 8001b44:	431a      	orrs	r2, r3
 8001b46:	4690      	mov	r8, r2
 8001b48:	4642      	mov	r2, r8
 8001b4a:	2107      	movs	r1, #7
 8001b4c:	1e53      	subs	r3, r2, #1
 8001b4e:	419a      	sbcs	r2, r3
 8001b50:	000b      	movs	r3, r1
 8001b52:	4322      	orrs	r2, r4
 8001b54:	4013      	ands	r3, r2
 8001b56:	2400      	movs	r4, #0
 8001b58:	4211      	tst	r1, r2
 8001b5a:	d009      	beq.n	8001b70 <__aeabi_dmul+0x4f4>
 8001b5c:	230f      	movs	r3, #15
 8001b5e:	4013      	ands	r3, r2
 8001b60:	2b04      	cmp	r3, #4
 8001b62:	d05d      	beq.n	8001c20 <__aeabi_dmul+0x5a4>
 8001b64:	1d11      	adds	r1, r2, #4
 8001b66:	4291      	cmp	r1, r2
 8001b68:	419b      	sbcs	r3, r3
 8001b6a:	000a      	movs	r2, r1
 8001b6c:	425b      	negs	r3, r3
 8001b6e:	075b      	lsls	r3, r3, #29
 8001b70:	08d2      	lsrs	r2, r2, #3
 8001b72:	431a      	orrs	r2, r3
 8001b74:	2300      	movs	r3, #0
 8001b76:	e5df      	b.n	8001738 <__aeabi_dmul+0xbc>
 8001b78:	9b03      	ldr	r3, [sp, #12]
 8001b7a:	4699      	mov	r9, r3
 8001b7c:	e5fa      	b.n	8001774 <__aeabi_dmul+0xf8>
 8001b7e:	9801      	ldr	r0, [sp, #4]
 8001b80:	f000 fd1c 	bl	80025bc <__clzsi2>
 8001b84:	0002      	movs	r2, r0
 8001b86:	0003      	movs	r3, r0
 8001b88:	3215      	adds	r2, #21
 8001b8a:	3320      	adds	r3, #32
 8001b8c:	2a1c      	cmp	r2, #28
 8001b8e:	dc00      	bgt.n	8001b92 <__aeabi_dmul+0x516>
 8001b90:	e738      	b.n	8001a04 <__aeabi_dmul+0x388>
 8001b92:	9a01      	ldr	r2, [sp, #4]
 8001b94:	3808      	subs	r0, #8
 8001b96:	4082      	lsls	r2, r0
 8001b98:	e73f      	b.n	8001a1a <__aeabi_dmul+0x39e>
 8001b9a:	f000 fd0f 	bl	80025bc <__clzsi2>
 8001b9e:	2315      	movs	r3, #21
 8001ba0:	469c      	mov	ip, r3
 8001ba2:	4484      	add	ip, r0
 8001ba4:	0002      	movs	r2, r0
 8001ba6:	4663      	mov	r3, ip
 8001ba8:	3220      	adds	r2, #32
 8001baa:	2b1c      	cmp	r3, #28
 8001bac:	dc00      	bgt.n	8001bb0 <__aeabi_dmul+0x534>
 8001bae:	e758      	b.n	8001a62 <__aeabi_dmul+0x3e6>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	4698      	mov	r8, r3
 8001bb4:	0023      	movs	r3, r4
 8001bb6:	3808      	subs	r0, #8
 8001bb8:	4083      	lsls	r3, r0
 8001bba:	469a      	mov	sl, r3
 8001bbc:	e762      	b.n	8001a84 <__aeabi_dmul+0x408>
 8001bbe:	001d      	movs	r5, r3
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	2400      	movs	r4, #0
 8001bc4:	2002      	movs	r0, #2
 8001bc6:	9301      	str	r3, [sp, #4]
 8001bc8:	e5a2      	b.n	8001710 <__aeabi_dmul+0x94>
 8001bca:	9002      	str	r0, [sp, #8]
 8001bcc:	e632      	b.n	8001834 <__aeabi_dmul+0x1b8>
 8001bce:	431c      	orrs	r4, r3
 8001bd0:	9b00      	ldr	r3, [sp, #0]
 8001bd2:	9a01      	ldr	r2, [sp, #4]
 8001bd4:	4699      	mov	r9, r3
 8001bd6:	e5ae      	b.n	8001736 <__aeabi_dmul+0xba>
 8001bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c44 <__aeabi_dmul+0x5c8>)
 8001bda:	4652      	mov	r2, sl
 8001bdc:	18c3      	adds	r3, r0, r3
 8001bde:	4640      	mov	r0, r8
 8001be0:	409a      	lsls	r2, r3
 8001be2:	40c8      	lsrs	r0, r1
 8001be4:	4302      	orrs	r2, r0
 8001be6:	4640      	mov	r0, r8
 8001be8:	4098      	lsls	r0, r3
 8001bea:	0003      	movs	r3, r0
 8001bec:	1e58      	subs	r0, r3, #1
 8001bee:	4183      	sbcs	r3, r0
 8001bf0:	4654      	mov	r4, sl
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	40cc      	lsrs	r4, r1
 8001bf6:	0753      	lsls	r3, r2, #29
 8001bf8:	d009      	beq.n	8001c0e <__aeabi_dmul+0x592>
 8001bfa:	230f      	movs	r3, #15
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	d005      	beq.n	8001c0e <__aeabi_dmul+0x592>
 8001c02:	1d13      	adds	r3, r2, #4
 8001c04:	4293      	cmp	r3, r2
 8001c06:	4192      	sbcs	r2, r2
 8001c08:	4252      	negs	r2, r2
 8001c0a:	18a4      	adds	r4, r4, r2
 8001c0c:	001a      	movs	r2, r3
 8001c0e:	0223      	lsls	r3, r4, #8
 8001c10:	d508      	bpl.n	8001c24 <__aeabi_dmul+0x5a8>
 8001c12:	2301      	movs	r3, #1
 8001c14:	2400      	movs	r4, #0
 8001c16:	2200      	movs	r2, #0
 8001c18:	e58e      	b.n	8001738 <__aeabi_dmul+0xbc>
 8001c1a:	4689      	mov	r9, r1
 8001c1c:	2400      	movs	r4, #0
 8001c1e:	e58b      	b.n	8001738 <__aeabi_dmul+0xbc>
 8001c20:	2300      	movs	r3, #0
 8001c22:	e7a5      	b.n	8001b70 <__aeabi_dmul+0x4f4>
 8001c24:	0763      	lsls	r3, r4, #29
 8001c26:	0264      	lsls	r4, r4, #9
 8001c28:	0b24      	lsrs	r4, r4, #12
 8001c2a:	e7a1      	b.n	8001b70 <__aeabi_dmul+0x4f4>
 8001c2c:	9b00      	ldr	r3, [sp, #0]
 8001c2e:	46a2      	mov	sl, r4
 8001c30:	4699      	mov	r9, r3
 8001c32:	9b01      	ldr	r3, [sp, #4]
 8001c34:	4698      	mov	r8, r3
 8001c36:	e737      	b.n	8001aa8 <__aeabi_dmul+0x42c>
 8001c38:	fffffc0d 	.word	0xfffffc0d
 8001c3c:	000007ff 	.word	0x000007ff
 8001c40:	0000043e 	.word	0x0000043e
 8001c44:	0000041e 	.word	0x0000041e

08001c48 <__aeabi_dsub>:
 8001c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c4a:	4657      	mov	r7, sl
 8001c4c:	464e      	mov	r6, r9
 8001c4e:	4645      	mov	r5, r8
 8001c50:	46de      	mov	lr, fp
 8001c52:	b5e0      	push	{r5, r6, r7, lr}
 8001c54:	b083      	sub	sp, #12
 8001c56:	9000      	str	r0, [sp, #0]
 8001c58:	9101      	str	r1, [sp, #4]
 8001c5a:	030c      	lsls	r4, r1, #12
 8001c5c:	004d      	lsls	r5, r1, #1
 8001c5e:	0fce      	lsrs	r6, r1, #31
 8001c60:	0a61      	lsrs	r1, r4, #9
 8001c62:	9c00      	ldr	r4, [sp, #0]
 8001c64:	005f      	lsls	r7, r3, #1
 8001c66:	0f64      	lsrs	r4, r4, #29
 8001c68:	430c      	orrs	r4, r1
 8001c6a:	9900      	ldr	r1, [sp, #0]
 8001c6c:	9200      	str	r2, [sp, #0]
 8001c6e:	9301      	str	r3, [sp, #4]
 8001c70:	00c8      	lsls	r0, r1, #3
 8001c72:	0319      	lsls	r1, r3, #12
 8001c74:	0d7b      	lsrs	r3, r7, #21
 8001c76:	4699      	mov	r9, r3
 8001c78:	9b01      	ldr	r3, [sp, #4]
 8001c7a:	4fcc      	ldr	r7, [pc, #816]	@ (8001fac <__aeabi_dsub+0x364>)
 8001c7c:	0fdb      	lsrs	r3, r3, #31
 8001c7e:	469c      	mov	ip, r3
 8001c80:	0a4b      	lsrs	r3, r1, #9
 8001c82:	9900      	ldr	r1, [sp, #0]
 8001c84:	4680      	mov	r8, r0
 8001c86:	0f49      	lsrs	r1, r1, #29
 8001c88:	4319      	orrs	r1, r3
 8001c8a:	9b00      	ldr	r3, [sp, #0]
 8001c8c:	468b      	mov	fp, r1
 8001c8e:	00da      	lsls	r2, r3, #3
 8001c90:	4692      	mov	sl, r2
 8001c92:	0d6d      	lsrs	r5, r5, #21
 8001c94:	45b9      	cmp	r9, r7
 8001c96:	d100      	bne.n	8001c9a <__aeabi_dsub+0x52>
 8001c98:	e0bf      	b.n	8001e1a <__aeabi_dsub+0x1d2>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	4661      	mov	r1, ip
 8001c9e:	4059      	eors	r1, r3
 8001ca0:	464b      	mov	r3, r9
 8001ca2:	468c      	mov	ip, r1
 8001ca4:	1aeb      	subs	r3, r5, r3
 8001ca6:	428e      	cmp	r6, r1
 8001ca8:	d075      	beq.n	8001d96 <__aeabi_dsub+0x14e>
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	dc00      	bgt.n	8001cb0 <__aeabi_dsub+0x68>
 8001cae:	e2a3      	b.n	80021f8 <__aeabi_dsub+0x5b0>
 8001cb0:	4649      	mov	r1, r9
 8001cb2:	2900      	cmp	r1, #0
 8001cb4:	d100      	bne.n	8001cb8 <__aeabi_dsub+0x70>
 8001cb6:	e0ce      	b.n	8001e56 <__aeabi_dsub+0x20e>
 8001cb8:	42bd      	cmp	r5, r7
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dsub+0x76>
 8001cbc:	e200      	b.n	80020c0 <__aeabi_dsub+0x478>
 8001cbe:	2701      	movs	r7, #1
 8001cc0:	2b38      	cmp	r3, #56	@ 0x38
 8001cc2:	dc19      	bgt.n	8001cf8 <__aeabi_dsub+0xb0>
 8001cc4:	2780      	movs	r7, #128	@ 0x80
 8001cc6:	4659      	mov	r1, fp
 8001cc8:	043f      	lsls	r7, r7, #16
 8001cca:	4339      	orrs	r1, r7
 8001ccc:	468b      	mov	fp, r1
 8001cce:	2b1f      	cmp	r3, #31
 8001cd0:	dd00      	ble.n	8001cd4 <__aeabi_dsub+0x8c>
 8001cd2:	e1fa      	b.n	80020ca <__aeabi_dsub+0x482>
 8001cd4:	2720      	movs	r7, #32
 8001cd6:	1af9      	subs	r1, r7, r3
 8001cd8:	468c      	mov	ip, r1
 8001cda:	4659      	mov	r1, fp
 8001cdc:	4667      	mov	r7, ip
 8001cde:	40b9      	lsls	r1, r7
 8001ce0:	000f      	movs	r7, r1
 8001ce2:	0011      	movs	r1, r2
 8001ce4:	40d9      	lsrs	r1, r3
 8001ce6:	430f      	orrs	r7, r1
 8001ce8:	4661      	mov	r1, ip
 8001cea:	408a      	lsls	r2, r1
 8001cec:	1e51      	subs	r1, r2, #1
 8001cee:	418a      	sbcs	r2, r1
 8001cf0:	4659      	mov	r1, fp
 8001cf2:	40d9      	lsrs	r1, r3
 8001cf4:	4317      	orrs	r7, r2
 8001cf6:	1a64      	subs	r4, r4, r1
 8001cf8:	1bc7      	subs	r7, r0, r7
 8001cfa:	42b8      	cmp	r0, r7
 8001cfc:	4180      	sbcs	r0, r0
 8001cfe:	4240      	negs	r0, r0
 8001d00:	1a24      	subs	r4, r4, r0
 8001d02:	0223      	lsls	r3, r4, #8
 8001d04:	d400      	bmi.n	8001d08 <__aeabi_dsub+0xc0>
 8001d06:	e140      	b.n	8001f8a <__aeabi_dsub+0x342>
 8001d08:	0264      	lsls	r4, r4, #9
 8001d0a:	0a64      	lsrs	r4, r4, #9
 8001d0c:	2c00      	cmp	r4, #0
 8001d0e:	d100      	bne.n	8001d12 <__aeabi_dsub+0xca>
 8001d10:	e154      	b.n	8001fbc <__aeabi_dsub+0x374>
 8001d12:	0020      	movs	r0, r4
 8001d14:	f000 fc52 	bl	80025bc <__clzsi2>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	3b08      	subs	r3, #8
 8001d1c:	2120      	movs	r1, #32
 8001d1e:	0038      	movs	r0, r7
 8001d20:	1aca      	subs	r2, r1, r3
 8001d22:	40d0      	lsrs	r0, r2
 8001d24:	409c      	lsls	r4, r3
 8001d26:	0002      	movs	r2, r0
 8001d28:	409f      	lsls	r7, r3
 8001d2a:	4322      	orrs	r2, r4
 8001d2c:	429d      	cmp	r5, r3
 8001d2e:	dd00      	ble.n	8001d32 <__aeabi_dsub+0xea>
 8001d30:	e1a6      	b.n	8002080 <__aeabi_dsub+0x438>
 8001d32:	1b58      	subs	r0, r3, r5
 8001d34:	3001      	adds	r0, #1
 8001d36:	1a09      	subs	r1, r1, r0
 8001d38:	003c      	movs	r4, r7
 8001d3a:	408f      	lsls	r7, r1
 8001d3c:	40c4      	lsrs	r4, r0
 8001d3e:	1e7b      	subs	r3, r7, #1
 8001d40:	419f      	sbcs	r7, r3
 8001d42:	0013      	movs	r3, r2
 8001d44:	408b      	lsls	r3, r1
 8001d46:	4327      	orrs	r7, r4
 8001d48:	431f      	orrs	r7, r3
 8001d4a:	40c2      	lsrs	r2, r0
 8001d4c:	003b      	movs	r3, r7
 8001d4e:	0014      	movs	r4, r2
 8001d50:	2500      	movs	r5, #0
 8001d52:	4313      	orrs	r3, r2
 8001d54:	d100      	bne.n	8001d58 <__aeabi_dsub+0x110>
 8001d56:	e1f7      	b.n	8002148 <__aeabi_dsub+0x500>
 8001d58:	077b      	lsls	r3, r7, #29
 8001d5a:	d100      	bne.n	8001d5e <__aeabi_dsub+0x116>
 8001d5c:	e377      	b.n	800244e <__aeabi_dsub+0x806>
 8001d5e:	230f      	movs	r3, #15
 8001d60:	0038      	movs	r0, r7
 8001d62:	403b      	ands	r3, r7
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d004      	beq.n	8001d72 <__aeabi_dsub+0x12a>
 8001d68:	1d38      	adds	r0, r7, #4
 8001d6a:	42b8      	cmp	r0, r7
 8001d6c:	41bf      	sbcs	r7, r7
 8001d6e:	427f      	negs	r7, r7
 8001d70:	19e4      	adds	r4, r4, r7
 8001d72:	0223      	lsls	r3, r4, #8
 8001d74:	d400      	bmi.n	8001d78 <__aeabi_dsub+0x130>
 8001d76:	e368      	b.n	800244a <__aeabi_dsub+0x802>
 8001d78:	4b8c      	ldr	r3, [pc, #560]	@ (8001fac <__aeabi_dsub+0x364>)
 8001d7a:	3501      	adds	r5, #1
 8001d7c:	429d      	cmp	r5, r3
 8001d7e:	d100      	bne.n	8001d82 <__aeabi_dsub+0x13a>
 8001d80:	e0f4      	b.n	8001f6c <__aeabi_dsub+0x324>
 8001d82:	4b8b      	ldr	r3, [pc, #556]	@ (8001fb0 <__aeabi_dsub+0x368>)
 8001d84:	056d      	lsls	r5, r5, #21
 8001d86:	401c      	ands	r4, r3
 8001d88:	0d6d      	lsrs	r5, r5, #21
 8001d8a:	0767      	lsls	r7, r4, #29
 8001d8c:	08c0      	lsrs	r0, r0, #3
 8001d8e:	0264      	lsls	r4, r4, #9
 8001d90:	4307      	orrs	r7, r0
 8001d92:	0b24      	lsrs	r4, r4, #12
 8001d94:	e0ec      	b.n	8001f70 <__aeabi_dsub+0x328>
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	dc00      	bgt.n	8001d9c <__aeabi_dsub+0x154>
 8001d9a:	e329      	b.n	80023f0 <__aeabi_dsub+0x7a8>
 8001d9c:	4649      	mov	r1, r9
 8001d9e:	2900      	cmp	r1, #0
 8001da0:	d000      	beq.n	8001da4 <__aeabi_dsub+0x15c>
 8001da2:	e0d6      	b.n	8001f52 <__aeabi_dsub+0x30a>
 8001da4:	4659      	mov	r1, fp
 8001da6:	4311      	orrs	r1, r2
 8001da8:	d100      	bne.n	8001dac <__aeabi_dsub+0x164>
 8001daa:	e12e      	b.n	800200a <__aeabi_dsub+0x3c2>
 8001dac:	1e59      	subs	r1, r3, #1
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d100      	bne.n	8001db4 <__aeabi_dsub+0x16c>
 8001db2:	e1e6      	b.n	8002182 <__aeabi_dsub+0x53a>
 8001db4:	42bb      	cmp	r3, r7
 8001db6:	d100      	bne.n	8001dba <__aeabi_dsub+0x172>
 8001db8:	e182      	b.n	80020c0 <__aeabi_dsub+0x478>
 8001dba:	2701      	movs	r7, #1
 8001dbc:	000b      	movs	r3, r1
 8001dbe:	2938      	cmp	r1, #56	@ 0x38
 8001dc0:	dc14      	bgt.n	8001dec <__aeabi_dsub+0x1a4>
 8001dc2:	2b1f      	cmp	r3, #31
 8001dc4:	dd00      	ble.n	8001dc8 <__aeabi_dsub+0x180>
 8001dc6:	e23c      	b.n	8002242 <__aeabi_dsub+0x5fa>
 8001dc8:	2720      	movs	r7, #32
 8001dca:	1af9      	subs	r1, r7, r3
 8001dcc:	468c      	mov	ip, r1
 8001dce:	4659      	mov	r1, fp
 8001dd0:	4667      	mov	r7, ip
 8001dd2:	40b9      	lsls	r1, r7
 8001dd4:	000f      	movs	r7, r1
 8001dd6:	0011      	movs	r1, r2
 8001dd8:	40d9      	lsrs	r1, r3
 8001dda:	430f      	orrs	r7, r1
 8001ddc:	4661      	mov	r1, ip
 8001dde:	408a      	lsls	r2, r1
 8001de0:	1e51      	subs	r1, r2, #1
 8001de2:	418a      	sbcs	r2, r1
 8001de4:	4659      	mov	r1, fp
 8001de6:	40d9      	lsrs	r1, r3
 8001de8:	4317      	orrs	r7, r2
 8001dea:	1864      	adds	r4, r4, r1
 8001dec:	183f      	adds	r7, r7, r0
 8001dee:	4287      	cmp	r7, r0
 8001df0:	4180      	sbcs	r0, r0
 8001df2:	4240      	negs	r0, r0
 8001df4:	1824      	adds	r4, r4, r0
 8001df6:	0223      	lsls	r3, r4, #8
 8001df8:	d400      	bmi.n	8001dfc <__aeabi_dsub+0x1b4>
 8001dfa:	e0c6      	b.n	8001f8a <__aeabi_dsub+0x342>
 8001dfc:	4b6b      	ldr	r3, [pc, #428]	@ (8001fac <__aeabi_dsub+0x364>)
 8001dfe:	3501      	adds	r5, #1
 8001e00:	429d      	cmp	r5, r3
 8001e02:	d100      	bne.n	8001e06 <__aeabi_dsub+0x1be>
 8001e04:	e0b2      	b.n	8001f6c <__aeabi_dsub+0x324>
 8001e06:	2101      	movs	r1, #1
 8001e08:	4b69      	ldr	r3, [pc, #420]	@ (8001fb0 <__aeabi_dsub+0x368>)
 8001e0a:	087a      	lsrs	r2, r7, #1
 8001e0c:	401c      	ands	r4, r3
 8001e0e:	4039      	ands	r1, r7
 8001e10:	430a      	orrs	r2, r1
 8001e12:	07e7      	lsls	r7, r4, #31
 8001e14:	4317      	orrs	r7, r2
 8001e16:	0864      	lsrs	r4, r4, #1
 8001e18:	e79e      	b.n	8001d58 <__aeabi_dsub+0x110>
 8001e1a:	4b66      	ldr	r3, [pc, #408]	@ (8001fb4 <__aeabi_dsub+0x36c>)
 8001e1c:	4311      	orrs	r1, r2
 8001e1e:	468a      	mov	sl, r1
 8001e20:	18eb      	adds	r3, r5, r3
 8001e22:	2900      	cmp	r1, #0
 8001e24:	d028      	beq.n	8001e78 <__aeabi_dsub+0x230>
 8001e26:	4566      	cmp	r6, ip
 8001e28:	d02c      	beq.n	8001e84 <__aeabi_dsub+0x23c>
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d05b      	beq.n	8001ee6 <__aeabi_dsub+0x29e>
 8001e2e:	2d00      	cmp	r5, #0
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x1ec>
 8001e32:	e12c      	b.n	800208e <__aeabi_dsub+0x446>
 8001e34:	465b      	mov	r3, fp
 8001e36:	4666      	mov	r6, ip
 8001e38:	075f      	lsls	r7, r3, #29
 8001e3a:	08d2      	lsrs	r2, r2, #3
 8001e3c:	4317      	orrs	r7, r2
 8001e3e:	08dd      	lsrs	r5, r3, #3
 8001e40:	003b      	movs	r3, r7
 8001e42:	432b      	orrs	r3, r5
 8001e44:	d100      	bne.n	8001e48 <__aeabi_dsub+0x200>
 8001e46:	e0e2      	b.n	800200e <__aeabi_dsub+0x3c6>
 8001e48:	2480      	movs	r4, #128	@ 0x80
 8001e4a:	0324      	lsls	r4, r4, #12
 8001e4c:	432c      	orrs	r4, r5
 8001e4e:	0324      	lsls	r4, r4, #12
 8001e50:	4d56      	ldr	r5, [pc, #344]	@ (8001fac <__aeabi_dsub+0x364>)
 8001e52:	0b24      	lsrs	r4, r4, #12
 8001e54:	e08c      	b.n	8001f70 <__aeabi_dsub+0x328>
 8001e56:	4659      	mov	r1, fp
 8001e58:	4311      	orrs	r1, r2
 8001e5a:	d100      	bne.n	8001e5e <__aeabi_dsub+0x216>
 8001e5c:	e0d5      	b.n	800200a <__aeabi_dsub+0x3c2>
 8001e5e:	1e59      	subs	r1, r3, #1
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d100      	bne.n	8001e66 <__aeabi_dsub+0x21e>
 8001e64:	e1b9      	b.n	80021da <__aeabi_dsub+0x592>
 8001e66:	42bb      	cmp	r3, r7
 8001e68:	d100      	bne.n	8001e6c <__aeabi_dsub+0x224>
 8001e6a:	e1b1      	b.n	80021d0 <__aeabi_dsub+0x588>
 8001e6c:	2701      	movs	r7, #1
 8001e6e:	000b      	movs	r3, r1
 8001e70:	2938      	cmp	r1, #56	@ 0x38
 8001e72:	dd00      	ble.n	8001e76 <__aeabi_dsub+0x22e>
 8001e74:	e740      	b.n	8001cf8 <__aeabi_dsub+0xb0>
 8001e76:	e72a      	b.n	8001cce <__aeabi_dsub+0x86>
 8001e78:	4661      	mov	r1, ip
 8001e7a:	2701      	movs	r7, #1
 8001e7c:	4079      	eors	r1, r7
 8001e7e:	468c      	mov	ip, r1
 8001e80:	4566      	cmp	r6, ip
 8001e82:	d1d2      	bne.n	8001e2a <__aeabi_dsub+0x1e2>
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d100      	bne.n	8001e8a <__aeabi_dsub+0x242>
 8001e88:	e0c5      	b.n	8002016 <__aeabi_dsub+0x3ce>
 8001e8a:	2d00      	cmp	r5, #0
 8001e8c:	d000      	beq.n	8001e90 <__aeabi_dsub+0x248>
 8001e8e:	e155      	b.n	800213c <__aeabi_dsub+0x4f4>
 8001e90:	464b      	mov	r3, r9
 8001e92:	0025      	movs	r5, r4
 8001e94:	4305      	orrs	r5, r0
 8001e96:	d100      	bne.n	8001e9a <__aeabi_dsub+0x252>
 8001e98:	e212      	b.n	80022c0 <__aeabi_dsub+0x678>
 8001e9a:	1e59      	subs	r1, r3, #1
 8001e9c:	468c      	mov	ip, r1
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x25c>
 8001ea2:	e249      	b.n	8002338 <__aeabi_dsub+0x6f0>
 8001ea4:	4d41      	ldr	r5, [pc, #260]	@ (8001fac <__aeabi_dsub+0x364>)
 8001ea6:	42ab      	cmp	r3, r5
 8001ea8:	d100      	bne.n	8001eac <__aeabi_dsub+0x264>
 8001eaa:	e28f      	b.n	80023cc <__aeabi_dsub+0x784>
 8001eac:	2701      	movs	r7, #1
 8001eae:	2938      	cmp	r1, #56	@ 0x38
 8001eb0:	dc11      	bgt.n	8001ed6 <__aeabi_dsub+0x28e>
 8001eb2:	4663      	mov	r3, ip
 8001eb4:	2b1f      	cmp	r3, #31
 8001eb6:	dd00      	ble.n	8001eba <__aeabi_dsub+0x272>
 8001eb8:	e25b      	b.n	8002372 <__aeabi_dsub+0x72a>
 8001eba:	4661      	mov	r1, ip
 8001ebc:	2320      	movs	r3, #32
 8001ebe:	0027      	movs	r7, r4
 8001ec0:	1a5b      	subs	r3, r3, r1
 8001ec2:	0005      	movs	r5, r0
 8001ec4:	4098      	lsls	r0, r3
 8001ec6:	409f      	lsls	r7, r3
 8001ec8:	40cd      	lsrs	r5, r1
 8001eca:	1e43      	subs	r3, r0, #1
 8001ecc:	4198      	sbcs	r0, r3
 8001ece:	40cc      	lsrs	r4, r1
 8001ed0:	432f      	orrs	r7, r5
 8001ed2:	4307      	orrs	r7, r0
 8001ed4:	44a3      	add	fp, r4
 8001ed6:	18bf      	adds	r7, r7, r2
 8001ed8:	4297      	cmp	r7, r2
 8001eda:	4192      	sbcs	r2, r2
 8001edc:	4252      	negs	r2, r2
 8001ede:	445a      	add	r2, fp
 8001ee0:	0014      	movs	r4, r2
 8001ee2:	464d      	mov	r5, r9
 8001ee4:	e787      	b.n	8001df6 <__aeabi_dsub+0x1ae>
 8001ee6:	4f34      	ldr	r7, [pc, #208]	@ (8001fb8 <__aeabi_dsub+0x370>)
 8001ee8:	1c6b      	adds	r3, r5, #1
 8001eea:	423b      	tst	r3, r7
 8001eec:	d000      	beq.n	8001ef0 <__aeabi_dsub+0x2a8>
 8001eee:	e0b6      	b.n	800205e <__aeabi_dsub+0x416>
 8001ef0:	4659      	mov	r1, fp
 8001ef2:	0023      	movs	r3, r4
 8001ef4:	4311      	orrs	r1, r2
 8001ef6:	000f      	movs	r7, r1
 8001ef8:	4303      	orrs	r3, r0
 8001efa:	2d00      	cmp	r5, #0
 8001efc:	d000      	beq.n	8001f00 <__aeabi_dsub+0x2b8>
 8001efe:	e126      	b.n	800214e <__aeabi_dsub+0x506>
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d100      	bne.n	8001f06 <__aeabi_dsub+0x2be>
 8001f04:	e1c0      	b.n	8002288 <__aeabi_dsub+0x640>
 8001f06:	2900      	cmp	r1, #0
 8001f08:	d100      	bne.n	8001f0c <__aeabi_dsub+0x2c4>
 8001f0a:	e0a1      	b.n	8002050 <__aeabi_dsub+0x408>
 8001f0c:	1a83      	subs	r3, r0, r2
 8001f0e:	4698      	mov	r8, r3
 8001f10:	465b      	mov	r3, fp
 8001f12:	4540      	cmp	r0, r8
 8001f14:	41ad      	sbcs	r5, r5
 8001f16:	1ae3      	subs	r3, r4, r3
 8001f18:	426d      	negs	r5, r5
 8001f1a:	1b5b      	subs	r3, r3, r5
 8001f1c:	2580      	movs	r5, #128	@ 0x80
 8001f1e:	042d      	lsls	r5, r5, #16
 8001f20:	422b      	tst	r3, r5
 8001f22:	d100      	bne.n	8001f26 <__aeabi_dsub+0x2de>
 8001f24:	e14b      	b.n	80021be <__aeabi_dsub+0x576>
 8001f26:	465b      	mov	r3, fp
 8001f28:	1a10      	subs	r0, r2, r0
 8001f2a:	4282      	cmp	r2, r0
 8001f2c:	4192      	sbcs	r2, r2
 8001f2e:	1b1c      	subs	r4, r3, r4
 8001f30:	0007      	movs	r7, r0
 8001f32:	2601      	movs	r6, #1
 8001f34:	4663      	mov	r3, ip
 8001f36:	4252      	negs	r2, r2
 8001f38:	1aa4      	subs	r4, r4, r2
 8001f3a:	4327      	orrs	r7, r4
 8001f3c:	401e      	ands	r6, r3
 8001f3e:	2f00      	cmp	r7, #0
 8001f40:	d100      	bne.n	8001f44 <__aeabi_dsub+0x2fc>
 8001f42:	e142      	b.n	80021ca <__aeabi_dsub+0x582>
 8001f44:	422c      	tst	r4, r5
 8001f46:	d100      	bne.n	8001f4a <__aeabi_dsub+0x302>
 8001f48:	e26d      	b.n	8002426 <__aeabi_dsub+0x7de>
 8001f4a:	4b19      	ldr	r3, [pc, #100]	@ (8001fb0 <__aeabi_dsub+0x368>)
 8001f4c:	2501      	movs	r5, #1
 8001f4e:	401c      	ands	r4, r3
 8001f50:	e71b      	b.n	8001d8a <__aeabi_dsub+0x142>
 8001f52:	42bd      	cmp	r5, r7
 8001f54:	d100      	bne.n	8001f58 <__aeabi_dsub+0x310>
 8001f56:	e13b      	b.n	80021d0 <__aeabi_dsub+0x588>
 8001f58:	2701      	movs	r7, #1
 8001f5a:	2b38      	cmp	r3, #56	@ 0x38
 8001f5c:	dd00      	ble.n	8001f60 <__aeabi_dsub+0x318>
 8001f5e:	e745      	b.n	8001dec <__aeabi_dsub+0x1a4>
 8001f60:	2780      	movs	r7, #128	@ 0x80
 8001f62:	4659      	mov	r1, fp
 8001f64:	043f      	lsls	r7, r7, #16
 8001f66:	4339      	orrs	r1, r7
 8001f68:	468b      	mov	fp, r1
 8001f6a:	e72a      	b.n	8001dc2 <__aeabi_dsub+0x17a>
 8001f6c:	2400      	movs	r4, #0
 8001f6e:	2700      	movs	r7, #0
 8001f70:	052d      	lsls	r5, r5, #20
 8001f72:	4325      	orrs	r5, r4
 8001f74:	07f6      	lsls	r6, r6, #31
 8001f76:	4335      	orrs	r5, r6
 8001f78:	0038      	movs	r0, r7
 8001f7a:	0029      	movs	r1, r5
 8001f7c:	b003      	add	sp, #12
 8001f7e:	bcf0      	pop	{r4, r5, r6, r7}
 8001f80:	46bb      	mov	fp, r7
 8001f82:	46b2      	mov	sl, r6
 8001f84:	46a9      	mov	r9, r5
 8001f86:	46a0      	mov	r8, r4
 8001f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f8a:	077b      	lsls	r3, r7, #29
 8001f8c:	d004      	beq.n	8001f98 <__aeabi_dsub+0x350>
 8001f8e:	230f      	movs	r3, #15
 8001f90:	403b      	ands	r3, r7
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d000      	beq.n	8001f98 <__aeabi_dsub+0x350>
 8001f96:	e6e7      	b.n	8001d68 <__aeabi_dsub+0x120>
 8001f98:	002b      	movs	r3, r5
 8001f9a:	08f8      	lsrs	r0, r7, #3
 8001f9c:	4a03      	ldr	r2, [pc, #12]	@ (8001fac <__aeabi_dsub+0x364>)
 8001f9e:	0767      	lsls	r7, r4, #29
 8001fa0:	4307      	orrs	r7, r0
 8001fa2:	08e5      	lsrs	r5, r4, #3
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d100      	bne.n	8001faa <__aeabi_dsub+0x362>
 8001fa8:	e74a      	b.n	8001e40 <__aeabi_dsub+0x1f8>
 8001faa:	e0a5      	b.n	80020f8 <__aeabi_dsub+0x4b0>
 8001fac:	000007ff 	.word	0x000007ff
 8001fb0:	ff7fffff 	.word	0xff7fffff
 8001fb4:	fffff801 	.word	0xfffff801
 8001fb8:	000007fe 	.word	0x000007fe
 8001fbc:	0038      	movs	r0, r7
 8001fbe:	f000 fafd 	bl	80025bc <__clzsi2>
 8001fc2:	0003      	movs	r3, r0
 8001fc4:	3318      	adds	r3, #24
 8001fc6:	2b1f      	cmp	r3, #31
 8001fc8:	dc00      	bgt.n	8001fcc <__aeabi_dsub+0x384>
 8001fca:	e6a7      	b.n	8001d1c <__aeabi_dsub+0xd4>
 8001fcc:	003a      	movs	r2, r7
 8001fce:	3808      	subs	r0, #8
 8001fd0:	4082      	lsls	r2, r0
 8001fd2:	429d      	cmp	r5, r3
 8001fd4:	dd00      	ble.n	8001fd8 <__aeabi_dsub+0x390>
 8001fd6:	e08a      	b.n	80020ee <__aeabi_dsub+0x4a6>
 8001fd8:	1b5b      	subs	r3, r3, r5
 8001fda:	1c58      	adds	r0, r3, #1
 8001fdc:	281f      	cmp	r0, #31
 8001fde:	dc00      	bgt.n	8001fe2 <__aeabi_dsub+0x39a>
 8001fe0:	e1d8      	b.n	8002394 <__aeabi_dsub+0x74c>
 8001fe2:	0017      	movs	r7, r2
 8001fe4:	3b1f      	subs	r3, #31
 8001fe6:	40df      	lsrs	r7, r3
 8001fe8:	2820      	cmp	r0, #32
 8001fea:	d005      	beq.n	8001ff8 <__aeabi_dsub+0x3b0>
 8001fec:	2340      	movs	r3, #64	@ 0x40
 8001fee:	1a1b      	subs	r3, r3, r0
 8001ff0:	409a      	lsls	r2, r3
 8001ff2:	1e53      	subs	r3, r2, #1
 8001ff4:	419a      	sbcs	r2, r3
 8001ff6:	4317      	orrs	r7, r2
 8001ff8:	2500      	movs	r5, #0
 8001ffa:	2f00      	cmp	r7, #0
 8001ffc:	d100      	bne.n	8002000 <__aeabi_dsub+0x3b8>
 8001ffe:	e0e5      	b.n	80021cc <__aeabi_dsub+0x584>
 8002000:	077b      	lsls	r3, r7, #29
 8002002:	d000      	beq.n	8002006 <__aeabi_dsub+0x3be>
 8002004:	e6ab      	b.n	8001d5e <__aeabi_dsub+0x116>
 8002006:	002c      	movs	r4, r5
 8002008:	e7c6      	b.n	8001f98 <__aeabi_dsub+0x350>
 800200a:	08c0      	lsrs	r0, r0, #3
 800200c:	e7c6      	b.n	8001f9c <__aeabi_dsub+0x354>
 800200e:	2700      	movs	r7, #0
 8002010:	2400      	movs	r4, #0
 8002012:	4dd1      	ldr	r5, [pc, #836]	@ (8002358 <__aeabi_dsub+0x710>)
 8002014:	e7ac      	b.n	8001f70 <__aeabi_dsub+0x328>
 8002016:	4fd1      	ldr	r7, [pc, #836]	@ (800235c <__aeabi_dsub+0x714>)
 8002018:	1c6b      	adds	r3, r5, #1
 800201a:	423b      	tst	r3, r7
 800201c:	d171      	bne.n	8002102 <__aeabi_dsub+0x4ba>
 800201e:	0023      	movs	r3, r4
 8002020:	4303      	orrs	r3, r0
 8002022:	2d00      	cmp	r5, #0
 8002024:	d000      	beq.n	8002028 <__aeabi_dsub+0x3e0>
 8002026:	e14e      	b.n	80022c6 <__aeabi_dsub+0x67e>
 8002028:	4657      	mov	r7, sl
 800202a:	2b00      	cmp	r3, #0
 800202c:	d100      	bne.n	8002030 <__aeabi_dsub+0x3e8>
 800202e:	e1b5      	b.n	800239c <__aeabi_dsub+0x754>
 8002030:	2f00      	cmp	r7, #0
 8002032:	d00d      	beq.n	8002050 <__aeabi_dsub+0x408>
 8002034:	1883      	adds	r3, r0, r2
 8002036:	4283      	cmp	r3, r0
 8002038:	4180      	sbcs	r0, r0
 800203a:	445c      	add	r4, fp
 800203c:	4240      	negs	r0, r0
 800203e:	1824      	adds	r4, r4, r0
 8002040:	0222      	lsls	r2, r4, #8
 8002042:	d500      	bpl.n	8002046 <__aeabi_dsub+0x3fe>
 8002044:	e1c8      	b.n	80023d8 <__aeabi_dsub+0x790>
 8002046:	001f      	movs	r7, r3
 8002048:	4698      	mov	r8, r3
 800204a:	4327      	orrs	r7, r4
 800204c:	d100      	bne.n	8002050 <__aeabi_dsub+0x408>
 800204e:	e0bc      	b.n	80021ca <__aeabi_dsub+0x582>
 8002050:	4643      	mov	r3, r8
 8002052:	0767      	lsls	r7, r4, #29
 8002054:	08db      	lsrs	r3, r3, #3
 8002056:	431f      	orrs	r7, r3
 8002058:	08e5      	lsrs	r5, r4, #3
 800205a:	2300      	movs	r3, #0
 800205c:	e04c      	b.n	80020f8 <__aeabi_dsub+0x4b0>
 800205e:	1a83      	subs	r3, r0, r2
 8002060:	4698      	mov	r8, r3
 8002062:	465b      	mov	r3, fp
 8002064:	4540      	cmp	r0, r8
 8002066:	41bf      	sbcs	r7, r7
 8002068:	1ae3      	subs	r3, r4, r3
 800206a:	427f      	negs	r7, r7
 800206c:	1bdb      	subs	r3, r3, r7
 800206e:	021f      	lsls	r7, r3, #8
 8002070:	d47c      	bmi.n	800216c <__aeabi_dsub+0x524>
 8002072:	4647      	mov	r7, r8
 8002074:	431f      	orrs	r7, r3
 8002076:	d100      	bne.n	800207a <__aeabi_dsub+0x432>
 8002078:	e0a6      	b.n	80021c8 <__aeabi_dsub+0x580>
 800207a:	001c      	movs	r4, r3
 800207c:	4647      	mov	r7, r8
 800207e:	e645      	b.n	8001d0c <__aeabi_dsub+0xc4>
 8002080:	4cb7      	ldr	r4, [pc, #732]	@ (8002360 <__aeabi_dsub+0x718>)
 8002082:	1aed      	subs	r5, r5, r3
 8002084:	4014      	ands	r4, r2
 8002086:	077b      	lsls	r3, r7, #29
 8002088:	d000      	beq.n	800208c <__aeabi_dsub+0x444>
 800208a:	e780      	b.n	8001f8e <__aeabi_dsub+0x346>
 800208c:	e784      	b.n	8001f98 <__aeabi_dsub+0x350>
 800208e:	464b      	mov	r3, r9
 8002090:	0025      	movs	r5, r4
 8002092:	4305      	orrs	r5, r0
 8002094:	d066      	beq.n	8002164 <__aeabi_dsub+0x51c>
 8002096:	1e5f      	subs	r7, r3, #1
 8002098:	2b01      	cmp	r3, #1
 800209a:	d100      	bne.n	800209e <__aeabi_dsub+0x456>
 800209c:	e0fc      	b.n	8002298 <__aeabi_dsub+0x650>
 800209e:	4dae      	ldr	r5, [pc, #696]	@ (8002358 <__aeabi_dsub+0x710>)
 80020a0:	42ab      	cmp	r3, r5
 80020a2:	d100      	bne.n	80020a6 <__aeabi_dsub+0x45e>
 80020a4:	e15e      	b.n	8002364 <__aeabi_dsub+0x71c>
 80020a6:	4666      	mov	r6, ip
 80020a8:	2f38      	cmp	r7, #56	@ 0x38
 80020aa:	dc00      	bgt.n	80020ae <__aeabi_dsub+0x466>
 80020ac:	e0b4      	b.n	8002218 <__aeabi_dsub+0x5d0>
 80020ae:	2001      	movs	r0, #1
 80020b0:	1a17      	subs	r7, r2, r0
 80020b2:	42ba      	cmp	r2, r7
 80020b4:	4192      	sbcs	r2, r2
 80020b6:	465b      	mov	r3, fp
 80020b8:	4252      	negs	r2, r2
 80020ba:	464d      	mov	r5, r9
 80020bc:	1a9c      	subs	r4, r3, r2
 80020be:	e620      	b.n	8001d02 <__aeabi_dsub+0xba>
 80020c0:	0767      	lsls	r7, r4, #29
 80020c2:	08c0      	lsrs	r0, r0, #3
 80020c4:	4307      	orrs	r7, r0
 80020c6:	08e5      	lsrs	r5, r4, #3
 80020c8:	e6ba      	b.n	8001e40 <__aeabi_dsub+0x1f8>
 80020ca:	001f      	movs	r7, r3
 80020cc:	4659      	mov	r1, fp
 80020ce:	3f20      	subs	r7, #32
 80020d0:	40f9      	lsrs	r1, r7
 80020d2:	000f      	movs	r7, r1
 80020d4:	2b20      	cmp	r3, #32
 80020d6:	d005      	beq.n	80020e4 <__aeabi_dsub+0x49c>
 80020d8:	2140      	movs	r1, #64	@ 0x40
 80020da:	1acb      	subs	r3, r1, r3
 80020dc:	4659      	mov	r1, fp
 80020de:	4099      	lsls	r1, r3
 80020e0:	430a      	orrs	r2, r1
 80020e2:	4692      	mov	sl, r2
 80020e4:	4653      	mov	r3, sl
 80020e6:	1e5a      	subs	r2, r3, #1
 80020e8:	4193      	sbcs	r3, r2
 80020ea:	431f      	orrs	r7, r3
 80020ec:	e604      	b.n	8001cf8 <__aeabi_dsub+0xb0>
 80020ee:	1aeb      	subs	r3, r5, r3
 80020f0:	4d9b      	ldr	r5, [pc, #620]	@ (8002360 <__aeabi_dsub+0x718>)
 80020f2:	4015      	ands	r5, r2
 80020f4:	076f      	lsls	r7, r5, #29
 80020f6:	08ed      	lsrs	r5, r5, #3
 80020f8:	032c      	lsls	r4, r5, #12
 80020fa:	055d      	lsls	r5, r3, #21
 80020fc:	0b24      	lsrs	r4, r4, #12
 80020fe:	0d6d      	lsrs	r5, r5, #21
 8002100:	e736      	b.n	8001f70 <__aeabi_dsub+0x328>
 8002102:	4d95      	ldr	r5, [pc, #596]	@ (8002358 <__aeabi_dsub+0x710>)
 8002104:	42ab      	cmp	r3, r5
 8002106:	d100      	bne.n	800210a <__aeabi_dsub+0x4c2>
 8002108:	e0d6      	b.n	80022b8 <__aeabi_dsub+0x670>
 800210a:	1882      	adds	r2, r0, r2
 800210c:	0021      	movs	r1, r4
 800210e:	4282      	cmp	r2, r0
 8002110:	4180      	sbcs	r0, r0
 8002112:	4459      	add	r1, fp
 8002114:	4240      	negs	r0, r0
 8002116:	1808      	adds	r0, r1, r0
 8002118:	07c7      	lsls	r7, r0, #31
 800211a:	0852      	lsrs	r2, r2, #1
 800211c:	4317      	orrs	r7, r2
 800211e:	0844      	lsrs	r4, r0, #1
 8002120:	0752      	lsls	r2, r2, #29
 8002122:	d400      	bmi.n	8002126 <__aeabi_dsub+0x4de>
 8002124:	e185      	b.n	8002432 <__aeabi_dsub+0x7ea>
 8002126:	220f      	movs	r2, #15
 8002128:	001d      	movs	r5, r3
 800212a:	403a      	ands	r2, r7
 800212c:	2a04      	cmp	r2, #4
 800212e:	d000      	beq.n	8002132 <__aeabi_dsub+0x4ea>
 8002130:	e61a      	b.n	8001d68 <__aeabi_dsub+0x120>
 8002132:	08ff      	lsrs	r7, r7, #3
 8002134:	0764      	lsls	r4, r4, #29
 8002136:	4327      	orrs	r7, r4
 8002138:	0905      	lsrs	r5, r0, #4
 800213a:	e7dd      	b.n	80020f8 <__aeabi_dsub+0x4b0>
 800213c:	465b      	mov	r3, fp
 800213e:	08d2      	lsrs	r2, r2, #3
 8002140:	075f      	lsls	r7, r3, #29
 8002142:	4317      	orrs	r7, r2
 8002144:	08dd      	lsrs	r5, r3, #3
 8002146:	e67b      	b.n	8001e40 <__aeabi_dsub+0x1f8>
 8002148:	2700      	movs	r7, #0
 800214a:	2400      	movs	r4, #0
 800214c:	e710      	b.n	8001f70 <__aeabi_dsub+0x328>
 800214e:	2b00      	cmp	r3, #0
 8002150:	d000      	beq.n	8002154 <__aeabi_dsub+0x50c>
 8002152:	e0d6      	b.n	8002302 <__aeabi_dsub+0x6ba>
 8002154:	2900      	cmp	r1, #0
 8002156:	d000      	beq.n	800215a <__aeabi_dsub+0x512>
 8002158:	e12f      	b.n	80023ba <__aeabi_dsub+0x772>
 800215a:	2480      	movs	r4, #128	@ 0x80
 800215c:	2600      	movs	r6, #0
 800215e:	4d7e      	ldr	r5, [pc, #504]	@ (8002358 <__aeabi_dsub+0x710>)
 8002160:	0324      	lsls	r4, r4, #12
 8002162:	e705      	b.n	8001f70 <__aeabi_dsub+0x328>
 8002164:	4666      	mov	r6, ip
 8002166:	465c      	mov	r4, fp
 8002168:	08d0      	lsrs	r0, r2, #3
 800216a:	e717      	b.n	8001f9c <__aeabi_dsub+0x354>
 800216c:	465b      	mov	r3, fp
 800216e:	1a17      	subs	r7, r2, r0
 8002170:	42ba      	cmp	r2, r7
 8002172:	4192      	sbcs	r2, r2
 8002174:	1b1c      	subs	r4, r3, r4
 8002176:	2601      	movs	r6, #1
 8002178:	4663      	mov	r3, ip
 800217a:	4252      	negs	r2, r2
 800217c:	1aa4      	subs	r4, r4, r2
 800217e:	401e      	ands	r6, r3
 8002180:	e5c4      	b.n	8001d0c <__aeabi_dsub+0xc4>
 8002182:	1883      	adds	r3, r0, r2
 8002184:	4283      	cmp	r3, r0
 8002186:	4180      	sbcs	r0, r0
 8002188:	445c      	add	r4, fp
 800218a:	4240      	negs	r0, r0
 800218c:	1825      	adds	r5, r4, r0
 800218e:	022a      	lsls	r2, r5, #8
 8002190:	d400      	bmi.n	8002194 <__aeabi_dsub+0x54c>
 8002192:	e0da      	b.n	800234a <__aeabi_dsub+0x702>
 8002194:	4a72      	ldr	r2, [pc, #456]	@ (8002360 <__aeabi_dsub+0x718>)
 8002196:	085b      	lsrs	r3, r3, #1
 8002198:	4015      	ands	r5, r2
 800219a:	07ea      	lsls	r2, r5, #31
 800219c:	431a      	orrs	r2, r3
 800219e:	0869      	lsrs	r1, r5, #1
 80021a0:	075b      	lsls	r3, r3, #29
 80021a2:	d400      	bmi.n	80021a6 <__aeabi_dsub+0x55e>
 80021a4:	e14a      	b.n	800243c <__aeabi_dsub+0x7f4>
 80021a6:	230f      	movs	r3, #15
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	d100      	bne.n	80021b0 <__aeabi_dsub+0x568>
 80021ae:	e0fc      	b.n	80023aa <__aeabi_dsub+0x762>
 80021b0:	1d17      	adds	r7, r2, #4
 80021b2:	4297      	cmp	r7, r2
 80021b4:	41a4      	sbcs	r4, r4
 80021b6:	4264      	negs	r4, r4
 80021b8:	2502      	movs	r5, #2
 80021ba:	1864      	adds	r4, r4, r1
 80021bc:	e6ec      	b.n	8001f98 <__aeabi_dsub+0x350>
 80021be:	4647      	mov	r7, r8
 80021c0:	001c      	movs	r4, r3
 80021c2:	431f      	orrs	r7, r3
 80021c4:	d000      	beq.n	80021c8 <__aeabi_dsub+0x580>
 80021c6:	e743      	b.n	8002050 <__aeabi_dsub+0x408>
 80021c8:	2600      	movs	r6, #0
 80021ca:	2500      	movs	r5, #0
 80021cc:	2400      	movs	r4, #0
 80021ce:	e6cf      	b.n	8001f70 <__aeabi_dsub+0x328>
 80021d0:	08c0      	lsrs	r0, r0, #3
 80021d2:	0767      	lsls	r7, r4, #29
 80021d4:	4307      	orrs	r7, r0
 80021d6:	08e5      	lsrs	r5, r4, #3
 80021d8:	e632      	b.n	8001e40 <__aeabi_dsub+0x1f8>
 80021da:	1a87      	subs	r7, r0, r2
 80021dc:	465b      	mov	r3, fp
 80021de:	42b8      	cmp	r0, r7
 80021e0:	4180      	sbcs	r0, r0
 80021e2:	1ae4      	subs	r4, r4, r3
 80021e4:	4240      	negs	r0, r0
 80021e6:	1a24      	subs	r4, r4, r0
 80021e8:	0223      	lsls	r3, r4, #8
 80021ea:	d428      	bmi.n	800223e <__aeabi_dsub+0x5f6>
 80021ec:	0763      	lsls	r3, r4, #29
 80021ee:	08ff      	lsrs	r7, r7, #3
 80021f0:	431f      	orrs	r7, r3
 80021f2:	08e5      	lsrs	r5, r4, #3
 80021f4:	2301      	movs	r3, #1
 80021f6:	e77f      	b.n	80020f8 <__aeabi_dsub+0x4b0>
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d100      	bne.n	80021fe <__aeabi_dsub+0x5b6>
 80021fc:	e673      	b.n	8001ee6 <__aeabi_dsub+0x29e>
 80021fe:	464b      	mov	r3, r9
 8002200:	1b5f      	subs	r7, r3, r5
 8002202:	003b      	movs	r3, r7
 8002204:	2d00      	cmp	r5, #0
 8002206:	d100      	bne.n	800220a <__aeabi_dsub+0x5c2>
 8002208:	e742      	b.n	8002090 <__aeabi_dsub+0x448>
 800220a:	2f38      	cmp	r7, #56	@ 0x38
 800220c:	dd00      	ble.n	8002210 <__aeabi_dsub+0x5c8>
 800220e:	e0ec      	b.n	80023ea <__aeabi_dsub+0x7a2>
 8002210:	2380      	movs	r3, #128	@ 0x80
 8002212:	000e      	movs	r6, r1
 8002214:	041b      	lsls	r3, r3, #16
 8002216:	431c      	orrs	r4, r3
 8002218:	2f1f      	cmp	r7, #31
 800221a:	dc25      	bgt.n	8002268 <__aeabi_dsub+0x620>
 800221c:	2520      	movs	r5, #32
 800221e:	0023      	movs	r3, r4
 8002220:	1bed      	subs	r5, r5, r7
 8002222:	0001      	movs	r1, r0
 8002224:	40a8      	lsls	r0, r5
 8002226:	40ab      	lsls	r3, r5
 8002228:	40f9      	lsrs	r1, r7
 800222a:	1e45      	subs	r5, r0, #1
 800222c:	41a8      	sbcs	r0, r5
 800222e:	430b      	orrs	r3, r1
 8002230:	40fc      	lsrs	r4, r7
 8002232:	4318      	orrs	r0, r3
 8002234:	465b      	mov	r3, fp
 8002236:	1b1b      	subs	r3, r3, r4
 8002238:	469b      	mov	fp, r3
 800223a:	e739      	b.n	80020b0 <__aeabi_dsub+0x468>
 800223c:	4666      	mov	r6, ip
 800223e:	2501      	movs	r5, #1
 8002240:	e562      	b.n	8001d08 <__aeabi_dsub+0xc0>
 8002242:	001f      	movs	r7, r3
 8002244:	4659      	mov	r1, fp
 8002246:	3f20      	subs	r7, #32
 8002248:	40f9      	lsrs	r1, r7
 800224a:	468c      	mov	ip, r1
 800224c:	2b20      	cmp	r3, #32
 800224e:	d005      	beq.n	800225c <__aeabi_dsub+0x614>
 8002250:	2740      	movs	r7, #64	@ 0x40
 8002252:	4659      	mov	r1, fp
 8002254:	1afb      	subs	r3, r7, r3
 8002256:	4099      	lsls	r1, r3
 8002258:	430a      	orrs	r2, r1
 800225a:	4692      	mov	sl, r2
 800225c:	4657      	mov	r7, sl
 800225e:	1e7b      	subs	r3, r7, #1
 8002260:	419f      	sbcs	r7, r3
 8002262:	4663      	mov	r3, ip
 8002264:	431f      	orrs	r7, r3
 8002266:	e5c1      	b.n	8001dec <__aeabi_dsub+0x1a4>
 8002268:	003b      	movs	r3, r7
 800226a:	0025      	movs	r5, r4
 800226c:	3b20      	subs	r3, #32
 800226e:	40dd      	lsrs	r5, r3
 8002270:	2f20      	cmp	r7, #32
 8002272:	d004      	beq.n	800227e <__aeabi_dsub+0x636>
 8002274:	2340      	movs	r3, #64	@ 0x40
 8002276:	1bdb      	subs	r3, r3, r7
 8002278:	409c      	lsls	r4, r3
 800227a:	4320      	orrs	r0, r4
 800227c:	4680      	mov	r8, r0
 800227e:	4640      	mov	r0, r8
 8002280:	1e43      	subs	r3, r0, #1
 8002282:	4198      	sbcs	r0, r3
 8002284:	4328      	orrs	r0, r5
 8002286:	e713      	b.n	80020b0 <__aeabi_dsub+0x468>
 8002288:	2900      	cmp	r1, #0
 800228a:	d09d      	beq.n	80021c8 <__aeabi_dsub+0x580>
 800228c:	2601      	movs	r6, #1
 800228e:	4663      	mov	r3, ip
 8002290:	465c      	mov	r4, fp
 8002292:	4690      	mov	r8, r2
 8002294:	401e      	ands	r6, r3
 8002296:	e6db      	b.n	8002050 <__aeabi_dsub+0x408>
 8002298:	1a17      	subs	r7, r2, r0
 800229a:	465b      	mov	r3, fp
 800229c:	42ba      	cmp	r2, r7
 800229e:	4192      	sbcs	r2, r2
 80022a0:	1b1c      	subs	r4, r3, r4
 80022a2:	4252      	negs	r2, r2
 80022a4:	1aa4      	subs	r4, r4, r2
 80022a6:	0223      	lsls	r3, r4, #8
 80022a8:	d4c8      	bmi.n	800223c <__aeabi_dsub+0x5f4>
 80022aa:	0763      	lsls	r3, r4, #29
 80022ac:	08ff      	lsrs	r7, r7, #3
 80022ae:	431f      	orrs	r7, r3
 80022b0:	4666      	mov	r6, ip
 80022b2:	2301      	movs	r3, #1
 80022b4:	08e5      	lsrs	r5, r4, #3
 80022b6:	e71f      	b.n	80020f8 <__aeabi_dsub+0x4b0>
 80022b8:	001d      	movs	r5, r3
 80022ba:	2400      	movs	r4, #0
 80022bc:	2700      	movs	r7, #0
 80022be:	e657      	b.n	8001f70 <__aeabi_dsub+0x328>
 80022c0:	465c      	mov	r4, fp
 80022c2:	08d0      	lsrs	r0, r2, #3
 80022c4:	e66a      	b.n	8001f9c <__aeabi_dsub+0x354>
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d100      	bne.n	80022cc <__aeabi_dsub+0x684>
 80022ca:	e737      	b.n	800213c <__aeabi_dsub+0x4f4>
 80022cc:	4653      	mov	r3, sl
 80022ce:	08c0      	lsrs	r0, r0, #3
 80022d0:	0767      	lsls	r7, r4, #29
 80022d2:	4307      	orrs	r7, r0
 80022d4:	08e5      	lsrs	r5, r4, #3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d100      	bne.n	80022dc <__aeabi_dsub+0x694>
 80022da:	e5b1      	b.n	8001e40 <__aeabi_dsub+0x1f8>
 80022dc:	2380      	movs	r3, #128	@ 0x80
 80022de:	031b      	lsls	r3, r3, #12
 80022e0:	421d      	tst	r5, r3
 80022e2:	d008      	beq.n	80022f6 <__aeabi_dsub+0x6ae>
 80022e4:	4659      	mov	r1, fp
 80022e6:	08c8      	lsrs	r0, r1, #3
 80022e8:	4218      	tst	r0, r3
 80022ea:	d104      	bne.n	80022f6 <__aeabi_dsub+0x6ae>
 80022ec:	08d2      	lsrs	r2, r2, #3
 80022ee:	0749      	lsls	r1, r1, #29
 80022f0:	430a      	orrs	r2, r1
 80022f2:	0017      	movs	r7, r2
 80022f4:	0005      	movs	r5, r0
 80022f6:	0f7b      	lsrs	r3, r7, #29
 80022f8:	00ff      	lsls	r7, r7, #3
 80022fa:	08ff      	lsrs	r7, r7, #3
 80022fc:	075b      	lsls	r3, r3, #29
 80022fe:	431f      	orrs	r7, r3
 8002300:	e59e      	b.n	8001e40 <__aeabi_dsub+0x1f8>
 8002302:	08c0      	lsrs	r0, r0, #3
 8002304:	0763      	lsls	r3, r4, #29
 8002306:	4318      	orrs	r0, r3
 8002308:	08e5      	lsrs	r5, r4, #3
 800230a:	2900      	cmp	r1, #0
 800230c:	d053      	beq.n	80023b6 <__aeabi_dsub+0x76e>
 800230e:	2380      	movs	r3, #128	@ 0x80
 8002310:	031b      	lsls	r3, r3, #12
 8002312:	421d      	tst	r5, r3
 8002314:	d00a      	beq.n	800232c <__aeabi_dsub+0x6e4>
 8002316:	4659      	mov	r1, fp
 8002318:	08cc      	lsrs	r4, r1, #3
 800231a:	421c      	tst	r4, r3
 800231c:	d106      	bne.n	800232c <__aeabi_dsub+0x6e4>
 800231e:	2601      	movs	r6, #1
 8002320:	4663      	mov	r3, ip
 8002322:	0025      	movs	r5, r4
 8002324:	08d0      	lsrs	r0, r2, #3
 8002326:	0749      	lsls	r1, r1, #29
 8002328:	4308      	orrs	r0, r1
 800232a:	401e      	ands	r6, r3
 800232c:	0f47      	lsrs	r7, r0, #29
 800232e:	00c0      	lsls	r0, r0, #3
 8002330:	08c0      	lsrs	r0, r0, #3
 8002332:	077f      	lsls	r7, r7, #29
 8002334:	4307      	orrs	r7, r0
 8002336:	e583      	b.n	8001e40 <__aeabi_dsub+0x1f8>
 8002338:	1883      	adds	r3, r0, r2
 800233a:	4293      	cmp	r3, r2
 800233c:	4192      	sbcs	r2, r2
 800233e:	445c      	add	r4, fp
 8002340:	4252      	negs	r2, r2
 8002342:	18a5      	adds	r5, r4, r2
 8002344:	022a      	lsls	r2, r5, #8
 8002346:	d500      	bpl.n	800234a <__aeabi_dsub+0x702>
 8002348:	e724      	b.n	8002194 <__aeabi_dsub+0x54c>
 800234a:	076f      	lsls	r7, r5, #29
 800234c:	08db      	lsrs	r3, r3, #3
 800234e:	431f      	orrs	r7, r3
 8002350:	08ed      	lsrs	r5, r5, #3
 8002352:	2301      	movs	r3, #1
 8002354:	e6d0      	b.n	80020f8 <__aeabi_dsub+0x4b0>
 8002356:	46c0      	nop			@ (mov r8, r8)
 8002358:	000007ff 	.word	0x000007ff
 800235c:	000007fe 	.word	0x000007fe
 8002360:	ff7fffff 	.word	0xff7fffff
 8002364:	465b      	mov	r3, fp
 8002366:	08d2      	lsrs	r2, r2, #3
 8002368:	075f      	lsls	r7, r3, #29
 800236a:	4666      	mov	r6, ip
 800236c:	4317      	orrs	r7, r2
 800236e:	08dd      	lsrs	r5, r3, #3
 8002370:	e566      	b.n	8001e40 <__aeabi_dsub+0x1f8>
 8002372:	0025      	movs	r5, r4
 8002374:	3b20      	subs	r3, #32
 8002376:	40dd      	lsrs	r5, r3
 8002378:	4663      	mov	r3, ip
 800237a:	2b20      	cmp	r3, #32
 800237c:	d005      	beq.n	800238a <__aeabi_dsub+0x742>
 800237e:	2340      	movs	r3, #64	@ 0x40
 8002380:	4661      	mov	r1, ip
 8002382:	1a5b      	subs	r3, r3, r1
 8002384:	409c      	lsls	r4, r3
 8002386:	4320      	orrs	r0, r4
 8002388:	4680      	mov	r8, r0
 800238a:	4647      	mov	r7, r8
 800238c:	1e7b      	subs	r3, r7, #1
 800238e:	419f      	sbcs	r7, r3
 8002390:	432f      	orrs	r7, r5
 8002392:	e5a0      	b.n	8001ed6 <__aeabi_dsub+0x28e>
 8002394:	2120      	movs	r1, #32
 8002396:	2700      	movs	r7, #0
 8002398:	1a09      	subs	r1, r1, r0
 800239a:	e4d2      	b.n	8001d42 <__aeabi_dsub+0xfa>
 800239c:	2f00      	cmp	r7, #0
 800239e:	d100      	bne.n	80023a2 <__aeabi_dsub+0x75a>
 80023a0:	e713      	b.n	80021ca <__aeabi_dsub+0x582>
 80023a2:	465c      	mov	r4, fp
 80023a4:	0017      	movs	r7, r2
 80023a6:	2500      	movs	r5, #0
 80023a8:	e5f6      	b.n	8001f98 <__aeabi_dsub+0x350>
 80023aa:	08d7      	lsrs	r7, r2, #3
 80023ac:	0749      	lsls	r1, r1, #29
 80023ae:	2302      	movs	r3, #2
 80023b0:	430f      	orrs	r7, r1
 80023b2:	092d      	lsrs	r5, r5, #4
 80023b4:	e6a0      	b.n	80020f8 <__aeabi_dsub+0x4b0>
 80023b6:	0007      	movs	r7, r0
 80023b8:	e542      	b.n	8001e40 <__aeabi_dsub+0x1f8>
 80023ba:	465b      	mov	r3, fp
 80023bc:	2601      	movs	r6, #1
 80023be:	075f      	lsls	r7, r3, #29
 80023c0:	08dd      	lsrs	r5, r3, #3
 80023c2:	4663      	mov	r3, ip
 80023c4:	08d2      	lsrs	r2, r2, #3
 80023c6:	4317      	orrs	r7, r2
 80023c8:	401e      	ands	r6, r3
 80023ca:	e539      	b.n	8001e40 <__aeabi_dsub+0x1f8>
 80023cc:	465b      	mov	r3, fp
 80023ce:	08d2      	lsrs	r2, r2, #3
 80023d0:	075f      	lsls	r7, r3, #29
 80023d2:	4317      	orrs	r7, r2
 80023d4:	08dd      	lsrs	r5, r3, #3
 80023d6:	e533      	b.n	8001e40 <__aeabi_dsub+0x1f8>
 80023d8:	4a1e      	ldr	r2, [pc, #120]	@ (8002454 <__aeabi_dsub+0x80c>)
 80023da:	08db      	lsrs	r3, r3, #3
 80023dc:	4022      	ands	r2, r4
 80023de:	0757      	lsls	r7, r2, #29
 80023e0:	0252      	lsls	r2, r2, #9
 80023e2:	2501      	movs	r5, #1
 80023e4:	431f      	orrs	r7, r3
 80023e6:	0b14      	lsrs	r4, r2, #12
 80023e8:	e5c2      	b.n	8001f70 <__aeabi_dsub+0x328>
 80023ea:	000e      	movs	r6, r1
 80023ec:	2001      	movs	r0, #1
 80023ee:	e65f      	b.n	80020b0 <__aeabi_dsub+0x468>
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00d      	beq.n	8002410 <__aeabi_dsub+0x7c8>
 80023f4:	464b      	mov	r3, r9
 80023f6:	1b5b      	subs	r3, r3, r5
 80023f8:	469c      	mov	ip, r3
 80023fa:	2d00      	cmp	r5, #0
 80023fc:	d100      	bne.n	8002400 <__aeabi_dsub+0x7b8>
 80023fe:	e548      	b.n	8001e92 <__aeabi_dsub+0x24a>
 8002400:	2701      	movs	r7, #1
 8002402:	2b38      	cmp	r3, #56	@ 0x38
 8002404:	dd00      	ble.n	8002408 <__aeabi_dsub+0x7c0>
 8002406:	e566      	b.n	8001ed6 <__aeabi_dsub+0x28e>
 8002408:	2380      	movs	r3, #128	@ 0x80
 800240a:	041b      	lsls	r3, r3, #16
 800240c:	431c      	orrs	r4, r3
 800240e:	e550      	b.n	8001eb2 <__aeabi_dsub+0x26a>
 8002410:	1c6b      	adds	r3, r5, #1
 8002412:	4d11      	ldr	r5, [pc, #68]	@ (8002458 <__aeabi_dsub+0x810>)
 8002414:	422b      	tst	r3, r5
 8002416:	d000      	beq.n	800241a <__aeabi_dsub+0x7d2>
 8002418:	e673      	b.n	8002102 <__aeabi_dsub+0x4ba>
 800241a:	4659      	mov	r1, fp
 800241c:	0023      	movs	r3, r4
 800241e:	4311      	orrs	r1, r2
 8002420:	468a      	mov	sl, r1
 8002422:	4303      	orrs	r3, r0
 8002424:	e600      	b.n	8002028 <__aeabi_dsub+0x3e0>
 8002426:	0767      	lsls	r7, r4, #29
 8002428:	08c0      	lsrs	r0, r0, #3
 800242a:	2300      	movs	r3, #0
 800242c:	4307      	orrs	r7, r0
 800242e:	08e5      	lsrs	r5, r4, #3
 8002430:	e662      	b.n	80020f8 <__aeabi_dsub+0x4b0>
 8002432:	0764      	lsls	r4, r4, #29
 8002434:	08ff      	lsrs	r7, r7, #3
 8002436:	4327      	orrs	r7, r4
 8002438:	0905      	lsrs	r5, r0, #4
 800243a:	e65d      	b.n	80020f8 <__aeabi_dsub+0x4b0>
 800243c:	08d2      	lsrs	r2, r2, #3
 800243e:	0749      	lsls	r1, r1, #29
 8002440:	4311      	orrs	r1, r2
 8002442:	000f      	movs	r7, r1
 8002444:	2302      	movs	r3, #2
 8002446:	092d      	lsrs	r5, r5, #4
 8002448:	e656      	b.n	80020f8 <__aeabi_dsub+0x4b0>
 800244a:	0007      	movs	r7, r0
 800244c:	e5a4      	b.n	8001f98 <__aeabi_dsub+0x350>
 800244e:	0038      	movs	r0, r7
 8002450:	e48f      	b.n	8001d72 <__aeabi_dsub+0x12a>
 8002452:	46c0      	nop			@ (mov r8, r8)
 8002454:	ff7fffff 	.word	0xff7fffff
 8002458:	000007fe 	.word	0x000007fe

0800245c <__aeabi_dcmpun>:
 800245c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800245e:	46c6      	mov	lr, r8
 8002460:	031e      	lsls	r6, r3, #12
 8002462:	0b36      	lsrs	r6, r6, #12
 8002464:	46b0      	mov	r8, r6
 8002466:	4e0d      	ldr	r6, [pc, #52]	@ (800249c <__aeabi_dcmpun+0x40>)
 8002468:	030c      	lsls	r4, r1, #12
 800246a:	004d      	lsls	r5, r1, #1
 800246c:	005f      	lsls	r7, r3, #1
 800246e:	b500      	push	{lr}
 8002470:	0b24      	lsrs	r4, r4, #12
 8002472:	0d6d      	lsrs	r5, r5, #21
 8002474:	0d7f      	lsrs	r7, r7, #21
 8002476:	42b5      	cmp	r5, r6
 8002478:	d00b      	beq.n	8002492 <__aeabi_dcmpun+0x36>
 800247a:	4908      	ldr	r1, [pc, #32]	@ (800249c <__aeabi_dcmpun+0x40>)
 800247c:	2000      	movs	r0, #0
 800247e:	428f      	cmp	r7, r1
 8002480:	d104      	bne.n	800248c <__aeabi_dcmpun+0x30>
 8002482:	4646      	mov	r6, r8
 8002484:	4316      	orrs	r6, r2
 8002486:	0030      	movs	r0, r6
 8002488:	1e43      	subs	r3, r0, #1
 800248a:	4198      	sbcs	r0, r3
 800248c:	bc80      	pop	{r7}
 800248e:	46b8      	mov	r8, r7
 8002490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002492:	4304      	orrs	r4, r0
 8002494:	2001      	movs	r0, #1
 8002496:	2c00      	cmp	r4, #0
 8002498:	d1f8      	bne.n	800248c <__aeabi_dcmpun+0x30>
 800249a:	e7ee      	b.n	800247a <__aeabi_dcmpun+0x1e>
 800249c:	000007ff 	.word	0x000007ff

080024a0 <__aeabi_d2iz>:
 80024a0:	000b      	movs	r3, r1
 80024a2:	0002      	movs	r2, r0
 80024a4:	b570      	push	{r4, r5, r6, lr}
 80024a6:	4d16      	ldr	r5, [pc, #88]	@ (8002500 <__aeabi_d2iz+0x60>)
 80024a8:	030c      	lsls	r4, r1, #12
 80024aa:	b082      	sub	sp, #8
 80024ac:	0049      	lsls	r1, r1, #1
 80024ae:	2000      	movs	r0, #0
 80024b0:	9200      	str	r2, [sp, #0]
 80024b2:	9301      	str	r3, [sp, #4]
 80024b4:	0b24      	lsrs	r4, r4, #12
 80024b6:	0d49      	lsrs	r1, r1, #21
 80024b8:	0fde      	lsrs	r6, r3, #31
 80024ba:	42a9      	cmp	r1, r5
 80024bc:	dd04      	ble.n	80024c8 <__aeabi_d2iz+0x28>
 80024be:	4811      	ldr	r0, [pc, #68]	@ (8002504 <__aeabi_d2iz+0x64>)
 80024c0:	4281      	cmp	r1, r0
 80024c2:	dd03      	ble.n	80024cc <__aeabi_d2iz+0x2c>
 80024c4:	4b10      	ldr	r3, [pc, #64]	@ (8002508 <__aeabi_d2iz+0x68>)
 80024c6:	18f0      	adds	r0, r6, r3
 80024c8:	b002      	add	sp, #8
 80024ca:	bd70      	pop	{r4, r5, r6, pc}
 80024cc:	2080      	movs	r0, #128	@ 0x80
 80024ce:	0340      	lsls	r0, r0, #13
 80024d0:	4320      	orrs	r0, r4
 80024d2:	4c0e      	ldr	r4, [pc, #56]	@ (800250c <__aeabi_d2iz+0x6c>)
 80024d4:	1a64      	subs	r4, r4, r1
 80024d6:	2c1f      	cmp	r4, #31
 80024d8:	dd08      	ble.n	80024ec <__aeabi_d2iz+0x4c>
 80024da:	4b0d      	ldr	r3, [pc, #52]	@ (8002510 <__aeabi_d2iz+0x70>)
 80024dc:	1a5b      	subs	r3, r3, r1
 80024de:	40d8      	lsrs	r0, r3
 80024e0:	0003      	movs	r3, r0
 80024e2:	4258      	negs	r0, r3
 80024e4:	2e00      	cmp	r6, #0
 80024e6:	d1ef      	bne.n	80024c8 <__aeabi_d2iz+0x28>
 80024e8:	0018      	movs	r0, r3
 80024ea:	e7ed      	b.n	80024c8 <__aeabi_d2iz+0x28>
 80024ec:	4b09      	ldr	r3, [pc, #36]	@ (8002514 <__aeabi_d2iz+0x74>)
 80024ee:	9a00      	ldr	r2, [sp, #0]
 80024f0:	469c      	mov	ip, r3
 80024f2:	0003      	movs	r3, r0
 80024f4:	4461      	add	r1, ip
 80024f6:	408b      	lsls	r3, r1
 80024f8:	40e2      	lsrs	r2, r4
 80024fa:	4313      	orrs	r3, r2
 80024fc:	e7f1      	b.n	80024e2 <__aeabi_d2iz+0x42>
 80024fe:	46c0      	nop			@ (mov r8, r8)
 8002500:	000003fe 	.word	0x000003fe
 8002504:	0000041d 	.word	0x0000041d
 8002508:	7fffffff 	.word	0x7fffffff
 800250c:	00000433 	.word	0x00000433
 8002510:	00000413 	.word	0x00000413
 8002514:	fffffbed 	.word	0xfffffbed

08002518 <__aeabi_i2d>:
 8002518:	b570      	push	{r4, r5, r6, lr}
 800251a:	2800      	cmp	r0, #0
 800251c:	d016      	beq.n	800254c <__aeabi_i2d+0x34>
 800251e:	17c3      	asrs	r3, r0, #31
 8002520:	18c5      	adds	r5, r0, r3
 8002522:	405d      	eors	r5, r3
 8002524:	0fc4      	lsrs	r4, r0, #31
 8002526:	0028      	movs	r0, r5
 8002528:	f000 f848 	bl	80025bc <__clzsi2>
 800252c:	4b10      	ldr	r3, [pc, #64]	@ (8002570 <__aeabi_i2d+0x58>)
 800252e:	1a1b      	subs	r3, r3, r0
 8002530:	055b      	lsls	r3, r3, #21
 8002532:	0d5b      	lsrs	r3, r3, #21
 8002534:	280a      	cmp	r0, #10
 8002536:	dc14      	bgt.n	8002562 <__aeabi_i2d+0x4a>
 8002538:	0002      	movs	r2, r0
 800253a:	002e      	movs	r6, r5
 800253c:	3215      	adds	r2, #21
 800253e:	4096      	lsls	r6, r2
 8002540:	220b      	movs	r2, #11
 8002542:	1a12      	subs	r2, r2, r0
 8002544:	40d5      	lsrs	r5, r2
 8002546:	032d      	lsls	r5, r5, #12
 8002548:	0b2d      	lsrs	r5, r5, #12
 800254a:	e003      	b.n	8002554 <__aeabi_i2d+0x3c>
 800254c:	2400      	movs	r4, #0
 800254e:	2300      	movs	r3, #0
 8002550:	2500      	movs	r5, #0
 8002552:	2600      	movs	r6, #0
 8002554:	051b      	lsls	r3, r3, #20
 8002556:	432b      	orrs	r3, r5
 8002558:	07e4      	lsls	r4, r4, #31
 800255a:	4323      	orrs	r3, r4
 800255c:	0030      	movs	r0, r6
 800255e:	0019      	movs	r1, r3
 8002560:	bd70      	pop	{r4, r5, r6, pc}
 8002562:	380b      	subs	r0, #11
 8002564:	4085      	lsls	r5, r0
 8002566:	032d      	lsls	r5, r5, #12
 8002568:	2600      	movs	r6, #0
 800256a:	0b2d      	lsrs	r5, r5, #12
 800256c:	e7f2      	b.n	8002554 <__aeabi_i2d+0x3c>
 800256e:	46c0      	nop			@ (mov r8, r8)
 8002570:	0000041e 	.word	0x0000041e

08002574 <__aeabi_ui2d>:
 8002574:	b510      	push	{r4, lr}
 8002576:	1e04      	subs	r4, r0, #0
 8002578:	d010      	beq.n	800259c <__aeabi_ui2d+0x28>
 800257a:	f000 f81f 	bl	80025bc <__clzsi2>
 800257e:	4b0e      	ldr	r3, [pc, #56]	@ (80025b8 <__aeabi_ui2d+0x44>)
 8002580:	1a1b      	subs	r3, r3, r0
 8002582:	055b      	lsls	r3, r3, #21
 8002584:	0d5b      	lsrs	r3, r3, #21
 8002586:	280a      	cmp	r0, #10
 8002588:	dc0f      	bgt.n	80025aa <__aeabi_ui2d+0x36>
 800258a:	220b      	movs	r2, #11
 800258c:	0021      	movs	r1, r4
 800258e:	1a12      	subs	r2, r2, r0
 8002590:	40d1      	lsrs	r1, r2
 8002592:	3015      	adds	r0, #21
 8002594:	030a      	lsls	r2, r1, #12
 8002596:	4084      	lsls	r4, r0
 8002598:	0b12      	lsrs	r2, r2, #12
 800259a:	e001      	b.n	80025a0 <__aeabi_ui2d+0x2c>
 800259c:	2300      	movs	r3, #0
 800259e:	2200      	movs	r2, #0
 80025a0:	051b      	lsls	r3, r3, #20
 80025a2:	4313      	orrs	r3, r2
 80025a4:	0020      	movs	r0, r4
 80025a6:	0019      	movs	r1, r3
 80025a8:	bd10      	pop	{r4, pc}
 80025aa:	0022      	movs	r2, r4
 80025ac:	380b      	subs	r0, #11
 80025ae:	4082      	lsls	r2, r0
 80025b0:	0312      	lsls	r2, r2, #12
 80025b2:	2400      	movs	r4, #0
 80025b4:	0b12      	lsrs	r2, r2, #12
 80025b6:	e7f3      	b.n	80025a0 <__aeabi_ui2d+0x2c>
 80025b8:	0000041e 	.word	0x0000041e

080025bc <__clzsi2>:
 80025bc:	211c      	movs	r1, #28
 80025be:	2301      	movs	r3, #1
 80025c0:	041b      	lsls	r3, r3, #16
 80025c2:	4298      	cmp	r0, r3
 80025c4:	d301      	bcc.n	80025ca <__clzsi2+0xe>
 80025c6:	0c00      	lsrs	r0, r0, #16
 80025c8:	3910      	subs	r1, #16
 80025ca:	0a1b      	lsrs	r3, r3, #8
 80025cc:	4298      	cmp	r0, r3
 80025ce:	d301      	bcc.n	80025d4 <__clzsi2+0x18>
 80025d0:	0a00      	lsrs	r0, r0, #8
 80025d2:	3908      	subs	r1, #8
 80025d4:	091b      	lsrs	r3, r3, #4
 80025d6:	4298      	cmp	r0, r3
 80025d8:	d301      	bcc.n	80025de <__clzsi2+0x22>
 80025da:	0900      	lsrs	r0, r0, #4
 80025dc:	3904      	subs	r1, #4
 80025de:	a202      	add	r2, pc, #8	@ (adr r2, 80025e8 <__clzsi2+0x2c>)
 80025e0:	5c10      	ldrb	r0, [r2, r0]
 80025e2:	1840      	adds	r0, r0, r1
 80025e4:	4770      	bx	lr
 80025e6:	46c0      	nop			@ (mov r8, r8)
 80025e8:	02020304 	.word	0x02020304
 80025ec:	01010101 	.word	0x01010101
	...

080025f8 <__clzdi2>:
 80025f8:	b510      	push	{r4, lr}
 80025fa:	2900      	cmp	r1, #0
 80025fc:	d103      	bne.n	8002606 <__clzdi2+0xe>
 80025fe:	f7ff ffdd 	bl	80025bc <__clzsi2>
 8002602:	3020      	adds	r0, #32
 8002604:	e002      	b.n	800260c <__clzdi2+0x14>
 8002606:	0008      	movs	r0, r1
 8002608:	f7ff ffd8 	bl	80025bc <__clzsi2>
 800260c:	bd10      	pop	{r4, pc}
 800260e:	46c0      	nop			@ (mov r8, r8)

08002610 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002610:	b590      	push	{r4, r7, lr}
 8002612:	b08b      	sub	sp, #44	@ 0x2c
 8002614:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002616:	2414      	movs	r4, #20
 8002618:	193b      	adds	r3, r7, r4
 800261a:	0018      	movs	r0, r3
 800261c:	2314      	movs	r3, #20
 800261e:	001a      	movs	r2, r3
 8002620:	2100      	movs	r1, #0
 8002622:	f004 fc4b 	bl	8006ebc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002626:	4b5e      	ldr	r3, [pc, #376]	@ (80027a0 <MX_GPIO_Init+0x190>)
 8002628:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800262a:	4b5d      	ldr	r3, [pc, #372]	@ (80027a0 <MX_GPIO_Init+0x190>)
 800262c:	2104      	movs	r1, #4
 800262e:	430a      	orrs	r2, r1
 8002630:	635a      	str	r2, [r3, #52]	@ 0x34
 8002632:	4b5b      	ldr	r3, [pc, #364]	@ (80027a0 <MX_GPIO_Init+0x190>)
 8002634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002636:	2204      	movs	r2, #4
 8002638:	4013      	ands	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
 800263c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800263e:	4b58      	ldr	r3, [pc, #352]	@ (80027a0 <MX_GPIO_Init+0x190>)
 8002640:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002642:	4b57      	ldr	r3, [pc, #348]	@ (80027a0 <MX_GPIO_Init+0x190>)
 8002644:	2120      	movs	r1, #32
 8002646:	430a      	orrs	r2, r1
 8002648:	635a      	str	r2, [r3, #52]	@ 0x34
 800264a:	4b55      	ldr	r3, [pc, #340]	@ (80027a0 <MX_GPIO_Init+0x190>)
 800264c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800264e:	2220      	movs	r2, #32
 8002650:	4013      	ands	r3, r2
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002656:	4b52      	ldr	r3, [pc, #328]	@ (80027a0 <MX_GPIO_Init+0x190>)
 8002658:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800265a:	4b51      	ldr	r3, [pc, #324]	@ (80027a0 <MX_GPIO_Init+0x190>)
 800265c:	2101      	movs	r1, #1
 800265e:	430a      	orrs	r2, r1
 8002660:	635a      	str	r2, [r3, #52]	@ 0x34
 8002662:	4b4f      	ldr	r3, [pc, #316]	@ (80027a0 <MX_GPIO_Init+0x190>)
 8002664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002666:	2201      	movs	r2, #1
 8002668:	4013      	ands	r3, r2
 800266a:	60bb      	str	r3, [r7, #8]
 800266c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800266e:	4b4c      	ldr	r3, [pc, #304]	@ (80027a0 <MX_GPIO_Init+0x190>)
 8002670:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002672:	4b4b      	ldr	r3, [pc, #300]	@ (80027a0 <MX_GPIO_Init+0x190>)
 8002674:	2102      	movs	r1, #2
 8002676:	430a      	orrs	r2, r1
 8002678:	635a      	str	r2, [r3, #52]	@ 0x34
 800267a:	4b49      	ldr	r3, [pc, #292]	@ (80027a0 <MX_GPIO_Init+0x190>)
 800267c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800267e:	2202      	movs	r2, #2
 8002680:	4013      	ands	r3, r2
 8002682:	607b      	str	r3, [r7, #4]
 8002684:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|LCD_DC_Pin_Pin, GPIO_PIN_RESET);
 8002686:	2390      	movs	r3, #144	@ 0x90
 8002688:	0059      	lsls	r1, r3, #1
 800268a:	23a0      	movs	r3, #160	@ 0xa0
 800268c:	05db      	lsls	r3, r3, #23
 800268e:	2200      	movs	r2, #0
 8002690:	0018      	movs	r0, r3
 8002692:	f001 fb79 	bl	8003d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin_Pin|LCD_CS_Pin_Pin, GPIO_PIN_RESET);
 8002696:	4943      	ldr	r1, [pc, #268]	@ (80027a4 <MX_GPIO_Init+0x194>)
 8002698:	4b43      	ldr	r3, [pc, #268]	@ (80027a8 <MX_GPIO_Init+0x198>)
 800269a:	2200      	movs	r2, #0
 800269c:	0018      	movs	r0, r3
 800269e:	f001 fb73 	bl	8003d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_Pin_GPIO_Port, LCD_BL_Pin_Pin, GPIO_PIN_SET);
 80026a2:	4b42      	ldr	r3, [pc, #264]	@ (80027ac <MX_GPIO_Init+0x19c>)
 80026a4:	2201      	movs	r2, #1
 80026a6:	2180      	movs	r1, #128	@ 0x80
 80026a8:	0018      	movs	r0, r3
 80026aa:	f001 fb6d 	bl	8003d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80026ae:	193b      	adds	r3, r7, r4
 80026b0:	2280      	movs	r2, #128	@ 0x80
 80026b2:	0192      	lsls	r2, r2, #6
 80026b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026b6:	193b      	adds	r3, r7, r4
 80026b8:	2288      	movs	r2, #136	@ 0x88
 80026ba:	0352      	lsls	r2, r2, #13
 80026bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026be:	193b      	adds	r3, r7, r4
 80026c0:	2200      	movs	r2, #0
 80026c2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80026c4:	193b      	adds	r3, r7, r4
 80026c6:	4a39      	ldr	r2, [pc, #228]	@ (80027ac <MX_GPIO_Init+0x19c>)
 80026c8:	0019      	movs	r1, r3
 80026ca:	0010      	movs	r0, r2
 80026cc:	f001 f9f0 	bl	8003ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80026d0:	193b      	adds	r3, r7, r4
 80026d2:	2220      	movs	r2, #32
 80026d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026d6:	193b      	adds	r3, r7, r4
 80026d8:	2201      	movs	r2, #1
 80026da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026dc:	193b      	adds	r3, r7, r4
 80026de:	2200      	movs	r2, #0
 80026e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026e2:	193b      	adds	r3, r7, r4
 80026e4:	2202      	movs	r2, #2
 80026e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80026e8:	193a      	adds	r2, r7, r4
 80026ea:	23a0      	movs	r3, #160	@ 0xa0
 80026ec:	05db      	lsls	r3, r3, #23
 80026ee:	0011      	movs	r1, r2
 80026f0:	0018      	movs	r0, r3
 80026f2:	f001 f9dd 	bl	8003ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin_Pin;
 80026f6:	0021      	movs	r1, r4
 80026f8:	187b      	adds	r3, r7, r1
 80026fa:	2280      	movs	r2, #128	@ 0x80
 80026fc:	0212      	lsls	r2, r2, #8
 80026fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002700:	000c      	movs	r4, r1
 8002702:	193b      	adds	r3, r7, r4
 8002704:	2201      	movs	r2, #1
 8002706:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002708:	193b      	adds	r3, r7, r4
 800270a:	2200      	movs	r2, #0
 800270c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800270e:	193b      	adds	r3, r7, r4
 8002710:	2203      	movs	r2, #3
 8002712:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_RST_Pin_GPIO_Port, &GPIO_InitStruct);
 8002714:	193b      	adds	r3, r7, r4
 8002716:	4a24      	ldr	r2, [pc, #144]	@ (80027a8 <MX_GPIO_Init+0x198>)
 8002718:	0019      	movs	r1, r3
 800271a:	0010      	movs	r0, r2
 800271c:	f001 f9c8 	bl	8003ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin_Pin;
 8002720:	0021      	movs	r1, r4
 8002722:	187b      	adds	r3, r7, r1
 8002724:	2280      	movs	r2, #128	@ 0x80
 8002726:	0052      	lsls	r2, r2, #1
 8002728:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800272a:	000c      	movs	r4, r1
 800272c:	193b      	adds	r3, r7, r4
 800272e:	2201      	movs	r2, #1
 8002730:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002732:	193b      	adds	r3, r7, r4
 8002734:	2200      	movs	r2, #0
 8002736:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002738:	193b      	adds	r3, r7, r4
 800273a:	2203      	movs	r2, #3
 800273c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_DC_Pin_GPIO_Port, &GPIO_InitStruct);
 800273e:	193a      	adds	r2, r7, r4
 8002740:	23a0      	movs	r3, #160	@ 0xa0
 8002742:	05db      	lsls	r3, r3, #23
 8002744:	0011      	movs	r1, r2
 8002746:	0018      	movs	r0, r3
 8002748:	f001 f9b2 	bl	8003ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin_Pin;
 800274c:	193b      	adds	r3, r7, r4
 800274e:	2280      	movs	r2, #128	@ 0x80
 8002750:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002752:	193b      	adds	r3, r7, r4
 8002754:	2201      	movs	r2, #1
 8002756:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002758:	193b      	adds	r3, r7, r4
 800275a:	2200      	movs	r2, #0
 800275c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800275e:	193b      	adds	r3, r7, r4
 8002760:	2203      	movs	r2, #3
 8002762:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_BL_Pin_GPIO_Port, &GPIO_InitStruct);
 8002764:	193b      	adds	r3, r7, r4
 8002766:	4a11      	ldr	r2, [pc, #68]	@ (80027ac <MX_GPIO_Init+0x19c>)
 8002768:	0019      	movs	r1, r3
 800276a:	0010      	movs	r0, r2
 800276c:	f001 f9a0 	bl	8003ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin_Pin;
 8002770:	0021      	movs	r1, r4
 8002772:	187b      	adds	r3, r7, r1
 8002774:	2240      	movs	r2, #64	@ 0x40
 8002776:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002778:	187b      	adds	r3, r7, r1
 800277a:	2201      	movs	r2, #1
 800277c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	187b      	adds	r3, r7, r1
 8002780:	2200      	movs	r2, #0
 8002782:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002784:	187b      	adds	r3, r7, r1
 8002786:	2200      	movs	r2, #0
 8002788:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_CS_Pin_GPIO_Port, &GPIO_InitStruct);
 800278a:	187b      	adds	r3, r7, r1
 800278c:	4a06      	ldr	r2, [pc, #24]	@ (80027a8 <MX_GPIO_Init+0x198>)
 800278e:	0019      	movs	r1, r3
 8002790:	0010      	movs	r0, r2
 8002792:	f001 f98d 	bl	8003ab0 <HAL_GPIO_Init>

}
 8002796:	46c0      	nop			@ (mov r8, r8)
 8002798:	46bd      	mov	sp, r7
 800279a:	b00b      	add	sp, #44	@ 0x2c
 800279c:	bd90      	pop	{r4, r7, pc}
 800279e:	46c0      	nop			@ (mov r8, r8)
 80027a0:	40021000 	.word	0x40021000
 80027a4:	00008040 	.word	0x00008040
 80027a8:	50000400 	.word	0x50000400
 80027ac:	50000800 	.word	0x50000800

080027b0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80027b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002824 <MX_I2C1_Init+0x74>)
 80027b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002828 <MX_I2C1_Init+0x78>)
 80027b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C12166;
 80027ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002824 <MX_I2C1_Init+0x74>)
 80027bc:	4a1b      	ldr	r2, [pc, #108]	@ (800282c <MX_I2C1_Init+0x7c>)
 80027be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80027c0:	4b18      	ldr	r3, [pc, #96]	@ (8002824 <MX_I2C1_Init+0x74>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027c6:	4b17      	ldr	r3, [pc, #92]	@ (8002824 <MX_I2C1_Init+0x74>)
 80027c8:	2201      	movs	r2, #1
 80027ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027cc:	4b15      	ldr	r3, [pc, #84]	@ (8002824 <MX_I2C1_Init+0x74>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80027d2:	4b14      	ldr	r3, [pc, #80]	@ (8002824 <MX_I2C1_Init+0x74>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80027d8:	4b12      	ldr	r3, [pc, #72]	@ (8002824 <MX_I2C1_Init+0x74>)
 80027da:	2200      	movs	r2, #0
 80027dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027de:	4b11      	ldr	r3, [pc, #68]	@ (8002824 <MX_I2C1_Init+0x74>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002824 <MX_I2C1_Init+0x74>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002824 <MX_I2C1_Init+0x74>)
 80027ec:	0018      	movs	r0, r3
 80027ee:	f001 fae9 	bl	8003dc4 <HAL_I2C_Init>
 80027f2:	1e03      	subs	r3, r0, #0
 80027f4:	d001      	beq.n	80027fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80027f6:	f000 f935 	bl	8002a64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80027fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002824 <MX_I2C1_Init+0x74>)
 80027fc:	2100      	movs	r1, #0
 80027fe:	0018      	movs	r0, r3
 8002800:	f001 fb86 	bl	8003f10 <HAL_I2CEx_ConfigAnalogFilter>
 8002804:	1e03      	subs	r3, r0, #0
 8002806:	d001      	beq.n	800280c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002808:	f000 f92c 	bl	8002a64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800280c:	4b05      	ldr	r3, [pc, #20]	@ (8002824 <MX_I2C1_Init+0x74>)
 800280e:	2100      	movs	r1, #0
 8002810:	0018      	movs	r0, r3
 8002812:	f001 fbc9 	bl	8003fa8 <HAL_I2CEx_ConfigDigitalFilter>
 8002816:	1e03      	subs	r3, r0, #0
 8002818:	d001      	beq.n	800281e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800281a:	f000 f923 	bl	8002a64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800281e:	46c0      	nop			@ (mov r8, r8)
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	200001f8 	.word	0x200001f8
 8002828:	40005400 	.word	0x40005400
 800282c:	00c12166 	.word	0x00c12166

08002830 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002830:	b590      	push	{r4, r7, lr}
 8002832:	b09d      	sub	sp, #116	@ 0x74
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002838:	235c      	movs	r3, #92	@ 0x5c
 800283a:	18fb      	adds	r3, r7, r3
 800283c:	0018      	movs	r0, r3
 800283e:	2314      	movs	r3, #20
 8002840:	001a      	movs	r2, r3
 8002842:	2100      	movs	r1, #0
 8002844:	f004 fb3a 	bl	8006ebc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002848:	2410      	movs	r4, #16
 800284a:	193b      	adds	r3, r7, r4
 800284c:	0018      	movs	r0, r3
 800284e:	234c      	movs	r3, #76	@ 0x4c
 8002850:	001a      	movs	r2, r3
 8002852:	2100      	movs	r1, #0
 8002854:	f004 fb32 	bl	8006ebc <memset>
  if(i2cHandle->Instance==I2C1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a23      	ldr	r2, [pc, #140]	@ (80028ec <HAL_I2C_MspInit+0xbc>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d13f      	bne.n	80028e2 <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002862:	193b      	adds	r3, r7, r4
 8002864:	2220      	movs	r2, #32
 8002866:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002868:	193b      	adds	r3, r7, r4
 800286a:	2200      	movs	r2, #0
 800286c:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800286e:	193b      	adds	r3, r7, r4
 8002870:	0018      	movs	r0, r3
 8002872:	f002 f93b 	bl	8004aec <HAL_RCCEx_PeriphCLKConfig>
 8002876:	1e03      	subs	r3, r0, #0
 8002878:	d001      	beq.n	800287e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800287a:	f000 f8f3 	bl	8002a64 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800287e:	4b1c      	ldr	r3, [pc, #112]	@ (80028f0 <HAL_I2C_MspInit+0xc0>)
 8002880:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002882:	4b1b      	ldr	r3, [pc, #108]	@ (80028f0 <HAL_I2C_MspInit+0xc0>)
 8002884:	2101      	movs	r1, #1
 8002886:	430a      	orrs	r2, r1
 8002888:	635a      	str	r2, [r3, #52]	@ 0x34
 800288a:	4b19      	ldr	r3, [pc, #100]	@ (80028f0 <HAL_I2C_MspInit+0xc0>)
 800288c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800288e:	2201      	movs	r2, #1
 8002890:	4013      	ands	r3, r2
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002896:	215c      	movs	r1, #92	@ 0x5c
 8002898:	187b      	adds	r3, r7, r1
 800289a:	22c0      	movs	r2, #192	@ 0xc0
 800289c:	00d2      	lsls	r2, r2, #3
 800289e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028a0:	187b      	adds	r3, r7, r1
 80028a2:	2212      	movs	r2, #18
 80028a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a6:	187b      	adds	r3, r7, r1
 80028a8:	2200      	movs	r2, #0
 80028aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ac:	187b      	adds	r3, r7, r1
 80028ae:	2200      	movs	r2, #0
 80028b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80028b2:	187b      	adds	r3, r7, r1
 80028b4:	2206      	movs	r2, #6
 80028b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b8:	187a      	adds	r2, r7, r1
 80028ba:	23a0      	movs	r3, #160	@ 0xa0
 80028bc:	05db      	lsls	r3, r3, #23
 80028be:	0011      	movs	r1, r2
 80028c0:	0018      	movs	r0, r3
 80028c2:	f001 f8f5 	bl	8003ab0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028c6:	4b0a      	ldr	r3, [pc, #40]	@ (80028f0 <HAL_I2C_MspInit+0xc0>)
 80028c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028ca:	4b09      	ldr	r3, [pc, #36]	@ (80028f0 <HAL_I2C_MspInit+0xc0>)
 80028cc:	2180      	movs	r1, #128	@ 0x80
 80028ce:	0389      	lsls	r1, r1, #14
 80028d0:	430a      	orrs	r2, r1
 80028d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80028d4:	4b06      	ldr	r3, [pc, #24]	@ (80028f0 <HAL_I2C_MspInit+0xc0>)
 80028d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028d8:	2380      	movs	r3, #128	@ 0x80
 80028da:	039b      	lsls	r3, r3, #14
 80028dc:	4013      	ands	r3, r2
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80028e2:	46c0      	nop			@ (mov r8, r8)
 80028e4:	46bd      	mov	sp, r7
 80028e6:	b01d      	add	sp, #116	@ 0x74
 80028e8:	bd90      	pop	{r4, r7, pc}
 80028ea:	46c0      	nop			@ (mov r8, r8)
 80028ec:	40005400 	.word	0x40005400
 80028f0:	40021000 	.word	0x40021000

080028f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028fa:	f000 ff65 	bl	80037c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028fe:	f000 f853 	bl	80029a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002902:	f7ff fe85 	bl	8002610 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002906:	f000 fe87 	bl	8003618 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800290a:	f7ff ff51 	bl	80027b0 <MX_I2C1_Init>
  MX_SPI1_Init();
 800290e:	f000 f8af 	bl	8002a70 <MX_SPI1_Init>

  /* USER CODE BEGIN 2 */
  ST7789_Init(&hspi1); // Initialize the display
 8002912:	4b1b      	ldr	r3, [pc, #108]	@ (8002980 <main+0x8c>)
 8002914:	0018      	movs	r0, r3
 8002916:	f000 f9ff 	bl	8002d18 <ST7789_Init>

  ST7789_FillScreen(ST7789_BLUE);
 800291a:	201f      	movs	r0, #31
 800291c:	f000 fb26 	bl	8002f6c <ST7789_FillScreen>
    HAL_Delay(500);
 8002920:	23fa      	movs	r3, #250	@ 0xfa
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	0018      	movs	r0, r3
 8002926:	f000 ffd5 	bl	80038d4 <HAL_Delay>
    ST7789_WriteString(10, 10, "Hello, Gemini!", &Font16, ST7789_WHITE, ST7789_BLUE);
 800292a:	4b16      	ldr	r3, [pc, #88]	@ (8002984 <main+0x90>)
 800292c:	4a16      	ldr	r2, [pc, #88]	@ (8002988 <main+0x94>)
 800292e:	211f      	movs	r1, #31
 8002930:	9101      	str	r1, [sp, #4]
 8002932:	4916      	ldr	r1, [pc, #88]	@ (800298c <main+0x98>)
 8002934:	9100      	str	r1, [sp, #0]
 8002936:	210a      	movs	r1, #10
 8002938:	200a      	movs	r0, #10
 800293a:	f000 fcf2 	bl	8003322 <ST7789_WriteString>
    ST7789_WriteString(10, 40, "STM32 NUCLEO-G0B1RE", &Font16, ST7789_YELLOW, ST7789_BLUE);
 800293e:	4b11      	ldr	r3, [pc, #68]	@ (8002984 <main+0x90>)
 8002940:	4a13      	ldr	r2, [pc, #76]	@ (8002990 <main+0x9c>)
 8002942:	211f      	movs	r1, #31
 8002944:	9101      	str	r1, [sp, #4]
 8002946:	4913      	ldr	r1, [pc, #76]	@ (8002994 <main+0xa0>)
 8002948:	9100      	str	r1, [sp, #0]
 800294a:	2128      	movs	r1, #40	@ 0x28
 800294c:	200a      	movs	r0, #10
 800294e:	f000 fce8 	bl	8003322 <ST7789_WriteString>
    ST7789_WriteString(10, 60, "Waveshare 1.69inch LCD", &Font16, ST7789_GREENYELLOW, ST7789_BLUE);
 8002952:	4b0c      	ldr	r3, [pc, #48]	@ (8002984 <main+0x90>)
 8002954:	4a10      	ldr	r2, [pc, #64]	@ (8002998 <main+0xa4>)
 8002956:	211f      	movs	r1, #31
 8002958:	9101      	str	r1, [sp, #4]
 800295a:	4910      	ldr	r1, [pc, #64]	@ (800299c <main+0xa8>)
 800295c:	9100      	str	r1, [sp, #0]
 800295e:	213c      	movs	r1, #60	@ 0x3c
 8002960:	200a      	movs	r0, #10
 8002962:	f000 fcde 	bl	8003322 <ST7789_WriteString>
    ST7789_WriteString(10, 90, "Display Demo", &Font16, ST7789_CYAN, ST7789_BLUE);
 8002966:	4b07      	ldr	r3, [pc, #28]	@ (8002984 <main+0x90>)
 8002968:	4a0d      	ldr	r2, [pc, #52]	@ (80029a0 <main+0xac>)
 800296a:	211f      	movs	r1, #31
 800296c:	9101      	str	r1, [sp, #4]
 800296e:	490d      	ldr	r1, [pc, #52]	@ (80029a4 <main+0xb0>)
 8002970:	9100      	str	r1, [sp, #0]
 8002972:	215a      	movs	r1, #90	@ 0x5a
 8002974:	200a      	movs	r0, #10
 8002976:	f000 fcd4 	bl	8003322 <ST7789_WriteString>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800297a:	46c0      	nop			@ (mov r8, r8)
 800297c:	e7fd      	b.n	800297a <main+0x86>
 800297e:	46c0      	nop			@ (mov r8, r8)
 8002980:	2000024c 	.word	0x2000024c
 8002984:	20000000 	.word	0x20000000
 8002988:	08008ed8 	.word	0x08008ed8
 800298c:	0000ffff 	.word	0x0000ffff
 8002990:	08008ee8 	.word	0x08008ee8
 8002994:	0000ffe0 	.word	0x0000ffe0
 8002998:	08008efc 	.word	0x08008efc
 800299c:	0000afe5 	.word	0x0000afe5
 80029a0:	08008f14 	.word	0x08008f14
 80029a4:	000007ff 	.word	0x000007ff

080029a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029a8:	b590      	push	{r4, r7, lr}
 80029aa:	b095      	sub	sp, #84	@ 0x54
 80029ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029ae:	2414      	movs	r4, #20
 80029b0:	193b      	adds	r3, r7, r4
 80029b2:	0018      	movs	r0, r3
 80029b4:	233c      	movs	r3, #60	@ 0x3c
 80029b6:	001a      	movs	r2, r3
 80029b8:	2100      	movs	r1, #0
 80029ba:	f004 fa7f 	bl	8006ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029be:	1d3b      	adds	r3, r7, #4
 80029c0:	0018      	movs	r0, r3
 80029c2:	2310      	movs	r3, #16
 80029c4:	001a      	movs	r2, r3
 80029c6:	2100      	movs	r1, #0
 80029c8:	f004 fa78 	bl	8006ebc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029cc:	2380      	movs	r3, #128	@ 0x80
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	0018      	movs	r0, r3
 80029d2:	f001 fb35 	bl	8004040 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029d6:	193b      	adds	r3, r7, r4
 80029d8:	2202      	movs	r2, #2
 80029da:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029dc:	193b      	adds	r3, r7, r4
 80029de:	2280      	movs	r2, #128	@ 0x80
 80029e0:	0052      	lsls	r2, r2, #1
 80029e2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80029e4:	0021      	movs	r1, r4
 80029e6:	187b      	adds	r3, r7, r1
 80029e8:	2200      	movs	r2, #0
 80029ea:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029ec:	187b      	adds	r3, r7, r1
 80029ee:	2240      	movs	r2, #64	@ 0x40
 80029f0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029f2:	187b      	adds	r3, r7, r1
 80029f4:	2202      	movs	r2, #2
 80029f6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80029f8:	187b      	adds	r3, r7, r1
 80029fa:	2202      	movs	r2, #2
 80029fc:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80029fe:	187b      	adds	r3, r7, r1
 8002a00:	2200      	movs	r2, #0
 8002a02:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002a04:	187b      	adds	r3, r7, r1
 8002a06:	2208      	movs	r2, #8
 8002a08:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a0a:	187b      	adds	r3, r7, r1
 8002a0c:	2280      	movs	r2, #128	@ 0x80
 8002a0e:	0292      	lsls	r2, r2, #10
 8002a10:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002a12:	187b      	adds	r3, r7, r1
 8002a14:	2280      	movs	r2, #128	@ 0x80
 8002a16:	0492      	lsls	r2, r2, #18
 8002a18:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002a1a:	187b      	adds	r3, r7, r1
 8002a1c:	2280      	movs	r2, #128	@ 0x80
 8002a1e:	0592      	lsls	r2, r2, #22
 8002a20:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a22:	187b      	adds	r3, r7, r1
 8002a24:	0018      	movs	r0, r3
 8002a26:	f001 fb57 	bl	80040d8 <HAL_RCC_OscConfig>
 8002a2a:	1e03      	subs	r3, r0, #0
 8002a2c:	d001      	beq.n	8002a32 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002a2e:	f000 f819 	bl	8002a64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a32:	1d3b      	adds	r3, r7, #4
 8002a34:	2207      	movs	r2, #7
 8002a36:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a38:	1d3b      	adds	r3, r7, #4
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a3e:	1d3b      	adds	r3, r7, #4
 8002a40:	2200      	movs	r2, #0
 8002a42:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a44:	1d3b      	adds	r3, r7, #4
 8002a46:	2200      	movs	r2, #0
 8002a48:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a4a:	1d3b      	adds	r3, r7, #4
 8002a4c:	2102      	movs	r1, #2
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f001 fea2 	bl	8004798 <HAL_RCC_ClockConfig>
 8002a54:	1e03      	subs	r3, r0, #0
 8002a56:	d001      	beq.n	8002a5c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002a58:	f000 f804 	bl	8002a64 <Error_Handler>
  }
}
 8002a5c:	46c0      	nop			@ (mov r8, r8)
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	b015      	add	sp, #84	@ 0x54
 8002a62:	bd90      	pop	{r4, r7, pc}

08002a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a68:	b672      	cpsid	i
}
 8002a6a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a6c:	46c0      	nop			@ (mov r8, r8)
 8002a6e:	e7fd      	b.n	8002a6c <Error_Handler+0x8>

08002a70 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002a74:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae4 <MX_SPI1_Init+0x74>)
 8002a76:	4a1c      	ldr	r2, [pc, #112]	@ (8002ae8 <MX_SPI1_Init+0x78>)
 8002a78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ae4 <MX_SPI1_Init+0x74>)
 8002a7c:	2282      	movs	r2, #130	@ 0x82
 8002a7e:	0052      	lsls	r2, r2, #1
 8002a80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a82:	4b18      	ldr	r3, [pc, #96]	@ (8002ae4 <MX_SPI1_Init+0x74>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a88:	4b16      	ldr	r3, [pc, #88]	@ (8002ae4 <MX_SPI1_Init+0x74>)
 8002a8a:	22e0      	movs	r2, #224	@ 0xe0
 8002a8c:	00d2      	lsls	r2, r2, #3
 8002a8e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a90:	4b14      	ldr	r3, [pc, #80]	@ (8002ae4 <MX_SPI1_Init+0x74>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a96:	4b13      	ldr	r3, [pc, #76]	@ (8002ae4 <MX_SPI1_Init+0x74>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a9c:	4b11      	ldr	r3, [pc, #68]	@ (8002ae4 <MX_SPI1_Init+0x74>)
 8002a9e:	2280      	movs	r2, #128	@ 0x80
 8002aa0:	0092      	lsls	r2, r2, #2
 8002aa2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8002ae4 <MX_SPI1_Init+0x74>)
 8002aa6:	2210      	movs	r2, #16
 8002aa8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae4 <MX_SPI1_Init+0x74>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae4 <MX_SPI1_Init+0x74>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae4 <MX_SPI1_Init+0x74>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002abc:	4b09      	ldr	r3, [pc, #36]	@ (8002ae4 <MX_SPI1_Init+0x74>)
 8002abe:	2207      	movs	r2, #7
 8002ac0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002ac2:	4b08      	ldr	r3, [pc, #32]	@ (8002ae4 <MX_SPI1_Init+0x74>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002ac8:	4b06      	ldr	r3, [pc, #24]	@ (8002ae4 <MX_SPI1_Init+0x74>)
 8002aca:	2208      	movs	r2, #8
 8002acc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ace:	4b05      	ldr	r3, [pc, #20]	@ (8002ae4 <MX_SPI1_Init+0x74>)
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f002 fa47 	bl	8004f64 <HAL_SPI_Init>
 8002ad6:	1e03      	subs	r3, r0, #0
 8002ad8:	d001      	beq.n	8002ade <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002ada:	f7ff ffc3 	bl	8002a64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ade:	46c0      	nop			@ (mov r8, r8)
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	2000024c 	.word	0x2000024c
 8002ae8:	40013000 	.word	0x40013000

08002aec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002aec:	b590      	push	{r4, r7, lr}
 8002aee:	b08b      	sub	sp, #44	@ 0x2c
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af4:	2414      	movs	r4, #20
 8002af6:	193b      	adds	r3, r7, r4
 8002af8:	0018      	movs	r0, r3
 8002afa:	2314      	movs	r3, #20
 8002afc:	001a      	movs	r2, r3
 8002afe:	2100      	movs	r1, #0
 8002b00:	f004 f9dc 	bl	8006ebc <memset>
  if(spiHandle->Instance==SPI1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a1b      	ldr	r2, [pc, #108]	@ (8002b78 <HAL_SPI_MspInit+0x8c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d130      	bne.n	8002b70 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8002b7c <HAL_SPI_MspInit+0x90>)
 8002b10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b12:	4b1a      	ldr	r3, [pc, #104]	@ (8002b7c <HAL_SPI_MspInit+0x90>)
 8002b14:	2180      	movs	r1, #128	@ 0x80
 8002b16:	0149      	lsls	r1, r1, #5
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b1c:	4b17      	ldr	r3, [pc, #92]	@ (8002b7c <HAL_SPI_MspInit+0x90>)
 8002b1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b20:	2380      	movs	r3, #128	@ 0x80
 8002b22:	015b      	lsls	r3, r3, #5
 8002b24:	4013      	ands	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b2a:	4b14      	ldr	r3, [pc, #80]	@ (8002b7c <HAL_SPI_MspInit+0x90>)
 8002b2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b2e:	4b13      	ldr	r3, [pc, #76]	@ (8002b7c <HAL_SPI_MspInit+0x90>)
 8002b30:	2101      	movs	r1, #1
 8002b32:	430a      	orrs	r2, r1
 8002b34:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b36:	4b11      	ldr	r3, [pc, #68]	@ (8002b7c <HAL_SPI_MspInit+0x90>)
 8002b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8002b42:	0021      	movs	r1, r4
 8002b44:	187b      	adds	r3, r7, r1
 8002b46:	22c2      	movs	r2, #194	@ 0xc2
 8002b48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4a:	187b      	adds	r3, r7, r1
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	187b      	adds	r3, r7, r1
 8002b52:	2200      	movs	r2, #0
 8002b54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b56:	187b      	adds	r3, r7, r1
 8002b58:	2200      	movs	r2, #0
 8002b5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002b5c:	187b      	adds	r3, r7, r1
 8002b5e:	2200      	movs	r2, #0
 8002b60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b62:	187a      	adds	r2, r7, r1
 8002b64:	23a0      	movs	r3, #160	@ 0xa0
 8002b66:	05db      	lsls	r3, r3, #23
 8002b68:	0011      	movs	r1, r2
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f000 ffa0 	bl	8003ab0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002b70:	46c0      	nop			@ (mov r8, r8)
 8002b72:	46bd      	mov	sp, r7
 8002b74:	b00b      	add	sp, #44	@ 0x2c
 8002b76:	bd90      	pop	{r4, r7, pc}
 8002b78:	40013000 	.word	0x40013000
 8002b7c:	40021000 	.word	0x40021000

08002b80 <ST7789_Select>:

// Global SPI handle pointer
SPI_HandleTypeDef *hspi_st7789;

// Internal functions
static void ST7789_Select() {
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8002b84:	4b04      	ldr	r3, [pc, #16]	@ (8002b98 <ST7789_Select+0x18>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	2140      	movs	r1, #64	@ 0x40
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	f001 f8fc 	bl	8003d88 <HAL_GPIO_WritePin>
}
 8002b90:	46c0      	nop			@ (mov r8, r8)
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	46c0      	nop			@ (mov r8, r8)
 8002b98:	50000400 	.word	0x50000400

08002b9c <ST7789_Unselect>:

static void ST7789_Unselect() {
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8002ba0:	4b04      	ldr	r3, [pc, #16]	@ (8002bb4 <ST7789_Unselect+0x18>)
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	2140      	movs	r1, #64	@ 0x40
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f001 f8ee 	bl	8003d88 <HAL_GPIO_WritePin>
}
 8002bac:	46c0      	nop			@ (mov r8, r8)
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	46c0      	nop			@ (mov r8, r8)
 8002bb4:	50000400 	.word	0x50000400

08002bb8 <ST7789_WriteCommand>:

void ST7789_WriteCommand(uint8_t cmd) {
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	0002      	movs	r2, r0
 8002bc0:	1dfb      	adds	r3, r7, #7
 8002bc2:	701a      	strb	r2, [r3, #0]
    ST7789_Select();
 8002bc4:	f7ff ffdc 	bl	8002b80 <ST7789_Select>
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET); // Command mode
 8002bc8:	2380      	movs	r3, #128	@ 0x80
 8002bca:	0059      	lsls	r1, r3, #1
 8002bcc:	23a0      	movs	r3, #160	@ 0xa0
 8002bce:	05db      	lsls	r3, r3, #23
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	f001 f8d8 	bl	8003d88 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi_st7789, &cmd, 1, HAL_MAX_DELAY);
 8002bd8:	4b06      	ldr	r3, [pc, #24]	@ (8002bf4 <ST7789_WriteCommand+0x3c>)
 8002bda:	6818      	ldr	r0, [r3, #0]
 8002bdc:	2301      	movs	r3, #1
 8002bde:	425b      	negs	r3, r3
 8002be0:	1df9      	adds	r1, r7, #7
 8002be2:	2201      	movs	r2, #1
 8002be4:	f002 fa76 	bl	80050d4 <HAL_SPI_Transmit>
    ST7789_Unselect();
 8002be8:	f7ff ffd8 	bl	8002b9c <ST7789_Unselect>
}
 8002bec:	46c0      	nop			@ (mov r8, r8)
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	b002      	add	sp, #8
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	200002b0 	.word	0x200002b0

08002bf8 <ST7789_WriteData>:

void ST7789_WriteData(uint8_t *buff, size_t buff_size) {
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
    ST7789_Select();
 8002c02:	f7ff ffbd 	bl	8002b80 <ST7789_Select>
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET); // Data mode
 8002c06:	2380      	movs	r3, #128	@ 0x80
 8002c08:	0059      	lsls	r1, r3, #1
 8002c0a:	23a0      	movs	r3, #160	@ 0xa0
 8002c0c:	05db      	lsls	r3, r3, #23
 8002c0e:	2201      	movs	r2, #1
 8002c10:	0018      	movs	r0, r3
 8002c12:	f001 f8b9 	bl	8003d88 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi_st7789, buff, buff_size, HAL_MAX_DELAY);
 8002c16:	4b07      	ldr	r3, [pc, #28]	@ (8002c34 <ST7789_WriteData+0x3c>)
 8002c18:	6818      	ldr	r0, [r3, #0]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	2301      	movs	r3, #1
 8002c20:	425b      	negs	r3, r3
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	f002 fa56 	bl	80050d4 <HAL_SPI_Transmit>
    ST7789_Unselect();
 8002c28:	f7ff ffb8 	bl	8002b9c <ST7789_Unselect>
}
 8002c2c:	46c0      	nop			@ (mov r8, r8)
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	b002      	add	sp, #8
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	200002b0 	.word	0x200002b0

08002c38 <ST7789_SetAddressWindow>:

void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8002c38:	b5b0      	push	{r4, r5, r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	0005      	movs	r5, r0
 8002c40:	000c      	movs	r4, r1
 8002c42:	0010      	movs	r0, r2
 8002c44:	0019      	movs	r1, r3
 8002c46:	1dbb      	adds	r3, r7, #6
 8002c48:	1c2a      	adds	r2, r5, #0
 8002c4a:	801a      	strh	r2, [r3, #0]
 8002c4c:	1d3b      	adds	r3, r7, #4
 8002c4e:	1c22      	adds	r2, r4, #0
 8002c50:	801a      	strh	r2, [r3, #0]
 8002c52:	1cbb      	adds	r3, r7, #2
 8002c54:	1c02      	adds	r2, r0, #0
 8002c56:	801a      	strh	r2, [r3, #0]
 8002c58:	003b      	movs	r3, r7
 8002c5a:	1c0a      	adds	r2, r1, #0
 8002c5c:	801a      	strh	r2, [r3, #0]
    // --- KEY MODIFICATION FOR 240x280 DISPLAY ---
    // For 240x280 ST7789V2, typically a Y-offset is needed.
    // The controller is 240x320, but the panel is 240x280.
    // This centers the 280 pixels vertically within the 320-pixel frame.
    uint16_t y_hardware_offset = 20; // 20 pixels for a 240x280 display
 8002c5e:	200e      	movs	r0, #14
 8002c60:	183b      	adds	r3, r7, r0
 8002c62:	2214      	movs	r2, #20
 8002c64:	801a      	strh	r2, [r3, #0]
    // No X-offset for 240-width displays
    // uint16_t x_hardware_offset = 0; // Or remove this line if it was added for 170x320
    // x0 += x_hardware_offset;
    // x1 += x_hardware_offset;

    y0 += y_hardware_offset;
 8002c66:	1d3b      	adds	r3, r7, #4
 8002c68:	1d39      	adds	r1, r7, #4
 8002c6a:	183a      	adds	r2, r7, r0
 8002c6c:	8809      	ldrh	r1, [r1, #0]
 8002c6e:	8812      	ldrh	r2, [r2, #0]
 8002c70:	188a      	adds	r2, r1, r2
 8002c72:	801a      	strh	r2, [r3, #0]
    y1 += y_hardware_offset;
 8002c74:	003b      	movs	r3, r7
 8002c76:	0039      	movs	r1, r7
 8002c78:	183a      	adds	r2, r7, r0
 8002c7a:	8809      	ldrh	r1, [r1, #0]
 8002c7c:	8812      	ldrh	r2, [r2, #0]
 8002c7e:	188a      	adds	r2, r1, r2
 8002c80:	801a      	strh	r2, [r3, #0]
    // --- END OF KEY MODIFICATION ---

    uint8_t data[4];

    // Column Address Set (CASET)
    ST7789_WriteCommand(ST7789_CASET);
 8002c82:	202a      	movs	r0, #42	@ 0x2a
 8002c84:	f7ff ff98 	bl	8002bb8 <ST7789_WriteCommand>
    data[0] = (x0 >> 8) & 0xFF;
 8002c88:	1dbb      	adds	r3, r7, #6
 8002c8a:	881b      	ldrh	r3, [r3, #0]
 8002c8c:	0a1b      	lsrs	r3, r3, #8
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	2108      	movs	r1, #8
 8002c94:	187b      	adds	r3, r7, r1
 8002c96:	701a      	strb	r2, [r3, #0]
    data[1] = x0 & 0xFF;
 8002c98:	1dbb      	adds	r3, r7, #6
 8002c9a:	881b      	ldrh	r3, [r3, #0]
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	187b      	adds	r3, r7, r1
 8002ca0:	705a      	strb	r2, [r3, #1]
    data[2] = (x1 >> 8) & 0xFF;
 8002ca2:	1cbb      	adds	r3, r7, #2
 8002ca4:	881b      	ldrh	r3, [r3, #0]
 8002ca6:	0a1b      	lsrs	r3, r3, #8
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	187b      	adds	r3, r7, r1
 8002cae:	709a      	strb	r2, [r3, #2]
    data[3] = x1 & 0xFF;
 8002cb0:	1cbb      	adds	r3, r7, #2
 8002cb2:	881b      	ldrh	r3, [r3, #0]
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	187b      	adds	r3, r7, r1
 8002cb8:	70da      	strb	r2, [r3, #3]
    ST7789_WriteData(data, 4);
 8002cba:	000c      	movs	r4, r1
 8002cbc:	187b      	adds	r3, r7, r1
 8002cbe:	2104      	movs	r1, #4
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f7ff ff99 	bl	8002bf8 <ST7789_WriteData>

    // Row Address Set (RASET)
    ST7789_WriteCommand(ST7789_RASET);
 8002cc6:	202b      	movs	r0, #43	@ 0x2b
 8002cc8:	f7ff ff76 	bl	8002bb8 <ST7789_WriteCommand>
    data[0] = (y0 >> 8) & 0xFF;
 8002ccc:	1d3b      	adds	r3, r7, #4
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	0a1b      	lsrs	r3, r3, #8
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	0021      	movs	r1, r4
 8002cd8:	187b      	adds	r3, r7, r1
 8002cda:	701a      	strb	r2, [r3, #0]
    data[1] = y0 & 0xFF;
 8002cdc:	1d3b      	adds	r3, r7, #4
 8002cde:	881b      	ldrh	r3, [r3, #0]
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	187b      	adds	r3, r7, r1
 8002ce4:	705a      	strb	r2, [r3, #1]
    data[2] = (y1 >> 8) & 0xFF;
 8002ce6:	003b      	movs	r3, r7
 8002ce8:	881b      	ldrh	r3, [r3, #0]
 8002cea:	0a1b      	lsrs	r3, r3, #8
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	187b      	adds	r3, r7, r1
 8002cf2:	709a      	strb	r2, [r3, #2]
    data[3] = y1 & 0xFF;
 8002cf4:	003b      	movs	r3, r7
 8002cf6:	881b      	ldrh	r3, [r3, #0]
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	187b      	adds	r3, r7, r1
 8002cfc:	70da      	strb	r2, [r3, #3]
    ST7789_WriteData(data, 4);
 8002cfe:	187b      	adds	r3, r7, r1
 8002d00:	2104      	movs	r1, #4
 8002d02:	0018      	movs	r0, r3
 8002d04:	f7ff ff78 	bl	8002bf8 <ST7789_WriteData>

    ST7789_WriteCommand(ST7789_RAMWR); // Memory Write
 8002d08:	202c      	movs	r0, #44	@ 0x2c
 8002d0a:	f7ff ff55 	bl	8002bb8 <ST7789_WriteCommand>
}
 8002d0e:	46c0      	nop			@ (mov r8, r8)
 8002d10:	46bd      	mov	sp, r7
 8002d12:	b004      	add	sp, #16
 8002d14:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002d18 <ST7789_Init>:

void ST7789_Init(SPI_HandleTypeDef *hspi) {
 8002d18:	b5b0      	push	{r4, r5, r7, lr}
 8002d1a:	b096      	sub	sp, #88	@ 0x58
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
    hspi_st7789 = hspi;
 8002d20:	4b84      	ldr	r3, [pc, #528]	@ (8002f34 <ST7789_Init+0x21c>)
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	601a      	str	r2, [r3, #0]

    // Hardware Reset
    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8002d26:	2380      	movs	r3, #128	@ 0x80
 8002d28:	021b      	lsls	r3, r3, #8
 8002d2a:	4883      	ldr	r0, [pc, #524]	@ (8002f38 <ST7789_Init+0x220>)
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	0019      	movs	r1, r3
 8002d30:	f001 f82a 	bl	8003d88 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8002d34:	200a      	movs	r0, #10
 8002d36:	f000 fdcd 	bl	80038d4 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8002d3a:	2380      	movs	r3, #128	@ 0x80
 8002d3c:	021b      	lsls	r3, r3, #8
 8002d3e:	487e      	ldr	r0, [pc, #504]	@ (8002f38 <ST7789_Init+0x220>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	0019      	movs	r1, r3
 8002d44:	f001 f820 	bl	8003d88 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8002d48:	200a      	movs	r0, #10
 8002d4a:	f000 fdc3 	bl	80038d4 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8002d4e:	2380      	movs	r3, #128	@ 0x80
 8002d50:	021b      	lsls	r3, r3, #8
 8002d52:	4879      	ldr	r0, [pc, #484]	@ (8002f38 <ST7789_Init+0x220>)
 8002d54:	2201      	movs	r2, #1
 8002d56:	0019      	movs	r1, r3
 8002d58:	f001 f816 	bl	8003d88 <HAL_GPIO_WritePin>
    HAL_Delay(120); // Wait for reset to complete
 8002d5c:	2078      	movs	r0, #120	@ 0x78
 8002d5e:	f000 fdb9 	bl	80038d4 <HAL_Delay>

    // Backlight ON (can be done here or in main, this is fine)
    ST7789_SetBacklight(1);
 8002d62:	2001      	movs	r0, #1
 8002d64:	f000 fb34 	bl	80033d0 <ST7789_SetBacklight>
    HAL_Delay(10); // Small delay after BL on
 8002d68:	200a      	movs	r0, #10
 8002d6a:	f000 fdb3 	bl	80038d4 <HAL_Delay>

    // 1. Software reset
    ST7789_WriteCommand(ST7789_SWRESET);
 8002d6e:	2001      	movs	r0, #1
 8002d70:	f7ff ff22 	bl	8002bb8 <ST7789_WriteCommand>
    HAL_Delay(150);
 8002d74:	2096      	movs	r0, #150	@ 0x96
 8002d76:	f000 fdad 	bl	80038d4 <HAL_Delay>

    // 2. Sleep Out
    ST7789_WriteCommand(ST7789_SLPOUT);
 8002d7a:	2011      	movs	r0, #17
 8002d7c:	f7ff ff1c 	bl	8002bb8 <ST7789_WriteCommand>
    HAL_Delay(10);
 8002d80:	200a      	movs	r0, #10
 8002d82:	f000 fda7 	bl	80038d4 <HAL_Delay>

    // 3. Frame Rate Control (In normal mode/Full colors)
    ST7789_WriteCommand(0xC6);
 8002d86:	20c6      	movs	r0, #198	@ 0xc6
 8002d88:	f7ff ff16 	bl	8002bb8 <ST7789_WriteCommand>
    uint8_t fr_data[] = {0x0F}; // 60Hz
 8002d8c:	2154      	movs	r1, #84	@ 0x54
 8002d8e:	187b      	adds	r3, r7, r1
 8002d90:	4a6a      	ldr	r2, [pc, #424]	@ (8002f3c <ST7789_Init+0x224>)
 8002d92:	7812      	ldrb	r2, [r2, #0]
 8002d94:	701a      	strb	r2, [r3, #0]
    ST7789_WriteData(fr_data, sizeof(fr_data));
 8002d96:	187b      	adds	r3, r7, r1
 8002d98:	2101      	movs	r1, #1
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	f7ff ff2c 	bl	8002bf8 <ST7789_WriteData>

    // 4. Power Control 1
    ST7789_WriteCommand(0xD0);
 8002da0:	20d0      	movs	r0, #208	@ 0xd0
 8002da2:	f7ff ff09 	bl	8002bb8 <ST7789_WriteCommand>
    uint8_t pwr1_data[] = {0xA4, 0xA1};
 8002da6:	2150      	movs	r1, #80	@ 0x50
 8002da8:	187b      	adds	r3, r7, r1
 8002daa:	4a65      	ldr	r2, [pc, #404]	@ (8002f40 <ST7789_Init+0x228>)
 8002dac:	801a      	strh	r2, [r3, #0]
    ST7789_WriteData(pwr1_data, sizeof(pwr1_data));
 8002dae:	187b      	adds	r3, r7, r1
 8002db0:	2102      	movs	r1, #2
 8002db2:	0018      	movs	r0, r3
 8002db4:	f7ff ff20 	bl	8002bf8 <ST7789_WriteData>

    // 5. VCOM setting
    ST7789_WriteCommand(0xBB);
 8002db8:	20bb      	movs	r0, #187	@ 0xbb
 8002dba:	f7ff fefd 	bl	8002bb8 <ST7789_WriteCommand>
    uint8_t vcom_data[] = {0x1F}; // VCOM = 0.775V
 8002dbe:	214c      	movs	r1, #76	@ 0x4c
 8002dc0:	187b      	adds	r3, r7, r1
 8002dc2:	4a60      	ldr	r2, [pc, #384]	@ (8002f44 <ST7789_Init+0x22c>)
 8002dc4:	7812      	ldrb	r2, [r2, #0]
 8002dc6:	701a      	strb	r2, [r3, #0]
    ST7789_WriteData(vcom_data, sizeof(vcom_data));
 8002dc8:	187b      	adds	r3, r7, r1
 8002dca:	2101      	movs	r1, #1
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f7ff ff13 	bl	8002bf8 <ST7789_WriteData>

    // 6. LCM Control
    ST7789_WriteCommand(0xC0);
 8002dd2:	20c0      	movs	r0, #192	@ 0xc0
 8002dd4:	f7ff fef0 	bl	8002bb8 <ST7789_WriteCommand>
    uint8_t lcm_data[] = {0x2C};
 8002dd8:	2148      	movs	r1, #72	@ 0x48
 8002dda:	187b      	adds	r3, r7, r1
 8002ddc:	4a5a      	ldr	r2, [pc, #360]	@ (8002f48 <ST7789_Init+0x230>)
 8002dde:	7812      	ldrb	r2, [r2, #0]
 8002de0:	701a      	strb	r2, [r3, #0]
    ST7789_WriteData(lcm_data, sizeof(lcm_data));
 8002de2:	187b      	adds	r3, r7, r1
 8002de4:	2101      	movs	r1, #1
 8002de6:	0018      	movs	r0, r3
 8002de8:	f7ff ff06 	bl	8002bf8 <ST7789_WriteData>

    // 7. VDV and VRH Command Enable
    ST7789_WriteCommand(0xC2);
 8002dec:	20c2      	movs	r0, #194	@ 0xc2
 8002dee:	f7ff fee3 	bl	8002bb8 <ST7789_WriteCommand>
    uint8_t vdv_vrh_en_data[] = {0x01, 0xFF};
 8002df2:	2144      	movs	r1, #68	@ 0x44
 8002df4:	187b      	adds	r3, r7, r1
 8002df6:	22ff      	movs	r2, #255	@ 0xff
 8002df8:	4252      	negs	r2, r2
 8002dfa:	801a      	strh	r2, [r3, #0]
    ST7789_WriteData(vdv_vrh_en_data, sizeof(vdv_vrh_en_data));
 8002dfc:	187b      	adds	r3, r7, r1
 8002dfe:	2102      	movs	r1, #2
 8002e00:	0018      	movs	r0, r3
 8002e02:	f7ff fef9 	bl	8002bf8 <ST7789_WriteData>

    // 8. VRH Set
    ST7789_WriteCommand(0xC3);
 8002e06:	20c3      	movs	r0, #195	@ 0xc3
 8002e08:	f7ff fed6 	bl	8002bb8 <ST7789_WriteCommand>
    uint8_t vrh_data[] = {0x11}; // 0x11 = 4.45V
 8002e0c:	2140      	movs	r1, #64	@ 0x40
 8002e0e:	187b      	adds	r3, r7, r1
 8002e10:	4a4e      	ldr	r2, [pc, #312]	@ (8002f4c <ST7789_Init+0x234>)
 8002e12:	7812      	ldrb	r2, [r2, #0]
 8002e14:	701a      	strb	r2, [r3, #0]
    ST7789_WriteData(vrh_data, sizeof(vrh_data));
 8002e16:	187b      	adds	r3, r7, r1
 8002e18:	2101      	movs	r1, #1
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	f7ff feec 	bl	8002bf8 <ST7789_WriteData>

    // 9. VDV Set
    ST7789_WriteCommand(0xC4);
 8002e20:	20c4      	movs	r0, #196	@ 0xc4
 8002e22:	f7ff fec9 	bl	8002bb8 <ST7789_WriteCommand>
    uint8_t vdv_data[] = {0x20}; // VDV = 0
 8002e26:	213c      	movs	r1, #60	@ 0x3c
 8002e28:	187b      	adds	r3, r7, r1
 8002e2a:	4a49      	ldr	r2, [pc, #292]	@ (8002f50 <ST7789_Init+0x238>)
 8002e2c:	7812      	ldrb	r2, [r2, #0]
 8002e2e:	701a      	strb	r2, [r3, #0]
    ST7789_WriteData(vdv_data, sizeof(vdv_data));
 8002e30:	187b      	adds	r3, r7, r1
 8002e32:	2101      	movs	r1, #1
 8002e34:	0018      	movs	r0, r3
 8002e36:	f7ff fedf 	bl	8002bf8 <ST7789_WriteData>

    // 10. Porch Setting (These are important for the specific 240x280 panel)
    ST7789_WriteCommand(0xB2);
 8002e3a:	20b2      	movs	r0, #178	@ 0xb2
 8002e3c:	f7ff febc 	bl	8002bb8 <ST7789_WriteCommand>
    uint8_t porch_data[] = {0x00, 0xC8, 0x00, 0x21}; // VBP=0, VFP=200, HBP=0, HFP=33
 8002e40:	2138      	movs	r1, #56	@ 0x38
 8002e42:	187b      	adds	r3, r7, r1
 8002e44:	4a43      	ldr	r2, [pc, #268]	@ (8002f54 <ST7789_Init+0x23c>)
 8002e46:	601a      	str	r2, [r3, #0]
    ST7789_WriteData(porch_data, sizeof(porch_data));
 8002e48:	187b      	adds	r3, r7, r1
 8002e4a:	2104      	movs	r1, #4
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	f7ff fed3 	bl	8002bf8 <ST7789_WriteData>

    // 11. Gate Control
    ST7789_WriteCommand(0xB7);
 8002e52:	20b7      	movs	r0, #183	@ 0xb7
 8002e54:	f7ff feb0 	bl	8002bb8 <ST7789_WriteCommand>
    uint8_t gate_data[] = {0x35}; // VGH=14.7V, VGL=-12.2V
 8002e58:	2134      	movs	r1, #52	@ 0x34
 8002e5a:	187b      	adds	r3, r7, r1
 8002e5c:	4a3e      	ldr	r2, [pc, #248]	@ (8002f58 <ST7789_Init+0x240>)
 8002e5e:	7812      	ldrb	r2, [r2, #0]
 8002e60:	701a      	strb	r2, [r3, #0]
    ST7789_WriteData(gate_data, sizeof(gate_data));
 8002e62:	187b      	adds	r3, r7, r1
 8002e64:	2101      	movs	r1, #1
 8002e66:	0018      	movs	r0, r3
 8002e68:	f7ff fec6 	bl	8002bf8 <ST7789_WriteData>

    // 12. SPI Interface Mode
    ST7789_WriteCommand(0xBE);
 8002e6c:	20be      	movs	r0, #190	@ 0xbe
 8002e6e:	f7ff fea3 	bl	8002bb8 <ST7789_WriteCommand>
    uint8_t spi_mode_data[] = {0x01, 0x00}; // DFM=0, BGR=0
 8002e72:	2130      	movs	r1, #48	@ 0x30
 8002e74:	187b      	adds	r3, r7, r1
 8002e76:	2201      	movs	r2, #1
 8002e78:	801a      	strh	r2, [r3, #0]
    ST7789_WriteData(spi_mode_data, sizeof(spi_mode_data));
 8002e7a:	187b      	adds	r3, r7, r1
 8002e7c:	2102      	movs	r1, #2
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f7ff feba 	bl	8002bf8 <ST7789_WriteData>

    // 13. Color Mode (RGB565)
    ST7789_WriteCommand(ST7789_COLMOD);
 8002e84:	203a      	movs	r0, #58	@ 0x3a
 8002e86:	f7ff fe97 	bl	8002bb8 <ST7789_WriteCommand>
    uint8_t colmod_data[] = {0x05}; // 16-bit color (RGB565)
 8002e8a:	212c      	movs	r1, #44	@ 0x2c
 8002e8c:	187b      	adds	r3, r7, r1
 8002e8e:	4a33      	ldr	r2, [pc, #204]	@ (8002f5c <ST7789_Init+0x244>)
 8002e90:	7812      	ldrb	r2, [r2, #0]
 8002e92:	701a      	strb	r2, [r3, #0]
    ST7789_WriteData(colmod_data, sizeof(colmod_data));
 8002e94:	187b      	adds	r3, r7, r1
 8002e96:	2101      	movs	r1, #1
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f7ff fead 	bl	8002bf8 <ST7789_WriteData>
    HAL_Delay(10); // Short delay after color mode
 8002e9e:	200a      	movs	r0, #10
 8002ea0:	f000 fd18 	bl	80038d4 <HAL_Delay>
    // 14. MADCTL (Memory Data Access Control) - Crucial for orientation and mirroring
    // The 1.69" 240x280 display might have its natural orientation such that
    // when you physically mount it, the "0 degree" portrait view needs 180 degree rotation (0xC0).
    // Let's start with 0x00 for standard portrait. If text is upside down, change to 0xC0.
    // If text is mirrored, set MX (0x40) or MY (0x80) bits accordingly.
    ST7789_WriteCommand(ST7789_MADCTL);
 8002ea4:	2036      	movs	r0, #54	@ 0x36
 8002ea6:	f7ff fe87 	bl	8002bb8 <ST7789_WriteCommand>
    uint8_t madctl_data[] = {0x00}; // Default portrait (MY, MX, MV all 0)
 8002eaa:	2128      	movs	r1, #40	@ 0x28
 8002eac:	187b      	adds	r3, r7, r1
 8002eae:	4a2c      	ldr	r2, [pc, #176]	@ (8002f60 <ST7789_Init+0x248>)
 8002eb0:	7812      	ldrb	r2, [r2, #0]
 8002eb2:	701a      	strb	r2, [r3, #0]
    // Common alternatives for these 240x280 Waveshare:
    // 0x00 : Portrait (normal)
    // 0xC0 : Portrait (180 degree rotated) - VERY common for these panels
    // 0x60 : Landscape (90 degree rotation clockwise)
    // 0xA0 : Landscape (270 degree rotation clockwise)
    ST7789_WriteData(madctl_data, sizeof(madctl_data));
 8002eb4:	187b      	adds	r3, r7, r1
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	0018      	movs	r0, r3
 8002eba:	f7ff fe9d 	bl	8002bf8 <ST7789_WriteData>
    HAL_Delay(10);
 8002ebe:	200a      	movs	r0, #10
 8002ec0:	f000 fd08 	bl	80038d4 <HAL_Delay>

    // 15. Inversion ON (often required for ST7789 displays)
    ST7789_WriteCommand(ST7789_INVON);
 8002ec4:	2021      	movs	r0, #33	@ 0x21
 8002ec6:	f7ff fe77 	bl	8002bb8 <ST7789_WriteCommand>
    HAL_Delay(10);
 8002eca:	200a      	movs	r0, #10
 8002ecc:	f000 fd02 	bl	80038d4 <HAL_Delay>

    // 16. Normal Display Mode On
    ST7789_WriteCommand(ST7789_NORON);
 8002ed0:	2013      	movs	r0, #19
 8002ed2:	f7ff fe71 	bl	8002bb8 <ST7789_WriteCommand>
    HAL_Delay(10);
 8002ed6:	200a      	movs	r0, #10
 8002ed8:	f000 fcfc 	bl	80038d4 <HAL_Delay>

    // 17. Positive Gamma Correction
    ST7789_WriteCommand(0xE0);
 8002edc:	20e0      	movs	r0, #224	@ 0xe0
 8002ede:	f7ff fe6b 	bl	8002bb8 <ST7789_WriteCommand>
    uint8_t pgamma_data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8002ee2:	2518      	movs	r5, #24
 8002ee4:	197b      	adds	r3, r7, r5
 8002ee6:	4a1f      	ldr	r2, [pc, #124]	@ (8002f64 <ST7789_Init+0x24c>)
 8002ee8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002eea:	c313      	stmia	r3!, {r0, r1, r4}
 8002eec:	8812      	ldrh	r2, [r2, #0]
 8002eee:	801a      	strh	r2, [r3, #0]
    ST7789_WriteData(pgamma_data, sizeof(pgamma_data));
 8002ef0:	197b      	adds	r3, r7, r5
 8002ef2:	210e      	movs	r1, #14
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f7ff fe7f 	bl	8002bf8 <ST7789_WriteData>

    // 18. Negative Gamma Correction
    ST7789_WriteCommand(0xE1);
 8002efa:	20e1      	movs	r0, #225	@ 0xe1
 8002efc:	f7ff fe5c 	bl	8002bb8 <ST7789_WriteCommand>
    uint8_t ngamma_data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8002f00:	2508      	movs	r5, #8
 8002f02:	197b      	adds	r3, r7, r5
 8002f04:	4a18      	ldr	r2, [pc, #96]	@ (8002f68 <ST7789_Init+0x250>)
 8002f06:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002f08:	c313      	stmia	r3!, {r0, r1, r4}
 8002f0a:	8812      	ldrh	r2, [r2, #0]
 8002f0c:	801a      	strh	r2, [r3, #0]
    ST7789_WriteData(ngamma_data, sizeof(ngamma_data));
 8002f0e:	197b      	adds	r3, r7, r5
 8002f10:	210e      	movs	r1, #14
 8002f12:	0018      	movs	r0, r3
 8002f14:	f7ff fe70 	bl	8002bf8 <ST7789_WriteData>

    // 19. Display ON
    ST7789_WriteCommand(ST7789_DISPON);
 8002f18:	2029      	movs	r0, #41	@ 0x29
 8002f1a:	f7ff fe4d 	bl	8002bb8 <ST7789_WriteCommand>
    HAL_Delay(120);
 8002f1e:	2078      	movs	r0, #120	@ 0x78
 8002f20:	f000 fcd8 	bl	80038d4 <HAL_Delay>

    // Initial fill to black (or white)
    ST7789_FillScreen(ST7789_BLACK);
 8002f24:	2000      	movs	r0, #0
 8002f26:	f000 f821 	bl	8002f6c <ST7789_FillScreen>
}
 8002f2a:	46c0      	nop			@ (mov r8, r8)
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	b016      	add	sp, #88	@ 0x58
 8002f30:	bdb0      	pop	{r4, r5, r7, pc}
 8002f32:	46c0      	nop			@ (mov r8, r8)
 8002f34:	200002b0 	.word	0x200002b0
 8002f38:	50000400 	.word	0x50000400
 8002f3c:	08008f24 	.word	0x08008f24
 8002f40:	ffffa1a4 	.word	0xffffa1a4
 8002f44:	08008f28 	.word	0x08008f28
 8002f48:	08008f2c 	.word	0x08008f2c
 8002f4c:	08008f30 	.word	0x08008f30
 8002f50:	08008f34 	.word	0x08008f34
 8002f54:	2100c800 	.word	0x2100c800
 8002f58:	08008f38 	.word	0x08008f38
 8002f5c:	08008f3c 	.word	0x08008f3c
 8002f60:	08008f40 	.word	0x08008f40
 8002f64:	08008f44 	.word	0x08008f44
 8002f68:	08008f54 	.word	0x08008f54

08002f6c <ST7789_FillScreen>:

void ST7789_FillScreen(uint16_t color) {
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af02      	add	r7, sp, #8
 8002f72:	0002      	movs	r2, r0
 8002f74:	1dbb      	adds	r3, r7, #6
 8002f76:	801a      	strh	r2, [r3, #0]
    ST7789_FillRectangle(0, 0, ST7789_WIDTH, ST7789_HEIGHT, color);
 8002f78:	238c      	movs	r3, #140	@ 0x8c
 8002f7a:	005a      	lsls	r2, r3, #1
 8002f7c:	1dbb      	adds	r3, r7, #6
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	0013      	movs	r3, r2
 8002f84:	22f0      	movs	r2, #240	@ 0xf0
 8002f86:	2100      	movs	r1, #0
 8002f88:	2000      	movs	r0, #0
 8002f8a:	f000 f84f 	bl	800302c <ST7789_FillRectangle>
}
 8002f8e:	46c0      	nop			@ (mov r8, r8)
 8002f90:	46bd      	mov	sp, r7
 8002f92:	b002      	add	sp, #8
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <ST7789_DrawPixel>:

void ST7789_DrawPixel(int16_t x, int16_t y, uint16_t color) {
 8002f96:	b590      	push	{r4, r7, lr}
 8002f98:	b085      	sub	sp, #20
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	0004      	movs	r4, r0
 8002f9e:	0008      	movs	r0, r1
 8002fa0:	0011      	movs	r1, r2
 8002fa2:	1dbb      	adds	r3, r7, #6
 8002fa4:	1c22      	adds	r2, r4, #0
 8002fa6:	801a      	strh	r2, [r3, #0]
 8002fa8:	1d3b      	adds	r3, r7, #4
 8002faa:	1c02      	adds	r2, r0, #0
 8002fac:	801a      	strh	r2, [r3, #0]
 8002fae:	1cbb      	adds	r3, r7, #2
 8002fb0:	1c0a      	adds	r2, r1, #0
 8002fb2:	801a      	strh	r2, [r3, #0]
    if ((x < 0) || (x >= ST7789_WIDTH) || (y < 0) || (y >= ST7789_HEIGHT)) return;
 8002fb4:	1dbb      	adds	r3, r7, #6
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	5e9b      	ldrsh	r3, [r3, r2]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	db31      	blt.n	8003022 <ST7789_DrawPixel+0x8c>
 8002fbe:	1dbb      	adds	r3, r7, #6
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	5e9b      	ldrsh	r3, [r3, r2]
 8002fc4:	2bef      	cmp	r3, #239	@ 0xef
 8002fc6:	dc2c      	bgt.n	8003022 <ST7789_DrawPixel+0x8c>
 8002fc8:	1d3b      	adds	r3, r7, #4
 8002fca:	2200      	movs	r2, #0
 8002fcc:	5e9b      	ldrsh	r3, [r3, r2]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	db27      	blt.n	8003022 <ST7789_DrawPixel+0x8c>
 8002fd2:	1d3b      	adds	r3, r7, #4
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	5e9a      	ldrsh	r2, [r3, r2]
 8002fd8:	238c      	movs	r3, #140	@ 0x8c
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	da20      	bge.n	8003022 <ST7789_DrawPixel+0x8c>
    ST7789_SetAddressWindow(x, y, x + 1, y + 1);
 8002fe0:	1dbb      	adds	r3, r7, #6
 8002fe2:	8818      	ldrh	r0, [r3, #0]
 8002fe4:	1d3b      	adds	r3, r7, #4
 8002fe6:	8819      	ldrh	r1, [r3, #0]
 8002fe8:	1dbb      	adds	r3, r7, #6
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	3301      	adds	r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	1d3b      	adds	r3, r7, #4
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	f7ff fe1e 	bl	8002c38 <ST7789_SetAddressWindow>
    uint8_t data[2];
    data[0] = (uint8_t)(color >> 8);
 8002ffc:	1cbb      	adds	r3, r7, #2
 8002ffe:	881b      	ldrh	r3, [r3, #0]
 8003000:	0a1b      	lsrs	r3, r3, #8
 8003002:	b29b      	uxth	r3, r3
 8003004:	b2da      	uxtb	r2, r3
 8003006:	210c      	movs	r1, #12
 8003008:	187b      	adds	r3, r7, r1
 800300a:	701a      	strb	r2, [r3, #0]
    data[1] = (uint8_t)(color & 0xFF);
 800300c:	1cbb      	adds	r3, r7, #2
 800300e:	881b      	ldrh	r3, [r3, #0]
 8003010:	b2da      	uxtb	r2, r3
 8003012:	187b      	adds	r3, r7, r1
 8003014:	705a      	strb	r2, [r3, #1]
    ST7789_WriteData(data, 2);
 8003016:	187b      	adds	r3, r7, r1
 8003018:	2102      	movs	r1, #2
 800301a:	0018      	movs	r0, r3
 800301c:	f7ff fdec 	bl	8002bf8 <ST7789_WriteData>
 8003020:	e000      	b.n	8003024 <ST7789_DrawPixel+0x8e>
    if ((x < 0) || (x >= ST7789_WIDTH) || (y < 0) || (y >= ST7789_HEIGHT)) return;
 8003022:	46c0      	nop			@ (mov r8, r8)
}
 8003024:	46bd      	mov	sp, r7
 8003026:	b005      	add	sp, #20
 8003028:	bd90      	pop	{r4, r7, pc}
	...

0800302c <ST7789_FillRectangle>:

void ST7789_FillRectangle(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 800302c:	b5b0      	push	{r4, r5, r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	0005      	movs	r5, r0
 8003034:	000c      	movs	r4, r1
 8003036:	0010      	movs	r0, r2
 8003038:	0019      	movs	r1, r3
 800303a:	1dbb      	adds	r3, r7, #6
 800303c:	1c2a      	adds	r2, r5, #0
 800303e:	801a      	strh	r2, [r3, #0]
 8003040:	1d3b      	adds	r3, r7, #4
 8003042:	1c22      	adds	r2, r4, #0
 8003044:	801a      	strh	r2, [r3, #0]
 8003046:	1cbb      	adds	r3, r7, #2
 8003048:	1c02      	adds	r2, r0, #0
 800304a:	801a      	strh	r2, [r3, #0]
 800304c:	003b      	movs	r3, r7
 800304e:	1c0a      	adds	r2, r1, #0
 8003050:	801a      	strh	r2, [r3, #0]
    if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT)) return;
 8003052:	1dbb      	adds	r3, r7, #6
 8003054:	2200      	movs	r2, #0
 8003056:	5e9b      	ldrsh	r3, [r3, r2]
 8003058:	2bef      	cmp	r3, #239	@ 0xef
 800305a:	dd00      	ble.n	800305e <ST7789_FillRectangle+0x32>
 800305c:	e077      	b.n	800314e <ST7789_FillRectangle+0x122>
 800305e:	1d3b      	adds	r3, r7, #4
 8003060:	2200      	movs	r2, #0
 8003062:	5e9a      	ldrsh	r2, [r3, r2]
 8003064:	238c      	movs	r3, #140	@ 0x8c
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	429a      	cmp	r2, r3
 800306a:	db00      	blt.n	800306e <ST7789_FillRectangle+0x42>
 800306c:	e06f      	b.n	800314e <ST7789_FillRectangle+0x122>
    if ((x + w - 1) >= ST7789_WIDTH) w = ST7789_WIDTH - x;
 800306e:	1dbb      	adds	r3, r7, #6
 8003070:	2200      	movs	r2, #0
 8003072:	5e9a      	ldrsh	r2, [r3, r2]
 8003074:	1cbb      	adds	r3, r7, #2
 8003076:	2100      	movs	r1, #0
 8003078:	5e5b      	ldrsh	r3, [r3, r1]
 800307a:	18d3      	adds	r3, r2, r3
 800307c:	2bf0      	cmp	r3, #240	@ 0xf0
 800307e:	dd06      	ble.n	800308e <ST7789_FillRectangle+0x62>
 8003080:	1dbb      	adds	r3, r7, #6
 8003082:	881b      	ldrh	r3, [r3, #0]
 8003084:	22f0      	movs	r2, #240	@ 0xf0
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	b29a      	uxth	r2, r3
 800308a:	1cbb      	adds	r3, r7, #2
 800308c:	801a      	strh	r2, [r3, #0]
    if ((y + h - 1) >= ST7789_HEIGHT) h = ST7789_HEIGHT - y;
 800308e:	1d3b      	adds	r3, r7, #4
 8003090:	2200      	movs	r2, #0
 8003092:	5e9a      	ldrsh	r2, [r3, r2]
 8003094:	003b      	movs	r3, r7
 8003096:	2100      	movs	r1, #0
 8003098:	5e5b      	ldrsh	r3, [r3, r1]
 800309a:	18d2      	adds	r2, r2, r3
 800309c:	238c      	movs	r3, #140	@ 0x8c
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	429a      	cmp	r2, r3
 80030a2:	dd07      	ble.n	80030b4 <ST7789_FillRectangle+0x88>
 80030a4:	1d3b      	adds	r3, r7, #4
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	228c      	movs	r2, #140	@ 0x8c
 80030aa:	0052      	lsls	r2, r2, #1
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	003b      	movs	r3, r7
 80030b2:	801a      	strh	r2, [r3, #0]

    ST7789_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 80030b4:	1dbb      	adds	r3, r7, #6
 80030b6:	8818      	ldrh	r0, [r3, #0]
 80030b8:	1d3b      	adds	r3, r7, #4
 80030ba:	8819      	ldrh	r1, [r3, #0]
 80030bc:	1dbb      	adds	r3, r7, #6
 80030be:	881a      	ldrh	r2, [r3, #0]
 80030c0:	1cbb      	adds	r3, r7, #2
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	18d3      	adds	r3, r2, r3
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b29c      	uxth	r4, r3
 80030cc:	1d3b      	adds	r3, r7, #4
 80030ce:	881a      	ldrh	r2, [r3, #0]
 80030d0:	003b      	movs	r3, r7
 80030d2:	881b      	ldrh	r3, [r3, #0]
 80030d4:	18d3      	adds	r3, r2, r3
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29b      	uxth	r3, r3
 80030dc:	0022      	movs	r2, r4
 80030de:	f7ff fdab 	bl	8002c38 <ST7789_SetAddressWindow>

    uint8_t data[2];
    data[0] = (uint8_t)(color >> 8);
 80030e2:	2120      	movs	r1, #32
 80030e4:	187b      	adds	r3, r7, r1
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	0a1b      	lsrs	r3, r3, #8
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	2008      	movs	r0, #8
 80030f0:	183b      	adds	r3, r7, r0
 80030f2:	701a      	strb	r2, [r3, #0]
    data[1] = (uint8_t)(color & 0xFF);
 80030f4:	187b      	adds	r3, r7, r1
 80030f6:	881b      	ldrh	r3, [r3, #0]
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	183b      	adds	r3, r7, r0
 80030fc:	705a      	strb	r2, [r3, #1]

    uint32_t i = 0;
 80030fe:	2300      	movs	r3, #0
 8003100:	60fb      	str	r3, [r7, #12]
    ST7789_Select();
 8003102:	f7ff fd3d 	bl	8002b80 <ST7789_Select>
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET); // Data mode
 8003106:	2380      	movs	r3, #128	@ 0x80
 8003108:	0059      	lsls	r1, r3, #1
 800310a:	23a0      	movs	r3, #160	@ 0xa0
 800310c:	05db      	lsls	r3, r3, #23
 800310e:	2201      	movs	r2, #1
 8003110:	0018      	movs	r0, r3
 8003112:	f000 fe39 	bl	8003d88 <HAL_GPIO_WritePin>

    // Transmit in chunks if the buffer is large, or just directly
    for (i = 0; i < (uint32_t)w * h; i++) {
 8003116:	2300      	movs	r3, #0
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	e00b      	b.n	8003134 <ST7789_FillRectangle+0x108>
        HAL_SPI_Transmit(hspi_st7789, data, 2, HAL_MAX_DELAY);
 800311c:	4b0e      	ldr	r3, [pc, #56]	@ (8003158 <ST7789_FillRectangle+0x12c>)
 800311e:	6818      	ldr	r0, [r3, #0]
 8003120:	2301      	movs	r3, #1
 8003122:	425b      	negs	r3, r3
 8003124:	2208      	movs	r2, #8
 8003126:	18b9      	adds	r1, r7, r2
 8003128:	2202      	movs	r2, #2
 800312a:	f001 ffd3 	bl	80050d4 <HAL_SPI_Transmit>
    for (i = 0; i < (uint32_t)w * h; i++) {
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	3301      	adds	r3, #1
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	1cbb      	adds	r3, r7, #2
 8003136:	2200      	movs	r2, #0
 8003138:	5e9b      	ldrsh	r3, [r3, r2]
 800313a:	003a      	movs	r2, r7
 800313c:	2100      	movs	r1, #0
 800313e:	5e52      	ldrsh	r2, [r2, r1]
 8003140:	4353      	muls	r3, r2
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	429a      	cmp	r2, r3
 8003146:	d3e9      	bcc.n	800311c <ST7789_FillRectangle+0xf0>
    }
    ST7789_Unselect();
 8003148:	f7ff fd28 	bl	8002b9c <ST7789_Unselect>
 800314c:	e000      	b.n	8003150 <ST7789_FillRectangle+0x124>
    if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT)) return;
 800314e:	46c0      	nop			@ (mov r8, r8)
}
 8003150:	46bd      	mov	sp, r7
 8003152:	b004      	add	sp, #16
 8003154:	bdb0      	pop	{r4, r5, r7, pc}
 8003156:	46c0      	nop			@ (mov r8, r8)
 8003158:	200002b0 	.word	0x200002b0

0800315c <ST7789_DrawChar>:
        if (e2 < dy) { err += dx; y0 += sy; }
    }
}

// Corrected ST7789_DrawChar in st7789.c
void ST7789_DrawChar(int16_t x, int16_t y, char ch, const sFONT *font, uint16_t color, uint16_t background_color) {
 800315c:	b590      	push	{r4, r7, lr}
 800315e:	b08f      	sub	sp, #60	@ 0x3c
 8003160:	af02      	add	r7, sp, #8
 8003162:	0004      	movs	r4, r0
 8003164:	0008      	movs	r0, r1
 8003166:	0011      	movs	r1, r2
 8003168:	607b      	str	r3, [r7, #4]
 800316a:	230e      	movs	r3, #14
 800316c:	18fb      	adds	r3, r7, r3
 800316e:	1c22      	adds	r2, r4, #0
 8003170:	801a      	strh	r2, [r3, #0]
 8003172:	230c      	movs	r3, #12
 8003174:	18fb      	adds	r3, r7, r3
 8003176:	1c02      	adds	r2, r0, #0
 8003178:	801a      	strh	r2, [r3, #0]
 800317a:	230b      	movs	r3, #11
 800317c:	18fb      	adds	r3, r7, r3
 800317e:	1c0a      	adds	r2, r1, #0
 8003180:	701a      	strb	r2, [r3, #0]

    // Calculate bytes per character
    uint16_t bytes_per_row = (font->Width + 7) / 8;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	889b      	ldrh	r3, [r3, #4]
 8003186:	3307      	adds	r3, #7
 8003188:	2b00      	cmp	r3, #0
 800318a:	da00      	bge.n	800318e <ST7789_DrawChar+0x32>
 800318c:	3307      	adds	r3, #7
 800318e:	10db      	asrs	r3, r3, #3
 8003190:	001a      	movs	r2, r3
 8003192:	2122      	movs	r1, #34	@ 0x22
 8003194:	187b      	adds	r3, r7, r1
 8003196:	801a      	strh	r2, [r3, #0]
    uint16_t bytes_per_char = bytes_per_row * font->Height;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	88da      	ldrh	r2, [r3, #6]
 800319c:	2320      	movs	r3, #32
 800319e:	18fb      	adds	r3, r7, r3
 80031a0:	1879      	adds	r1, r7, r1
 80031a2:	8809      	ldrh	r1, [r1, #0]
 80031a4:	434a      	muls	r2, r1
 80031a6:	801a      	strh	r2, [r3, #0]

    // Check if ch is within the font's supported range
    if (ch < FONT_START_ASCII || ch > FONT_END_ASCII) {
 80031a8:	220b      	movs	r2, #11
 80031aa:	18bb      	adds	r3, r7, r2
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	2b1f      	cmp	r3, #31
 80031b0:	d903      	bls.n	80031ba <ST7789_DrawChar+0x5e>
 80031b2:	18bb      	adds	r3, r7, r2
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	2b7e      	cmp	r3, #126	@ 0x7e
 80031b8:	d915      	bls.n	80031e6 <ST7789_DrawChar+0x8a>
        // You can choose to draw a blank space for unsupported characters
        // Or draw a specific placeholder character like '?'
        // For now, let's just draw a blank rectangle (using background_color)
        ST7789_FillRectangle(x, y, font->Width, font->Height, background_color);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	889b      	ldrh	r3, [r3, #4]
 80031be:	b21a      	sxth	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	88db      	ldrh	r3, [r3, #6]
 80031c4:	b21c      	sxth	r4, r3
 80031c6:	230c      	movs	r3, #12
 80031c8:	18fb      	adds	r3, r7, r3
 80031ca:	2100      	movs	r1, #0
 80031cc:	5e59      	ldrsh	r1, [r3, r1]
 80031ce:	230e      	movs	r3, #14
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	2000      	movs	r0, #0
 80031d4:	5e18      	ldrsh	r0, [r3, r0]
 80031d6:	2344      	movs	r3, #68	@ 0x44
 80031d8:	18fb      	adds	r3, r7, r3
 80031da:	881b      	ldrh	r3, [r3, #0]
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	0023      	movs	r3, r4
 80031e0:	f7ff ff24 	bl	800302c <ST7789_FillRectangle>
        return;
 80031e4:	e09a      	b.n	800331c <ST7789_DrawChar+0x1c0>
    }

    uint16_t char_index = ch - FONT_START_ASCII;
 80031e6:	230b      	movs	r3, #11
 80031e8:	18fb      	adds	r3, r7, r3
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	211e      	movs	r1, #30
 80031f0:	187b      	adds	r3, r7, r1
 80031f2:	3a20      	subs	r2, #32
 80031f4:	801a      	strh	r2, [r3, #0]

    // Get a pointer to the start of the character's data
    const uint8_t *char_data = font->table + (char_index * bytes_per_char);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	187a      	adds	r2, r7, r1
 80031fc:	8812      	ldrh	r2, [r2, #0]
 80031fe:	2120      	movs	r1, #32
 8003200:	1879      	adds	r1, r7, r1
 8003202:	8809      	ldrh	r1, [r1, #0]
 8003204:	434a      	muls	r2, r1
 8003206:	189b      	adds	r3, r3, r2
 8003208:	61bb      	str	r3, [r7, #24]

    // Draw the character
    for (int y_px = 0; y_px < font->Height; y_px++) {
 800320a:	2300      	movs	r3, #0
 800320c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800320e:	e07e      	b.n	800330e <ST7789_DrawChar+0x1b2>
		for (int x_byte = 0; x_byte < bytes_per_row; x_byte++) {
 8003210:	2300      	movs	r3, #0
 8003212:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003214:	e071      	b.n	80032fa <ST7789_DrawChar+0x19e>
			// Get the byte of data for the current row and 8-pixel segment
			uint8_t byte_data = char_data[y_px * bytes_per_row + x_byte];
 8003216:	2322      	movs	r3, #34	@ 0x22
 8003218:	18fb      	adds	r3, r7, r3
 800321a:	881b      	ldrh	r3, [r3, #0]
 800321c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800321e:	435a      	muls	r2, r3
 8003220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003222:	18d3      	adds	r3, r2, r3
 8003224:	001a      	movs	r2, r3
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	189a      	adds	r2, r3, r2
 800322a:	2317      	movs	r3, #23
 800322c:	18fb      	adds	r3, r7, r3
 800322e:	7812      	ldrb	r2, [r2, #0]
 8003230:	701a      	strb	r2, [r3, #0]

			// Iterate through the 8 bits of the current byte
			for (int x_bit = 0; x_bit < 8; x_bit++) {
 8003232:	2300      	movs	r3, #0
 8003234:	627b      	str	r3, [r7, #36]	@ 0x24
 8003236:	e05a      	b.n	80032ee <ST7789_DrawChar+0x192>
				// Calculate the absolute X coordinate on the display for the current pixel
				// x: starting X for the character
				// (x_byte * 8): offset for the current 8-bit segment
				// x_bit: offset for the current pixel within the 8-bit segment (0 for leftmost, 7 for rightmost)
				int16_t current_x = x + (x_byte * 8) + x_bit;
 8003238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800323a:	b29b      	uxth	r3, r3
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	b29a      	uxth	r2, r3
 8003240:	230e      	movs	r3, #14
 8003242:	18fb      	adds	r3, r7, r3
 8003244:	881b      	ldrh	r3, [r3, #0]
 8003246:	18d3      	adds	r3, r2, r3
 8003248:	b29a      	uxth	r2, r3
 800324a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324c:	b29b      	uxth	r3, r3
 800324e:	18d3      	adds	r3, r2, r3
 8003250:	b29a      	uxth	r2, r3
 8003252:	2014      	movs	r0, #20
 8003254:	183b      	adds	r3, r7, r0
 8003256:	801a      	strh	r2, [r3, #0]

				// Calculate the relative X coordinate within the character's full bitmap
				// This is used for boundary checking against font->Width
				int16_t char_pixel_offset_x = (x_byte * 8) + x_bit;
 8003258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800325a:	b29b      	uxth	r3, r3
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	b29a      	uxth	r2, r3
 8003260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003262:	b29b      	uxth	r3, r3
 8003264:	18d3      	adds	r3, r2, r3
 8003266:	b29a      	uxth	r2, r3
 8003268:	2112      	movs	r1, #18
 800326a:	187b      	adds	r3, r7, r1
 800326c:	801a      	strh	r2, [r3, #0]

				// Only draw if this pixel is within the defined width of the character
				if (char_pixel_offset_x < font->Width) {
 800326e:	187b      	adds	r3, r7, r1
 8003270:	2200      	movs	r2, #0
 8003272:	5e9b      	ldrsh	r3, [r3, r2]
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	8892      	ldrh	r2, [r2, #4]
 8003278:	4293      	cmp	r3, r2
 800327a:	da35      	bge.n	80032e8 <ST7789_DrawChar+0x18c>
					// Example:
					// x_bit=0 (leftmost pixel) -> (byte_data >> 7) & 0x01 (reads MSB)
					// x_bit=1                  -> (byte_data >> 6) & 0x01
					// ...
					// x_bit=7 (rightmost pixel) -> (byte_data >> 0) & 0x01 (reads LSB)
					if ((byte_data >> (7 - x_bit)) & 0x01) { // This is the common MSB-first extraction
 800327c:	2317      	movs	r3, #23
 800327e:	18fb      	adds	r3, r7, r3
 8003280:	781a      	ldrb	r2, [r3, #0]
 8003282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003284:	2107      	movs	r1, #7
 8003286:	1acb      	subs	r3, r1, r3
 8003288:	411a      	asrs	r2, r3
 800328a:	0013      	movs	r3, r2
 800328c:	2201      	movs	r2, #1
 800328e:	4013      	ands	r3, r2
 8003290:	d011      	beq.n	80032b6 <ST7789_DrawChar+0x15a>
						ST7789_DrawPixel(current_x, y + y_px, color);
 8003292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003294:	b29a      	uxth	r2, r3
 8003296:	230c      	movs	r3, #12
 8003298:	18fb      	adds	r3, r7, r3
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	18d3      	adds	r3, r2, r3
 800329e:	b29b      	uxth	r3, r3
 80032a0:	b219      	sxth	r1, r3
 80032a2:	2340      	movs	r3, #64	@ 0x40
 80032a4:	18fb      	adds	r3, r7, r3
 80032a6:	881a      	ldrh	r2, [r3, #0]
 80032a8:	183b      	adds	r3, r7, r0
 80032aa:	2000      	movs	r0, #0
 80032ac:	5e1b      	ldrsh	r3, [r3, r0]
 80032ae:	0018      	movs	r0, r3
 80032b0:	f7ff fe71 	bl	8002f96 <ST7789_DrawPixel>
 80032b4:	e018      	b.n	80032e8 <ST7789_DrawChar+0x18c>
					} else {
						if (background_color != color) {
 80032b6:	2044      	movs	r0, #68	@ 0x44
 80032b8:	183a      	adds	r2, r7, r0
 80032ba:	2340      	movs	r3, #64	@ 0x40
 80032bc:	18fb      	adds	r3, r7, r3
 80032be:	8812      	ldrh	r2, [r2, #0]
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d010      	beq.n	80032e8 <ST7789_DrawChar+0x18c>
							ST7789_DrawPixel(current_x, y + y_px, background_color);
 80032c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	230c      	movs	r3, #12
 80032cc:	18fb      	adds	r3, r7, r3
 80032ce:	881b      	ldrh	r3, [r3, #0]
 80032d0:	18d3      	adds	r3, r2, r3
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	b219      	sxth	r1, r3
 80032d6:	183b      	adds	r3, r7, r0
 80032d8:	881a      	ldrh	r2, [r3, #0]
 80032da:	2314      	movs	r3, #20
 80032dc:	18fb      	adds	r3, r7, r3
 80032de:	2000      	movs	r0, #0
 80032e0:	5e1b      	ldrsh	r3, [r3, r0]
 80032e2:	0018      	movs	r0, r3
 80032e4:	f7ff fe57 	bl	8002f96 <ST7789_DrawPixel>
			for (int x_bit = 0; x_bit < 8; x_bit++) {
 80032e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ea:	3301      	adds	r3, #1
 80032ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80032ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f0:	2b07      	cmp	r3, #7
 80032f2:	dda1      	ble.n	8003238 <ST7789_DrawChar+0xdc>
		for (int x_byte = 0; x_byte < bytes_per_row; x_byte++) {
 80032f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f6:	3301      	adds	r3, #1
 80032f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032fa:	2322      	movs	r3, #34	@ 0x22
 80032fc:	18fb      	adds	r3, r7, r3
 80032fe:	881b      	ldrh	r3, [r3, #0]
 8003300:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003302:	429a      	cmp	r2, r3
 8003304:	da00      	bge.n	8003308 <ST7789_DrawChar+0x1ac>
 8003306:	e786      	b.n	8003216 <ST7789_DrawChar+0xba>
    for (int y_px = 0; y_px < font->Height; y_px++) {
 8003308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800330a:	3301      	adds	r3, #1
 800330c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	88db      	ldrh	r3, [r3, #6]
 8003312:	001a      	movs	r2, r3
 8003314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003316:	4293      	cmp	r3, r2
 8003318:	da00      	bge.n	800331c <ST7789_DrawChar+0x1c0>
 800331a:	e779      	b.n	8003210 <ST7789_DrawChar+0xb4>
					}
				}
			}
		}
	}
}
 800331c:	46bd      	mov	sp, r7
 800331e:	b00d      	add	sp, #52	@ 0x34
 8003320:	bd90      	pop	{r4, r7, pc}

08003322 <ST7789_WriteString>:
        // Move to the next character in the string
        str++;
    }
}

void ST7789_WriteString(int16_t x, int16_t y, const char* str, const sFONT *font, uint16_t color, uint16_t bgcolor) {
 8003322:	b5b0      	push	{r4, r5, r7, lr}
 8003324:	b086      	sub	sp, #24
 8003326:	af02      	add	r7, sp, #8
 8003328:	60ba      	str	r2, [r7, #8]
 800332a:	607b      	str	r3, [r7, #4]
 800332c:	230e      	movs	r3, #14
 800332e:	18fb      	adds	r3, r7, r3
 8003330:	1c02      	adds	r2, r0, #0
 8003332:	801a      	strh	r2, [r3, #0]
 8003334:	230c      	movs	r3, #12
 8003336:	18fb      	adds	r3, r7, r3
 8003338:	1c0a      	adds	r2, r1, #0
 800333a:	801a      	strh	r2, [r3, #0]
    while (*str) {
 800333c:	e03e      	b.n	80033bc <ST7789_WriteString+0x9a>
        if (x + font->Width >= ST7789_WIDTH) { // Wrap text if it exceeds screen width
 800333e:	210e      	movs	r1, #14
 8003340:	187b      	adds	r3, r7, r1
 8003342:	2200      	movs	r2, #0
 8003344:	5e9b      	ldrsh	r3, [r3, r2]
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	8892      	ldrh	r2, [r2, #4]
 800334a:	189b      	adds	r3, r3, r2
 800334c:	2bef      	cmp	r3, #239	@ 0xef
 800334e:	dd15      	ble.n	800337c <ST7789_WriteString+0x5a>
            x = 0;
 8003350:	187b      	adds	r3, r7, r1
 8003352:	2200      	movs	r2, #0
 8003354:	801a      	strh	r2, [r3, #0]
            y += font->Height;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	88da      	ldrh	r2, [r3, #6]
 800335a:	210c      	movs	r1, #12
 800335c:	187b      	adds	r3, r7, r1
 800335e:	881b      	ldrh	r3, [r3, #0]
 8003360:	18d3      	adds	r3, r2, r3
 8003362:	b29a      	uxth	r2, r3
 8003364:	187b      	adds	r3, r7, r1
 8003366:	801a      	strh	r2, [r3, #0]
            if (y + font->Height >= ST7789_HEIGHT) break; // Don't draw if going off screen
 8003368:	187b      	adds	r3, r7, r1
 800336a:	2200      	movs	r2, #0
 800336c:	5e9b      	ldrsh	r3, [r3, r2]
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	88d2      	ldrh	r2, [r2, #6]
 8003372:	189a      	adds	r2, r3, r2
 8003374:	238c      	movs	r3, #140	@ 0x8c
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	429a      	cmp	r2, r3
 800337a:	da24      	bge.n	80033c6 <ST7789_WriteString+0xa4>
        }
        ST7789_DrawChar(x, y, *str++, font, color, bgcolor);
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	1c5a      	adds	r2, r3, #1
 8003380:	60ba      	str	r2, [r7, #8]
 8003382:	781a      	ldrb	r2, [r3, #0]
 8003384:	687c      	ldr	r4, [r7, #4]
 8003386:	230c      	movs	r3, #12
 8003388:	18fb      	adds	r3, r7, r3
 800338a:	2100      	movs	r1, #0
 800338c:	5e59      	ldrsh	r1, [r3, r1]
 800338e:	250e      	movs	r5, #14
 8003390:	197b      	adds	r3, r7, r5
 8003392:	2000      	movs	r0, #0
 8003394:	5e18      	ldrsh	r0, [r3, r0]
 8003396:	2324      	movs	r3, #36	@ 0x24
 8003398:	18fb      	adds	r3, r7, r3
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	9301      	str	r3, [sp, #4]
 800339e:	2320      	movs	r3, #32
 80033a0:	18fb      	adds	r3, r7, r3
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	0023      	movs	r3, r4
 80033a8:	f7ff fed8 	bl	800315c <ST7789_DrawChar>
        x += font->Width;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	889a      	ldrh	r2, [r3, #4]
 80033b0:	197b      	adds	r3, r7, r5
 80033b2:	881b      	ldrh	r3, [r3, #0]
 80033b4:	18d3      	adds	r3, r2, r3
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	197b      	adds	r3, r7, r5
 80033ba:	801a      	strh	r2, [r3, #0]
    while (*str) {
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1bc      	bne.n	800333e <ST7789_WriteString+0x1c>
    }
}
 80033c4:	e000      	b.n	80033c8 <ST7789_WriteString+0xa6>
            if (y + font->Height >= ST7789_HEIGHT) break; // Don't draw if going off screen
 80033c6:	46c0      	nop			@ (mov r8, r8)
}
 80033c8:	46c0      	nop			@ (mov r8, r8)
 80033ca:	46bd      	mov	sp, r7
 80033cc:	b004      	add	sp, #16
 80033ce:	bdb0      	pop	{r4, r5, r7, pc}

080033d0 <ST7789_SetBacklight>:

void ST7789_DisplayOff(void) {
    ST7789_WriteCommand(ST7789_DISPOFF);
}

void ST7789_SetBacklight(uint8_t state) {
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	0002      	movs	r2, r0
 80033d8:	1dfb      	adds	r3, r7, #7
 80033da:	701a      	strb	r2, [r3, #0]
    if (state) {
 80033dc:	1dfb      	adds	r3, r7, #7
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d006      	beq.n	80033f2 <ST7789_SetBacklight+0x22>
        HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 80033e4:	4b08      	ldr	r3, [pc, #32]	@ (8003408 <ST7789_SetBacklight+0x38>)
 80033e6:	2201      	movs	r2, #1
 80033e8:	2180      	movs	r1, #128	@ 0x80
 80033ea:	0018      	movs	r0, r3
 80033ec:	f000 fccc 	bl	8003d88 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
    }
}
 80033f0:	e005      	b.n	80033fe <ST7789_SetBacklight+0x2e>
        HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 80033f2:	4b05      	ldr	r3, [pc, #20]	@ (8003408 <ST7789_SetBacklight+0x38>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	2180      	movs	r1, #128	@ 0x80
 80033f8:	0018      	movs	r0, r3
 80033fa:	f000 fcc5 	bl	8003d88 <HAL_GPIO_WritePin>
}
 80033fe:	46c0      	nop			@ (mov r8, r8)
 8003400:	46bd      	mov	sp, r7
 8003402:	b002      	add	sp, #8
 8003404:	bd80      	pop	{r7, pc}
 8003406:	46c0      	nop			@ (mov r8, r8)
 8003408:	50000800 	.word	0x50000800

0800340c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003412:	4b11      	ldr	r3, [pc, #68]	@ (8003458 <HAL_MspInit+0x4c>)
 8003414:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003416:	4b10      	ldr	r3, [pc, #64]	@ (8003458 <HAL_MspInit+0x4c>)
 8003418:	2101      	movs	r1, #1
 800341a:	430a      	orrs	r2, r1
 800341c:	641a      	str	r2, [r3, #64]	@ 0x40
 800341e:	4b0e      	ldr	r3, [pc, #56]	@ (8003458 <HAL_MspInit+0x4c>)
 8003420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003422:	2201      	movs	r2, #1
 8003424:	4013      	ands	r3, r2
 8003426:	607b      	str	r3, [r7, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800342a:	4b0b      	ldr	r3, [pc, #44]	@ (8003458 <HAL_MspInit+0x4c>)
 800342c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800342e:	4b0a      	ldr	r3, [pc, #40]	@ (8003458 <HAL_MspInit+0x4c>)
 8003430:	2180      	movs	r1, #128	@ 0x80
 8003432:	0549      	lsls	r1, r1, #21
 8003434:	430a      	orrs	r2, r1
 8003436:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003438:	4b07      	ldr	r3, [pc, #28]	@ (8003458 <HAL_MspInit+0x4c>)
 800343a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800343c:	2380      	movs	r3, #128	@ 0x80
 800343e:	055b      	lsls	r3, r3, #21
 8003440:	4013      	ands	r3, r2
 8003442:	603b      	str	r3, [r7, #0]
 8003444:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8003446:	23c0      	movs	r3, #192	@ 0xc0
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	0018      	movs	r0, r3
 800344c:	f000 fa66 	bl	800391c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003450:	46c0      	nop			@ (mov r8, r8)
 8003452:	46bd      	mov	sp, r7
 8003454:	b002      	add	sp, #8
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40021000 	.word	0x40021000

0800345c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003460:	46c0      	nop			@ (mov r8, r8)
 8003462:	e7fd      	b.n	8003460 <NMI_Handler+0x4>

08003464 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003468:	46c0      	nop			@ (mov r8, r8)
 800346a:	e7fd      	b.n	8003468 <HardFault_Handler+0x4>

0800346c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003470:	46c0      	nop			@ (mov r8, r8)
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800347a:	46c0      	nop			@ (mov r8, r8)
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003484:	f000 fa0a 	bl	800389c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003488:	46c0      	nop			@ (mov r8, r8)
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	af00      	add	r7, sp, #0
  return 1;
 8003492:	2301      	movs	r3, #1
}
 8003494:	0018      	movs	r0, r3
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <_kill>:

int _kill(int pid, int sig)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b082      	sub	sp, #8
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
 80034a2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80034a4:	f003 fd12 	bl	8006ecc <__errno>
 80034a8:	0003      	movs	r3, r0
 80034aa:	2216      	movs	r2, #22
 80034ac:	601a      	str	r2, [r3, #0]
  return -1;
 80034ae:	2301      	movs	r3, #1
 80034b0:	425b      	negs	r3, r3
}
 80034b2:	0018      	movs	r0, r3
 80034b4:	46bd      	mov	sp, r7
 80034b6:	b002      	add	sp, #8
 80034b8:	bd80      	pop	{r7, pc}

080034ba <_exit>:

void _exit (int status)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b082      	sub	sp, #8
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80034c2:	2301      	movs	r3, #1
 80034c4:	425a      	negs	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	0011      	movs	r1, r2
 80034ca:	0018      	movs	r0, r3
 80034cc:	f7ff ffe5 	bl	800349a <_kill>
  while (1) {}    /* Make sure we hang here */
 80034d0:	46c0      	nop			@ (mov r8, r8)
 80034d2:	e7fd      	b.n	80034d0 <_exit+0x16>

080034d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034e0:	2300      	movs	r3, #0
 80034e2:	617b      	str	r3, [r7, #20]
 80034e4:	e00a      	b.n	80034fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80034e6:	e000      	b.n	80034ea <_read+0x16>
 80034e8:	bf00      	nop
 80034ea:	0001      	movs	r1, r0
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	1c5a      	adds	r2, r3, #1
 80034f0:	60ba      	str	r2, [r7, #8]
 80034f2:	b2ca      	uxtb	r2, r1
 80034f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	3301      	adds	r3, #1
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	429a      	cmp	r2, r3
 8003502:	dbf0      	blt.n	80034e6 <_read+0x12>
  }

  return len;
 8003504:	687b      	ldr	r3, [r7, #4]
}
 8003506:	0018      	movs	r0, r3
 8003508:	46bd      	mov	sp, r7
 800350a:	b006      	add	sp, #24
 800350c:	bd80      	pop	{r7, pc}

0800350e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b086      	sub	sp, #24
 8003512:	af00      	add	r7, sp, #0
 8003514:	60f8      	str	r0, [r7, #12]
 8003516:	60b9      	str	r1, [r7, #8]
 8003518:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800351a:	2300      	movs	r3, #0
 800351c:	617b      	str	r3, [r7, #20]
 800351e:	e009      	b.n	8003534 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	1c5a      	adds	r2, r3, #1
 8003524:	60ba      	str	r2, [r7, #8]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	0018      	movs	r0, r3
 800352a:	e000      	b.n	800352e <_write+0x20>
 800352c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	3301      	adds	r3, #1
 8003532:	617b      	str	r3, [r7, #20]
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	429a      	cmp	r2, r3
 800353a:	dbf1      	blt.n	8003520 <_write+0x12>
  }
  return len;
 800353c:	687b      	ldr	r3, [r7, #4]
}
 800353e:	0018      	movs	r0, r3
 8003540:	46bd      	mov	sp, r7
 8003542:	b006      	add	sp, #24
 8003544:	bd80      	pop	{r7, pc}

08003546 <_close>:

int _close(int file)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b082      	sub	sp, #8
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800354e:	2301      	movs	r3, #1
 8003550:	425b      	negs	r3, r3
}
 8003552:	0018      	movs	r0, r3
 8003554:	46bd      	mov	sp, r7
 8003556:	b002      	add	sp, #8
 8003558:	bd80      	pop	{r7, pc}

0800355a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b082      	sub	sp, #8
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
 8003562:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	2280      	movs	r2, #128	@ 0x80
 8003568:	0192      	lsls	r2, r2, #6
 800356a:	605a      	str	r2, [r3, #4]
  return 0;
 800356c:	2300      	movs	r3, #0
}
 800356e:	0018      	movs	r0, r3
 8003570:	46bd      	mov	sp, r7
 8003572:	b002      	add	sp, #8
 8003574:	bd80      	pop	{r7, pc}

08003576 <_isatty>:

int _isatty(int file)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b082      	sub	sp, #8
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800357e:	2301      	movs	r3, #1
}
 8003580:	0018      	movs	r0, r3
 8003582:	46bd      	mov	sp, r7
 8003584:	b002      	add	sp, #8
 8003586:	bd80      	pop	{r7, pc}

08003588 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003594:	2300      	movs	r3, #0
}
 8003596:	0018      	movs	r0, r3
 8003598:	46bd      	mov	sp, r7
 800359a:	b004      	add	sp, #16
 800359c:	bd80      	pop	{r7, pc}
	...

080035a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035a8:	4a14      	ldr	r2, [pc, #80]	@ (80035fc <_sbrk+0x5c>)
 80035aa:	4b15      	ldr	r3, [pc, #84]	@ (8003600 <_sbrk+0x60>)
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035b4:	4b13      	ldr	r3, [pc, #76]	@ (8003604 <_sbrk+0x64>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d102      	bne.n	80035c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035bc:	4b11      	ldr	r3, [pc, #68]	@ (8003604 <_sbrk+0x64>)
 80035be:	4a12      	ldr	r2, [pc, #72]	@ (8003608 <_sbrk+0x68>)
 80035c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035c2:	4b10      	ldr	r3, [pc, #64]	@ (8003604 <_sbrk+0x64>)
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	18d3      	adds	r3, r2, r3
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d207      	bcs.n	80035e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035d0:	f003 fc7c 	bl	8006ecc <__errno>
 80035d4:	0003      	movs	r3, r0
 80035d6:	220c      	movs	r2, #12
 80035d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035da:	2301      	movs	r3, #1
 80035dc:	425b      	negs	r3, r3
 80035de:	e009      	b.n	80035f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035e0:	4b08      	ldr	r3, [pc, #32]	@ (8003604 <_sbrk+0x64>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035e6:	4b07      	ldr	r3, [pc, #28]	@ (8003604 <_sbrk+0x64>)
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	18d2      	adds	r2, r2, r3
 80035ee:	4b05      	ldr	r3, [pc, #20]	@ (8003604 <_sbrk+0x64>)
 80035f0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80035f2:	68fb      	ldr	r3, [r7, #12]
}
 80035f4:	0018      	movs	r0, r3
 80035f6:	46bd      	mov	sp, r7
 80035f8:	b006      	add	sp, #24
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	20024000 	.word	0x20024000
 8003600:	00000400 	.word	0x00000400
 8003604:	200002b4 	.word	0x200002b4
 8003608:	200004a0 	.word	0x200004a0

0800360c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003610:	46c0      	nop			@ (mov r8, r8)
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
	...

08003618 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800361c:	4b23      	ldr	r3, [pc, #140]	@ (80036ac <MX_USART2_UART_Init+0x94>)
 800361e:	4a24      	ldr	r2, [pc, #144]	@ (80036b0 <MX_USART2_UART_Init+0x98>)
 8003620:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003622:	4b22      	ldr	r3, [pc, #136]	@ (80036ac <MX_USART2_UART_Init+0x94>)
 8003624:	22e1      	movs	r2, #225	@ 0xe1
 8003626:	0252      	lsls	r2, r2, #9
 8003628:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800362a:	4b20      	ldr	r3, [pc, #128]	@ (80036ac <MX_USART2_UART_Init+0x94>)
 800362c:	2200      	movs	r2, #0
 800362e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003630:	4b1e      	ldr	r3, [pc, #120]	@ (80036ac <MX_USART2_UART_Init+0x94>)
 8003632:	2200      	movs	r2, #0
 8003634:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003636:	4b1d      	ldr	r3, [pc, #116]	@ (80036ac <MX_USART2_UART_Init+0x94>)
 8003638:	2200      	movs	r2, #0
 800363a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800363c:	4b1b      	ldr	r3, [pc, #108]	@ (80036ac <MX_USART2_UART_Init+0x94>)
 800363e:	220c      	movs	r2, #12
 8003640:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003642:	4b1a      	ldr	r3, [pc, #104]	@ (80036ac <MX_USART2_UART_Init+0x94>)
 8003644:	2200      	movs	r2, #0
 8003646:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003648:	4b18      	ldr	r3, [pc, #96]	@ (80036ac <MX_USART2_UART_Init+0x94>)
 800364a:	2200      	movs	r2, #0
 800364c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800364e:	4b17      	ldr	r3, [pc, #92]	@ (80036ac <MX_USART2_UART_Init+0x94>)
 8003650:	2200      	movs	r2, #0
 8003652:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003654:	4b15      	ldr	r3, [pc, #84]	@ (80036ac <MX_USART2_UART_Init+0x94>)
 8003656:	2200      	movs	r2, #0
 8003658:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800365a:	4b14      	ldr	r3, [pc, #80]	@ (80036ac <MX_USART2_UART_Init+0x94>)
 800365c:	2200      	movs	r2, #0
 800365e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003660:	4b12      	ldr	r3, [pc, #72]	@ (80036ac <MX_USART2_UART_Init+0x94>)
 8003662:	0018      	movs	r0, r3
 8003664:	f002 f80c 	bl	8005680 <HAL_UART_Init>
 8003668:	1e03      	subs	r3, r0, #0
 800366a:	d001      	beq.n	8003670 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800366c:	f7ff f9fa 	bl	8002a64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003670:	4b0e      	ldr	r3, [pc, #56]	@ (80036ac <MX_USART2_UART_Init+0x94>)
 8003672:	2100      	movs	r1, #0
 8003674:	0018      	movs	r0, r3
 8003676:	f002 fe1d 	bl	80062b4 <HAL_UARTEx_SetTxFifoThreshold>
 800367a:	1e03      	subs	r3, r0, #0
 800367c:	d001      	beq.n	8003682 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800367e:	f7ff f9f1 	bl	8002a64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003682:	4b0a      	ldr	r3, [pc, #40]	@ (80036ac <MX_USART2_UART_Init+0x94>)
 8003684:	2100      	movs	r1, #0
 8003686:	0018      	movs	r0, r3
 8003688:	f002 fe54 	bl	8006334 <HAL_UARTEx_SetRxFifoThreshold>
 800368c:	1e03      	subs	r3, r0, #0
 800368e:	d001      	beq.n	8003694 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003690:	f7ff f9e8 	bl	8002a64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003694:	4b05      	ldr	r3, [pc, #20]	@ (80036ac <MX_USART2_UART_Init+0x94>)
 8003696:	0018      	movs	r0, r3
 8003698:	f002 fdd2 	bl	8006240 <HAL_UARTEx_DisableFifoMode>
 800369c:	1e03      	subs	r3, r0, #0
 800369e:	d001      	beq.n	80036a4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80036a0:	f7ff f9e0 	bl	8002a64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80036a4:	46c0      	nop			@ (mov r8, r8)
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	46c0      	nop			@ (mov r8, r8)
 80036ac:	200002b8 	.word	0x200002b8
 80036b0:	40004400 	.word	0x40004400

080036b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80036b4:	b590      	push	{r4, r7, lr}
 80036b6:	b09d      	sub	sp, #116	@ 0x74
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036bc:	235c      	movs	r3, #92	@ 0x5c
 80036be:	18fb      	adds	r3, r7, r3
 80036c0:	0018      	movs	r0, r3
 80036c2:	2314      	movs	r3, #20
 80036c4:	001a      	movs	r2, r3
 80036c6:	2100      	movs	r1, #0
 80036c8:	f003 fbf8 	bl	8006ebc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80036cc:	2410      	movs	r4, #16
 80036ce:	193b      	adds	r3, r7, r4
 80036d0:	0018      	movs	r0, r3
 80036d2:	234c      	movs	r3, #76	@ 0x4c
 80036d4:	001a      	movs	r2, r3
 80036d6:	2100      	movs	r1, #0
 80036d8:	f003 fbf0 	bl	8006ebc <memset>
  if(uartHandle->Instance==USART2)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a22      	ldr	r2, [pc, #136]	@ (800376c <HAL_UART_MspInit+0xb8>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d13e      	bne.n	8003764 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80036e6:	193b      	adds	r3, r7, r4
 80036e8:	2202      	movs	r2, #2
 80036ea:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80036ec:	193b      	adds	r3, r7, r4
 80036ee:	2200      	movs	r2, #0
 80036f0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036f2:	193b      	adds	r3, r7, r4
 80036f4:	0018      	movs	r0, r3
 80036f6:	f001 f9f9 	bl	8004aec <HAL_RCCEx_PeriphCLKConfig>
 80036fa:	1e03      	subs	r3, r0, #0
 80036fc:	d001      	beq.n	8003702 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80036fe:	f7ff f9b1 	bl	8002a64 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003702:	4b1b      	ldr	r3, [pc, #108]	@ (8003770 <HAL_UART_MspInit+0xbc>)
 8003704:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003706:	4b1a      	ldr	r3, [pc, #104]	@ (8003770 <HAL_UART_MspInit+0xbc>)
 8003708:	2180      	movs	r1, #128	@ 0x80
 800370a:	0289      	lsls	r1, r1, #10
 800370c:	430a      	orrs	r2, r1
 800370e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003710:	4b17      	ldr	r3, [pc, #92]	@ (8003770 <HAL_UART_MspInit+0xbc>)
 8003712:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003714:	2380      	movs	r3, #128	@ 0x80
 8003716:	029b      	lsls	r3, r3, #10
 8003718:	4013      	ands	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800371e:	4b14      	ldr	r3, [pc, #80]	@ (8003770 <HAL_UART_MspInit+0xbc>)
 8003720:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003722:	4b13      	ldr	r3, [pc, #76]	@ (8003770 <HAL_UART_MspInit+0xbc>)
 8003724:	2101      	movs	r1, #1
 8003726:	430a      	orrs	r2, r1
 8003728:	635a      	str	r2, [r3, #52]	@ 0x34
 800372a:	4b11      	ldr	r3, [pc, #68]	@ (8003770 <HAL_UART_MspInit+0xbc>)
 800372c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800372e:	2201      	movs	r2, #1
 8003730:	4013      	ands	r3, r2
 8003732:	60bb      	str	r3, [r7, #8]
 8003734:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8003736:	215c      	movs	r1, #92	@ 0x5c
 8003738:	187b      	adds	r3, r7, r1
 800373a:	220c      	movs	r2, #12
 800373c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800373e:	187b      	adds	r3, r7, r1
 8003740:	2202      	movs	r2, #2
 8003742:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003744:	187b      	adds	r3, r7, r1
 8003746:	2200      	movs	r2, #0
 8003748:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800374a:	187b      	adds	r3, r7, r1
 800374c:	2200      	movs	r2, #0
 800374e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003750:	187b      	adds	r3, r7, r1
 8003752:	2201      	movs	r2, #1
 8003754:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003756:	187a      	adds	r2, r7, r1
 8003758:	23a0      	movs	r3, #160	@ 0xa0
 800375a:	05db      	lsls	r3, r3, #23
 800375c:	0011      	movs	r1, r2
 800375e:	0018      	movs	r0, r3
 8003760:	f000 f9a6 	bl	8003ab0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003764:	46c0      	nop			@ (mov r8, r8)
 8003766:	46bd      	mov	sp, r7
 8003768:	b01d      	add	sp, #116	@ 0x74
 800376a:	bd90      	pop	{r4, r7, pc}
 800376c:	40004400 	.word	0x40004400
 8003770:	40021000 	.word	0x40021000

08003774 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003774:	480d      	ldr	r0, [pc, #52]	@ (80037ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003776:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003778:	f7ff ff48 	bl	800360c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800377c:	480c      	ldr	r0, [pc, #48]	@ (80037b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800377e:	490d      	ldr	r1, [pc, #52]	@ (80037b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003780:	4a0d      	ldr	r2, [pc, #52]	@ (80037b8 <LoopForever+0xe>)
  movs r3, #0
 8003782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003784:	e002      	b.n	800378c <LoopCopyDataInit>

08003786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800378a:	3304      	adds	r3, #4

0800378c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800378c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800378e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003790:	d3f9      	bcc.n	8003786 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003792:	4a0a      	ldr	r2, [pc, #40]	@ (80037bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8003794:	4c0a      	ldr	r4, [pc, #40]	@ (80037c0 <LoopForever+0x16>)
  movs r3, #0
 8003796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003798:	e001      	b.n	800379e <LoopFillZerobss>

0800379a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800379a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800379c:	3204      	adds	r2, #4

0800379e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800379e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037a0:	d3fb      	bcc.n	800379a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80037a2:	f003 fb99 	bl	8006ed8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80037a6:	f7ff f8a5 	bl	80028f4 <main>

080037aa <LoopForever>:

LoopForever:
  b LoopForever
 80037aa:	e7fe      	b.n	80037aa <LoopForever>
  ldr   r0, =_estack
 80037ac:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80037b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037b4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80037b8:	08009f94 	.word	0x08009f94
  ldr r2, =_sbss
 80037bc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80037c0:	2000049c 	.word	0x2000049c

080037c4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80037c4:	e7fe      	b.n	80037c4 <ADC1_COMP_IRQHandler>
	...

080037c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80037ce:	1dfb      	adds	r3, r7, #7
 80037d0:	2200      	movs	r2, #0
 80037d2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003804 <HAL_Init+0x3c>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003804 <HAL_Init+0x3c>)
 80037da:	2180      	movs	r1, #128	@ 0x80
 80037dc:	0049      	lsls	r1, r1, #1
 80037de:	430a      	orrs	r2, r1
 80037e0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037e2:	2000      	movs	r0, #0
 80037e4:	f000 f810 	bl	8003808 <HAL_InitTick>
 80037e8:	1e03      	subs	r3, r0, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80037ec:	1dfb      	adds	r3, r7, #7
 80037ee:	2201      	movs	r2, #1
 80037f0:	701a      	strb	r2, [r3, #0]
 80037f2:	e001      	b.n	80037f8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80037f4:	f7ff fe0a 	bl	800340c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80037f8:	1dfb      	adds	r3, r7, #7
 80037fa:	781b      	ldrb	r3, [r3, #0]
}
 80037fc:	0018      	movs	r0, r3
 80037fe:	46bd      	mov	sp, r7
 8003800:	b002      	add	sp, #8
 8003802:	bd80      	pop	{r7, pc}
 8003804:	40022000 	.word	0x40022000

08003808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003808:	b590      	push	{r4, r7, lr}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003810:	230f      	movs	r3, #15
 8003812:	18fb      	adds	r3, r7, r3
 8003814:	2200      	movs	r2, #0
 8003816:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003818:	4b1d      	ldr	r3, [pc, #116]	@ (8003890 <HAL_InitTick+0x88>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d02b      	beq.n	8003878 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003820:	4b1c      	ldr	r3, [pc, #112]	@ (8003894 <HAL_InitTick+0x8c>)
 8003822:	681c      	ldr	r4, [r3, #0]
 8003824:	4b1a      	ldr	r3, [pc, #104]	@ (8003890 <HAL_InitTick+0x88>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	0019      	movs	r1, r3
 800382a:	23fa      	movs	r3, #250	@ 0xfa
 800382c:	0098      	lsls	r0, r3, #2
 800382e:	f7fc fc85 	bl	800013c <__udivsi3>
 8003832:	0003      	movs	r3, r0
 8003834:	0019      	movs	r1, r3
 8003836:	0020      	movs	r0, r4
 8003838:	f7fc fc80 	bl	800013c <__udivsi3>
 800383c:	0003      	movs	r3, r0
 800383e:	0018      	movs	r0, r3
 8003840:	f000 f929 	bl	8003a96 <HAL_SYSTICK_Config>
 8003844:	1e03      	subs	r3, r0, #0
 8003846:	d112      	bne.n	800386e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b03      	cmp	r3, #3
 800384c:	d80a      	bhi.n	8003864 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	2301      	movs	r3, #1
 8003852:	425b      	negs	r3, r3
 8003854:	2200      	movs	r2, #0
 8003856:	0018      	movs	r0, r3
 8003858:	f000 f908 	bl	8003a6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800385c:	4b0e      	ldr	r3, [pc, #56]	@ (8003898 <HAL_InitTick+0x90>)
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	e00d      	b.n	8003880 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003864:	230f      	movs	r3, #15
 8003866:	18fb      	adds	r3, r7, r3
 8003868:	2201      	movs	r2, #1
 800386a:	701a      	strb	r2, [r3, #0]
 800386c:	e008      	b.n	8003880 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800386e:	230f      	movs	r3, #15
 8003870:	18fb      	adds	r3, r7, r3
 8003872:	2201      	movs	r2, #1
 8003874:	701a      	strb	r2, [r3, #0]
 8003876:	e003      	b.n	8003880 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003878:	230f      	movs	r3, #15
 800387a:	18fb      	adds	r3, r7, r3
 800387c:	2201      	movs	r2, #1
 800387e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003880:	230f      	movs	r3, #15
 8003882:	18fb      	adds	r3, r7, r3
 8003884:	781b      	ldrb	r3, [r3, #0]
}
 8003886:	0018      	movs	r0, r3
 8003888:	46bd      	mov	sp, r7
 800388a:	b005      	add	sp, #20
 800388c:	bd90      	pop	{r4, r7, pc}
 800388e:	46c0      	nop			@ (mov r8, r8)
 8003890:	20000010 	.word	0x20000010
 8003894:	20000008 	.word	0x20000008
 8003898:	2000000c 	.word	0x2000000c

0800389c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80038a0:	4b05      	ldr	r3, [pc, #20]	@ (80038b8 <HAL_IncTick+0x1c>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	001a      	movs	r2, r3
 80038a6:	4b05      	ldr	r3, [pc, #20]	@ (80038bc <HAL_IncTick+0x20>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	18d2      	adds	r2, r2, r3
 80038ac:	4b03      	ldr	r3, [pc, #12]	@ (80038bc <HAL_IncTick+0x20>)
 80038ae:	601a      	str	r2, [r3, #0]
}
 80038b0:	46c0      	nop			@ (mov r8, r8)
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	46c0      	nop			@ (mov r8, r8)
 80038b8:	20000010 	.word	0x20000010
 80038bc:	2000034c 	.word	0x2000034c

080038c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  return uwTick;
 80038c4:	4b02      	ldr	r3, [pc, #8]	@ (80038d0 <HAL_GetTick+0x10>)
 80038c6:	681b      	ldr	r3, [r3, #0]
}
 80038c8:	0018      	movs	r0, r3
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	46c0      	nop			@ (mov r8, r8)
 80038d0:	2000034c 	.word	0x2000034c

080038d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038dc:	f7ff fff0 	bl	80038c0 <HAL_GetTick>
 80038e0:	0003      	movs	r3, r0
 80038e2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	3301      	adds	r3, #1
 80038ec:	d005      	beq.n	80038fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003918 <HAL_Delay+0x44>)
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	001a      	movs	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	189b      	adds	r3, r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038fa:	46c0      	nop			@ (mov r8, r8)
 80038fc:	f7ff ffe0 	bl	80038c0 <HAL_GetTick>
 8003900:	0002      	movs	r2, r0
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	429a      	cmp	r2, r3
 800390a:	d8f7      	bhi.n	80038fc <HAL_Delay+0x28>
  {
  }
}
 800390c:	46c0      	nop			@ (mov r8, r8)
 800390e:	46c0      	nop			@ (mov r8, r8)
 8003910:	46bd      	mov	sp, r7
 8003912:	b004      	add	sp, #16
 8003914:	bd80      	pop	{r7, pc}
 8003916:	46c0      	nop			@ (mov r8, r8)
 8003918:	20000010 	.word	0x20000010

0800391c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003924:	4b06      	ldr	r3, [pc, #24]	@ (8003940 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a06      	ldr	r2, [pc, #24]	@ (8003944 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800392a:	4013      	ands	r3, r2
 800392c:	0019      	movs	r1, r3
 800392e:	4b04      	ldr	r3, [pc, #16]	@ (8003940 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	430a      	orrs	r2, r1
 8003934:	601a      	str	r2, [r3, #0]
}
 8003936:	46c0      	nop			@ (mov r8, r8)
 8003938:	46bd      	mov	sp, r7
 800393a:	b002      	add	sp, #8
 800393c:	bd80      	pop	{r7, pc}
 800393e:	46c0      	nop			@ (mov r8, r8)
 8003940:	40010000 	.word	0x40010000
 8003944:	fffff9ff 	.word	0xfffff9ff

08003948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003948:	b590      	push	{r4, r7, lr}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	0002      	movs	r2, r0
 8003950:	6039      	str	r1, [r7, #0]
 8003952:	1dfb      	adds	r3, r7, #7
 8003954:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003956:	1dfb      	adds	r3, r7, #7
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	2b7f      	cmp	r3, #127	@ 0x7f
 800395c:	d828      	bhi.n	80039b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800395e:	4a2f      	ldr	r2, [pc, #188]	@ (8003a1c <__NVIC_SetPriority+0xd4>)
 8003960:	1dfb      	adds	r3, r7, #7
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	b25b      	sxtb	r3, r3
 8003966:	089b      	lsrs	r3, r3, #2
 8003968:	33c0      	adds	r3, #192	@ 0xc0
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	589b      	ldr	r3, [r3, r2]
 800396e:	1dfa      	adds	r2, r7, #7
 8003970:	7812      	ldrb	r2, [r2, #0]
 8003972:	0011      	movs	r1, r2
 8003974:	2203      	movs	r2, #3
 8003976:	400a      	ands	r2, r1
 8003978:	00d2      	lsls	r2, r2, #3
 800397a:	21ff      	movs	r1, #255	@ 0xff
 800397c:	4091      	lsls	r1, r2
 800397e:	000a      	movs	r2, r1
 8003980:	43d2      	mvns	r2, r2
 8003982:	401a      	ands	r2, r3
 8003984:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	019b      	lsls	r3, r3, #6
 800398a:	22ff      	movs	r2, #255	@ 0xff
 800398c:	401a      	ands	r2, r3
 800398e:	1dfb      	adds	r3, r7, #7
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	0018      	movs	r0, r3
 8003994:	2303      	movs	r3, #3
 8003996:	4003      	ands	r3, r0
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800399c:	481f      	ldr	r0, [pc, #124]	@ (8003a1c <__NVIC_SetPriority+0xd4>)
 800399e:	1dfb      	adds	r3, r7, #7
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	b25b      	sxtb	r3, r3
 80039a4:	089b      	lsrs	r3, r3, #2
 80039a6:	430a      	orrs	r2, r1
 80039a8:	33c0      	adds	r3, #192	@ 0xc0
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80039ae:	e031      	b.n	8003a14 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039b0:	4a1b      	ldr	r2, [pc, #108]	@ (8003a20 <__NVIC_SetPriority+0xd8>)
 80039b2:	1dfb      	adds	r3, r7, #7
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	0019      	movs	r1, r3
 80039b8:	230f      	movs	r3, #15
 80039ba:	400b      	ands	r3, r1
 80039bc:	3b08      	subs	r3, #8
 80039be:	089b      	lsrs	r3, r3, #2
 80039c0:	3306      	adds	r3, #6
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	18d3      	adds	r3, r2, r3
 80039c6:	3304      	adds	r3, #4
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	1dfa      	adds	r2, r7, #7
 80039cc:	7812      	ldrb	r2, [r2, #0]
 80039ce:	0011      	movs	r1, r2
 80039d0:	2203      	movs	r2, #3
 80039d2:	400a      	ands	r2, r1
 80039d4:	00d2      	lsls	r2, r2, #3
 80039d6:	21ff      	movs	r1, #255	@ 0xff
 80039d8:	4091      	lsls	r1, r2
 80039da:	000a      	movs	r2, r1
 80039dc:	43d2      	mvns	r2, r2
 80039de:	401a      	ands	r2, r3
 80039e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	019b      	lsls	r3, r3, #6
 80039e6:	22ff      	movs	r2, #255	@ 0xff
 80039e8:	401a      	ands	r2, r3
 80039ea:	1dfb      	adds	r3, r7, #7
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	0018      	movs	r0, r3
 80039f0:	2303      	movs	r3, #3
 80039f2:	4003      	ands	r3, r0
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039f8:	4809      	ldr	r0, [pc, #36]	@ (8003a20 <__NVIC_SetPriority+0xd8>)
 80039fa:	1dfb      	adds	r3, r7, #7
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	001c      	movs	r4, r3
 8003a00:	230f      	movs	r3, #15
 8003a02:	4023      	ands	r3, r4
 8003a04:	3b08      	subs	r3, #8
 8003a06:	089b      	lsrs	r3, r3, #2
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	3306      	adds	r3, #6
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	18c3      	adds	r3, r0, r3
 8003a10:	3304      	adds	r3, #4
 8003a12:	601a      	str	r2, [r3, #0]
}
 8003a14:	46c0      	nop			@ (mov r8, r8)
 8003a16:	46bd      	mov	sp, r7
 8003a18:	b003      	add	sp, #12
 8003a1a:	bd90      	pop	{r4, r7, pc}
 8003a1c:	e000e100 	.word	0xe000e100
 8003a20:	e000ed00 	.word	0xe000ed00

08003a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	1e5a      	subs	r2, r3, #1
 8003a30:	2380      	movs	r3, #128	@ 0x80
 8003a32:	045b      	lsls	r3, r3, #17
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d301      	bcc.n	8003a3c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e010      	b.n	8003a5e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a68 <SysTick_Config+0x44>)
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	3a01      	subs	r2, #1
 8003a42:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a44:	2301      	movs	r3, #1
 8003a46:	425b      	negs	r3, r3
 8003a48:	2103      	movs	r1, #3
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f7ff ff7c 	bl	8003948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a50:	4b05      	ldr	r3, [pc, #20]	@ (8003a68 <SysTick_Config+0x44>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a56:	4b04      	ldr	r3, [pc, #16]	@ (8003a68 <SysTick_Config+0x44>)
 8003a58:	2207      	movs	r2, #7
 8003a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	0018      	movs	r0, r3
 8003a60:	46bd      	mov	sp, r7
 8003a62:	b002      	add	sp, #8
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	46c0      	nop			@ (mov r8, r8)
 8003a68:	e000e010 	.word	0xe000e010

08003a6c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60b9      	str	r1, [r7, #8]
 8003a74:	607a      	str	r2, [r7, #4]
 8003a76:	210f      	movs	r1, #15
 8003a78:	187b      	adds	r3, r7, r1
 8003a7a:	1c02      	adds	r2, r0, #0
 8003a7c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	187b      	adds	r3, r7, r1
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	b25b      	sxtb	r3, r3
 8003a86:	0011      	movs	r1, r2
 8003a88:	0018      	movs	r0, r3
 8003a8a:	f7ff ff5d 	bl	8003948 <__NVIC_SetPriority>
}
 8003a8e:	46c0      	nop			@ (mov r8, r8)
 8003a90:	46bd      	mov	sp, r7
 8003a92:	b004      	add	sp, #16
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b082      	sub	sp, #8
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	f7ff ffbf 	bl	8003a24 <SysTick_Config>
 8003aa6:	0003      	movs	r3, r0
}
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	b002      	add	sp, #8
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003aba:	2300      	movs	r3, #0
 8003abc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003abe:	e14d      	b.n	8003d5c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	4091      	lsls	r1, r2
 8003aca:	000a      	movs	r2, r1
 8003acc:	4013      	ands	r3, r2
 8003ace:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d100      	bne.n	8003ad8 <HAL_GPIO_Init+0x28>
 8003ad6:	e13e      	b.n	8003d56 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2203      	movs	r2, #3
 8003ade:	4013      	ands	r3, r2
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d005      	beq.n	8003af0 <HAL_GPIO_Init+0x40>
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2203      	movs	r2, #3
 8003aea:	4013      	ands	r3, r2
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d130      	bne.n	8003b52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	2203      	movs	r2, #3
 8003afc:	409a      	lsls	r2, r3
 8003afe:	0013      	movs	r3, r2
 8003b00:	43da      	mvns	r2, r3
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	4013      	ands	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	68da      	ldr	r2, [r3, #12]
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	409a      	lsls	r2, r3
 8003b12:	0013      	movs	r3, r2
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b26:	2201      	movs	r2, #1
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	409a      	lsls	r2, r3
 8003b2c:	0013      	movs	r3, r2
 8003b2e:	43da      	mvns	r2, r3
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	4013      	ands	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	091b      	lsrs	r3, r3, #4
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	401a      	ands	r2, r3
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	409a      	lsls	r2, r3
 8003b44:	0013      	movs	r3, r2
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2203      	movs	r2, #3
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2b03      	cmp	r3, #3
 8003b5c:	d017      	beq.n	8003b8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	2203      	movs	r2, #3
 8003b6a:	409a      	lsls	r2, r3
 8003b6c:	0013      	movs	r3, r2
 8003b6e:	43da      	mvns	r2, r3
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	4013      	ands	r3, r2
 8003b74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	689a      	ldr	r2, [r3, #8]
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	409a      	lsls	r2, r3
 8003b80:	0013      	movs	r3, r2
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	2203      	movs	r2, #3
 8003b94:	4013      	ands	r3, r2
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d123      	bne.n	8003be2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	08da      	lsrs	r2, r3, #3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	3208      	adds	r2, #8
 8003ba2:	0092      	lsls	r2, r2, #2
 8003ba4:	58d3      	ldr	r3, [r2, r3]
 8003ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	2207      	movs	r2, #7
 8003bac:	4013      	ands	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	220f      	movs	r2, #15
 8003bb2:	409a      	lsls	r2, r3
 8003bb4:	0013      	movs	r3, r2
 8003bb6:	43da      	mvns	r2, r3
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	691a      	ldr	r2, [r3, #16]
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	2107      	movs	r1, #7
 8003bc6:	400b      	ands	r3, r1
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	409a      	lsls	r2, r3
 8003bcc:	0013      	movs	r3, r2
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	08da      	lsrs	r2, r3, #3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	3208      	adds	r2, #8
 8003bdc:	0092      	lsls	r2, r2, #2
 8003bde:	6939      	ldr	r1, [r7, #16]
 8003be0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	2203      	movs	r2, #3
 8003bee:	409a      	lsls	r2, r3
 8003bf0:	0013      	movs	r3, r2
 8003bf2:	43da      	mvns	r2, r3
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2203      	movs	r2, #3
 8003c00:	401a      	ands	r2, r3
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	409a      	lsls	r2, r3
 8003c08:	0013      	movs	r3, r2
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	23c0      	movs	r3, #192	@ 0xc0
 8003c1c:	029b      	lsls	r3, r3, #10
 8003c1e:	4013      	ands	r3, r2
 8003c20:	d100      	bne.n	8003c24 <HAL_GPIO_Init+0x174>
 8003c22:	e098      	b.n	8003d56 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003c24:	4a53      	ldr	r2, [pc, #332]	@ (8003d74 <HAL_GPIO_Init+0x2c4>)
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	089b      	lsrs	r3, r3, #2
 8003c2a:	3318      	adds	r3, #24
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	589b      	ldr	r3, [r3, r2]
 8003c30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	2203      	movs	r2, #3
 8003c36:	4013      	ands	r3, r2
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	220f      	movs	r2, #15
 8003c3c:	409a      	lsls	r2, r3
 8003c3e:	0013      	movs	r3, r2
 8003c40:	43da      	mvns	r2, r3
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	4013      	ands	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	23a0      	movs	r3, #160	@ 0xa0
 8003c4c:	05db      	lsls	r3, r3, #23
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d019      	beq.n	8003c86 <HAL_GPIO_Init+0x1d6>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a48      	ldr	r2, [pc, #288]	@ (8003d78 <HAL_GPIO_Init+0x2c8>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d013      	beq.n	8003c82 <HAL_GPIO_Init+0x1d2>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a47      	ldr	r2, [pc, #284]	@ (8003d7c <HAL_GPIO_Init+0x2cc>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d00d      	beq.n	8003c7e <HAL_GPIO_Init+0x1ce>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a46      	ldr	r2, [pc, #280]	@ (8003d80 <HAL_GPIO_Init+0x2d0>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d007      	beq.n	8003c7a <HAL_GPIO_Init+0x1ca>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a45      	ldr	r2, [pc, #276]	@ (8003d84 <HAL_GPIO_Init+0x2d4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d101      	bne.n	8003c76 <HAL_GPIO_Init+0x1c6>
 8003c72:	2304      	movs	r3, #4
 8003c74:	e008      	b.n	8003c88 <HAL_GPIO_Init+0x1d8>
 8003c76:	2305      	movs	r3, #5
 8003c78:	e006      	b.n	8003c88 <HAL_GPIO_Init+0x1d8>
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e004      	b.n	8003c88 <HAL_GPIO_Init+0x1d8>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	e002      	b.n	8003c88 <HAL_GPIO_Init+0x1d8>
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <HAL_GPIO_Init+0x1d8>
 8003c86:	2300      	movs	r3, #0
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	2103      	movs	r1, #3
 8003c8c:	400a      	ands	r2, r1
 8003c8e:	00d2      	lsls	r2, r2, #3
 8003c90:	4093      	lsls	r3, r2
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003c98:	4936      	ldr	r1, [pc, #216]	@ (8003d74 <HAL_GPIO_Init+0x2c4>)
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	089b      	lsrs	r3, r3, #2
 8003c9e:	3318      	adds	r3, #24
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ca6:	4b33      	ldr	r3, [pc, #204]	@ (8003d74 <HAL_GPIO_Init+0x2c4>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	43da      	mvns	r2, r3
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	2380      	movs	r3, #128	@ 0x80
 8003cbc:	035b      	lsls	r3, r3, #13
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	d003      	beq.n	8003cca <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003cca:	4b2a      	ldr	r3, [pc, #168]	@ (8003d74 <HAL_GPIO_Init+0x2c4>)
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003cd0:	4b28      	ldr	r3, [pc, #160]	@ (8003d74 <HAL_GPIO_Init+0x2c4>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	43da      	mvns	r2, r3
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	2380      	movs	r3, #128	@ 0x80
 8003ce6:	039b      	lsls	r3, r3, #14
 8003ce8:	4013      	ands	r3, r2
 8003cea:	d003      	beq.n	8003cf4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8003d74 <HAL_GPIO_Init+0x2c4>)
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003cfa:	4a1e      	ldr	r2, [pc, #120]	@ (8003d74 <HAL_GPIO_Init+0x2c4>)
 8003cfc:	2384      	movs	r3, #132	@ 0x84
 8003cfe:	58d3      	ldr	r3, [r2, r3]
 8003d00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	43da      	mvns	r2, r3
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	2380      	movs	r3, #128	@ 0x80
 8003d12:	029b      	lsls	r3, r3, #10
 8003d14:	4013      	ands	r3, r2
 8003d16:	d003      	beq.n	8003d20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d20:	4914      	ldr	r1, [pc, #80]	@ (8003d74 <HAL_GPIO_Init+0x2c4>)
 8003d22:	2284      	movs	r2, #132	@ 0x84
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003d28:	4a12      	ldr	r2, [pc, #72]	@ (8003d74 <HAL_GPIO_Init+0x2c4>)
 8003d2a:	2380      	movs	r3, #128	@ 0x80
 8003d2c:	58d3      	ldr	r3, [r2, r3]
 8003d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	43da      	mvns	r2, r3
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	4013      	ands	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	2380      	movs	r3, #128	@ 0x80
 8003d40:	025b      	lsls	r3, r3, #9
 8003d42:	4013      	ands	r3, r2
 8003d44:	d003      	beq.n	8003d4e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d4e:	4909      	ldr	r1, [pc, #36]	@ (8003d74 <HAL_GPIO_Init+0x2c4>)
 8003d50:	2280      	movs	r2, #128	@ 0x80
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	40da      	lsrs	r2, r3
 8003d64:	1e13      	subs	r3, r2, #0
 8003d66:	d000      	beq.n	8003d6a <HAL_GPIO_Init+0x2ba>
 8003d68:	e6aa      	b.n	8003ac0 <HAL_GPIO_Init+0x10>
  }
}
 8003d6a:	46c0      	nop			@ (mov r8, r8)
 8003d6c:	46c0      	nop			@ (mov r8, r8)
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	b006      	add	sp, #24
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40021800 	.word	0x40021800
 8003d78:	50000400 	.word	0x50000400
 8003d7c:	50000800 	.word	0x50000800
 8003d80:	50000c00 	.word	0x50000c00
 8003d84:	50001000 	.word	0x50001000

08003d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	0008      	movs	r0, r1
 8003d92:	0011      	movs	r1, r2
 8003d94:	1cbb      	adds	r3, r7, #2
 8003d96:	1c02      	adds	r2, r0, #0
 8003d98:	801a      	strh	r2, [r3, #0]
 8003d9a:	1c7b      	adds	r3, r7, #1
 8003d9c:	1c0a      	adds	r2, r1, #0
 8003d9e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003da0:	1c7b      	adds	r3, r7, #1
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d004      	beq.n	8003db2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003da8:	1cbb      	adds	r3, r7, #2
 8003daa:	881a      	ldrh	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003db0:	e003      	b.n	8003dba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003db2:	1cbb      	adds	r3, r7, #2
 8003db4:	881a      	ldrh	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003dba:	46c0      	nop			@ (mov r8, r8)
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	b002      	add	sp, #8
 8003dc0:	bd80      	pop	{r7, pc}
	...

08003dc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e08f      	b.n	8003ef6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2241      	movs	r2, #65	@ 0x41
 8003dda:	5c9b      	ldrb	r3, [r3, r2]
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d107      	bne.n	8003df2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2240      	movs	r2, #64	@ 0x40
 8003de6:	2100      	movs	r1, #0
 8003de8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	0018      	movs	r0, r3
 8003dee:	f7fe fd1f 	bl	8002830 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2241      	movs	r2, #65	@ 0x41
 8003df6:	2124      	movs	r1, #36	@ 0x24
 8003df8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2101      	movs	r1, #1
 8003e06:	438a      	bics	r2, r1
 8003e08:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	493b      	ldr	r1, [pc, #236]	@ (8003f00 <HAL_I2C_Init+0x13c>)
 8003e14:	400a      	ands	r2, r1
 8003e16:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689a      	ldr	r2, [r3, #8]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4938      	ldr	r1, [pc, #224]	@ (8003f04 <HAL_I2C_Init+0x140>)
 8003e24:	400a      	ands	r2, r1
 8003e26:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d108      	bne.n	8003e42 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2180      	movs	r1, #128	@ 0x80
 8003e3a:	0209      	lsls	r1, r1, #8
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	609a      	str	r2, [r3, #8]
 8003e40:	e007      	b.n	8003e52 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689a      	ldr	r2, [r3, #8]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2184      	movs	r1, #132	@ 0x84
 8003e4c:	0209      	lsls	r1, r1, #8
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d109      	bne.n	8003e6e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2180      	movs	r1, #128	@ 0x80
 8003e66:	0109      	lsls	r1, r1, #4
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	605a      	str	r2, [r3, #4]
 8003e6c:	e007      	b.n	8003e7e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4923      	ldr	r1, [pc, #140]	@ (8003f08 <HAL_I2C_Init+0x144>)
 8003e7a:	400a      	ands	r2, r1
 8003e7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4920      	ldr	r1, [pc, #128]	@ (8003f0c <HAL_I2C_Init+0x148>)
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68da      	ldr	r2, [r3, #12]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	491a      	ldr	r1, [pc, #104]	@ (8003f04 <HAL_I2C_Init+0x140>)
 8003e9a:	400a      	ands	r2, r1
 8003e9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691a      	ldr	r2, [r3, #16]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	69d9      	ldr	r1, [r3, #28]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a1a      	ldr	r2, [r3, #32]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2241      	movs	r2, #65	@ 0x41
 8003ee2:	2120      	movs	r1, #32
 8003ee4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2242      	movs	r2, #66	@ 0x42
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	0018      	movs	r0, r3
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	b002      	add	sp, #8
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	46c0      	nop			@ (mov r8, r8)
 8003f00:	f0ffffff 	.word	0xf0ffffff
 8003f04:	ffff7fff 	.word	0xffff7fff
 8003f08:	fffff7ff 	.word	0xfffff7ff
 8003f0c:	02008000 	.word	0x02008000

08003f10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2241      	movs	r2, #65	@ 0x41
 8003f1e:	5c9b      	ldrb	r3, [r3, r2]
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b20      	cmp	r3, #32
 8003f24:	d138      	bne.n	8003f98 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2240      	movs	r2, #64	@ 0x40
 8003f2a:	5c9b      	ldrb	r3, [r3, r2]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d101      	bne.n	8003f34 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f30:	2302      	movs	r3, #2
 8003f32:	e032      	b.n	8003f9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2240      	movs	r2, #64	@ 0x40
 8003f38:	2101      	movs	r1, #1
 8003f3a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2241      	movs	r2, #65	@ 0x41
 8003f40:	2124      	movs	r1, #36	@ 0x24
 8003f42:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2101      	movs	r1, #1
 8003f50:	438a      	bics	r2, r1
 8003f52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4911      	ldr	r1, [pc, #68]	@ (8003fa4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003f60:	400a      	ands	r2, r1
 8003f62:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6819      	ldr	r1, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2101      	movs	r1, #1
 8003f80:	430a      	orrs	r2, r1
 8003f82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2241      	movs	r2, #65	@ 0x41
 8003f88:	2120      	movs	r1, #32
 8003f8a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2240      	movs	r2, #64	@ 0x40
 8003f90:	2100      	movs	r1, #0
 8003f92:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003f94:	2300      	movs	r3, #0
 8003f96:	e000      	b.n	8003f9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f98:	2302      	movs	r3, #2
  }
}
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	b002      	add	sp, #8
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	46c0      	nop			@ (mov r8, r8)
 8003fa4:	ffffefff 	.word	0xffffefff

08003fa8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2241      	movs	r2, #65	@ 0x41
 8003fb6:	5c9b      	ldrb	r3, [r3, r2]
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b20      	cmp	r3, #32
 8003fbc:	d139      	bne.n	8004032 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2240      	movs	r2, #64	@ 0x40
 8003fc2:	5c9b      	ldrb	r3, [r3, r2]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d101      	bne.n	8003fcc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	e033      	b.n	8004034 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2240      	movs	r2, #64	@ 0x40
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2241      	movs	r2, #65	@ 0x41
 8003fd8:	2124      	movs	r1, #36	@ 0x24
 8003fda:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	438a      	bics	r2, r1
 8003fea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4a11      	ldr	r2, [pc, #68]	@ (800403c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	021b      	lsls	r3, r3, #8
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2101      	movs	r1, #1
 800401a:	430a      	orrs	r2, r1
 800401c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2241      	movs	r2, #65	@ 0x41
 8004022:	2120      	movs	r1, #32
 8004024:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2240      	movs	r2, #64	@ 0x40
 800402a:	2100      	movs	r1, #0
 800402c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800402e:	2300      	movs	r3, #0
 8004030:	e000      	b.n	8004034 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004032:	2302      	movs	r3, #2
  }
}
 8004034:	0018      	movs	r0, r3
 8004036:	46bd      	mov	sp, r7
 8004038:	b004      	add	sp, #16
 800403a:	bd80      	pop	{r7, pc}
 800403c:	fffff0ff 	.word	0xfffff0ff

08004040 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004048:	4b19      	ldr	r3, [pc, #100]	@ (80040b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a19      	ldr	r2, [pc, #100]	@ (80040b4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800404e:	4013      	ands	r3, r2
 8004050:	0019      	movs	r1, r3
 8004052:	4b17      	ldr	r3, [pc, #92]	@ (80040b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	430a      	orrs	r2, r1
 8004058:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	2380      	movs	r3, #128	@ 0x80
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	429a      	cmp	r2, r3
 8004062:	d11f      	bne.n	80040a4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004064:	4b14      	ldr	r3, [pc, #80]	@ (80040b8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	0013      	movs	r3, r2
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	189b      	adds	r3, r3, r2
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	4912      	ldr	r1, [pc, #72]	@ (80040bc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004072:	0018      	movs	r0, r3
 8004074:	f7fc f862 	bl	800013c <__udivsi3>
 8004078:	0003      	movs	r3, r0
 800407a:	3301      	adds	r3, #1
 800407c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800407e:	e008      	b.n	8004092 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d003      	beq.n	800408e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	3b01      	subs	r3, #1
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	e001      	b.n	8004092 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e009      	b.n	80040a6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004092:	4b07      	ldr	r3, [pc, #28]	@ (80040b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004094:	695a      	ldr	r2, [r3, #20]
 8004096:	2380      	movs	r3, #128	@ 0x80
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	401a      	ands	r2, r3
 800409c:	2380      	movs	r3, #128	@ 0x80
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d0ed      	beq.n	8004080 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	0018      	movs	r0, r3
 80040a8:	46bd      	mov	sp, r7
 80040aa:	b004      	add	sp, #16
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	46c0      	nop			@ (mov r8, r8)
 80040b0:	40007000 	.word	0x40007000
 80040b4:	fffff9ff 	.word	0xfffff9ff
 80040b8:	20000008 	.word	0x20000008
 80040bc:	000f4240 	.word	0x000f4240

080040c0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80040c4:	4b03      	ldr	r3, [pc, #12]	@ (80040d4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	23e0      	movs	r3, #224	@ 0xe0
 80040ca:	01db      	lsls	r3, r3, #7
 80040cc:	4013      	ands	r3, r2
}
 80040ce:	0018      	movs	r0, r3
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	40021000 	.word	0x40021000

080040d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d102      	bne.n	80040ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	f000 fb50 	bl	800478c <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2201      	movs	r2, #1
 80040f2:	4013      	ands	r3, r2
 80040f4:	d100      	bne.n	80040f8 <HAL_RCC_OscConfig+0x20>
 80040f6:	e07c      	b.n	80041f2 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040f8:	4bc3      	ldr	r3, [pc, #780]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	2238      	movs	r2, #56	@ 0x38
 80040fe:	4013      	ands	r3, r2
 8004100:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004102:	4bc1      	ldr	r3, [pc, #772]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	2203      	movs	r2, #3
 8004108:	4013      	ands	r3, r2
 800410a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	2b10      	cmp	r3, #16
 8004110:	d102      	bne.n	8004118 <HAL_RCC_OscConfig+0x40>
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	2b03      	cmp	r3, #3
 8004116:	d002      	beq.n	800411e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	2b08      	cmp	r3, #8
 800411c:	d10b      	bne.n	8004136 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800411e:	4bba      	ldr	r3, [pc, #744]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	2380      	movs	r3, #128	@ 0x80
 8004124:	029b      	lsls	r3, r3, #10
 8004126:	4013      	ands	r3, r2
 8004128:	d062      	beq.n	80041f0 <HAL_RCC_OscConfig+0x118>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d15e      	bne.n	80041f0 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e32a      	b.n	800478c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	2380      	movs	r3, #128	@ 0x80
 800413c:	025b      	lsls	r3, r3, #9
 800413e:	429a      	cmp	r2, r3
 8004140:	d107      	bne.n	8004152 <HAL_RCC_OscConfig+0x7a>
 8004142:	4bb1      	ldr	r3, [pc, #708]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	4bb0      	ldr	r3, [pc, #704]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 8004148:	2180      	movs	r1, #128	@ 0x80
 800414a:	0249      	lsls	r1, r1, #9
 800414c:	430a      	orrs	r2, r1
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	e020      	b.n	8004194 <HAL_RCC_OscConfig+0xbc>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	23a0      	movs	r3, #160	@ 0xa0
 8004158:	02db      	lsls	r3, r3, #11
 800415a:	429a      	cmp	r2, r3
 800415c:	d10e      	bne.n	800417c <HAL_RCC_OscConfig+0xa4>
 800415e:	4baa      	ldr	r3, [pc, #680]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	4ba9      	ldr	r3, [pc, #676]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 8004164:	2180      	movs	r1, #128	@ 0x80
 8004166:	02c9      	lsls	r1, r1, #11
 8004168:	430a      	orrs	r2, r1
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	4ba6      	ldr	r3, [pc, #664]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	4ba5      	ldr	r3, [pc, #660]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 8004172:	2180      	movs	r1, #128	@ 0x80
 8004174:	0249      	lsls	r1, r1, #9
 8004176:	430a      	orrs	r2, r1
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	e00b      	b.n	8004194 <HAL_RCC_OscConfig+0xbc>
 800417c:	4ba2      	ldr	r3, [pc, #648]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	4ba1      	ldr	r3, [pc, #644]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 8004182:	49a2      	ldr	r1, [pc, #648]	@ (800440c <HAL_RCC_OscConfig+0x334>)
 8004184:	400a      	ands	r2, r1
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	4b9f      	ldr	r3, [pc, #636]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	4b9e      	ldr	r3, [pc, #632]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 800418e:	49a0      	ldr	r1, [pc, #640]	@ (8004410 <HAL_RCC_OscConfig+0x338>)
 8004190:	400a      	ands	r2, r1
 8004192:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d014      	beq.n	80041c6 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419c:	f7ff fb90 	bl	80038c0 <HAL_GetTick>
 80041a0:	0003      	movs	r3, r0
 80041a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041a4:	e008      	b.n	80041b8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041a6:	f7ff fb8b 	bl	80038c0 <HAL_GetTick>
 80041aa:	0002      	movs	r2, r0
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	2b64      	cmp	r3, #100	@ 0x64
 80041b2:	d901      	bls.n	80041b8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e2e9      	b.n	800478c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041b8:	4b93      	ldr	r3, [pc, #588]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	2380      	movs	r3, #128	@ 0x80
 80041be:	029b      	lsls	r3, r3, #10
 80041c0:	4013      	ands	r3, r2
 80041c2:	d0f0      	beq.n	80041a6 <HAL_RCC_OscConfig+0xce>
 80041c4:	e015      	b.n	80041f2 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c6:	f7ff fb7b 	bl	80038c0 <HAL_GetTick>
 80041ca:	0003      	movs	r3, r0
 80041cc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041ce:	e008      	b.n	80041e2 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041d0:	f7ff fb76 	bl	80038c0 <HAL_GetTick>
 80041d4:	0002      	movs	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b64      	cmp	r3, #100	@ 0x64
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e2d4      	b.n	800478c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041e2:	4b89      	ldr	r3, [pc, #548]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	2380      	movs	r3, #128	@ 0x80
 80041e8:	029b      	lsls	r3, r3, #10
 80041ea:	4013      	ands	r3, r2
 80041ec:	d1f0      	bne.n	80041d0 <HAL_RCC_OscConfig+0xf8>
 80041ee:	e000      	b.n	80041f2 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041f0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2202      	movs	r2, #2
 80041f8:	4013      	ands	r3, r2
 80041fa:	d100      	bne.n	80041fe <HAL_RCC_OscConfig+0x126>
 80041fc:	e099      	b.n	8004332 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041fe:	4b82      	ldr	r3, [pc, #520]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	2238      	movs	r2, #56	@ 0x38
 8004204:	4013      	ands	r3, r2
 8004206:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004208:	4b7f      	ldr	r3, [pc, #508]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	2203      	movs	r2, #3
 800420e:	4013      	ands	r3, r2
 8004210:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	2b10      	cmp	r3, #16
 8004216:	d102      	bne.n	800421e <HAL_RCC_OscConfig+0x146>
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	2b02      	cmp	r3, #2
 800421c:	d002      	beq.n	8004224 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d135      	bne.n	8004290 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004224:	4b78      	ldr	r3, [pc, #480]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	2380      	movs	r3, #128	@ 0x80
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	4013      	ands	r3, r2
 800422e:	d005      	beq.n	800423c <HAL_RCC_OscConfig+0x164>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e2a7      	b.n	800478c <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800423c:	4b72      	ldr	r3, [pc, #456]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	4a74      	ldr	r2, [pc, #464]	@ (8004414 <HAL_RCC_OscConfig+0x33c>)
 8004242:	4013      	ands	r3, r2
 8004244:	0019      	movs	r1, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	021a      	lsls	r2, r3, #8
 800424c:	4b6e      	ldr	r3, [pc, #440]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 800424e:	430a      	orrs	r2, r1
 8004250:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d112      	bne.n	800427e <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004258:	4b6b      	ldr	r3, [pc, #428]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a6e      	ldr	r2, [pc, #440]	@ (8004418 <HAL_RCC_OscConfig+0x340>)
 800425e:	4013      	ands	r3, r2
 8004260:	0019      	movs	r1, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691a      	ldr	r2, [r3, #16]
 8004266:	4b68      	ldr	r3, [pc, #416]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 8004268:	430a      	orrs	r2, r1
 800426a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800426c:	4b66      	ldr	r3, [pc, #408]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	0adb      	lsrs	r3, r3, #11
 8004272:	2207      	movs	r2, #7
 8004274:	4013      	ands	r3, r2
 8004276:	4a69      	ldr	r2, [pc, #420]	@ (800441c <HAL_RCC_OscConfig+0x344>)
 8004278:	40da      	lsrs	r2, r3
 800427a:	4b69      	ldr	r3, [pc, #420]	@ (8004420 <HAL_RCC_OscConfig+0x348>)
 800427c:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800427e:	4b69      	ldr	r3, [pc, #420]	@ (8004424 <HAL_RCC_OscConfig+0x34c>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	0018      	movs	r0, r3
 8004284:	f7ff fac0 	bl	8003808 <HAL_InitTick>
 8004288:	1e03      	subs	r3, r0, #0
 800428a:	d051      	beq.n	8004330 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e27d      	b.n	800478c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d030      	beq.n	80042fa <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004298:	4b5b      	ldr	r3, [pc, #364]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a5e      	ldr	r2, [pc, #376]	@ (8004418 <HAL_RCC_OscConfig+0x340>)
 800429e:	4013      	ands	r3, r2
 80042a0:	0019      	movs	r1, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691a      	ldr	r2, [r3, #16]
 80042a6:	4b58      	ldr	r3, [pc, #352]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 80042a8:	430a      	orrs	r2, r1
 80042aa:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80042ac:	4b56      	ldr	r3, [pc, #344]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	4b55      	ldr	r3, [pc, #340]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 80042b2:	2180      	movs	r1, #128	@ 0x80
 80042b4:	0049      	lsls	r1, r1, #1
 80042b6:	430a      	orrs	r2, r1
 80042b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ba:	f7ff fb01 	bl	80038c0 <HAL_GetTick>
 80042be:	0003      	movs	r3, r0
 80042c0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042c4:	f7ff fafc 	bl	80038c0 <HAL_GetTick>
 80042c8:	0002      	movs	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e25a      	b.n	800478c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042d6:	4b4c      	ldr	r3, [pc, #304]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	2380      	movs	r3, #128	@ 0x80
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	4013      	ands	r3, r2
 80042e0:	d0f0      	beq.n	80042c4 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e2:	4b49      	ldr	r3, [pc, #292]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	4a4b      	ldr	r2, [pc, #300]	@ (8004414 <HAL_RCC_OscConfig+0x33c>)
 80042e8:	4013      	ands	r3, r2
 80042ea:	0019      	movs	r1, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	021a      	lsls	r2, r3, #8
 80042f2:	4b45      	ldr	r3, [pc, #276]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 80042f4:	430a      	orrs	r2, r1
 80042f6:	605a      	str	r2, [r3, #4]
 80042f8:	e01b      	b.n	8004332 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80042fa:	4b43      	ldr	r3, [pc, #268]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	4b42      	ldr	r3, [pc, #264]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 8004300:	4949      	ldr	r1, [pc, #292]	@ (8004428 <HAL_RCC_OscConfig+0x350>)
 8004302:	400a      	ands	r2, r1
 8004304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004306:	f7ff fadb 	bl	80038c0 <HAL_GetTick>
 800430a:	0003      	movs	r3, r0
 800430c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004310:	f7ff fad6 	bl	80038c0 <HAL_GetTick>
 8004314:	0002      	movs	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e234      	b.n	800478c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004322:	4b39      	ldr	r3, [pc, #228]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	2380      	movs	r3, #128	@ 0x80
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	4013      	ands	r3, r2
 800432c:	d1f0      	bne.n	8004310 <HAL_RCC_OscConfig+0x238>
 800432e:	e000      	b.n	8004332 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004330:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2208      	movs	r2, #8
 8004338:	4013      	ands	r3, r2
 800433a:	d047      	beq.n	80043cc <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800433c:	4b32      	ldr	r3, [pc, #200]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	2238      	movs	r2, #56	@ 0x38
 8004342:	4013      	ands	r3, r2
 8004344:	2b18      	cmp	r3, #24
 8004346:	d10a      	bne.n	800435e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004348:	4b2f      	ldr	r3, [pc, #188]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 800434a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800434c:	2202      	movs	r2, #2
 800434e:	4013      	ands	r3, r2
 8004350:	d03c      	beq.n	80043cc <HAL_RCC_OscConfig+0x2f4>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d138      	bne.n	80043cc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e216      	b.n	800478c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d019      	beq.n	800439a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004366:	4b28      	ldr	r3, [pc, #160]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 8004368:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800436a:	4b27      	ldr	r3, [pc, #156]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 800436c:	2101      	movs	r1, #1
 800436e:	430a      	orrs	r2, r1
 8004370:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004372:	f7ff faa5 	bl	80038c0 <HAL_GetTick>
 8004376:	0003      	movs	r3, r0
 8004378:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800437c:	f7ff faa0 	bl	80038c0 <HAL_GetTick>
 8004380:	0002      	movs	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e1fe      	b.n	800478c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800438e:	4b1e      	ldr	r3, [pc, #120]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 8004390:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004392:	2202      	movs	r2, #2
 8004394:	4013      	ands	r3, r2
 8004396:	d0f1      	beq.n	800437c <HAL_RCC_OscConfig+0x2a4>
 8004398:	e018      	b.n	80043cc <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800439a:	4b1b      	ldr	r3, [pc, #108]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 800439c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800439e:	4b1a      	ldr	r3, [pc, #104]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 80043a0:	2101      	movs	r1, #1
 80043a2:	438a      	bics	r2, r1
 80043a4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a6:	f7ff fa8b 	bl	80038c0 <HAL_GetTick>
 80043aa:	0003      	movs	r3, r0
 80043ac:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043b0:	f7ff fa86 	bl	80038c0 <HAL_GetTick>
 80043b4:	0002      	movs	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e1e4      	b.n	800478c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043c2:	4b11      	ldr	r3, [pc, #68]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 80043c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043c6:	2202      	movs	r2, #2
 80043c8:	4013      	ands	r3, r2
 80043ca:	d1f1      	bne.n	80043b0 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2204      	movs	r2, #4
 80043d2:	4013      	ands	r3, r2
 80043d4:	d100      	bne.n	80043d8 <HAL_RCC_OscConfig+0x300>
 80043d6:	e0c7      	b.n	8004568 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043d8:	231f      	movs	r3, #31
 80043da:	18fb      	adds	r3, r7, r3
 80043dc:	2200      	movs	r2, #0
 80043de:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80043e0:	4b09      	ldr	r3, [pc, #36]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	2238      	movs	r2, #56	@ 0x38
 80043e6:	4013      	ands	r3, r2
 80043e8:	2b20      	cmp	r3, #32
 80043ea:	d11f      	bne.n	800442c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80043ec:	4b06      	ldr	r3, [pc, #24]	@ (8004408 <HAL_RCC_OscConfig+0x330>)
 80043ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043f0:	2202      	movs	r2, #2
 80043f2:	4013      	ands	r3, r2
 80043f4:	d100      	bne.n	80043f8 <HAL_RCC_OscConfig+0x320>
 80043f6:	e0b7      	b.n	8004568 <HAL_RCC_OscConfig+0x490>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d000      	beq.n	8004402 <HAL_RCC_OscConfig+0x32a>
 8004400:	e0b2      	b.n	8004568 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e1c2      	b.n	800478c <HAL_RCC_OscConfig+0x6b4>
 8004406:	46c0      	nop			@ (mov r8, r8)
 8004408:	40021000 	.word	0x40021000
 800440c:	fffeffff 	.word	0xfffeffff
 8004410:	fffbffff 	.word	0xfffbffff
 8004414:	ffff80ff 	.word	0xffff80ff
 8004418:	ffffc7ff 	.word	0xffffc7ff
 800441c:	00f42400 	.word	0x00f42400
 8004420:	20000008 	.word	0x20000008
 8004424:	2000000c 	.word	0x2000000c
 8004428:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800442c:	4bb5      	ldr	r3, [pc, #724]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 800442e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004430:	2380      	movs	r3, #128	@ 0x80
 8004432:	055b      	lsls	r3, r3, #21
 8004434:	4013      	ands	r3, r2
 8004436:	d101      	bne.n	800443c <HAL_RCC_OscConfig+0x364>
 8004438:	2301      	movs	r3, #1
 800443a:	e000      	b.n	800443e <HAL_RCC_OscConfig+0x366>
 800443c:	2300      	movs	r3, #0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d011      	beq.n	8004466 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004442:	4bb0      	ldr	r3, [pc, #704]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 8004444:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004446:	4baf      	ldr	r3, [pc, #700]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 8004448:	2180      	movs	r1, #128	@ 0x80
 800444a:	0549      	lsls	r1, r1, #21
 800444c:	430a      	orrs	r2, r1
 800444e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004450:	4bac      	ldr	r3, [pc, #688]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 8004452:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004454:	2380      	movs	r3, #128	@ 0x80
 8004456:	055b      	lsls	r3, r3, #21
 8004458:	4013      	ands	r3, r2
 800445a:	60fb      	str	r3, [r7, #12]
 800445c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800445e:	231f      	movs	r3, #31
 8004460:	18fb      	adds	r3, r7, r3
 8004462:	2201      	movs	r2, #1
 8004464:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004466:	4ba8      	ldr	r3, [pc, #672]	@ (8004708 <HAL_RCC_OscConfig+0x630>)
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	2380      	movs	r3, #128	@ 0x80
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	4013      	ands	r3, r2
 8004470:	d11a      	bne.n	80044a8 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004472:	4ba5      	ldr	r3, [pc, #660]	@ (8004708 <HAL_RCC_OscConfig+0x630>)
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	4ba4      	ldr	r3, [pc, #656]	@ (8004708 <HAL_RCC_OscConfig+0x630>)
 8004478:	2180      	movs	r1, #128	@ 0x80
 800447a:	0049      	lsls	r1, r1, #1
 800447c:	430a      	orrs	r2, r1
 800447e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004480:	f7ff fa1e 	bl	80038c0 <HAL_GetTick>
 8004484:	0003      	movs	r3, r0
 8004486:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004488:	e008      	b.n	800449c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800448a:	f7ff fa19 	bl	80038c0 <HAL_GetTick>
 800448e:	0002      	movs	r2, r0
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d901      	bls.n	800449c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e177      	b.n	800478c <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800449c:	4b9a      	ldr	r3, [pc, #616]	@ (8004708 <HAL_RCC_OscConfig+0x630>)
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	2380      	movs	r3, #128	@ 0x80
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	4013      	ands	r3, r2
 80044a6:	d0f0      	beq.n	800448a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d106      	bne.n	80044be <HAL_RCC_OscConfig+0x3e6>
 80044b0:	4b94      	ldr	r3, [pc, #592]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 80044b2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80044b4:	4b93      	ldr	r3, [pc, #588]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 80044b6:	2101      	movs	r1, #1
 80044b8:	430a      	orrs	r2, r1
 80044ba:	65da      	str	r2, [r3, #92]	@ 0x5c
 80044bc:	e01c      	b.n	80044f8 <HAL_RCC_OscConfig+0x420>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	2b05      	cmp	r3, #5
 80044c4:	d10c      	bne.n	80044e0 <HAL_RCC_OscConfig+0x408>
 80044c6:	4b8f      	ldr	r3, [pc, #572]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 80044c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80044ca:	4b8e      	ldr	r3, [pc, #568]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 80044cc:	2104      	movs	r1, #4
 80044ce:	430a      	orrs	r2, r1
 80044d0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80044d2:	4b8c      	ldr	r3, [pc, #560]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 80044d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80044d6:	4b8b      	ldr	r3, [pc, #556]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 80044d8:	2101      	movs	r1, #1
 80044da:	430a      	orrs	r2, r1
 80044dc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80044de:	e00b      	b.n	80044f8 <HAL_RCC_OscConfig+0x420>
 80044e0:	4b88      	ldr	r3, [pc, #544]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 80044e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80044e4:	4b87      	ldr	r3, [pc, #540]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 80044e6:	2101      	movs	r1, #1
 80044e8:	438a      	bics	r2, r1
 80044ea:	65da      	str	r2, [r3, #92]	@ 0x5c
 80044ec:	4b85      	ldr	r3, [pc, #532]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 80044ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80044f0:	4b84      	ldr	r3, [pc, #528]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 80044f2:	2104      	movs	r1, #4
 80044f4:	438a      	bics	r2, r1
 80044f6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d014      	beq.n	800452a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004500:	f7ff f9de 	bl	80038c0 <HAL_GetTick>
 8004504:	0003      	movs	r3, r0
 8004506:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004508:	e009      	b.n	800451e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800450a:	f7ff f9d9 	bl	80038c0 <HAL_GetTick>
 800450e:	0002      	movs	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	4a7d      	ldr	r2, [pc, #500]	@ (800470c <HAL_RCC_OscConfig+0x634>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e136      	b.n	800478c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800451e:	4b79      	ldr	r3, [pc, #484]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 8004520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004522:	2202      	movs	r2, #2
 8004524:	4013      	ands	r3, r2
 8004526:	d0f0      	beq.n	800450a <HAL_RCC_OscConfig+0x432>
 8004528:	e013      	b.n	8004552 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452a:	f7ff f9c9 	bl	80038c0 <HAL_GetTick>
 800452e:	0003      	movs	r3, r0
 8004530:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004532:	e009      	b.n	8004548 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004534:	f7ff f9c4 	bl	80038c0 <HAL_GetTick>
 8004538:	0002      	movs	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	4a73      	ldr	r2, [pc, #460]	@ (800470c <HAL_RCC_OscConfig+0x634>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d901      	bls.n	8004548 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e121      	b.n	800478c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004548:	4b6e      	ldr	r3, [pc, #440]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 800454a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800454c:	2202      	movs	r2, #2
 800454e:	4013      	ands	r3, r2
 8004550:	d1f0      	bne.n	8004534 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004552:	231f      	movs	r3, #31
 8004554:	18fb      	adds	r3, r7, r3
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d105      	bne.n	8004568 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800455c:	4b69      	ldr	r3, [pc, #420]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 800455e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004560:	4b68      	ldr	r3, [pc, #416]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 8004562:	496b      	ldr	r1, [pc, #428]	@ (8004710 <HAL_RCC_OscConfig+0x638>)
 8004564:	400a      	ands	r2, r1
 8004566:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2220      	movs	r2, #32
 800456e:	4013      	ands	r3, r2
 8004570:	d039      	beq.n	80045e6 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d01b      	beq.n	80045b2 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800457a:	4b62      	ldr	r3, [pc, #392]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	4b61      	ldr	r3, [pc, #388]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 8004580:	2180      	movs	r1, #128	@ 0x80
 8004582:	03c9      	lsls	r1, r1, #15
 8004584:	430a      	orrs	r2, r1
 8004586:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004588:	f7ff f99a 	bl	80038c0 <HAL_GetTick>
 800458c:	0003      	movs	r3, r0
 800458e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004590:	e008      	b.n	80045a4 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004592:	f7ff f995 	bl	80038c0 <HAL_GetTick>
 8004596:	0002      	movs	r2, r0
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d901      	bls.n	80045a4 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e0f3      	b.n	800478c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80045a4:	4b57      	ldr	r3, [pc, #348]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	2380      	movs	r3, #128	@ 0x80
 80045aa:	041b      	lsls	r3, r3, #16
 80045ac:	4013      	ands	r3, r2
 80045ae:	d0f0      	beq.n	8004592 <HAL_RCC_OscConfig+0x4ba>
 80045b0:	e019      	b.n	80045e6 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045b2:	4b54      	ldr	r3, [pc, #336]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	4b53      	ldr	r3, [pc, #332]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 80045b8:	4956      	ldr	r1, [pc, #344]	@ (8004714 <HAL_RCC_OscConfig+0x63c>)
 80045ba:	400a      	ands	r2, r1
 80045bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045be:	f7ff f97f 	bl	80038c0 <HAL_GetTick>
 80045c2:	0003      	movs	r3, r0
 80045c4:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045c8:	f7ff f97a 	bl	80038c0 <HAL_GetTick>
 80045cc:	0002      	movs	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e0d8      	b.n	800478c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80045da:	4b4a      	ldr	r3, [pc, #296]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	2380      	movs	r3, #128	@ 0x80
 80045e0:	041b      	lsls	r3, r3, #16
 80045e2:	4013      	ands	r3, r2
 80045e4:	d1f0      	bne.n	80045c8 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d100      	bne.n	80045f0 <HAL_RCC_OscConfig+0x518>
 80045ee:	e0cc      	b.n	800478a <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045f0:	4b44      	ldr	r3, [pc, #272]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	2238      	movs	r2, #56	@ 0x38
 80045f6:	4013      	ands	r3, r2
 80045f8:	2b10      	cmp	r3, #16
 80045fa:	d100      	bne.n	80045fe <HAL_RCC_OscConfig+0x526>
 80045fc:	e07b      	b.n	80046f6 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	2b02      	cmp	r3, #2
 8004604:	d156      	bne.n	80046b4 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004606:	4b3f      	ldr	r3, [pc, #252]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	4b3e      	ldr	r3, [pc, #248]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 800460c:	4942      	ldr	r1, [pc, #264]	@ (8004718 <HAL_RCC_OscConfig+0x640>)
 800460e:	400a      	ands	r2, r1
 8004610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004612:	f7ff f955 	bl	80038c0 <HAL_GetTick>
 8004616:	0003      	movs	r3, r0
 8004618:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800461c:	f7ff f950 	bl	80038c0 <HAL_GetTick>
 8004620:	0002      	movs	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e0ae      	b.n	800478c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800462e:	4b35      	ldr	r3, [pc, #212]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	2380      	movs	r3, #128	@ 0x80
 8004634:	049b      	lsls	r3, r3, #18
 8004636:	4013      	ands	r3, r2
 8004638:	d1f0      	bne.n	800461c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800463a:	4b32      	ldr	r3, [pc, #200]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	4a37      	ldr	r2, [pc, #220]	@ (800471c <HAL_RCC_OscConfig+0x644>)
 8004640:	4013      	ands	r3, r2
 8004642:	0019      	movs	r1, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800464c:	431a      	orrs	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004652:	021b      	lsls	r3, r3, #8
 8004654:	431a      	orrs	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004660:	431a      	orrs	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004666:	431a      	orrs	r2, r3
 8004668:	4b26      	ldr	r3, [pc, #152]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 800466a:	430a      	orrs	r2, r1
 800466c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800466e:	4b25      	ldr	r3, [pc, #148]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	4b24      	ldr	r3, [pc, #144]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 8004674:	2180      	movs	r1, #128	@ 0x80
 8004676:	0449      	lsls	r1, r1, #17
 8004678:	430a      	orrs	r2, r1
 800467a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800467c:	4b21      	ldr	r3, [pc, #132]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 800467e:	68da      	ldr	r2, [r3, #12]
 8004680:	4b20      	ldr	r3, [pc, #128]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 8004682:	2180      	movs	r1, #128	@ 0x80
 8004684:	0549      	lsls	r1, r1, #21
 8004686:	430a      	orrs	r2, r1
 8004688:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468a:	f7ff f919 	bl	80038c0 <HAL_GetTick>
 800468e:	0003      	movs	r3, r0
 8004690:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004694:	f7ff f914 	bl	80038c0 <HAL_GetTick>
 8004698:	0002      	movs	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e072      	b.n	800478c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046a6:	4b17      	ldr	r3, [pc, #92]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	2380      	movs	r3, #128	@ 0x80
 80046ac:	049b      	lsls	r3, r3, #18
 80046ae:	4013      	ands	r3, r2
 80046b0:	d0f0      	beq.n	8004694 <HAL_RCC_OscConfig+0x5bc>
 80046b2:	e06a      	b.n	800478a <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046b4:	4b13      	ldr	r3, [pc, #76]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	4b12      	ldr	r3, [pc, #72]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 80046ba:	4917      	ldr	r1, [pc, #92]	@ (8004718 <HAL_RCC_OscConfig+0x640>)
 80046bc:	400a      	ands	r2, r1
 80046be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c0:	f7ff f8fe 	bl	80038c0 <HAL_GetTick>
 80046c4:	0003      	movs	r3, r0
 80046c6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046c8:	e008      	b.n	80046dc <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ca:	f7ff f8f9 	bl	80038c0 <HAL_GetTick>
 80046ce:	0002      	movs	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e057      	b.n	800478c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046dc:	4b09      	ldr	r3, [pc, #36]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	2380      	movs	r3, #128	@ 0x80
 80046e2:	049b      	lsls	r3, r3, #18
 80046e4:	4013      	ands	r3, r2
 80046e6:	d1f0      	bne.n	80046ca <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80046e8:	4b06      	ldr	r3, [pc, #24]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 80046ea:	68da      	ldr	r2, [r3, #12]
 80046ec:	4b05      	ldr	r3, [pc, #20]	@ (8004704 <HAL_RCC_OscConfig+0x62c>)
 80046ee:	490c      	ldr	r1, [pc, #48]	@ (8004720 <HAL_RCC_OscConfig+0x648>)
 80046f0:	400a      	ands	r2, r1
 80046f2:	60da      	str	r2, [r3, #12]
 80046f4:	e049      	b.n	800478a <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d112      	bne.n	8004724 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e044      	b.n	800478c <HAL_RCC_OscConfig+0x6b4>
 8004702:	46c0      	nop			@ (mov r8, r8)
 8004704:	40021000 	.word	0x40021000
 8004708:	40007000 	.word	0x40007000
 800470c:	00001388 	.word	0x00001388
 8004710:	efffffff 	.word	0xefffffff
 8004714:	ffbfffff 	.word	0xffbfffff
 8004718:	feffffff 	.word	0xfeffffff
 800471c:	11c1808c 	.word	0x11c1808c
 8004720:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004724:	4b1b      	ldr	r3, [pc, #108]	@ (8004794 <HAL_RCC_OscConfig+0x6bc>)
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2203      	movs	r2, #3
 800472e:	401a      	ands	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004734:	429a      	cmp	r2, r3
 8004736:	d126      	bne.n	8004786 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	2270      	movs	r2, #112	@ 0x70
 800473c:	401a      	ands	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004742:	429a      	cmp	r2, r3
 8004744:	d11f      	bne.n	8004786 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	23fe      	movs	r3, #254	@ 0xfe
 800474a:	01db      	lsls	r3, r3, #7
 800474c:	401a      	ands	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004752:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004754:	429a      	cmp	r2, r3
 8004756:	d116      	bne.n	8004786 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	23f8      	movs	r3, #248	@ 0xf8
 800475c:	039b      	lsls	r3, r3, #14
 800475e:	401a      	ands	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004764:	429a      	cmp	r2, r3
 8004766:	d10e      	bne.n	8004786 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	23e0      	movs	r3, #224	@ 0xe0
 800476c:	051b      	lsls	r3, r3, #20
 800476e:	401a      	ands	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004774:	429a      	cmp	r2, r3
 8004776:	d106      	bne.n	8004786 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	0f5b      	lsrs	r3, r3, #29
 800477c:	075a      	lsls	r2, r3, #29
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004782:	429a      	cmp	r2, r3
 8004784:	d001      	beq.n	800478a <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e000      	b.n	800478c <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	0018      	movs	r0, r3
 800478e:	46bd      	mov	sp, r7
 8004790:	b008      	add	sp, #32
 8004792:	bd80      	pop	{r7, pc}
 8004794:	40021000 	.word	0x40021000

08004798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e0e9      	b.n	8004980 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047ac:	4b76      	ldr	r3, [pc, #472]	@ (8004988 <HAL_RCC_ClockConfig+0x1f0>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2207      	movs	r2, #7
 80047b2:	4013      	ands	r3, r2
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d91e      	bls.n	80047f8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ba:	4b73      	ldr	r3, [pc, #460]	@ (8004988 <HAL_RCC_ClockConfig+0x1f0>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2207      	movs	r2, #7
 80047c0:	4393      	bics	r3, r2
 80047c2:	0019      	movs	r1, r3
 80047c4:	4b70      	ldr	r3, [pc, #448]	@ (8004988 <HAL_RCC_ClockConfig+0x1f0>)
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80047cc:	f7ff f878 	bl	80038c0 <HAL_GetTick>
 80047d0:	0003      	movs	r3, r0
 80047d2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80047d4:	e009      	b.n	80047ea <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047d6:	f7ff f873 	bl	80038c0 <HAL_GetTick>
 80047da:	0002      	movs	r2, r0
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	4a6a      	ldr	r2, [pc, #424]	@ (800498c <HAL_RCC_ClockConfig+0x1f4>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e0ca      	b.n	8004980 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80047ea:	4b67      	ldr	r3, [pc, #412]	@ (8004988 <HAL_RCC_ClockConfig+0x1f0>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2207      	movs	r2, #7
 80047f0:	4013      	ands	r3, r2
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d1ee      	bne.n	80047d6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2202      	movs	r2, #2
 80047fe:	4013      	ands	r3, r2
 8004800:	d015      	beq.n	800482e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2204      	movs	r2, #4
 8004808:	4013      	ands	r3, r2
 800480a:	d006      	beq.n	800481a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800480c:	4b60      	ldr	r3, [pc, #384]	@ (8004990 <HAL_RCC_ClockConfig+0x1f8>)
 800480e:	689a      	ldr	r2, [r3, #8]
 8004810:	4b5f      	ldr	r3, [pc, #380]	@ (8004990 <HAL_RCC_ClockConfig+0x1f8>)
 8004812:	21e0      	movs	r1, #224	@ 0xe0
 8004814:	01c9      	lsls	r1, r1, #7
 8004816:	430a      	orrs	r2, r1
 8004818:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800481a:	4b5d      	ldr	r3, [pc, #372]	@ (8004990 <HAL_RCC_ClockConfig+0x1f8>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	4a5d      	ldr	r2, [pc, #372]	@ (8004994 <HAL_RCC_ClockConfig+0x1fc>)
 8004820:	4013      	ands	r3, r2
 8004822:	0019      	movs	r1, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689a      	ldr	r2, [r3, #8]
 8004828:	4b59      	ldr	r3, [pc, #356]	@ (8004990 <HAL_RCC_ClockConfig+0x1f8>)
 800482a:	430a      	orrs	r2, r1
 800482c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2201      	movs	r2, #1
 8004834:	4013      	ands	r3, r2
 8004836:	d057      	beq.n	80048e8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d107      	bne.n	8004850 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004840:	4b53      	ldr	r3, [pc, #332]	@ (8004990 <HAL_RCC_ClockConfig+0x1f8>)
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	2380      	movs	r3, #128	@ 0x80
 8004846:	029b      	lsls	r3, r3, #10
 8004848:	4013      	ands	r3, r2
 800484a:	d12b      	bne.n	80048a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e097      	b.n	8004980 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	2b02      	cmp	r3, #2
 8004856:	d107      	bne.n	8004868 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004858:	4b4d      	ldr	r3, [pc, #308]	@ (8004990 <HAL_RCC_ClockConfig+0x1f8>)
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	2380      	movs	r3, #128	@ 0x80
 800485e:	049b      	lsls	r3, r3, #18
 8004860:	4013      	ands	r3, r2
 8004862:	d11f      	bne.n	80048a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e08b      	b.n	8004980 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d107      	bne.n	8004880 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004870:	4b47      	ldr	r3, [pc, #284]	@ (8004990 <HAL_RCC_ClockConfig+0x1f8>)
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	2380      	movs	r3, #128	@ 0x80
 8004876:	00db      	lsls	r3, r3, #3
 8004878:	4013      	ands	r3, r2
 800487a:	d113      	bne.n	80048a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e07f      	b.n	8004980 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	2b03      	cmp	r3, #3
 8004886:	d106      	bne.n	8004896 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004888:	4b41      	ldr	r3, [pc, #260]	@ (8004990 <HAL_RCC_ClockConfig+0x1f8>)
 800488a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800488c:	2202      	movs	r2, #2
 800488e:	4013      	ands	r3, r2
 8004890:	d108      	bne.n	80048a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e074      	b.n	8004980 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004896:	4b3e      	ldr	r3, [pc, #248]	@ (8004990 <HAL_RCC_ClockConfig+0x1f8>)
 8004898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800489a:	2202      	movs	r2, #2
 800489c:	4013      	ands	r3, r2
 800489e:	d101      	bne.n	80048a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e06d      	b.n	8004980 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048a4:	4b3a      	ldr	r3, [pc, #232]	@ (8004990 <HAL_RCC_ClockConfig+0x1f8>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	2207      	movs	r2, #7
 80048aa:	4393      	bics	r3, r2
 80048ac:	0019      	movs	r1, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	4b37      	ldr	r3, [pc, #220]	@ (8004990 <HAL_RCC_ClockConfig+0x1f8>)
 80048b4:	430a      	orrs	r2, r1
 80048b6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b8:	f7ff f802 	bl	80038c0 <HAL_GetTick>
 80048bc:	0003      	movs	r3, r0
 80048be:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048c0:	e009      	b.n	80048d6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048c2:	f7fe fffd 	bl	80038c0 <HAL_GetTick>
 80048c6:	0002      	movs	r2, r0
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	4a2f      	ldr	r2, [pc, #188]	@ (800498c <HAL_RCC_ClockConfig+0x1f4>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e054      	b.n	8004980 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048d6:	4b2e      	ldr	r3, [pc, #184]	@ (8004990 <HAL_RCC_ClockConfig+0x1f8>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	2238      	movs	r2, #56	@ 0x38
 80048dc:	401a      	ands	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	00db      	lsls	r3, r3, #3
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d1ec      	bne.n	80048c2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048e8:	4b27      	ldr	r3, [pc, #156]	@ (8004988 <HAL_RCC_ClockConfig+0x1f0>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2207      	movs	r2, #7
 80048ee:	4013      	ands	r3, r2
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d21e      	bcs.n	8004934 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048f6:	4b24      	ldr	r3, [pc, #144]	@ (8004988 <HAL_RCC_ClockConfig+0x1f0>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2207      	movs	r2, #7
 80048fc:	4393      	bics	r3, r2
 80048fe:	0019      	movs	r1, r3
 8004900:	4b21      	ldr	r3, [pc, #132]	@ (8004988 <HAL_RCC_ClockConfig+0x1f0>)
 8004902:	683a      	ldr	r2, [r7, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004908:	f7fe ffda 	bl	80038c0 <HAL_GetTick>
 800490c:	0003      	movs	r3, r0
 800490e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004910:	e009      	b.n	8004926 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004912:	f7fe ffd5 	bl	80038c0 <HAL_GetTick>
 8004916:	0002      	movs	r2, r0
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	4a1b      	ldr	r2, [pc, #108]	@ (800498c <HAL_RCC_ClockConfig+0x1f4>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e02c      	b.n	8004980 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004926:	4b18      	ldr	r3, [pc, #96]	@ (8004988 <HAL_RCC_ClockConfig+0x1f0>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2207      	movs	r2, #7
 800492c:	4013      	ands	r3, r2
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	429a      	cmp	r2, r3
 8004932:	d1ee      	bne.n	8004912 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2204      	movs	r2, #4
 800493a:	4013      	ands	r3, r2
 800493c:	d009      	beq.n	8004952 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800493e:	4b14      	ldr	r3, [pc, #80]	@ (8004990 <HAL_RCC_ClockConfig+0x1f8>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	4a15      	ldr	r2, [pc, #84]	@ (8004998 <HAL_RCC_ClockConfig+0x200>)
 8004944:	4013      	ands	r3, r2
 8004946:	0019      	movs	r1, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68da      	ldr	r2, [r3, #12]
 800494c:	4b10      	ldr	r3, [pc, #64]	@ (8004990 <HAL_RCC_ClockConfig+0x1f8>)
 800494e:	430a      	orrs	r2, r1
 8004950:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004952:	f000 f829 	bl	80049a8 <HAL_RCC_GetSysClockFreq>
 8004956:	0001      	movs	r1, r0
 8004958:	4b0d      	ldr	r3, [pc, #52]	@ (8004990 <HAL_RCC_ClockConfig+0x1f8>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	0a1b      	lsrs	r3, r3, #8
 800495e:	220f      	movs	r2, #15
 8004960:	401a      	ands	r2, r3
 8004962:	4b0e      	ldr	r3, [pc, #56]	@ (800499c <HAL_RCC_ClockConfig+0x204>)
 8004964:	0092      	lsls	r2, r2, #2
 8004966:	58d3      	ldr	r3, [r2, r3]
 8004968:	221f      	movs	r2, #31
 800496a:	4013      	ands	r3, r2
 800496c:	000a      	movs	r2, r1
 800496e:	40da      	lsrs	r2, r3
 8004970:	4b0b      	ldr	r3, [pc, #44]	@ (80049a0 <HAL_RCC_ClockConfig+0x208>)
 8004972:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004974:	4b0b      	ldr	r3, [pc, #44]	@ (80049a4 <HAL_RCC_ClockConfig+0x20c>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	0018      	movs	r0, r3
 800497a:	f7fe ff45 	bl	8003808 <HAL_InitTick>
 800497e:	0003      	movs	r3, r0
}
 8004980:	0018      	movs	r0, r3
 8004982:	46bd      	mov	sp, r7
 8004984:	b004      	add	sp, #16
 8004986:	bd80      	pop	{r7, pc}
 8004988:	40022000 	.word	0x40022000
 800498c:	00001388 	.word	0x00001388
 8004990:	40021000 	.word	0x40021000
 8004994:	fffff0ff 	.word	0xfffff0ff
 8004998:	ffff8fff 	.word	0xffff8fff
 800499c:	08009b84 	.word	0x08009b84
 80049a0:	20000008 	.word	0x20000008
 80049a4:	2000000c 	.word	0x2000000c

080049a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049ae:	4b3c      	ldr	r3, [pc, #240]	@ (8004aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	2238      	movs	r2, #56	@ 0x38
 80049b4:	4013      	ands	r3, r2
 80049b6:	d10f      	bne.n	80049d8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80049b8:	4b39      	ldr	r3, [pc, #228]	@ (8004aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	0adb      	lsrs	r3, r3, #11
 80049be:	2207      	movs	r2, #7
 80049c0:	4013      	ands	r3, r2
 80049c2:	2201      	movs	r2, #1
 80049c4:	409a      	lsls	r2, r3
 80049c6:	0013      	movs	r3, r2
 80049c8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80049ca:	6839      	ldr	r1, [r7, #0]
 80049cc:	4835      	ldr	r0, [pc, #212]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80049ce:	f7fb fbb5 	bl	800013c <__udivsi3>
 80049d2:	0003      	movs	r3, r0
 80049d4:	613b      	str	r3, [r7, #16]
 80049d6:	e05d      	b.n	8004a94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049d8:	4b31      	ldr	r3, [pc, #196]	@ (8004aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	2238      	movs	r2, #56	@ 0x38
 80049de:	4013      	ands	r3, r2
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d102      	bne.n	80049ea <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80049e4:	4b30      	ldr	r3, [pc, #192]	@ (8004aa8 <HAL_RCC_GetSysClockFreq+0x100>)
 80049e6:	613b      	str	r3, [r7, #16]
 80049e8:	e054      	b.n	8004a94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049ea:	4b2d      	ldr	r3, [pc, #180]	@ (8004aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	2238      	movs	r2, #56	@ 0x38
 80049f0:	4013      	ands	r3, r2
 80049f2:	2b10      	cmp	r3, #16
 80049f4:	d138      	bne.n	8004a68 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80049f6:	4b2a      	ldr	r3, [pc, #168]	@ (8004aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	2203      	movs	r2, #3
 80049fc:	4013      	ands	r3, r2
 80049fe:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a00:	4b27      	ldr	r3, [pc, #156]	@ (8004aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	091b      	lsrs	r3, r3, #4
 8004a06:	2207      	movs	r2, #7
 8004a08:	4013      	ands	r3, r2
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2b03      	cmp	r3, #3
 8004a12:	d10d      	bne.n	8004a30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a14:	68b9      	ldr	r1, [r7, #8]
 8004a16:	4824      	ldr	r0, [pc, #144]	@ (8004aa8 <HAL_RCC_GetSysClockFreq+0x100>)
 8004a18:	f7fb fb90 	bl	800013c <__udivsi3>
 8004a1c:	0003      	movs	r3, r0
 8004a1e:	0019      	movs	r1, r3
 8004a20:	4b1f      	ldr	r3, [pc, #124]	@ (8004aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	0a1b      	lsrs	r3, r3, #8
 8004a26:	227f      	movs	r2, #127	@ 0x7f
 8004a28:	4013      	ands	r3, r2
 8004a2a:	434b      	muls	r3, r1
 8004a2c:	617b      	str	r3, [r7, #20]
        break;
 8004a2e:	e00d      	b.n	8004a4c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004a30:	68b9      	ldr	r1, [r7, #8]
 8004a32:	481c      	ldr	r0, [pc, #112]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004a34:	f7fb fb82 	bl	800013c <__udivsi3>
 8004a38:	0003      	movs	r3, r0
 8004a3a:	0019      	movs	r1, r3
 8004a3c:	4b18      	ldr	r3, [pc, #96]	@ (8004aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	0a1b      	lsrs	r3, r3, #8
 8004a42:	227f      	movs	r2, #127	@ 0x7f
 8004a44:	4013      	ands	r3, r2
 8004a46:	434b      	muls	r3, r1
 8004a48:	617b      	str	r3, [r7, #20]
        break;
 8004a4a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004a4c:	4b14      	ldr	r3, [pc, #80]	@ (8004aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	0f5b      	lsrs	r3, r3, #29
 8004a52:	2207      	movs	r2, #7
 8004a54:	4013      	ands	r3, r2
 8004a56:	3301      	adds	r3, #1
 8004a58:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004a5a:	6879      	ldr	r1, [r7, #4]
 8004a5c:	6978      	ldr	r0, [r7, #20]
 8004a5e:	f7fb fb6d 	bl	800013c <__udivsi3>
 8004a62:	0003      	movs	r3, r0
 8004a64:	613b      	str	r3, [r7, #16]
 8004a66:	e015      	b.n	8004a94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004a68:	4b0d      	ldr	r3, [pc, #52]	@ (8004aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	2238      	movs	r2, #56	@ 0x38
 8004a6e:	4013      	ands	r3, r2
 8004a70:	2b20      	cmp	r3, #32
 8004a72:	d103      	bne.n	8004a7c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004a74:	2380      	movs	r3, #128	@ 0x80
 8004a76:	021b      	lsls	r3, r3, #8
 8004a78:	613b      	str	r3, [r7, #16]
 8004a7a:	e00b      	b.n	8004a94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004a7c:	4b08      	ldr	r3, [pc, #32]	@ (8004aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	2238      	movs	r2, #56	@ 0x38
 8004a82:	4013      	ands	r3, r2
 8004a84:	2b18      	cmp	r3, #24
 8004a86:	d103      	bne.n	8004a90 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004a88:	23fa      	movs	r3, #250	@ 0xfa
 8004a8a:	01db      	lsls	r3, r3, #7
 8004a8c:	613b      	str	r3, [r7, #16]
 8004a8e:	e001      	b.n	8004a94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004a94:	693b      	ldr	r3, [r7, #16]
}
 8004a96:	0018      	movs	r0, r3
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	b006      	add	sp, #24
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	46c0      	nop			@ (mov r8, r8)
 8004aa0:	40021000 	.word	0x40021000
 8004aa4:	00f42400 	.word	0x00f42400
 8004aa8:	007a1200 	.word	0x007a1200

08004aac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ab0:	4b02      	ldr	r3, [pc, #8]	@ (8004abc <HAL_RCC_GetHCLKFreq+0x10>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
}
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	46c0      	nop			@ (mov r8, r8)
 8004abc:	20000008 	.word	0x20000008

08004ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ac0:	b5b0      	push	{r4, r5, r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004ac4:	f7ff fff2 	bl	8004aac <HAL_RCC_GetHCLKFreq>
 8004ac8:	0004      	movs	r4, r0
 8004aca:	f7ff faf9 	bl	80040c0 <LL_RCC_GetAPB1Prescaler>
 8004ace:	0003      	movs	r3, r0
 8004ad0:	0b1a      	lsrs	r2, r3, #12
 8004ad2:	4b05      	ldr	r3, [pc, #20]	@ (8004ae8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ad4:	0092      	lsls	r2, r2, #2
 8004ad6:	58d3      	ldr	r3, [r2, r3]
 8004ad8:	221f      	movs	r2, #31
 8004ada:	4013      	ands	r3, r2
 8004adc:	40dc      	lsrs	r4, r3
 8004ade:	0023      	movs	r3, r4
}
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bdb0      	pop	{r4, r5, r7, pc}
 8004ae6:	46c0      	nop			@ (mov r8, r8)
 8004ae8:	08009bc4 	.word	0x08009bc4

08004aec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004af4:	2313      	movs	r3, #19
 8004af6:	18fb      	adds	r3, r7, r3
 8004af8:	2200      	movs	r2, #0
 8004afa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004afc:	2312      	movs	r3, #18
 8004afe:	18fb      	adds	r3, r7, r3
 8004b00:	2200      	movs	r2, #0
 8004b02:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	2380      	movs	r3, #128	@ 0x80
 8004b0a:	029b      	lsls	r3, r3, #10
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	d100      	bne.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004b10:	e0ad      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b12:	2011      	movs	r0, #17
 8004b14:	183b      	adds	r3, r7, r0
 8004b16:	2200      	movs	r2, #0
 8004b18:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b1a:	4b47      	ldr	r3, [pc, #284]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004b1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b1e:	2380      	movs	r3, #128	@ 0x80
 8004b20:	055b      	lsls	r3, r3, #21
 8004b22:	4013      	ands	r3, r2
 8004b24:	d110      	bne.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b26:	4b44      	ldr	r3, [pc, #272]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004b28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b2a:	4b43      	ldr	r3, [pc, #268]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004b2c:	2180      	movs	r1, #128	@ 0x80
 8004b2e:	0549      	lsls	r1, r1, #21
 8004b30:	430a      	orrs	r2, r1
 8004b32:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004b34:	4b40      	ldr	r3, [pc, #256]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004b36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b38:	2380      	movs	r3, #128	@ 0x80
 8004b3a:	055b      	lsls	r3, r3, #21
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	60bb      	str	r3, [r7, #8]
 8004b40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b42:	183b      	adds	r3, r7, r0
 8004b44:	2201      	movs	r2, #1
 8004b46:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b48:	4b3c      	ldr	r3, [pc, #240]	@ (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	4b3b      	ldr	r3, [pc, #236]	@ (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004b4e:	2180      	movs	r1, #128	@ 0x80
 8004b50:	0049      	lsls	r1, r1, #1
 8004b52:	430a      	orrs	r2, r1
 8004b54:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b56:	f7fe feb3 	bl	80038c0 <HAL_GetTick>
 8004b5a:	0003      	movs	r3, r0
 8004b5c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b5e:	e00b      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b60:	f7fe feae 	bl	80038c0 <HAL_GetTick>
 8004b64:	0002      	movs	r2, r0
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d904      	bls.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004b6e:	2313      	movs	r3, #19
 8004b70:	18fb      	adds	r3, r7, r3
 8004b72:	2203      	movs	r2, #3
 8004b74:	701a      	strb	r2, [r3, #0]
        break;
 8004b76:	e005      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b78:	4b30      	ldr	r3, [pc, #192]	@ (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	2380      	movs	r3, #128	@ 0x80
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	4013      	ands	r3, r2
 8004b82:	d0ed      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004b84:	2313      	movs	r3, #19
 8004b86:	18fb      	adds	r3, r7, r3
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d15e      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b8e:	4b2a      	ldr	r3, [pc, #168]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004b90:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b92:	23c0      	movs	r3, #192	@ 0xc0
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4013      	ands	r3, r2
 8004b98:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d019      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d014      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004baa:	4b23      	ldr	r3, [pc, #140]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bae:	4a24      	ldr	r2, [pc, #144]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bb4:	4b20      	ldr	r3, [pc, #128]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004bb6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004bb8:	4b1f      	ldr	r3, [pc, #124]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004bba:	2180      	movs	r1, #128	@ 0x80
 8004bbc:	0249      	lsls	r1, r1, #9
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bc2:	4b1d      	ldr	r3, [pc, #116]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004bc4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004bc8:	491e      	ldr	r1, [pc, #120]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8004bca:	400a      	ands	r2, r1
 8004bcc:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bce:	4b1a      	ldr	r3, [pc, #104]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	4013      	ands	r3, r2
 8004bda:	d016      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bdc:	f7fe fe70 	bl	80038c0 <HAL_GetTick>
 8004be0:	0003      	movs	r3, r0
 8004be2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004be4:	e00c      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004be6:	f7fe fe6b 	bl	80038c0 <HAL_GetTick>
 8004bea:	0002      	movs	r2, r0
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	4a15      	ldr	r2, [pc, #84]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d904      	bls.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004bf6:	2313      	movs	r3, #19
 8004bf8:	18fb      	adds	r3, r7, r3
 8004bfa:	2203      	movs	r2, #3
 8004bfc:	701a      	strb	r2, [r3, #0]
            break;
 8004bfe:	e004      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c00:	4b0d      	ldr	r3, [pc, #52]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004c02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c04:	2202      	movs	r2, #2
 8004c06:	4013      	ands	r3, r2
 8004c08:	d0ed      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004c0a:	2313      	movs	r3, #19
 8004c0c:	18fb      	adds	r3, r7, r3
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10a      	bne.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c14:	4b08      	ldr	r3, [pc, #32]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c18:	4a09      	ldr	r2, [pc, #36]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	0019      	movs	r1, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c22:	4b05      	ldr	r3, [pc, #20]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004c24:	430a      	orrs	r2, r1
 8004c26:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004c28:	e016      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c2a:	2312      	movs	r3, #18
 8004c2c:	18fb      	adds	r3, r7, r3
 8004c2e:	2213      	movs	r2, #19
 8004c30:	18ba      	adds	r2, r7, r2
 8004c32:	7812      	ldrb	r2, [r2, #0]
 8004c34:	701a      	strb	r2, [r3, #0]
 8004c36:	e00f      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004c38:	40021000 	.word	0x40021000
 8004c3c:	40007000 	.word	0x40007000
 8004c40:	fffffcff 	.word	0xfffffcff
 8004c44:	fffeffff 	.word	0xfffeffff
 8004c48:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c4c:	2312      	movs	r3, #18
 8004c4e:	18fb      	adds	r3, r7, r3
 8004c50:	2213      	movs	r2, #19
 8004c52:	18ba      	adds	r2, r7, r2
 8004c54:	7812      	ldrb	r2, [r2, #0]
 8004c56:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c58:	2311      	movs	r3, #17
 8004c5a:	18fb      	adds	r3, r7, r3
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d105      	bne.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c62:	4bb6      	ldr	r3, [pc, #728]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c66:	4bb5      	ldr	r3, [pc, #724]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c68:	49b5      	ldr	r1, [pc, #724]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004c6a:	400a      	ands	r2, r1
 8004c6c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2201      	movs	r2, #1
 8004c74:	4013      	ands	r3, r2
 8004c76:	d009      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c78:	4bb0      	ldr	r3, [pc, #704]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c7c:	2203      	movs	r2, #3
 8004c7e:	4393      	bics	r3, r2
 8004c80:	0019      	movs	r1, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	4bad      	ldr	r3, [pc, #692]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2202      	movs	r2, #2
 8004c92:	4013      	ands	r3, r2
 8004c94:	d009      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c96:	4ba9      	ldr	r3, [pc, #676]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c9a:	220c      	movs	r2, #12
 8004c9c:	4393      	bics	r3, r2
 8004c9e:	0019      	movs	r1, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689a      	ldr	r2, [r3, #8]
 8004ca4:	4ba5      	ldr	r3, [pc, #660]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2204      	movs	r2, #4
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	d009      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cb4:	4ba1      	ldr	r3, [pc, #644]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cb8:	2230      	movs	r2, #48	@ 0x30
 8004cba:	4393      	bics	r3, r2
 8004cbc:	0019      	movs	r1, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68da      	ldr	r2, [r3, #12]
 8004cc2:	4b9e      	ldr	r3, [pc, #632]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2210      	movs	r2, #16
 8004cce:	4013      	ands	r3, r2
 8004cd0:	d009      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cd2:	4b9a      	ldr	r3, [pc, #616]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd6:	4a9b      	ldr	r2, [pc, #620]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004cd8:	4013      	ands	r3, r2
 8004cda:	0019      	movs	r1, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	691a      	ldr	r2, [r3, #16]
 8004ce0:	4b96      	ldr	r3, [pc, #600]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	2380      	movs	r3, #128	@ 0x80
 8004cec:	015b      	lsls	r3, r3, #5
 8004cee:	4013      	ands	r3, r2
 8004cf0:	d009      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8004cf2:	4b92      	ldr	r3, [pc, #584]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cf6:	4a94      	ldr	r2, [pc, #592]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	0019      	movs	r1, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	695a      	ldr	r2, [r3, #20]
 8004d00:	4b8e      	ldr	r3, [pc, #568]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d02:	430a      	orrs	r2, r1
 8004d04:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	2380      	movs	r3, #128	@ 0x80
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	4013      	ands	r3, r2
 8004d10:	d009      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d12:	4b8a      	ldr	r3, [pc, #552]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d16:	4a8d      	ldr	r2, [pc, #564]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8004d18:	4013      	ands	r3, r2
 8004d1a:	0019      	movs	r1, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d20:	4b86      	ldr	r3, [pc, #536]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d22:	430a      	orrs	r2, r1
 8004d24:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	2380      	movs	r3, #128	@ 0x80
 8004d2c:	00db      	lsls	r3, r3, #3
 8004d2e:	4013      	ands	r3, r2
 8004d30:	d009      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d32:	4b82      	ldr	r3, [pc, #520]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d36:	4a86      	ldr	r2, [pc, #536]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8004d38:	4013      	ands	r3, r2
 8004d3a:	0019      	movs	r1, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d40:	4b7e      	ldr	r3, [pc, #504]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d42:	430a      	orrs	r2, r1
 8004d44:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	d009      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d50:	4b7a      	ldr	r3, [pc, #488]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d54:	4a7f      	ldr	r2, [pc, #508]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004d56:	4013      	ands	r3, r2
 8004d58:	0019      	movs	r1, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	699a      	ldr	r2, [r3, #24]
 8004d5e:	4b77      	ldr	r3, [pc, #476]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d60:	430a      	orrs	r2, r1
 8004d62:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2240      	movs	r2, #64	@ 0x40
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	d009      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d6e:	4b73      	ldr	r3, [pc, #460]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d72:	4a79      	ldr	r2, [pc, #484]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8004d74:	4013      	ands	r3, r2
 8004d76:	0019      	movs	r1, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	69da      	ldr	r2, [r3, #28]
 8004d7c:	4b6f      	ldr	r3, [pc, #444]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	2380      	movs	r3, #128	@ 0x80
 8004d88:	01db      	lsls	r3, r3, #7
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	d015      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d8e:	4b6b      	ldr	r3, [pc, #428]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	0899      	lsrs	r1, r3, #2
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d9a:	4b68      	ldr	r3, [pc, #416]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004da4:	2380      	movs	r3, #128	@ 0x80
 8004da6:	05db      	lsls	r3, r3, #23
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d106      	bne.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004dac:	4b63      	ldr	r3, [pc, #396]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004dae:	68da      	ldr	r2, [r3, #12]
 8004db0:	4b62      	ldr	r3, [pc, #392]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004db2:	2180      	movs	r1, #128	@ 0x80
 8004db4:	0249      	lsls	r1, r1, #9
 8004db6:	430a      	orrs	r2, r1
 8004db8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	2380      	movs	r3, #128	@ 0x80
 8004dc0:	031b      	lsls	r3, r3, #12
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	d009      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004dc6:	4b5d      	ldr	r3, [pc, #372]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dca:	2240      	movs	r2, #64	@ 0x40
 8004dcc:	4393      	bics	r3, r2
 8004dce:	0019      	movs	r1, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004dd4:	4b59      	ldr	r3, [pc, #356]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	2380      	movs	r3, #128	@ 0x80
 8004de0:	039b      	lsls	r3, r3, #14
 8004de2:	4013      	ands	r3, r2
 8004de4:	d016      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004de6:	4b55      	ldr	r3, [pc, #340]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dea:	4a5c      	ldr	r2, [pc, #368]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004dec:	4013      	ands	r3, r2
 8004dee:	0019      	movs	r1, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004df4:	4b51      	ldr	r3, [pc, #324]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004df6:	430a      	orrs	r2, r1
 8004df8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004dfe:	2380      	movs	r3, #128	@ 0x80
 8004e00:	03db      	lsls	r3, r3, #15
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d106      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004e06:	4b4d      	ldr	r3, [pc, #308]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e08:	68da      	ldr	r2, [r3, #12]
 8004e0a:	4b4c      	ldr	r3, [pc, #304]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e0c:	2180      	movs	r1, #128	@ 0x80
 8004e0e:	0449      	lsls	r1, r1, #17
 8004e10:	430a      	orrs	r2, r1
 8004e12:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	2380      	movs	r3, #128	@ 0x80
 8004e1a:	03db      	lsls	r3, r3, #15
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	d016      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004e20:	4b46      	ldr	r3, [pc, #280]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e24:	4a4e      	ldr	r2, [pc, #312]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004e26:	4013      	ands	r3, r2
 8004e28:	0019      	movs	r1, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e2e:	4b43      	ldr	r3, [pc, #268]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e30:	430a      	orrs	r2, r1
 8004e32:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e38:	2380      	movs	r3, #128	@ 0x80
 8004e3a:	045b      	lsls	r3, r3, #17
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d106      	bne.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004e40:	4b3e      	ldr	r3, [pc, #248]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e42:	68da      	ldr	r2, [r3, #12]
 8004e44:	4b3d      	ldr	r3, [pc, #244]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e46:	2180      	movs	r1, #128	@ 0x80
 8004e48:	0449      	lsls	r1, r1, #17
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	2380      	movs	r3, #128	@ 0x80
 8004e54:	011b      	lsls	r3, r3, #4
 8004e56:	4013      	ands	r3, r2
 8004e58:	d014      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004e5a:	4b38      	ldr	r3, [pc, #224]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e5e:	2203      	movs	r2, #3
 8004e60:	4393      	bics	r3, r2
 8004e62:	0019      	movs	r1, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a1a      	ldr	r2, [r3, #32]
 8004e68:	4b34      	ldr	r3, [pc, #208]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d106      	bne.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004e76:	4b31      	ldr	r3, [pc, #196]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	4b30      	ldr	r3, [pc, #192]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e7c:	2180      	movs	r1, #128	@ 0x80
 8004e7e:	0249      	lsls	r1, r1, #9
 8004e80:	430a      	orrs	r2, r1
 8004e82:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	2380      	movs	r3, #128	@ 0x80
 8004e8a:	019b      	lsls	r3, r3, #6
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	d014      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004e90:	4b2a      	ldr	r3, [pc, #168]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e94:	220c      	movs	r2, #12
 8004e96:	4393      	bics	r3, r2
 8004e98:	0019      	movs	r1, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e9e:	4b27      	ldr	r3, [pc, #156]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea8:	2b04      	cmp	r3, #4
 8004eaa:	d106      	bne.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004eac:	4b23      	ldr	r3, [pc, #140]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004eae:	68da      	ldr	r2, [r3, #12]
 8004eb0:	4b22      	ldr	r3, [pc, #136]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004eb2:	2180      	movs	r1, #128	@ 0x80
 8004eb4:	0249      	lsls	r1, r1, #9
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	2380      	movs	r3, #128	@ 0x80
 8004ec0:	045b      	lsls	r3, r3, #17
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	d016      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ec6:	4b1d      	ldr	r3, [pc, #116]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eca:	4a22      	ldr	r2, [pc, #136]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004ecc:	4013      	ands	r3, r2
 8004ece:	0019      	movs	r1, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ed4:	4b19      	ldr	r3, [pc, #100]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ede:	2380      	movs	r3, #128	@ 0x80
 8004ee0:	019b      	lsls	r3, r3, #6
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d106      	bne.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004ee6:	4b15      	ldr	r3, [pc, #84]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ee8:	68da      	ldr	r2, [r3, #12]
 8004eea:	4b14      	ldr	r3, [pc, #80]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004eec:	2180      	movs	r1, #128	@ 0x80
 8004eee:	0449      	lsls	r1, r1, #17
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	2380      	movs	r3, #128	@ 0x80
 8004efa:	049b      	lsls	r3, r3, #18
 8004efc:	4013      	ands	r3, r2
 8004efe:	d016      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f00:	4b0e      	ldr	r3, [pc, #56]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f04:	4a10      	ldr	r2, [pc, #64]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004f06:	4013      	ands	r3, r2
 8004f08:	0019      	movs	r1, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f10:	430a      	orrs	r2, r1
 8004f12:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f18:	2380      	movs	r3, #128	@ 0x80
 8004f1a:	005b      	lsls	r3, r3, #1
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d106      	bne.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004f20:	4b06      	ldr	r3, [pc, #24]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f22:	68da      	ldr	r2, [r3, #12]
 8004f24:	4b05      	ldr	r3, [pc, #20]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f26:	2180      	movs	r1, #128	@ 0x80
 8004f28:	0449      	lsls	r1, r1, #17
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004f2e:	2312      	movs	r3, #18
 8004f30:	18fb      	adds	r3, r7, r3
 8004f32:	781b      	ldrb	r3, [r3, #0]
}
 8004f34:	0018      	movs	r0, r3
 8004f36:	46bd      	mov	sp, r7
 8004f38:	b006      	add	sp, #24
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	40021000 	.word	0x40021000
 8004f40:	efffffff 	.word	0xefffffff
 8004f44:	fffff3ff 	.word	0xfffff3ff
 8004f48:	fffffcff 	.word	0xfffffcff
 8004f4c:	fff3ffff 	.word	0xfff3ffff
 8004f50:	ffcfffff 	.word	0xffcfffff
 8004f54:	ffffcfff 	.word	0xffffcfff
 8004f58:	ffff3fff 	.word	0xffff3fff
 8004f5c:	ffbfffff 	.word	0xffbfffff
 8004f60:	feffffff 	.word	0xfeffffff

08004f64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e0a8      	b.n	80050c8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d109      	bne.n	8004f92 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	2382      	movs	r3, #130	@ 0x82
 8004f84:	005b      	lsls	r3, r3, #1
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d009      	beq.n	8004f9e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	61da      	str	r2, [r3, #28]
 8004f90:	e005      	b.n	8004f9e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	225d      	movs	r2, #93	@ 0x5d
 8004fa8:	5c9b      	ldrb	r3, [r3, r2]
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d107      	bne.n	8004fc0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	225c      	movs	r2, #92	@ 0x5c
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	0018      	movs	r0, r3
 8004fbc:	f7fd fd96 	bl	8002aec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	225d      	movs	r2, #93	@ 0x5d
 8004fc4:	2102      	movs	r1, #2
 8004fc6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2140      	movs	r1, #64	@ 0x40
 8004fd4:	438a      	bics	r2, r1
 8004fd6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68da      	ldr	r2, [r3, #12]
 8004fdc:	23e0      	movs	r3, #224	@ 0xe0
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d902      	bls.n	8004fea <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	e002      	b.n	8004ff0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004fea:	2380      	movs	r3, #128	@ 0x80
 8004fec:	015b      	lsls	r3, r3, #5
 8004fee:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68da      	ldr	r2, [r3, #12]
 8004ff4:	23f0      	movs	r3, #240	@ 0xf0
 8004ff6:	011b      	lsls	r3, r3, #4
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d008      	beq.n	800500e <HAL_SPI_Init+0xaa>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68da      	ldr	r2, [r3, #12]
 8005000:	23e0      	movs	r3, #224	@ 0xe0
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	429a      	cmp	r2, r3
 8005006:	d002      	beq.n	800500e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	2382      	movs	r3, #130	@ 0x82
 8005014:	005b      	lsls	r3, r3, #1
 8005016:	401a      	ands	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6899      	ldr	r1, [r3, #8]
 800501c:	2384      	movs	r3, #132	@ 0x84
 800501e:	021b      	lsls	r3, r3, #8
 8005020:	400b      	ands	r3, r1
 8005022:	431a      	orrs	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	2102      	movs	r1, #2
 800502a:	400b      	ands	r3, r1
 800502c:	431a      	orrs	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	2101      	movs	r1, #1
 8005034:	400b      	ands	r3, r1
 8005036:	431a      	orrs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6999      	ldr	r1, [r3, #24]
 800503c:	2380      	movs	r3, #128	@ 0x80
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	400b      	ands	r3, r1
 8005042:	431a      	orrs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	69db      	ldr	r3, [r3, #28]
 8005048:	2138      	movs	r1, #56	@ 0x38
 800504a:	400b      	ands	r3, r1
 800504c:	431a      	orrs	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	2180      	movs	r1, #128	@ 0x80
 8005054:	400b      	ands	r3, r1
 8005056:	431a      	orrs	r2, r3
 8005058:	0011      	movs	r1, r2
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800505e:	2380      	movs	r3, #128	@ 0x80
 8005060:	019b      	lsls	r3, r3, #6
 8005062:	401a      	ands	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	430a      	orrs	r2, r1
 800506a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	0c1b      	lsrs	r3, r3, #16
 8005072:	2204      	movs	r2, #4
 8005074:	401a      	ands	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507a:	2110      	movs	r1, #16
 800507c:	400b      	ands	r3, r1
 800507e:	431a      	orrs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005084:	2108      	movs	r1, #8
 8005086:	400b      	ands	r3, r1
 8005088:	431a      	orrs	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	68d9      	ldr	r1, [r3, #12]
 800508e:	23f0      	movs	r3, #240	@ 0xf0
 8005090:	011b      	lsls	r3, r3, #4
 8005092:	400b      	ands	r3, r1
 8005094:	431a      	orrs	r2, r3
 8005096:	0011      	movs	r1, r2
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	2380      	movs	r3, #128	@ 0x80
 800509c:	015b      	lsls	r3, r3, #5
 800509e:	401a      	ands	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	69da      	ldr	r2, [r3, #28]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4907      	ldr	r1, [pc, #28]	@ (80050d0 <HAL_SPI_Init+0x16c>)
 80050b4:	400a      	ands	r2, r1
 80050b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	225d      	movs	r2, #93	@ 0x5d
 80050c2:	2101      	movs	r1, #1
 80050c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	0018      	movs	r0, r3
 80050ca:	46bd      	mov	sp, r7
 80050cc:	b004      	add	sp, #16
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	fffff7ff 	.word	0xfffff7ff

080050d4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b088      	sub	sp, #32
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	603b      	str	r3, [r7, #0]
 80050e0:	1dbb      	adds	r3, r7, #6
 80050e2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050e4:	231f      	movs	r3, #31
 80050e6:	18fb      	adds	r3, r7, r3
 80050e8:	2200      	movs	r2, #0
 80050ea:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	225c      	movs	r2, #92	@ 0x5c
 80050f0:	5c9b      	ldrb	r3, [r3, r2]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d101      	bne.n	80050fa <HAL_SPI_Transmit+0x26>
 80050f6:	2302      	movs	r3, #2
 80050f8:	e147      	b.n	800538a <HAL_SPI_Transmit+0x2b6>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	225c      	movs	r2, #92	@ 0x5c
 80050fe:	2101      	movs	r1, #1
 8005100:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005102:	f7fe fbdd 	bl	80038c0 <HAL_GetTick>
 8005106:	0003      	movs	r3, r0
 8005108:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800510a:	2316      	movs	r3, #22
 800510c:	18fb      	adds	r3, r7, r3
 800510e:	1dba      	adds	r2, r7, #6
 8005110:	8812      	ldrh	r2, [r2, #0]
 8005112:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	225d      	movs	r2, #93	@ 0x5d
 8005118:	5c9b      	ldrb	r3, [r3, r2]
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b01      	cmp	r3, #1
 800511e:	d004      	beq.n	800512a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005120:	231f      	movs	r3, #31
 8005122:	18fb      	adds	r3, r7, r3
 8005124:	2202      	movs	r2, #2
 8005126:	701a      	strb	r2, [r3, #0]
    goto error;
 8005128:	e128      	b.n	800537c <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d003      	beq.n	8005138 <HAL_SPI_Transmit+0x64>
 8005130:	1dbb      	adds	r3, r7, #6
 8005132:	881b      	ldrh	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d104      	bne.n	8005142 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005138:	231f      	movs	r3, #31
 800513a:	18fb      	adds	r3, r7, r3
 800513c:	2201      	movs	r2, #1
 800513e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005140:	e11c      	b.n	800537c <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	225d      	movs	r2, #93	@ 0x5d
 8005146:	2103      	movs	r1, #3
 8005148:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	1dba      	adds	r2, r7, #6
 800515a:	8812      	ldrh	r2, [r2, #0]
 800515c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	1dba      	adds	r2, r7, #6
 8005162:	8812      	ldrh	r2, [r2, #0]
 8005164:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2244      	movs	r2, #68	@ 0x44
 8005170:	2100      	movs	r1, #0
 8005172:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2246      	movs	r2, #70	@ 0x46
 8005178:	2100      	movs	r1, #0
 800517a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	689a      	ldr	r2, [r3, #8]
 800518c:	2380      	movs	r3, #128	@ 0x80
 800518e:	021b      	lsls	r3, r3, #8
 8005190:	429a      	cmp	r2, r3
 8005192:	d110      	bne.n	80051b6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2140      	movs	r1, #64	@ 0x40
 80051a0:	438a      	bics	r2, r1
 80051a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2180      	movs	r1, #128	@ 0x80
 80051b0:	01c9      	lsls	r1, r1, #7
 80051b2:	430a      	orrs	r2, r1
 80051b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2240      	movs	r2, #64	@ 0x40
 80051be:	4013      	ands	r3, r2
 80051c0:	2b40      	cmp	r3, #64	@ 0x40
 80051c2:	d007      	beq.n	80051d4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2140      	movs	r1, #64	@ 0x40
 80051d0:	430a      	orrs	r2, r1
 80051d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	68da      	ldr	r2, [r3, #12]
 80051d8:	23e0      	movs	r3, #224	@ 0xe0
 80051da:	00db      	lsls	r3, r3, #3
 80051dc:	429a      	cmp	r2, r3
 80051de:	d952      	bls.n	8005286 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d004      	beq.n	80051f2 <HAL_SPI_Transmit+0x11e>
 80051e8:	2316      	movs	r3, #22
 80051ea:	18fb      	adds	r3, r7, r3
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d143      	bne.n	800527a <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f6:	881a      	ldrh	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005202:	1c9a      	adds	r2, r3, #2
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800520c:	b29b      	uxth	r3, r3
 800520e:	3b01      	subs	r3, #1
 8005210:	b29a      	uxth	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005216:	e030      	b.n	800527a <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	2202      	movs	r2, #2
 8005220:	4013      	ands	r3, r2
 8005222:	2b02      	cmp	r3, #2
 8005224:	d112      	bne.n	800524c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800522a:	881a      	ldrh	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005236:	1c9a      	adds	r2, r3, #2
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005240:	b29b      	uxth	r3, r3
 8005242:	3b01      	subs	r3, #1
 8005244:	b29a      	uxth	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800524a:	e016      	b.n	800527a <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800524c:	f7fe fb38 	bl	80038c0 <HAL_GetTick>
 8005250:	0002      	movs	r2, r0
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	429a      	cmp	r2, r3
 800525a:	d802      	bhi.n	8005262 <HAL_SPI_Transmit+0x18e>
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	3301      	adds	r3, #1
 8005260:	d102      	bne.n	8005268 <HAL_SPI_Transmit+0x194>
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d108      	bne.n	800527a <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8005268:	231f      	movs	r3, #31
 800526a:	18fb      	adds	r3, r7, r3
 800526c:	2203      	movs	r2, #3
 800526e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	225d      	movs	r2, #93	@ 0x5d
 8005274:	2101      	movs	r1, #1
 8005276:	5499      	strb	r1, [r3, r2]
          goto error;
 8005278:	e080      	b.n	800537c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800527e:	b29b      	uxth	r3, r3
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1c9      	bne.n	8005218 <HAL_SPI_Transmit+0x144>
 8005284:	e053      	b.n	800532e <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d004      	beq.n	8005298 <HAL_SPI_Transmit+0x1c4>
 800528e:	2316      	movs	r3, #22
 8005290:	18fb      	adds	r3, r7, r3
 8005292:	881b      	ldrh	r3, [r3, #0]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d145      	bne.n	8005324 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	330c      	adds	r3, #12
 80052a2:	7812      	ldrb	r2, [r2, #0]
 80052a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052aa:	1c5a      	adds	r2, r3, #1
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	3b01      	subs	r3, #1
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80052be:	e031      	b.n	8005324 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	2202      	movs	r2, #2
 80052c8:	4013      	ands	r3, r2
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d113      	bne.n	80052f6 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	330c      	adds	r3, #12
 80052d8:	7812      	ldrb	r2, [r2, #0]
 80052da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e0:	1c5a      	adds	r2, r3, #1
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	3b01      	subs	r3, #1
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80052f4:	e016      	b.n	8005324 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052f6:	f7fe fae3 	bl	80038c0 <HAL_GetTick>
 80052fa:	0002      	movs	r2, r0
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	429a      	cmp	r2, r3
 8005304:	d802      	bhi.n	800530c <HAL_SPI_Transmit+0x238>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	3301      	adds	r3, #1
 800530a:	d102      	bne.n	8005312 <HAL_SPI_Transmit+0x23e>
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d108      	bne.n	8005324 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8005312:	231f      	movs	r3, #31
 8005314:	18fb      	adds	r3, r7, r3
 8005316:	2203      	movs	r2, #3
 8005318:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	225d      	movs	r2, #93	@ 0x5d
 800531e:	2101      	movs	r1, #1
 8005320:	5499      	strb	r1, [r3, r2]
          goto error;
 8005322:	e02b      	b.n	800537c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005328:	b29b      	uxth	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1c8      	bne.n	80052c0 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800532e:	69ba      	ldr	r2, [r7, #24]
 8005330:	6839      	ldr	r1, [r7, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	0018      	movs	r0, r3
 8005336:	f000 f95d 	bl	80055f4 <SPI_EndRxTxTransaction>
 800533a:	1e03      	subs	r3, r0, #0
 800533c:	d002      	beq.n	8005344 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2220      	movs	r2, #32
 8005342:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10a      	bne.n	8005362 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800534c:	2300      	movs	r3, #0
 800534e:	613b      	str	r3, [r7, #16]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	613b      	str	r3, [r7, #16]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	613b      	str	r3, [r7, #16]
 8005360:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005366:	2b00      	cmp	r3, #0
 8005368:	d004      	beq.n	8005374 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800536a:	231f      	movs	r3, #31
 800536c:	18fb      	adds	r3, r7, r3
 800536e:	2201      	movs	r2, #1
 8005370:	701a      	strb	r2, [r3, #0]
 8005372:	e003      	b.n	800537c <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	225d      	movs	r2, #93	@ 0x5d
 8005378:	2101      	movs	r1, #1
 800537a:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	225c      	movs	r2, #92	@ 0x5c
 8005380:	2100      	movs	r1, #0
 8005382:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005384:	231f      	movs	r3, #31
 8005386:	18fb      	adds	r3, r7, r3
 8005388:	781b      	ldrb	r3, [r3, #0]
}
 800538a:	0018      	movs	r0, r3
 800538c:	46bd      	mov	sp, r7
 800538e:	b008      	add	sp, #32
 8005390:	bd80      	pop	{r7, pc}
	...

08005394 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b088      	sub	sp, #32
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	603b      	str	r3, [r7, #0]
 80053a0:	1dfb      	adds	r3, r7, #7
 80053a2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053a4:	f7fe fa8c 	bl	80038c0 <HAL_GetTick>
 80053a8:	0002      	movs	r2, r0
 80053aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ac:	1a9b      	subs	r3, r3, r2
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	18d3      	adds	r3, r2, r3
 80053b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053b4:	f7fe fa84 	bl	80038c0 <HAL_GetTick>
 80053b8:	0003      	movs	r3, r0
 80053ba:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053bc:	4b3a      	ldr	r3, [pc, #232]	@ (80054a8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	015b      	lsls	r3, r3, #5
 80053c2:	0d1b      	lsrs	r3, r3, #20
 80053c4:	69fa      	ldr	r2, [r7, #28]
 80053c6:	4353      	muls	r3, r2
 80053c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053ca:	e058      	b.n	800547e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	3301      	adds	r3, #1
 80053d0:	d055      	beq.n	800547e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053d2:	f7fe fa75 	bl	80038c0 <HAL_GetTick>
 80053d6:	0002      	movs	r2, r0
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	69fa      	ldr	r2, [r7, #28]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d902      	bls.n	80053e8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d142      	bne.n	800546e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	21e0      	movs	r1, #224	@ 0xe0
 80053f4:	438a      	bics	r2, r1
 80053f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	2382      	movs	r3, #130	@ 0x82
 80053fe:	005b      	lsls	r3, r3, #1
 8005400:	429a      	cmp	r2, r3
 8005402:	d113      	bne.n	800542c <SPI_WaitFlagStateUntilTimeout+0x98>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	2380      	movs	r3, #128	@ 0x80
 800540a:	021b      	lsls	r3, r3, #8
 800540c:	429a      	cmp	r2, r3
 800540e:	d005      	beq.n	800541c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	689a      	ldr	r2, [r3, #8]
 8005414:	2380      	movs	r3, #128	@ 0x80
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	429a      	cmp	r2, r3
 800541a:	d107      	bne.n	800542c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2140      	movs	r1, #64	@ 0x40
 8005428:	438a      	bics	r2, r1
 800542a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005430:	2380      	movs	r3, #128	@ 0x80
 8005432:	019b      	lsls	r3, r3, #6
 8005434:	429a      	cmp	r2, r3
 8005436:	d110      	bne.n	800545a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	491a      	ldr	r1, [pc, #104]	@ (80054ac <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005444:	400a      	ands	r2, r1
 8005446:	601a      	str	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2180      	movs	r1, #128	@ 0x80
 8005454:	0189      	lsls	r1, r1, #6
 8005456:	430a      	orrs	r2, r1
 8005458:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	225d      	movs	r2, #93	@ 0x5d
 800545e:	2101      	movs	r1, #1
 8005460:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	225c      	movs	r2, #92	@ 0x5c
 8005466:	2100      	movs	r1, #0
 8005468:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e017      	b.n	800549e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005474:	2300      	movs	r3, #0
 8005476:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	3b01      	subs	r3, #1
 800547c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	4013      	ands	r3, r2
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	425a      	negs	r2, r3
 800548e:	4153      	adcs	r3, r2
 8005490:	b2db      	uxtb	r3, r3
 8005492:	001a      	movs	r2, r3
 8005494:	1dfb      	adds	r3, r7, #7
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	429a      	cmp	r2, r3
 800549a:	d197      	bne.n	80053cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	0018      	movs	r0, r3
 80054a0:	46bd      	mov	sp, r7
 80054a2:	b008      	add	sp, #32
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	46c0      	nop			@ (mov r8, r8)
 80054a8:	20000008 	.word	0x20000008
 80054ac:	ffffdfff 	.word	0xffffdfff

080054b0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b08a      	sub	sp, #40	@ 0x28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
 80054bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80054be:	2317      	movs	r3, #23
 80054c0:	18fb      	adds	r3, r7, r3
 80054c2:	2200      	movs	r2, #0
 80054c4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80054c6:	f7fe f9fb 	bl	80038c0 <HAL_GetTick>
 80054ca:	0002      	movs	r2, r0
 80054cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ce:	1a9b      	subs	r3, r3, r2
 80054d0:	683a      	ldr	r2, [r7, #0]
 80054d2:	18d3      	adds	r3, r2, r3
 80054d4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80054d6:	f7fe f9f3 	bl	80038c0 <HAL_GetTick>
 80054da:	0003      	movs	r3, r0
 80054dc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	330c      	adds	r3, #12
 80054e4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80054e6:	4b41      	ldr	r3, [pc, #260]	@ (80055ec <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	0013      	movs	r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	189b      	adds	r3, r3, r2
 80054f0:	00da      	lsls	r2, r3, #3
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	0d1b      	lsrs	r3, r3, #20
 80054f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054f8:	4353      	muls	r3, r2
 80054fa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80054fc:	e068      	b.n	80055d0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	23c0      	movs	r3, #192	@ 0xc0
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	429a      	cmp	r2, r3
 8005506:	d10a      	bne.n	800551e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d107      	bne.n	800551e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	b2da      	uxtb	r2, r3
 8005514:	2117      	movs	r1, #23
 8005516:	187b      	adds	r3, r7, r1
 8005518:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800551a:	187b      	adds	r3, r7, r1
 800551c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	3301      	adds	r3, #1
 8005522:	d055      	beq.n	80055d0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005524:	f7fe f9cc 	bl	80038c0 <HAL_GetTick>
 8005528:	0002      	movs	r2, r0
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005530:	429a      	cmp	r2, r3
 8005532:	d902      	bls.n	800553a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8005534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005536:	2b00      	cmp	r3, #0
 8005538:	d142      	bne.n	80055c0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	21e0      	movs	r1, #224	@ 0xe0
 8005546:	438a      	bics	r2, r1
 8005548:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	2382      	movs	r3, #130	@ 0x82
 8005550:	005b      	lsls	r3, r3, #1
 8005552:	429a      	cmp	r2, r3
 8005554:	d113      	bne.n	800557e <SPI_WaitFifoStateUntilTimeout+0xce>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	689a      	ldr	r2, [r3, #8]
 800555a:	2380      	movs	r3, #128	@ 0x80
 800555c:	021b      	lsls	r3, r3, #8
 800555e:	429a      	cmp	r2, r3
 8005560:	d005      	beq.n	800556e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	689a      	ldr	r2, [r3, #8]
 8005566:	2380      	movs	r3, #128	@ 0x80
 8005568:	00db      	lsls	r3, r3, #3
 800556a:	429a      	cmp	r2, r3
 800556c:	d107      	bne.n	800557e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2140      	movs	r1, #64	@ 0x40
 800557a:	438a      	bics	r2, r1
 800557c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005582:	2380      	movs	r3, #128	@ 0x80
 8005584:	019b      	lsls	r3, r3, #6
 8005586:	429a      	cmp	r2, r3
 8005588:	d110      	bne.n	80055ac <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4916      	ldr	r1, [pc, #88]	@ (80055f0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8005596:	400a      	ands	r2, r1
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2180      	movs	r1, #128	@ 0x80
 80055a6:	0189      	lsls	r1, r1, #6
 80055a8:	430a      	orrs	r2, r1
 80055aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	225d      	movs	r2, #93	@ 0x5d
 80055b0:	2101      	movs	r1, #1
 80055b2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	225c      	movs	r2, #92	@ 0x5c
 80055b8:	2100      	movs	r1, #0
 80055ba:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e010      	b.n	80055e2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80055c6:	2300      	movs	r3, #0
 80055c8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	3b01      	subs	r3, #1
 80055ce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	4013      	ands	r3, r2
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d18e      	bne.n	80054fe <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	0018      	movs	r0, r3
 80055e4:	46bd      	mov	sp, r7
 80055e6:	b00a      	add	sp, #40	@ 0x28
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	46c0      	nop			@ (mov r8, r8)
 80055ec:	20000008 	.word	0x20000008
 80055f0:	ffffdfff 	.word	0xffffdfff

080055f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af02      	add	r7, sp, #8
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	23c0      	movs	r3, #192	@ 0xc0
 8005604:	0159      	lsls	r1, r3, #5
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	0013      	movs	r3, r2
 800560e:	2200      	movs	r2, #0
 8005610:	f7ff ff4e 	bl	80054b0 <SPI_WaitFifoStateUntilTimeout>
 8005614:	1e03      	subs	r3, r0, #0
 8005616:	d007      	beq.n	8005628 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800561c:	2220      	movs	r2, #32
 800561e:	431a      	orrs	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e027      	b.n	8005678 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005628:	68ba      	ldr	r2, [r7, #8]
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	9300      	str	r3, [sp, #0]
 8005630:	0013      	movs	r3, r2
 8005632:	2200      	movs	r2, #0
 8005634:	2180      	movs	r1, #128	@ 0x80
 8005636:	f7ff fead 	bl	8005394 <SPI_WaitFlagStateUntilTimeout>
 800563a:	1e03      	subs	r3, r0, #0
 800563c:	d007      	beq.n	800564e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005642:	2220      	movs	r2, #32
 8005644:	431a      	orrs	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e014      	b.n	8005678 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	23c0      	movs	r3, #192	@ 0xc0
 8005652:	00d9      	lsls	r1, r3, #3
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	0013      	movs	r3, r2
 800565c:	2200      	movs	r2, #0
 800565e:	f7ff ff27 	bl	80054b0 <SPI_WaitFifoStateUntilTimeout>
 8005662:	1e03      	subs	r3, r0, #0
 8005664:	d007      	beq.n	8005676 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800566a:	2220      	movs	r2, #32
 800566c:	431a      	orrs	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e000      	b.n	8005678 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	0018      	movs	r0, r3
 800567a:	46bd      	mov	sp, r7
 800567c:	b004      	add	sp, #16
 800567e:	bd80      	pop	{r7, pc}

08005680 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e046      	b.n	8005720 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2288      	movs	r2, #136	@ 0x88
 8005696:	589b      	ldr	r3, [r3, r2]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d107      	bne.n	80056ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2284      	movs	r2, #132	@ 0x84
 80056a0:	2100      	movs	r1, #0
 80056a2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	0018      	movs	r0, r3
 80056a8:	f7fe f804 	bl	80036b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2288      	movs	r2, #136	@ 0x88
 80056b0:	2124      	movs	r1, #36	@ 0x24
 80056b2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2101      	movs	r1, #1
 80056c0:	438a      	bics	r2, r1
 80056c2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d003      	beq.n	80056d4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	0018      	movs	r0, r3
 80056d0:	f000 fb82 	bl	8005dd8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	0018      	movs	r0, r3
 80056d8:	f000 f828 	bl	800572c <UART_SetConfig>
 80056dc:	0003      	movs	r3, r0
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d101      	bne.n	80056e6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e01c      	b.n	8005720 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	490d      	ldr	r1, [pc, #52]	@ (8005728 <HAL_UART_Init+0xa8>)
 80056f2:	400a      	ands	r2, r1
 80056f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	212a      	movs	r1, #42	@ 0x2a
 8005702:	438a      	bics	r2, r1
 8005704:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2101      	movs	r1, #1
 8005712:	430a      	orrs	r2, r1
 8005714:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	0018      	movs	r0, r3
 800571a:	f000 fc11 	bl	8005f40 <UART_CheckIdleState>
 800571e:	0003      	movs	r3, r0
}
 8005720:	0018      	movs	r0, r3
 8005722:	46bd      	mov	sp, r7
 8005724:	b002      	add	sp, #8
 8005726:	bd80      	pop	{r7, pc}
 8005728:	ffffb7ff 	.word	0xffffb7ff

0800572c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800572c:	b5b0      	push	{r4, r5, r7, lr}
 800572e:	b090      	sub	sp, #64	@ 0x40
 8005730:	af00      	add	r7, sp, #0
 8005732:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005734:	231a      	movs	r3, #26
 8005736:	2220      	movs	r2, #32
 8005738:	189b      	adds	r3, r3, r2
 800573a:	19db      	adds	r3, r3, r7
 800573c:	2200      	movs	r2, #0
 800573e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	431a      	orrs	r2, r3
 800574a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	431a      	orrs	r2, r3
 8005750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005752:	69db      	ldr	r3, [r3, #28]
 8005754:	4313      	orrs	r3, r2
 8005756:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4ac1      	ldr	r2, [pc, #772]	@ (8005a64 <UART_SetConfig+0x338>)
 8005760:	4013      	ands	r3, r2
 8005762:	0019      	movs	r1, r3
 8005764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800576a:	430b      	orrs	r3, r1
 800576c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800576e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	4abc      	ldr	r2, [pc, #752]	@ (8005a68 <UART_SetConfig+0x33c>)
 8005776:	4013      	ands	r3, r2
 8005778:	0018      	movs	r0, r3
 800577a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577c:	68d9      	ldr	r1, [r3, #12]
 800577e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	0003      	movs	r3, r0
 8005784:	430b      	orrs	r3, r1
 8005786:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800578e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4ab6      	ldr	r2, [pc, #728]	@ (8005a6c <UART_SetConfig+0x340>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d009      	beq.n	80057ac <UART_SetConfig+0x80>
 8005798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4ab4      	ldr	r2, [pc, #720]	@ (8005a70 <UART_SetConfig+0x344>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d004      	beq.n	80057ac <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80057a8:	4313      	orrs	r3, r2
 80057aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	4ab0      	ldr	r2, [pc, #704]	@ (8005a74 <UART_SetConfig+0x348>)
 80057b4:	4013      	ands	r3, r2
 80057b6:	0019      	movs	r1, r3
 80057b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057be:	430b      	orrs	r3, r1
 80057c0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80057c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c8:	220f      	movs	r2, #15
 80057ca:	4393      	bics	r3, r2
 80057cc:	0018      	movs	r0, r3
 80057ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80057d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	0003      	movs	r3, r0
 80057d8:	430b      	orrs	r3, r1
 80057da:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4aa5      	ldr	r2, [pc, #660]	@ (8005a78 <UART_SetConfig+0x34c>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d131      	bne.n	800584a <UART_SetConfig+0x11e>
 80057e6:	4ba5      	ldr	r3, [pc, #660]	@ (8005a7c <UART_SetConfig+0x350>)
 80057e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ea:	2203      	movs	r2, #3
 80057ec:	4013      	ands	r3, r2
 80057ee:	2b03      	cmp	r3, #3
 80057f0:	d01d      	beq.n	800582e <UART_SetConfig+0x102>
 80057f2:	d823      	bhi.n	800583c <UART_SetConfig+0x110>
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d00c      	beq.n	8005812 <UART_SetConfig+0xe6>
 80057f8:	d820      	bhi.n	800583c <UART_SetConfig+0x110>
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d002      	beq.n	8005804 <UART_SetConfig+0xd8>
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d00e      	beq.n	8005820 <UART_SetConfig+0xf4>
 8005802:	e01b      	b.n	800583c <UART_SetConfig+0x110>
 8005804:	231b      	movs	r3, #27
 8005806:	2220      	movs	r2, #32
 8005808:	189b      	adds	r3, r3, r2
 800580a:	19db      	adds	r3, r3, r7
 800580c:	2200      	movs	r2, #0
 800580e:	701a      	strb	r2, [r3, #0]
 8005810:	e154      	b.n	8005abc <UART_SetConfig+0x390>
 8005812:	231b      	movs	r3, #27
 8005814:	2220      	movs	r2, #32
 8005816:	189b      	adds	r3, r3, r2
 8005818:	19db      	adds	r3, r3, r7
 800581a:	2202      	movs	r2, #2
 800581c:	701a      	strb	r2, [r3, #0]
 800581e:	e14d      	b.n	8005abc <UART_SetConfig+0x390>
 8005820:	231b      	movs	r3, #27
 8005822:	2220      	movs	r2, #32
 8005824:	189b      	adds	r3, r3, r2
 8005826:	19db      	adds	r3, r3, r7
 8005828:	2204      	movs	r2, #4
 800582a:	701a      	strb	r2, [r3, #0]
 800582c:	e146      	b.n	8005abc <UART_SetConfig+0x390>
 800582e:	231b      	movs	r3, #27
 8005830:	2220      	movs	r2, #32
 8005832:	189b      	adds	r3, r3, r2
 8005834:	19db      	adds	r3, r3, r7
 8005836:	2208      	movs	r2, #8
 8005838:	701a      	strb	r2, [r3, #0]
 800583a:	e13f      	b.n	8005abc <UART_SetConfig+0x390>
 800583c:	231b      	movs	r3, #27
 800583e:	2220      	movs	r2, #32
 8005840:	189b      	adds	r3, r3, r2
 8005842:	19db      	adds	r3, r3, r7
 8005844:	2210      	movs	r2, #16
 8005846:	701a      	strb	r2, [r3, #0]
 8005848:	e138      	b.n	8005abc <UART_SetConfig+0x390>
 800584a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a8c      	ldr	r2, [pc, #560]	@ (8005a80 <UART_SetConfig+0x354>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d131      	bne.n	80058b8 <UART_SetConfig+0x18c>
 8005854:	4b89      	ldr	r3, [pc, #548]	@ (8005a7c <UART_SetConfig+0x350>)
 8005856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005858:	220c      	movs	r2, #12
 800585a:	4013      	ands	r3, r2
 800585c:	2b0c      	cmp	r3, #12
 800585e:	d01d      	beq.n	800589c <UART_SetConfig+0x170>
 8005860:	d823      	bhi.n	80058aa <UART_SetConfig+0x17e>
 8005862:	2b08      	cmp	r3, #8
 8005864:	d00c      	beq.n	8005880 <UART_SetConfig+0x154>
 8005866:	d820      	bhi.n	80058aa <UART_SetConfig+0x17e>
 8005868:	2b00      	cmp	r3, #0
 800586a:	d002      	beq.n	8005872 <UART_SetConfig+0x146>
 800586c:	2b04      	cmp	r3, #4
 800586e:	d00e      	beq.n	800588e <UART_SetConfig+0x162>
 8005870:	e01b      	b.n	80058aa <UART_SetConfig+0x17e>
 8005872:	231b      	movs	r3, #27
 8005874:	2220      	movs	r2, #32
 8005876:	189b      	adds	r3, r3, r2
 8005878:	19db      	adds	r3, r3, r7
 800587a:	2200      	movs	r2, #0
 800587c:	701a      	strb	r2, [r3, #0]
 800587e:	e11d      	b.n	8005abc <UART_SetConfig+0x390>
 8005880:	231b      	movs	r3, #27
 8005882:	2220      	movs	r2, #32
 8005884:	189b      	adds	r3, r3, r2
 8005886:	19db      	adds	r3, r3, r7
 8005888:	2202      	movs	r2, #2
 800588a:	701a      	strb	r2, [r3, #0]
 800588c:	e116      	b.n	8005abc <UART_SetConfig+0x390>
 800588e:	231b      	movs	r3, #27
 8005890:	2220      	movs	r2, #32
 8005892:	189b      	adds	r3, r3, r2
 8005894:	19db      	adds	r3, r3, r7
 8005896:	2204      	movs	r2, #4
 8005898:	701a      	strb	r2, [r3, #0]
 800589a:	e10f      	b.n	8005abc <UART_SetConfig+0x390>
 800589c:	231b      	movs	r3, #27
 800589e:	2220      	movs	r2, #32
 80058a0:	189b      	adds	r3, r3, r2
 80058a2:	19db      	adds	r3, r3, r7
 80058a4:	2208      	movs	r2, #8
 80058a6:	701a      	strb	r2, [r3, #0]
 80058a8:	e108      	b.n	8005abc <UART_SetConfig+0x390>
 80058aa:	231b      	movs	r3, #27
 80058ac:	2220      	movs	r2, #32
 80058ae:	189b      	adds	r3, r3, r2
 80058b0:	19db      	adds	r3, r3, r7
 80058b2:	2210      	movs	r2, #16
 80058b4:	701a      	strb	r2, [r3, #0]
 80058b6:	e101      	b.n	8005abc <UART_SetConfig+0x390>
 80058b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a71      	ldr	r2, [pc, #452]	@ (8005a84 <UART_SetConfig+0x358>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d131      	bne.n	8005926 <UART_SetConfig+0x1fa>
 80058c2:	4b6e      	ldr	r3, [pc, #440]	@ (8005a7c <UART_SetConfig+0x350>)
 80058c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058c6:	2230      	movs	r2, #48	@ 0x30
 80058c8:	4013      	ands	r3, r2
 80058ca:	2b30      	cmp	r3, #48	@ 0x30
 80058cc:	d01d      	beq.n	800590a <UART_SetConfig+0x1de>
 80058ce:	d823      	bhi.n	8005918 <UART_SetConfig+0x1ec>
 80058d0:	2b20      	cmp	r3, #32
 80058d2:	d00c      	beq.n	80058ee <UART_SetConfig+0x1c2>
 80058d4:	d820      	bhi.n	8005918 <UART_SetConfig+0x1ec>
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d002      	beq.n	80058e0 <UART_SetConfig+0x1b4>
 80058da:	2b10      	cmp	r3, #16
 80058dc:	d00e      	beq.n	80058fc <UART_SetConfig+0x1d0>
 80058de:	e01b      	b.n	8005918 <UART_SetConfig+0x1ec>
 80058e0:	231b      	movs	r3, #27
 80058e2:	2220      	movs	r2, #32
 80058e4:	189b      	adds	r3, r3, r2
 80058e6:	19db      	adds	r3, r3, r7
 80058e8:	2200      	movs	r2, #0
 80058ea:	701a      	strb	r2, [r3, #0]
 80058ec:	e0e6      	b.n	8005abc <UART_SetConfig+0x390>
 80058ee:	231b      	movs	r3, #27
 80058f0:	2220      	movs	r2, #32
 80058f2:	189b      	adds	r3, r3, r2
 80058f4:	19db      	adds	r3, r3, r7
 80058f6:	2202      	movs	r2, #2
 80058f8:	701a      	strb	r2, [r3, #0]
 80058fa:	e0df      	b.n	8005abc <UART_SetConfig+0x390>
 80058fc:	231b      	movs	r3, #27
 80058fe:	2220      	movs	r2, #32
 8005900:	189b      	adds	r3, r3, r2
 8005902:	19db      	adds	r3, r3, r7
 8005904:	2204      	movs	r2, #4
 8005906:	701a      	strb	r2, [r3, #0]
 8005908:	e0d8      	b.n	8005abc <UART_SetConfig+0x390>
 800590a:	231b      	movs	r3, #27
 800590c:	2220      	movs	r2, #32
 800590e:	189b      	adds	r3, r3, r2
 8005910:	19db      	adds	r3, r3, r7
 8005912:	2208      	movs	r2, #8
 8005914:	701a      	strb	r2, [r3, #0]
 8005916:	e0d1      	b.n	8005abc <UART_SetConfig+0x390>
 8005918:	231b      	movs	r3, #27
 800591a:	2220      	movs	r2, #32
 800591c:	189b      	adds	r3, r3, r2
 800591e:	19db      	adds	r3, r3, r7
 8005920:	2210      	movs	r2, #16
 8005922:	701a      	strb	r2, [r3, #0]
 8005924:	e0ca      	b.n	8005abc <UART_SetConfig+0x390>
 8005926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a57      	ldr	r2, [pc, #348]	@ (8005a88 <UART_SetConfig+0x35c>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d106      	bne.n	800593e <UART_SetConfig+0x212>
 8005930:	231b      	movs	r3, #27
 8005932:	2220      	movs	r2, #32
 8005934:	189b      	adds	r3, r3, r2
 8005936:	19db      	adds	r3, r3, r7
 8005938:	2200      	movs	r2, #0
 800593a:	701a      	strb	r2, [r3, #0]
 800593c:	e0be      	b.n	8005abc <UART_SetConfig+0x390>
 800593e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a52      	ldr	r2, [pc, #328]	@ (8005a8c <UART_SetConfig+0x360>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d106      	bne.n	8005956 <UART_SetConfig+0x22a>
 8005948:	231b      	movs	r3, #27
 800594a:	2220      	movs	r2, #32
 800594c:	189b      	adds	r3, r3, r2
 800594e:	19db      	adds	r3, r3, r7
 8005950:	2200      	movs	r2, #0
 8005952:	701a      	strb	r2, [r3, #0]
 8005954:	e0b2      	b.n	8005abc <UART_SetConfig+0x390>
 8005956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a4d      	ldr	r2, [pc, #308]	@ (8005a90 <UART_SetConfig+0x364>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d106      	bne.n	800596e <UART_SetConfig+0x242>
 8005960:	231b      	movs	r3, #27
 8005962:	2220      	movs	r2, #32
 8005964:	189b      	adds	r3, r3, r2
 8005966:	19db      	adds	r3, r3, r7
 8005968:	2200      	movs	r2, #0
 800596a:	701a      	strb	r2, [r3, #0]
 800596c:	e0a6      	b.n	8005abc <UART_SetConfig+0x390>
 800596e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a3e      	ldr	r2, [pc, #248]	@ (8005a6c <UART_SetConfig+0x340>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d13e      	bne.n	80059f6 <UART_SetConfig+0x2ca>
 8005978:	4b40      	ldr	r3, [pc, #256]	@ (8005a7c <UART_SetConfig+0x350>)
 800597a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800597c:	23c0      	movs	r3, #192	@ 0xc0
 800597e:	011b      	lsls	r3, r3, #4
 8005980:	4013      	ands	r3, r2
 8005982:	22c0      	movs	r2, #192	@ 0xc0
 8005984:	0112      	lsls	r2, r2, #4
 8005986:	4293      	cmp	r3, r2
 8005988:	d027      	beq.n	80059da <UART_SetConfig+0x2ae>
 800598a:	22c0      	movs	r2, #192	@ 0xc0
 800598c:	0112      	lsls	r2, r2, #4
 800598e:	4293      	cmp	r3, r2
 8005990:	d82a      	bhi.n	80059e8 <UART_SetConfig+0x2bc>
 8005992:	2280      	movs	r2, #128	@ 0x80
 8005994:	0112      	lsls	r2, r2, #4
 8005996:	4293      	cmp	r3, r2
 8005998:	d011      	beq.n	80059be <UART_SetConfig+0x292>
 800599a:	2280      	movs	r2, #128	@ 0x80
 800599c:	0112      	lsls	r2, r2, #4
 800599e:	4293      	cmp	r3, r2
 80059a0:	d822      	bhi.n	80059e8 <UART_SetConfig+0x2bc>
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d004      	beq.n	80059b0 <UART_SetConfig+0x284>
 80059a6:	2280      	movs	r2, #128	@ 0x80
 80059a8:	00d2      	lsls	r2, r2, #3
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d00e      	beq.n	80059cc <UART_SetConfig+0x2a0>
 80059ae:	e01b      	b.n	80059e8 <UART_SetConfig+0x2bc>
 80059b0:	231b      	movs	r3, #27
 80059b2:	2220      	movs	r2, #32
 80059b4:	189b      	adds	r3, r3, r2
 80059b6:	19db      	adds	r3, r3, r7
 80059b8:	2200      	movs	r2, #0
 80059ba:	701a      	strb	r2, [r3, #0]
 80059bc:	e07e      	b.n	8005abc <UART_SetConfig+0x390>
 80059be:	231b      	movs	r3, #27
 80059c0:	2220      	movs	r2, #32
 80059c2:	189b      	adds	r3, r3, r2
 80059c4:	19db      	adds	r3, r3, r7
 80059c6:	2202      	movs	r2, #2
 80059c8:	701a      	strb	r2, [r3, #0]
 80059ca:	e077      	b.n	8005abc <UART_SetConfig+0x390>
 80059cc:	231b      	movs	r3, #27
 80059ce:	2220      	movs	r2, #32
 80059d0:	189b      	adds	r3, r3, r2
 80059d2:	19db      	adds	r3, r3, r7
 80059d4:	2204      	movs	r2, #4
 80059d6:	701a      	strb	r2, [r3, #0]
 80059d8:	e070      	b.n	8005abc <UART_SetConfig+0x390>
 80059da:	231b      	movs	r3, #27
 80059dc:	2220      	movs	r2, #32
 80059de:	189b      	adds	r3, r3, r2
 80059e0:	19db      	adds	r3, r3, r7
 80059e2:	2208      	movs	r2, #8
 80059e4:	701a      	strb	r2, [r3, #0]
 80059e6:	e069      	b.n	8005abc <UART_SetConfig+0x390>
 80059e8:	231b      	movs	r3, #27
 80059ea:	2220      	movs	r2, #32
 80059ec:	189b      	adds	r3, r3, r2
 80059ee:	19db      	adds	r3, r3, r7
 80059f0:	2210      	movs	r2, #16
 80059f2:	701a      	strb	r2, [r3, #0]
 80059f4:	e062      	b.n	8005abc <UART_SetConfig+0x390>
 80059f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a1d      	ldr	r2, [pc, #116]	@ (8005a70 <UART_SetConfig+0x344>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d157      	bne.n	8005ab0 <UART_SetConfig+0x384>
 8005a00:	4b1e      	ldr	r3, [pc, #120]	@ (8005a7c <UART_SetConfig+0x350>)
 8005a02:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a04:	23c0      	movs	r3, #192	@ 0xc0
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4013      	ands	r3, r2
 8005a0a:	22c0      	movs	r2, #192	@ 0xc0
 8005a0c:	0092      	lsls	r2, r2, #2
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d040      	beq.n	8005a94 <UART_SetConfig+0x368>
 8005a12:	22c0      	movs	r2, #192	@ 0xc0
 8005a14:	0092      	lsls	r2, r2, #2
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d843      	bhi.n	8005aa2 <UART_SetConfig+0x376>
 8005a1a:	2280      	movs	r2, #128	@ 0x80
 8005a1c:	0092      	lsls	r2, r2, #2
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d011      	beq.n	8005a46 <UART_SetConfig+0x31a>
 8005a22:	2280      	movs	r2, #128	@ 0x80
 8005a24:	0092      	lsls	r2, r2, #2
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d83b      	bhi.n	8005aa2 <UART_SetConfig+0x376>
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d004      	beq.n	8005a38 <UART_SetConfig+0x30c>
 8005a2e:	2280      	movs	r2, #128	@ 0x80
 8005a30:	0052      	lsls	r2, r2, #1
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d00e      	beq.n	8005a54 <UART_SetConfig+0x328>
 8005a36:	e034      	b.n	8005aa2 <UART_SetConfig+0x376>
 8005a38:	231b      	movs	r3, #27
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	189b      	adds	r3, r3, r2
 8005a3e:	19db      	adds	r3, r3, r7
 8005a40:	2200      	movs	r2, #0
 8005a42:	701a      	strb	r2, [r3, #0]
 8005a44:	e03a      	b.n	8005abc <UART_SetConfig+0x390>
 8005a46:	231b      	movs	r3, #27
 8005a48:	2220      	movs	r2, #32
 8005a4a:	189b      	adds	r3, r3, r2
 8005a4c:	19db      	adds	r3, r3, r7
 8005a4e:	2202      	movs	r2, #2
 8005a50:	701a      	strb	r2, [r3, #0]
 8005a52:	e033      	b.n	8005abc <UART_SetConfig+0x390>
 8005a54:	231b      	movs	r3, #27
 8005a56:	2220      	movs	r2, #32
 8005a58:	189b      	adds	r3, r3, r2
 8005a5a:	19db      	adds	r3, r3, r7
 8005a5c:	2204      	movs	r2, #4
 8005a5e:	701a      	strb	r2, [r3, #0]
 8005a60:	e02c      	b.n	8005abc <UART_SetConfig+0x390>
 8005a62:	46c0      	nop			@ (mov r8, r8)
 8005a64:	cfff69f3 	.word	0xcfff69f3
 8005a68:	ffffcfff 	.word	0xffffcfff
 8005a6c:	40008000 	.word	0x40008000
 8005a70:	40008400 	.word	0x40008400
 8005a74:	11fff4ff 	.word	0x11fff4ff
 8005a78:	40013800 	.word	0x40013800
 8005a7c:	40021000 	.word	0x40021000
 8005a80:	40004400 	.word	0x40004400
 8005a84:	40004800 	.word	0x40004800
 8005a88:	40004c00 	.word	0x40004c00
 8005a8c:	40005000 	.word	0x40005000
 8005a90:	40013c00 	.word	0x40013c00
 8005a94:	231b      	movs	r3, #27
 8005a96:	2220      	movs	r2, #32
 8005a98:	189b      	adds	r3, r3, r2
 8005a9a:	19db      	adds	r3, r3, r7
 8005a9c:	2208      	movs	r2, #8
 8005a9e:	701a      	strb	r2, [r3, #0]
 8005aa0:	e00c      	b.n	8005abc <UART_SetConfig+0x390>
 8005aa2:	231b      	movs	r3, #27
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	189b      	adds	r3, r3, r2
 8005aa8:	19db      	adds	r3, r3, r7
 8005aaa:	2210      	movs	r2, #16
 8005aac:	701a      	strb	r2, [r3, #0]
 8005aae:	e005      	b.n	8005abc <UART_SetConfig+0x390>
 8005ab0:	231b      	movs	r3, #27
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	189b      	adds	r3, r3, r2
 8005ab6:	19db      	adds	r3, r3, r7
 8005ab8:	2210      	movs	r2, #16
 8005aba:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4ac1      	ldr	r2, [pc, #772]	@ (8005dc8 <UART_SetConfig+0x69c>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d005      	beq.n	8005ad2 <UART_SetConfig+0x3a6>
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4ac0      	ldr	r2, [pc, #768]	@ (8005dcc <UART_SetConfig+0x6a0>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d000      	beq.n	8005ad2 <UART_SetConfig+0x3a6>
 8005ad0:	e093      	b.n	8005bfa <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ad2:	231b      	movs	r3, #27
 8005ad4:	2220      	movs	r2, #32
 8005ad6:	189b      	adds	r3, r3, r2
 8005ad8:	19db      	adds	r3, r3, r7
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	2b08      	cmp	r3, #8
 8005ade:	d015      	beq.n	8005b0c <UART_SetConfig+0x3e0>
 8005ae0:	dc18      	bgt.n	8005b14 <UART_SetConfig+0x3e8>
 8005ae2:	2b04      	cmp	r3, #4
 8005ae4:	d00d      	beq.n	8005b02 <UART_SetConfig+0x3d6>
 8005ae6:	dc15      	bgt.n	8005b14 <UART_SetConfig+0x3e8>
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <UART_SetConfig+0x3c6>
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d005      	beq.n	8005afc <UART_SetConfig+0x3d0>
 8005af0:	e010      	b.n	8005b14 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005af2:	f7fe ffe5 	bl	8004ac0 <HAL_RCC_GetPCLK1Freq>
 8005af6:	0003      	movs	r3, r0
 8005af8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005afa:	e014      	b.n	8005b26 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005afc:	4bb4      	ldr	r3, [pc, #720]	@ (8005dd0 <UART_SetConfig+0x6a4>)
 8005afe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b00:	e011      	b.n	8005b26 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b02:	f7fe ff51 	bl	80049a8 <HAL_RCC_GetSysClockFreq>
 8005b06:	0003      	movs	r3, r0
 8005b08:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b0a:	e00c      	b.n	8005b26 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b0c:	2380      	movs	r3, #128	@ 0x80
 8005b0e:	021b      	lsls	r3, r3, #8
 8005b10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b12:	e008      	b.n	8005b26 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8005b14:	2300      	movs	r3, #0
 8005b16:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8005b18:	231a      	movs	r3, #26
 8005b1a:	2220      	movs	r2, #32
 8005b1c:	189b      	adds	r3, r3, r2
 8005b1e:	19db      	adds	r3, r3, r7
 8005b20:	2201      	movs	r2, #1
 8005b22:	701a      	strb	r2, [r3, #0]
        break;
 8005b24:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d100      	bne.n	8005b2e <UART_SetConfig+0x402>
 8005b2c:	e135      	b.n	8005d9a <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b32:	4ba8      	ldr	r3, [pc, #672]	@ (8005dd4 <UART_SetConfig+0x6a8>)
 8005b34:	0052      	lsls	r2, r2, #1
 8005b36:	5ad3      	ldrh	r3, [r2, r3]
 8005b38:	0019      	movs	r1, r3
 8005b3a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005b3c:	f7fa fafe 	bl	800013c <__udivsi3>
 8005b40:	0003      	movs	r3, r0
 8005b42:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	0013      	movs	r3, r2
 8005b4a:	005b      	lsls	r3, r3, #1
 8005b4c:	189b      	adds	r3, r3, r2
 8005b4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d305      	bcc.n	8005b60 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d906      	bls.n	8005b6e <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8005b60:	231a      	movs	r3, #26
 8005b62:	2220      	movs	r2, #32
 8005b64:	189b      	adds	r3, r3, r2
 8005b66:	19db      	adds	r3, r3, r7
 8005b68:	2201      	movs	r2, #1
 8005b6a:	701a      	strb	r2, [r3, #0]
 8005b6c:	e044      	b.n	8005bf8 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b70:	61bb      	str	r3, [r7, #24]
 8005b72:	2300      	movs	r3, #0
 8005b74:	61fb      	str	r3, [r7, #28]
 8005b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b7a:	4b96      	ldr	r3, [pc, #600]	@ (8005dd4 <UART_SetConfig+0x6a8>)
 8005b7c:	0052      	lsls	r2, r2, #1
 8005b7e:	5ad3      	ldrh	r3, [r2, r3]
 8005b80:	613b      	str	r3, [r7, #16]
 8005b82:	2300      	movs	r3, #0
 8005b84:	617b      	str	r3, [r7, #20]
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	69b8      	ldr	r0, [r7, #24]
 8005b8c:	69f9      	ldr	r1, [r7, #28]
 8005b8e:	f7fa fc89 	bl	80004a4 <__aeabi_uldivmod>
 8005b92:	0002      	movs	r2, r0
 8005b94:	000b      	movs	r3, r1
 8005b96:	0e11      	lsrs	r1, r2, #24
 8005b98:	021d      	lsls	r5, r3, #8
 8005b9a:	430d      	orrs	r5, r1
 8005b9c:	0214      	lsls	r4, r2, #8
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	085b      	lsrs	r3, r3, #1
 8005ba4:	60bb      	str	r3, [r7, #8]
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	60fb      	str	r3, [r7, #12]
 8005baa:	68b8      	ldr	r0, [r7, #8]
 8005bac:	68f9      	ldr	r1, [r7, #12]
 8005bae:	1900      	adds	r0, r0, r4
 8005bb0:	4169      	adcs	r1, r5
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	603b      	str	r3, [r7, #0]
 8005bb8:	2300      	movs	r3, #0
 8005bba:	607b      	str	r3, [r7, #4]
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f7fa fc70 	bl	80004a4 <__aeabi_uldivmod>
 8005bc4:	0002      	movs	r2, r0
 8005bc6:	000b      	movs	r3, r1
 8005bc8:	0013      	movs	r3, r2
 8005bca:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005bcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bce:	23c0      	movs	r3, #192	@ 0xc0
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d309      	bcc.n	8005bea <UART_SetConfig+0x4be>
 8005bd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bd8:	2380      	movs	r3, #128	@ 0x80
 8005bda:	035b      	lsls	r3, r3, #13
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d204      	bcs.n	8005bea <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8005be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005be6:	60da      	str	r2, [r3, #12]
 8005be8:	e006      	b.n	8005bf8 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8005bea:	231a      	movs	r3, #26
 8005bec:	2220      	movs	r2, #32
 8005bee:	189b      	adds	r3, r3, r2
 8005bf0:	19db      	adds	r3, r3, r7
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8005bf6:	e0d0      	b.n	8005d9a <UART_SetConfig+0x66e>
 8005bf8:	e0cf      	b.n	8005d9a <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfc:	69da      	ldr	r2, [r3, #28]
 8005bfe:	2380      	movs	r3, #128	@ 0x80
 8005c00:	021b      	lsls	r3, r3, #8
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d000      	beq.n	8005c08 <UART_SetConfig+0x4dc>
 8005c06:	e070      	b.n	8005cea <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8005c08:	231b      	movs	r3, #27
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	189b      	adds	r3, r3, r2
 8005c0e:	19db      	adds	r3, r3, r7
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	2b08      	cmp	r3, #8
 8005c14:	d015      	beq.n	8005c42 <UART_SetConfig+0x516>
 8005c16:	dc18      	bgt.n	8005c4a <UART_SetConfig+0x51e>
 8005c18:	2b04      	cmp	r3, #4
 8005c1a:	d00d      	beq.n	8005c38 <UART_SetConfig+0x50c>
 8005c1c:	dc15      	bgt.n	8005c4a <UART_SetConfig+0x51e>
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d002      	beq.n	8005c28 <UART_SetConfig+0x4fc>
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d005      	beq.n	8005c32 <UART_SetConfig+0x506>
 8005c26:	e010      	b.n	8005c4a <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c28:	f7fe ff4a 	bl	8004ac0 <HAL_RCC_GetPCLK1Freq>
 8005c2c:	0003      	movs	r3, r0
 8005c2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005c30:	e014      	b.n	8005c5c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c32:	4b67      	ldr	r3, [pc, #412]	@ (8005dd0 <UART_SetConfig+0x6a4>)
 8005c34:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005c36:	e011      	b.n	8005c5c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c38:	f7fe feb6 	bl	80049a8 <HAL_RCC_GetSysClockFreq>
 8005c3c:	0003      	movs	r3, r0
 8005c3e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005c40:	e00c      	b.n	8005c5c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c42:	2380      	movs	r3, #128	@ 0x80
 8005c44:	021b      	lsls	r3, r3, #8
 8005c46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005c48:	e008      	b.n	8005c5c <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8005c4e:	231a      	movs	r3, #26
 8005c50:	2220      	movs	r2, #32
 8005c52:	189b      	adds	r3, r3, r2
 8005c54:	19db      	adds	r3, r3, r7
 8005c56:	2201      	movs	r2, #1
 8005c58:	701a      	strb	r2, [r3, #0]
        break;
 8005c5a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d100      	bne.n	8005c64 <UART_SetConfig+0x538>
 8005c62:	e09a      	b.n	8005d9a <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c68:	4b5a      	ldr	r3, [pc, #360]	@ (8005dd4 <UART_SetConfig+0x6a8>)
 8005c6a:	0052      	lsls	r2, r2, #1
 8005c6c:	5ad3      	ldrh	r3, [r2, r3]
 8005c6e:	0019      	movs	r1, r3
 8005c70:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005c72:	f7fa fa63 	bl	800013c <__udivsi3>
 8005c76:	0003      	movs	r3, r0
 8005c78:	005a      	lsls	r2, r3, #1
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	085b      	lsrs	r3, r3, #1
 8005c80:	18d2      	adds	r2, r2, r3
 8005c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	0019      	movs	r1, r3
 8005c88:	0010      	movs	r0, r2
 8005c8a:	f7fa fa57 	bl	800013c <__udivsi3>
 8005c8e:	0003      	movs	r3, r0
 8005c90:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c94:	2b0f      	cmp	r3, #15
 8005c96:	d921      	bls.n	8005cdc <UART_SetConfig+0x5b0>
 8005c98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c9a:	2380      	movs	r3, #128	@ 0x80
 8005c9c:	025b      	lsls	r3, r3, #9
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d21c      	bcs.n	8005cdc <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	200e      	movs	r0, #14
 8005ca8:	2420      	movs	r4, #32
 8005caa:	1903      	adds	r3, r0, r4
 8005cac:	19db      	adds	r3, r3, r7
 8005cae:	210f      	movs	r1, #15
 8005cb0:	438a      	bics	r2, r1
 8005cb2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb6:	085b      	lsrs	r3, r3, #1
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	2207      	movs	r2, #7
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	b299      	uxth	r1, r3
 8005cc0:	1903      	adds	r3, r0, r4
 8005cc2:	19db      	adds	r3, r3, r7
 8005cc4:	1902      	adds	r2, r0, r4
 8005cc6:	19d2      	adds	r2, r2, r7
 8005cc8:	8812      	ldrh	r2, [r2, #0]
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	1902      	adds	r2, r0, r4
 8005cd4:	19d2      	adds	r2, r2, r7
 8005cd6:	8812      	ldrh	r2, [r2, #0]
 8005cd8:	60da      	str	r2, [r3, #12]
 8005cda:	e05e      	b.n	8005d9a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8005cdc:	231a      	movs	r3, #26
 8005cde:	2220      	movs	r2, #32
 8005ce0:	189b      	adds	r3, r3, r2
 8005ce2:	19db      	adds	r3, r3, r7
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	701a      	strb	r2, [r3, #0]
 8005ce8:	e057      	b.n	8005d9a <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005cea:	231b      	movs	r3, #27
 8005cec:	2220      	movs	r2, #32
 8005cee:	189b      	adds	r3, r3, r2
 8005cf0:	19db      	adds	r3, r3, r7
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	2b08      	cmp	r3, #8
 8005cf6:	d015      	beq.n	8005d24 <UART_SetConfig+0x5f8>
 8005cf8:	dc18      	bgt.n	8005d2c <UART_SetConfig+0x600>
 8005cfa:	2b04      	cmp	r3, #4
 8005cfc:	d00d      	beq.n	8005d1a <UART_SetConfig+0x5ee>
 8005cfe:	dc15      	bgt.n	8005d2c <UART_SetConfig+0x600>
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <UART_SetConfig+0x5de>
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d005      	beq.n	8005d14 <UART_SetConfig+0x5e8>
 8005d08:	e010      	b.n	8005d2c <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d0a:	f7fe fed9 	bl	8004ac0 <HAL_RCC_GetPCLK1Freq>
 8005d0e:	0003      	movs	r3, r0
 8005d10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005d12:	e014      	b.n	8005d3e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d14:	4b2e      	ldr	r3, [pc, #184]	@ (8005dd0 <UART_SetConfig+0x6a4>)
 8005d16:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005d18:	e011      	b.n	8005d3e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d1a:	f7fe fe45 	bl	80049a8 <HAL_RCC_GetSysClockFreq>
 8005d1e:	0003      	movs	r3, r0
 8005d20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005d22:	e00c      	b.n	8005d3e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d24:	2380      	movs	r3, #128	@ 0x80
 8005d26:	021b      	lsls	r3, r3, #8
 8005d28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005d2a:	e008      	b.n	8005d3e <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8005d30:	231a      	movs	r3, #26
 8005d32:	2220      	movs	r2, #32
 8005d34:	189b      	adds	r3, r3, r2
 8005d36:	19db      	adds	r3, r3, r7
 8005d38:	2201      	movs	r2, #1
 8005d3a:	701a      	strb	r2, [r3, #0]
        break;
 8005d3c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d02a      	beq.n	8005d9a <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d48:	4b22      	ldr	r3, [pc, #136]	@ (8005dd4 <UART_SetConfig+0x6a8>)
 8005d4a:	0052      	lsls	r2, r2, #1
 8005d4c:	5ad3      	ldrh	r3, [r2, r3]
 8005d4e:	0019      	movs	r1, r3
 8005d50:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005d52:	f7fa f9f3 	bl	800013c <__udivsi3>
 8005d56:	0003      	movs	r3, r0
 8005d58:	001a      	movs	r2, r3
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	085b      	lsrs	r3, r3, #1
 8005d60:	18d2      	adds	r2, r2, r3
 8005d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	0019      	movs	r1, r3
 8005d68:	0010      	movs	r0, r2
 8005d6a:	f7fa f9e7 	bl	800013c <__udivsi3>
 8005d6e:	0003      	movs	r3, r0
 8005d70:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d74:	2b0f      	cmp	r3, #15
 8005d76:	d90a      	bls.n	8005d8e <UART_SetConfig+0x662>
 8005d78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d7a:	2380      	movs	r3, #128	@ 0x80
 8005d7c:	025b      	lsls	r3, r3, #9
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d205      	bcs.n	8005d8e <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	60da      	str	r2, [r3, #12]
 8005d8c:	e005      	b.n	8005d9a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8005d8e:	231a      	movs	r3, #26
 8005d90:	2220      	movs	r2, #32
 8005d92:	189b      	adds	r3, r3, r2
 8005d94:	19db      	adds	r3, r3, r7
 8005d96:	2201      	movs	r2, #1
 8005d98:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9c:	226a      	movs	r2, #106	@ 0x6a
 8005d9e:	2101      	movs	r1, #1
 8005da0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da4:	2268      	movs	r2, #104	@ 0x68
 8005da6:	2101      	movs	r1, #1
 8005da8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dac:	2200      	movs	r2, #0
 8005dae:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db2:	2200      	movs	r2, #0
 8005db4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005db6:	231a      	movs	r3, #26
 8005db8:	2220      	movs	r2, #32
 8005dba:	189b      	adds	r3, r3, r2
 8005dbc:	19db      	adds	r3, r3, r7
 8005dbe:	781b      	ldrb	r3, [r3, #0]
}
 8005dc0:	0018      	movs	r0, r3
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	b010      	add	sp, #64	@ 0x40
 8005dc6:	bdb0      	pop	{r4, r5, r7, pc}
 8005dc8:	40008000 	.word	0x40008000
 8005dcc:	40008400 	.word	0x40008400
 8005dd0:	00f42400 	.word	0x00f42400
 8005dd4:	08009be4 	.word	0x08009be4

08005dd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005de4:	2208      	movs	r2, #8
 8005de6:	4013      	ands	r3, r2
 8005de8:	d00b      	beq.n	8005e02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	4a4a      	ldr	r2, [pc, #296]	@ (8005f1c <UART_AdvFeatureConfig+0x144>)
 8005df2:	4013      	ands	r3, r2
 8005df4:	0019      	movs	r1, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e06:	2201      	movs	r2, #1
 8005e08:	4013      	ands	r3, r2
 8005e0a:	d00b      	beq.n	8005e24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	4a43      	ldr	r2, [pc, #268]	@ (8005f20 <UART_AdvFeatureConfig+0x148>)
 8005e14:	4013      	ands	r3, r2
 8005e16:	0019      	movs	r1, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	430a      	orrs	r2, r1
 8005e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e28:	2202      	movs	r2, #2
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	d00b      	beq.n	8005e46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	4a3b      	ldr	r2, [pc, #236]	@ (8005f24 <UART_AdvFeatureConfig+0x14c>)
 8005e36:	4013      	ands	r3, r2
 8005e38:	0019      	movs	r1, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e4a:	2204      	movs	r2, #4
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	d00b      	beq.n	8005e68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	4a34      	ldr	r2, [pc, #208]	@ (8005f28 <UART_AdvFeatureConfig+0x150>)
 8005e58:	4013      	ands	r3, r2
 8005e5a:	0019      	movs	r1, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	430a      	orrs	r2, r1
 8005e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e6c:	2210      	movs	r2, #16
 8005e6e:	4013      	ands	r3, r2
 8005e70:	d00b      	beq.n	8005e8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	4a2c      	ldr	r2, [pc, #176]	@ (8005f2c <UART_AdvFeatureConfig+0x154>)
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	0019      	movs	r1, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	430a      	orrs	r2, r1
 8005e88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e8e:	2220      	movs	r2, #32
 8005e90:	4013      	ands	r3, r2
 8005e92:	d00b      	beq.n	8005eac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	4a25      	ldr	r2, [pc, #148]	@ (8005f30 <UART_AdvFeatureConfig+0x158>)
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	0019      	movs	r1, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb0:	2240      	movs	r2, #64	@ 0x40
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	d01d      	beq.n	8005ef2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	4a1d      	ldr	r2, [pc, #116]	@ (8005f34 <UART_AdvFeatureConfig+0x15c>)
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	0019      	movs	r1, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ed2:	2380      	movs	r3, #128	@ 0x80
 8005ed4:	035b      	lsls	r3, r3, #13
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d10b      	bne.n	8005ef2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	4a15      	ldr	r2, [pc, #84]	@ (8005f38 <UART_AdvFeatureConfig+0x160>)
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	0019      	movs	r1, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ef6:	2280      	movs	r2, #128	@ 0x80
 8005ef8:	4013      	ands	r3, r2
 8005efa:	d00b      	beq.n	8005f14 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	4a0e      	ldr	r2, [pc, #56]	@ (8005f3c <UART_AdvFeatureConfig+0x164>)
 8005f04:	4013      	ands	r3, r2
 8005f06:	0019      	movs	r1, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	430a      	orrs	r2, r1
 8005f12:	605a      	str	r2, [r3, #4]
  }
}
 8005f14:	46c0      	nop			@ (mov r8, r8)
 8005f16:	46bd      	mov	sp, r7
 8005f18:	b002      	add	sp, #8
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	ffff7fff 	.word	0xffff7fff
 8005f20:	fffdffff 	.word	0xfffdffff
 8005f24:	fffeffff 	.word	0xfffeffff
 8005f28:	fffbffff 	.word	0xfffbffff
 8005f2c:	ffffefff 	.word	0xffffefff
 8005f30:	ffffdfff 	.word	0xffffdfff
 8005f34:	ffefffff 	.word	0xffefffff
 8005f38:	ff9fffff 	.word	0xff9fffff
 8005f3c:	fff7ffff 	.word	0xfff7ffff

08005f40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b092      	sub	sp, #72	@ 0x48
 8005f44:	af02      	add	r7, sp, #8
 8005f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2290      	movs	r2, #144	@ 0x90
 8005f4c:	2100      	movs	r1, #0
 8005f4e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f50:	f7fd fcb6 	bl	80038c0 <HAL_GetTick>
 8005f54:	0003      	movs	r3, r0
 8005f56:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2208      	movs	r2, #8
 8005f60:	4013      	ands	r3, r2
 8005f62:	2b08      	cmp	r3, #8
 8005f64:	d12d      	bne.n	8005fc2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f68:	2280      	movs	r2, #128	@ 0x80
 8005f6a:	0391      	lsls	r1, r2, #14
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	4a47      	ldr	r2, [pc, #284]	@ (800608c <UART_CheckIdleState+0x14c>)
 8005f70:	9200      	str	r2, [sp, #0]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f000 f88e 	bl	8006094 <UART_WaitOnFlagUntilTimeout>
 8005f78:	1e03      	subs	r3, r0, #0
 8005f7a:	d022      	beq.n	8005fc2 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f7c:	f3ef 8310 	mrs	r3, PRIMASK
 8005f80:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005f84:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f86:	2301      	movs	r3, #1
 8005f88:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f8c:	f383 8810 	msr	PRIMASK, r3
}
 8005f90:	46c0      	nop			@ (mov r8, r8)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2180      	movs	r1, #128	@ 0x80
 8005f9e:	438a      	bics	r2, r1
 8005fa0:	601a      	str	r2, [r3, #0]
 8005fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fa8:	f383 8810 	msr	PRIMASK, r3
}
 8005fac:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2288      	movs	r2, #136	@ 0x88
 8005fb2:	2120      	movs	r1, #32
 8005fb4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2284      	movs	r2, #132	@ 0x84
 8005fba:	2100      	movs	r1, #0
 8005fbc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e060      	b.n	8006084 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2204      	movs	r2, #4
 8005fca:	4013      	ands	r3, r2
 8005fcc:	2b04      	cmp	r3, #4
 8005fce:	d146      	bne.n	800605e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fd2:	2280      	movs	r2, #128	@ 0x80
 8005fd4:	03d1      	lsls	r1, r2, #15
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	4a2c      	ldr	r2, [pc, #176]	@ (800608c <UART_CheckIdleState+0x14c>)
 8005fda:	9200      	str	r2, [sp, #0]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f000 f859 	bl	8006094 <UART_WaitOnFlagUntilTimeout>
 8005fe2:	1e03      	subs	r3, r0, #0
 8005fe4:	d03b      	beq.n	800605e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fe6:	f3ef 8310 	mrs	r3, PRIMASK
 8005fea:	60fb      	str	r3, [r7, #12]
  return(result);
 8005fec:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fee:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	f383 8810 	msr	PRIMASK, r3
}
 8005ffa:	46c0      	nop			@ (mov r8, r8)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4922      	ldr	r1, [pc, #136]	@ (8006090 <UART_CheckIdleState+0x150>)
 8006008:	400a      	ands	r2, r1
 800600a:	601a      	str	r2, [r3, #0]
 800600c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800600e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f383 8810 	msr	PRIMASK, r3
}
 8006016:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006018:	f3ef 8310 	mrs	r3, PRIMASK
 800601c:	61bb      	str	r3, [r7, #24]
  return(result);
 800601e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006020:	633b      	str	r3, [r7, #48]	@ 0x30
 8006022:	2301      	movs	r3, #1
 8006024:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	f383 8810 	msr	PRIMASK, r3
}
 800602c:	46c0      	nop			@ (mov r8, r8)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	689a      	ldr	r2, [r3, #8]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2101      	movs	r1, #1
 800603a:	438a      	bics	r2, r1
 800603c:	609a      	str	r2, [r3, #8]
 800603e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006040:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006042:	6a3b      	ldr	r3, [r7, #32]
 8006044:	f383 8810 	msr	PRIMASK, r3
}
 8006048:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	228c      	movs	r2, #140	@ 0x8c
 800604e:	2120      	movs	r1, #32
 8006050:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2284      	movs	r2, #132	@ 0x84
 8006056:	2100      	movs	r1, #0
 8006058:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e012      	b.n	8006084 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2288      	movs	r2, #136	@ 0x88
 8006062:	2120      	movs	r1, #32
 8006064:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	228c      	movs	r2, #140	@ 0x8c
 800606a:	2120      	movs	r1, #32
 800606c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2284      	movs	r2, #132	@ 0x84
 800607e:	2100      	movs	r1, #0
 8006080:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	0018      	movs	r0, r3
 8006086:	46bd      	mov	sp, r7
 8006088:	b010      	add	sp, #64	@ 0x40
 800608a:	bd80      	pop	{r7, pc}
 800608c:	01ffffff 	.word	0x01ffffff
 8006090:	fffffedf 	.word	0xfffffedf

08006094 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	603b      	str	r3, [r7, #0]
 80060a0:	1dfb      	adds	r3, r7, #7
 80060a2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060a4:	e051      	b.n	800614a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	3301      	adds	r3, #1
 80060aa:	d04e      	beq.n	800614a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ac:	f7fd fc08 	bl	80038c0 <HAL_GetTick>
 80060b0:	0002      	movs	r2, r0
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	69ba      	ldr	r2, [r7, #24]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d302      	bcc.n	80060c2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d101      	bne.n	80060c6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e051      	b.n	800616a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2204      	movs	r2, #4
 80060ce:	4013      	ands	r3, r2
 80060d0:	d03b      	beq.n	800614a <UART_WaitOnFlagUntilTimeout+0xb6>
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	2b80      	cmp	r3, #128	@ 0x80
 80060d6:	d038      	beq.n	800614a <UART_WaitOnFlagUntilTimeout+0xb6>
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2b40      	cmp	r3, #64	@ 0x40
 80060dc:	d035      	beq.n	800614a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	69db      	ldr	r3, [r3, #28]
 80060e4:	2208      	movs	r2, #8
 80060e6:	4013      	ands	r3, r2
 80060e8:	2b08      	cmp	r3, #8
 80060ea:	d111      	bne.n	8006110 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2208      	movs	r2, #8
 80060f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	0018      	movs	r0, r3
 80060f8:	f000 f83c 	bl	8006174 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2290      	movs	r2, #144	@ 0x90
 8006100:	2108      	movs	r1, #8
 8006102:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2284      	movs	r2, #132	@ 0x84
 8006108:	2100      	movs	r1, #0
 800610a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e02c      	b.n	800616a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	69da      	ldr	r2, [r3, #28]
 8006116:	2380      	movs	r3, #128	@ 0x80
 8006118:	011b      	lsls	r3, r3, #4
 800611a:	401a      	ands	r2, r3
 800611c:	2380      	movs	r3, #128	@ 0x80
 800611e:	011b      	lsls	r3, r3, #4
 8006120:	429a      	cmp	r2, r3
 8006122:	d112      	bne.n	800614a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2280      	movs	r2, #128	@ 0x80
 800612a:	0112      	lsls	r2, r2, #4
 800612c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	0018      	movs	r0, r3
 8006132:	f000 f81f 	bl	8006174 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2290      	movs	r2, #144	@ 0x90
 800613a:	2120      	movs	r1, #32
 800613c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2284      	movs	r2, #132	@ 0x84
 8006142:	2100      	movs	r1, #0
 8006144:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e00f      	b.n	800616a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	69db      	ldr	r3, [r3, #28]
 8006150:	68ba      	ldr	r2, [r7, #8]
 8006152:	4013      	ands	r3, r2
 8006154:	68ba      	ldr	r2, [r7, #8]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	425a      	negs	r2, r3
 800615a:	4153      	adcs	r3, r2
 800615c:	b2db      	uxtb	r3, r3
 800615e:	001a      	movs	r2, r3
 8006160:	1dfb      	adds	r3, r7, #7
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	429a      	cmp	r2, r3
 8006166:	d09e      	beq.n	80060a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	0018      	movs	r0, r3
 800616c:	46bd      	mov	sp, r7
 800616e:	b004      	add	sp, #16
 8006170:	bd80      	pop	{r7, pc}
	...

08006174 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b08e      	sub	sp, #56	@ 0x38
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800617c:	f3ef 8310 	mrs	r3, PRIMASK
 8006180:	617b      	str	r3, [r7, #20]
  return(result);
 8006182:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006184:	637b      	str	r3, [r7, #52]	@ 0x34
 8006186:	2301      	movs	r3, #1
 8006188:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	f383 8810 	msr	PRIMASK, r3
}
 8006190:	46c0      	nop			@ (mov r8, r8)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4926      	ldr	r1, [pc, #152]	@ (8006238 <UART_EndRxTransfer+0xc4>)
 800619e:	400a      	ands	r2, r1
 80061a0:	601a      	str	r2, [r3, #0]
 80061a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	f383 8810 	msr	PRIMASK, r3
}
 80061ac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061ae:	f3ef 8310 	mrs	r3, PRIMASK
 80061b2:	623b      	str	r3, [r7, #32]
  return(result);
 80061b4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80061b8:	2301      	movs	r3, #1
 80061ba:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061be:	f383 8810 	msr	PRIMASK, r3
}
 80061c2:	46c0      	nop			@ (mov r8, r8)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689a      	ldr	r2, [r3, #8]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	491b      	ldr	r1, [pc, #108]	@ (800623c <UART_EndRxTransfer+0xc8>)
 80061d0:	400a      	ands	r2, r1
 80061d2:	609a      	str	r2, [r3, #8]
 80061d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061da:	f383 8810 	msr	PRIMASK, r3
}
 80061de:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d118      	bne.n	800621a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061e8:	f3ef 8310 	mrs	r3, PRIMASK
 80061ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80061ee:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061f2:	2301      	movs	r3, #1
 80061f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f383 8810 	msr	PRIMASK, r3
}
 80061fc:	46c0      	nop			@ (mov r8, r8)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2110      	movs	r1, #16
 800620a:	438a      	bics	r2, r1
 800620c:	601a      	str	r2, [r3, #0]
 800620e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006210:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	f383 8810 	msr	PRIMASK, r3
}
 8006218:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	228c      	movs	r2, #140	@ 0x8c
 800621e:	2120      	movs	r1, #32
 8006220:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800622e:	46c0      	nop			@ (mov r8, r8)
 8006230:	46bd      	mov	sp, r7
 8006232:	b00e      	add	sp, #56	@ 0x38
 8006234:	bd80      	pop	{r7, pc}
 8006236:	46c0      	nop			@ (mov r8, r8)
 8006238:	fffffedf 	.word	0xfffffedf
 800623c:	effffffe 	.word	0xeffffffe

08006240 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2284      	movs	r2, #132	@ 0x84
 800624c:	5c9b      	ldrb	r3, [r3, r2]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d101      	bne.n	8006256 <HAL_UARTEx_DisableFifoMode+0x16>
 8006252:	2302      	movs	r3, #2
 8006254:	e027      	b.n	80062a6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2284      	movs	r2, #132	@ 0x84
 800625a:	2101      	movs	r1, #1
 800625c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2288      	movs	r2, #136	@ 0x88
 8006262:	2124      	movs	r1, #36	@ 0x24
 8006264:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2101      	movs	r1, #1
 800627a:	438a      	bics	r2, r1
 800627c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	4a0b      	ldr	r2, [pc, #44]	@ (80062b0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006282:	4013      	ands	r3, r2
 8006284:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2288      	movs	r2, #136	@ 0x88
 8006298:	2120      	movs	r1, #32
 800629a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2284      	movs	r2, #132	@ 0x84
 80062a0:	2100      	movs	r1, #0
 80062a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	0018      	movs	r0, r3
 80062a8:	46bd      	mov	sp, r7
 80062aa:	b004      	add	sp, #16
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	46c0      	nop			@ (mov r8, r8)
 80062b0:	dfffffff 	.word	0xdfffffff

080062b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2284      	movs	r2, #132	@ 0x84
 80062c2:	5c9b      	ldrb	r3, [r3, r2]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d101      	bne.n	80062cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80062c8:	2302      	movs	r3, #2
 80062ca:	e02e      	b.n	800632a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2284      	movs	r2, #132	@ 0x84
 80062d0:	2101      	movs	r1, #1
 80062d2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2288      	movs	r2, #136	@ 0x88
 80062d8:	2124      	movs	r1, #36	@ 0x24
 80062da:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2101      	movs	r1, #1
 80062f0:	438a      	bics	r2, r1
 80062f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	00db      	lsls	r3, r3, #3
 80062fc:	08d9      	lsrs	r1, r3, #3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	683a      	ldr	r2, [r7, #0]
 8006304:	430a      	orrs	r2, r1
 8006306:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	0018      	movs	r0, r3
 800630c:	f000 f854 	bl	80063b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2288      	movs	r2, #136	@ 0x88
 800631c:	2120      	movs	r1, #32
 800631e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2284      	movs	r2, #132	@ 0x84
 8006324:	2100      	movs	r1, #0
 8006326:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	0018      	movs	r0, r3
 800632c:	46bd      	mov	sp, r7
 800632e:	b004      	add	sp, #16
 8006330:	bd80      	pop	{r7, pc}
	...

08006334 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2284      	movs	r2, #132	@ 0x84
 8006342:	5c9b      	ldrb	r3, [r3, r2]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d101      	bne.n	800634c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006348:	2302      	movs	r3, #2
 800634a:	e02f      	b.n	80063ac <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2284      	movs	r2, #132	@ 0x84
 8006350:	2101      	movs	r1, #1
 8006352:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2288      	movs	r2, #136	@ 0x88
 8006358:	2124      	movs	r1, #36	@ 0x24
 800635a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2101      	movs	r1, #1
 8006370:	438a      	bics	r2, r1
 8006372:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	4a0e      	ldr	r2, [pc, #56]	@ (80063b4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800637c:	4013      	ands	r3, r2
 800637e:	0019      	movs	r1, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	683a      	ldr	r2, [r7, #0]
 8006386:	430a      	orrs	r2, r1
 8006388:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	0018      	movs	r0, r3
 800638e:	f000 f813 	bl	80063b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2288      	movs	r2, #136	@ 0x88
 800639e:	2120      	movs	r1, #32
 80063a0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2284      	movs	r2, #132	@ 0x84
 80063a6:	2100      	movs	r1, #0
 80063a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	0018      	movs	r0, r3
 80063ae:	46bd      	mov	sp, r7
 80063b0:	b004      	add	sp, #16
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	f1ffffff 	.word	0xf1ffffff

080063b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80063b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d108      	bne.n	80063da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	226a      	movs	r2, #106	@ 0x6a
 80063cc:	2101      	movs	r1, #1
 80063ce:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2268      	movs	r2, #104	@ 0x68
 80063d4:	2101      	movs	r1, #1
 80063d6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80063d8:	e043      	b.n	8006462 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80063da:	260f      	movs	r6, #15
 80063dc:	19bb      	adds	r3, r7, r6
 80063de:	2208      	movs	r2, #8
 80063e0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80063e2:	200e      	movs	r0, #14
 80063e4:	183b      	adds	r3, r7, r0
 80063e6:	2208      	movs	r2, #8
 80063e8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	0e5b      	lsrs	r3, r3, #25
 80063f2:	b2da      	uxtb	r2, r3
 80063f4:	240d      	movs	r4, #13
 80063f6:	193b      	adds	r3, r7, r4
 80063f8:	2107      	movs	r1, #7
 80063fa:	400a      	ands	r2, r1
 80063fc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	0f5b      	lsrs	r3, r3, #29
 8006406:	b2da      	uxtb	r2, r3
 8006408:	250c      	movs	r5, #12
 800640a:	197b      	adds	r3, r7, r5
 800640c:	2107      	movs	r1, #7
 800640e:	400a      	ands	r2, r1
 8006410:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006412:	183b      	adds	r3, r7, r0
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	197a      	adds	r2, r7, r5
 8006418:	7812      	ldrb	r2, [r2, #0]
 800641a:	4914      	ldr	r1, [pc, #80]	@ (800646c <UARTEx_SetNbDataToProcess+0xb4>)
 800641c:	5c8a      	ldrb	r2, [r1, r2]
 800641e:	435a      	muls	r2, r3
 8006420:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006422:	197b      	adds	r3, r7, r5
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	4a12      	ldr	r2, [pc, #72]	@ (8006470 <UARTEx_SetNbDataToProcess+0xb8>)
 8006428:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800642a:	0019      	movs	r1, r3
 800642c:	f7f9 ff10 	bl	8000250 <__divsi3>
 8006430:	0003      	movs	r3, r0
 8006432:	b299      	uxth	r1, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	226a      	movs	r2, #106	@ 0x6a
 8006438:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800643a:	19bb      	adds	r3, r7, r6
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	193a      	adds	r2, r7, r4
 8006440:	7812      	ldrb	r2, [r2, #0]
 8006442:	490a      	ldr	r1, [pc, #40]	@ (800646c <UARTEx_SetNbDataToProcess+0xb4>)
 8006444:	5c8a      	ldrb	r2, [r1, r2]
 8006446:	435a      	muls	r2, r3
 8006448:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800644a:	193b      	adds	r3, r7, r4
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	4a08      	ldr	r2, [pc, #32]	@ (8006470 <UARTEx_SetNbDataToProcess+0xb8>)
 8006450:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006452:	0019      	movs	r1, r3
 8006454:	f7f9 fefc 	bl	8000250 <__divsi3>
 8006458:	0003      	movs	r3, r0
 800645a:	b299      	uxth	r1, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2268      	movs	r2, #104	@ 0x68
 8006460:	5299      	strh	r1, [r3, r2]
}
 8006462:	46c0      	nop			@ (mov r8, r8)
 8006464:	46bd      	mov	sp, r7
 8006466:	b005      	add	sp, #20
 8006468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800646a:	46c0      	nop			@ (mov r8, r8)
 800646c:	08009bfc 	.word	0x08009bfc
 8006470:	08009c04 	.word	0x08009c04

08006474 <__cvt>:
 8006474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006476:	001f      	movs	r7, r3
 8006478:	2300      	movs	r3, #0
 800647a:	0016      	movs	r6, r2
 800647c:	b08b      	sub	sp, #44	@ 0x2c
 800647e:	429f      	cmp	r7, r3
 8006480:	da04      	bge.n	800648c <__cvt+0x18>
 8006482:	2180      	movs	r1, #128	@ 0x80
 8006484:	0609      	lsls	r1, r1, #24
 8006486:	187b      	adds	r3, r7, r1
 8006488:	001f      	movs	r7, r3
 800648a:	232d      	movs	r3, #45	@ 0x2d
 800648c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800648e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8006490:	7013      	strb	r3, [r2, #0]
 8006492:	2320      	movs	r3, #32
 8006494:	2203      	movs	r2, #3
 8006496:	439d      	bics	r5, r3
 8006498:	2d46      	cmp	r5, #70	@ 0x46
 800649a:	d007      	beq.n	80064ac <__cvt+0x38>
 800649c:	002b      	movs	r3, r5
 800649e:	3b45      	subs	r3, #69	@ 0x45
 80064a0:	4259      	negs	r1, r3
 80064a2:	414b      	adcs	r3, r1
 80064a4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80064a6:	3a01      	subs	r2, #1
 80064a8:	18cb      	adds	r3, r1, r3
 80064aa:	9310      	str	r3, [sp, #64]	@ 0x40
 80064ac:	ab09      	add	r3, sp, #36	@ 0x24
 80064ae:	9304      	str	r3, [sp, #16]
 80064b0:	ab08      	add	r3, sp, #32
 80064b2:	9303      	str	r3, [sp, #12]
 80064b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80064b6:	9200      	str	r2, [sp, #0]
 80064b8:	9302      	str	r3, [sp, #8]
 80064ba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80064bc:	0032      	movs	r2, r6
 80064be:	9301      	str	r3, [sp, #4]
 80064c0:	003b      	movs	r3, r7
 80064c2:	f000 fdc5 	bl	8007050 <_dtoa_r>
 80064c6:	0004      	movs	r4, r0
 80064c8:	2d47      	cmp	r5, #71	@ 0x47
 80064ca:	d11b      	bne.n	8006504 <__cvt+0x90>
 80064cc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80064ce:	07db      	lsls	r3, r3, #31
 80064d0:	d511      	bpl.n	80064f6 <__cvt+0x82>
 80064d2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80064d4:	18c3      	adds	r3, r0, r3
 80064d6:	9307      	str	r3, [sp, #28]
 80064d8:	2200      	movs	r2, #0
 80064da:	2300      	movs	r3, #0
 80064dc:	0030      	movs	r0, r6
 80064de:	0039      	movs	r1, r7
 80064e0:	f7f9 ffb2 	bl	8000448 <__aeabi_dcmpeq>
 80064e4:	2800      	cmp	r0, #0
 80064e6:	d001      	beq.n	80064ec <__cvt+0x78>
 80064e8:	9b07      	ldr	r3, [sp, #28]
 80064ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80064ec:	2230      	movs	r2, #48	@ 0x30
 80064ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064f0:	9907      	ldr	r1, [sp, #28]
 80064f2:	428b      	cmp	r3, r1
 80064f4:	d320      	bcc.n	8006538 <__cvt+0xc4>
 80064f6:	0020      	movs	r0, r4
 80064f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064fa:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80064fc:	1b1b      	subs	r3, r3, r4
 80064fe:	6013      	str	r3, [r2, #0]
 8006500:	b00b      	add	sp, #44	@ 0x2c
 8006502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006504:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006506:	18c3      	adds	r3, r0, r3
 8006508:	9307      	str	r3, [sp, #28]
 800650a:	2d46      	cmp	r5, #70	@ 0x46
 800650c:	d1e4      	bne.n	80064d8 <__cvt+0x64>
 800650e:	7803      	ldrb	r3, [r0, #0]
 8006510:	2b30      	cmp	r3, #48	@ 0x30
 8006512:	d10c      	bne.n	800652e <__cvt+0xba>
 8006514:	2200      	movs	r2, #0
 8006516:	2300      	movs	r3, #0
 8006518:	0030      	movs	r0, r6
 800651a:	0039      	movs	r1, r7
 800651c:	f7f9 ff94 	bl	8000448 <__aeabi_dcmpeq>
 8006520:	2800      	cmp	r0, #0
 8006522:	d104      	bne.n	800652e <__cvt+0xba>
 8006524:	2301      	movs	r3, #1
 8006526:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8006528:	1a9b      	subs	r3, r3, r2
 800652a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800652c:	6013      	str	r3, [r2, #0]
 800652e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006530:	9a07      	ldr	r2, [sp, #28]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	18d3      	adds	r3, r2, r3
 8006536:	e7ce      	b.n	80064d6 <__cvt+0x62>
 8006538:	1c59      	adds	r1, r3, #1
 800653a:	9109      	str	r1, [sp, #36]	@ 0x24
 800653c:	701a      	strb	r2, [r3, #0]
 800653e:	e7d6      	b.n	80064ee <__cvt+0x7a>

08006540 <__exponent>:
 8006540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006542:	232b      	movs	r3, #43	@ 0x2b
 8006544:	b085      	sub	sp, #20
 8006546:	0005      	movs	r5, r0
 8006548:	1e0c      	subs	r4, r1, #0
 800654a:	7002      	strb	r2, [r0, #0]
 800654c:	da01      	bge.n	8006552 <__exponent+0x12>
 800654e:	424c      	negs	r4, r1
 8006550:	3302      	adds	r3, #2
 8006552:	706b      	strb	r3, [r5, #1]
 8006554:	2c09      	cmp	r4, #9
 8006556:	dd2c      	ble.n	80065b2 <__exponent+0x72>
 8006558:	ab02      	add	r3, sp, #8
 800655a:	1dde      	adds	r6, r3, #7
 800655c:	0020      	movs	r0, r4
 800655e:	210a      	movs	r1, #10
 8006560:	f7f9 ff5c 	bl	800041c <__aeabi_idivmod>
 8006564:	0037      	movs	r7, r6
 8006566:	3130      	adds	r1, #48	@ 0x30
 8006568:	3e01      	subs	r6, #1
 800656a:	0020      	movs	r0, r4
 800656c:	7031      	strb	r1, [r6, #0]
 800656e:	210a      	movs	r1, #10
 8006570:	9401      	str	r4, [sp, #4]
 8006572:	f7f9 fe6d 	bl	8000250 <__divsi3>
 8006576:	9b01      	ldr	r3, [sp, #4]
 8006578:	0004      	movs	r4, r0
 800657a:	2b63      	cmp	r3, #99	@ 0x63
 800657c:	dcee      	bgt.n	800655c <__exponent+0x1c>
 800657e:	1eba      	subs	r2, r7, #2
 8006580:	1ca8      	adds	r0, r5, #2
 8006582:	0001      	movs	r1, r0
 8006584:	0013      	movs	r3, r2
 8006586:	3430      	adds	r4, #48	@ 0x30
 8006588:	7014      	strb	r4, [r2, #0]
 800658a:	ac02      	add	r4, sp, #8
 800658c:	3407      	adds	r4, #7
 800658e:	429c      	cmp	r4, r3
 8006590:	d80a      	bhi.n	80065a8 <__exponent+0x68>
 8006592:	2300      	movs	r3, #0
 8006594:	4294      	cmp	r4, r2
 8006596:	d303      	bcc.n	80065a0 <__exponent+0x60>
 8006598:	3309      	adds	r3, #9
 800659a:	aa02      	add	r2, sp, #8
 800659c:	189b      	adds	r3, r3, r2
 800659e:	1bdb      	subs	r3, r3, r7
 80065a0:	18c0      	adds	r0, r0, r3
 80065a2:	1b40      	subs	r0, r0, r5
 80065a4:	b005      	add	sp, #20
 80065a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065a8:	781c      	ldrb	r4, [r3, #0]
 80065aa:	3301      	adds	r3, #1
 80065ac:	700c      	strb	r4, [r1, #0]
 80065ae:	3101      	adds	r1, #1
 80065b0:	e7eb      	b.n	800658a <__exponent+0x4a>
 80065b2:	2330      	movs	r3, #48	@ 0x30
 80065b4:	18e4      	adds	r4, r4, r3
 80065b6:	70ab      	strb	r3, [r5, #2]
 80065b8:	1d28      	adds	r0, r5, #4
 80065ba:	70ec      	strb	r4, [r5, #3]
 80065bc:	e7f1      	b.n	80065a2 <__exponent+0x62>
	...

080065c0 <_printf_float>:
 80065c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065c2:	b097      	sub	sp, #92	@ 0x5c
 80065c4:	000d      	movs	r5, r1
 80065c6:	920a      	str	r2, [sp, #40]	@ 0x28
 80065c8:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80065ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065cc:	9009      	str	r0, [sp, #36]	@ 0x24
 80065ce:	f000 fcab 	bl	8006f28 <_localeconv_r>
 80065d2:	6803      	ldr	r3, [r0, #0]
 80065d4:	0018      	movs	r0, r3
 80065d6:	930d      	str	r3, [sp, #52]	@ 0x34
 80065d8:	f7f9 fd94 	bl	8000104 <strlen>
 80065dc:	2300      	movs	r3, #0
 80065de:	900f      	str	r0, [sp, #60]	@ 0x3c
 80065e0:	9314      	str	r3, [sp, #80]	@ 0x50
 80065e2:	7e2b      	ldrb	r3, [r5, #24]
 80065e4:	2207      	movs	r2, #7
 80065e6:	930c      	str	r3, [sp, #48]	@ 0x30
 80065e8:	682b      	ldr	r3, [r5, #0]
 80065ea:	930e      	str	r3, [sp, #56]	@ 0x38
 80065ec:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80065ee:	6823      	ldr	r3, [r4, #0]
 80065f0:	05c9      	lsls	r1, r1, #23
 80065f2:	d545      	bpl.n	8006680 <_printf_float+0xc0>
 80065f4:	189b      	adds	r3, r3, r2
 80065f6:	4393      	bics	r3, r2
 80065f8:	001a      	movs	r2, r3
 80065fa:	3208      	adds	r2, #8
 80065fc:	6022      	str	r2, [r4, #0]
 80065fe:	2201      	movs	r2, #1
 8006600:	681e      	ldr	r6, [r3, #0]
 8006602:	685f      	ldr	r7, [r3, #4]
 8006604:	007b      	lsls	r3, r7, #1
 8006606:	085b      	lsrs	r3, r3, #1
 8006608:	9311      	str	r3, [sp, #68]	@ 0x44
 800660a:	9610      	str	r6, [sp, #64]	@ 0x40
 800660c:	64ae      	str	r6, [r5, #72]	@ 0x48
 800660e:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8006610:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8006612:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8006614:	4ba7      	ldr	r3, [pc, #668]	@ (80068b4 <_printf_float+0x2f4>)
 8006616:	4252      	negs	r2, r2
 8006618:	f7fb ff20 	bl	800245c <__aeabi_dcmpun>
 800661c:	2800      	cmp	r0, #0
 800661e:	d131      	bne.n	8006684 <_printf_float+0xc4>
 8006620:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8006622:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8006624:	2201      	movs	r2, #1
 8006626:	4ba3      	ldr	r3, [pc, #652]	@ (80068b4 <_printf_float+0x2f4>)
 8006628:	4252      	negs	r2, r2
 800662a:	f7f9 ff1d 	bl	8000468 <__aeabi_dcmple>
 800662e:	2800      	cmp	r0, #0
 8006630:	d128      	bne.n	8006684 <_printf_float+0xc4>
 8006632:	2200      	movs	r2, #0
 8006634:	2300      	movs	r3, #0
 8006636:	0030      	movs	r0, r6
 8006638:	0039      	movs	r1, r7
 800663a:	f7f9 ff0b 	bl	8000454 <__aeabi_dcmplt>
 800663e:	2800      	cmp	r0, #0
 8006640:	d003      	beq.n	800664a <_printf_float+0x8a>
 8006642:	002b      	movs	r3, r5
 8006644:	222d      	movs	r2, #45	@ 0x2d
 8006646:	3343      	adds	r3, #67	@ 0x43
 8006648:	701a      	strb	r2, [r3, #0]
 800664a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800664c:	4f9a      	ldr	r7, [pc, #616]	@ (80068b8 <_printf_float+0x2f8>)
 800664e:	2b47      	cmp	r3, #71	@ 0x47
 8006650:	d800      	bhi.n	8006654 <_printf_float+0x94>
 8006652:	4f9a      	ldr	r7, [pc, #616]	@ (80068bc <_printf_float+0x2fc>)
 8006654:	2303      	movs	r3, #3
 8006656:	2400      	movs	r4, #0
 8006658:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800665a:	612b      	str	r3, [r5, #16]
 800665c:	3301      	adds	r3, #1
 800665e:	439a      	bics	r2, r3
 8006660:	602a      	str	r2, [r5, #0]
 8006662:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006664:	0029      	movs	r1, r5
 8006666:	9300      	str	r3, [sp, #0]
 8006668:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800666a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800666c:	aa15      	add	r2, sp, #84	@ 0x54
 800666e:	f000 f9e5 	bl	8006a3c <_printf_common>
 8006672:	3001      	adds	r0, #1
 8006674:	d000      	beq.n	8006678 <_printf_float+0xb8>
 8006676:	e09e      	b.n	80067b6 <_printf_float+0x1f6>
 8006678:	2001      	movs	r0, #1
 800667a:	4240      	negs	r0, r0
 800667c:	b017      	add	sp, #92	@ 0x5c
 800667e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006680:	3307      	adds	r3, #7
 8006682:	e7b8      	b.n	80065f6 <_printf_float+0x36>
 8006684:	0032      	movs	r2, r6
 8006686:	003b      	movs	r3, r7
 8006688:	0030      	movs	r0, r6
 800668a:	0039      	movs	r1, r7
 800668c:	f7fb fee6 	bl	800245c <__aeabi_dcmpun>
 8006690:	2800      	cmp	r0, #0
 8006692:	d00b      	beq.n	80066ac <_printf_float+0xec>
 8006694:	2f00      	cmp	r7, #0
 8006696:	da03      	bge.n	80066a0 <_printf_float+0xe0>
 8006698:	002b      	movs	r3, r5
 800669a:	222d      	movs	r2, #45	@ 0x2d
 800669c:	3343      	adds	r3, #67	@ 0x43
 800669e:	701a      	strb	r2, [r3, #0]
 80066a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80066a2:	4f87      	ldr	r7, [pc, #540]	@ (80068c0 <_printf_float+0x300>)
 80066a4:	2b47      	cmp	r3, #71	@ 0x47
 80066a6:	d8d5      	bhi.n	8006654 <_printf_float+0x94>
 80066a8:	4f86      	ldr	r7, [pc, #536]	@ (80068c4 <_printf_float+0x304>)
 80066aa:	e7d3      	b.n	8006654 <_printf_float+0x94>
 80066ac:	2220      	movs	r2, #32
 80066ae:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80066b0:	686b      	ldr	r3, [r5, #4]
 80066b2:	4394      	bics	r4, r2
 80066b4:	1c5a      	adds	r2, r3, #1
 80066b6:	d146      	bne.n	8006746 <_printf_float+0x186>
 80066b8:	3307      	adds	r3, #7
 80066ba:	606b      	str	r3, [r5, #4]
 80066bc:	2380      	movs	r3, #128	@ 0x80
 80066be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80066c0:	00db      	lsls	r3, r3, #3
 80066c2:	4313      	orrs	r3, r2
 80066c4:	2200      	movs	r2, #0
 80066c6:	602b      	str	r3, [r5, #0]
 80066c8:	9206      	str	r2, [sp, #24]
 80066ca:	aa14      	add	r2, sp, #80	@ 0x50
 80066cc:	9205      	str	r2, [sp, #20]
 80066ce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80066d0:	a90a      	add	r1, sp, #40	@ 0x28
 80066d2:	9204      	str	r2, [sp, #16]
 80066d4:	aa13      	add	r2, sp, #76	@ 0x4c
 80066d6:	9203      	str	r2, [sp, #12]
 80066d8:	2223      	movs	r2, #35	@ 0x23
 80066da:	1852      	adds	r2, r2, r1
 80066dc:	9202      	str	r2, [sp, #8]
 80066de:	9301      	str	r3, [sp, #4]
 80066e0:	686b      	ldr	r3, [r5, #4]
 80066e2:	0032      	movs	r2, r6
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80066e8:	003b      	movs	r3, r7
 80066ea:	f7ff fec3 	bl	8006474 <__cvt>
 80066ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80066f0:	0007      	movs	r7, r0
 80066f2:	2c47      	cmp	r4, #71	@ 0x47
 80066f4:	d12d      	bne.n	8006752 <_printf_float+0x192>
 80066f6:	1cd3      	adds	r3, r2, #3
 80066f8:	db02      	blt.n	8006700 <_printf_float+0x140>
 80066fa:	686b      	ldr	r3, [r5, #4]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	dd47      	ble.n	8006790 <_printf_float+0x1d0>
 8006700:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006702:	3b02      	subs	r3, #2
 8006704:	b2db      	uxtb	r3, r3
 8006706:	930c      	str	r3, [sp, #48]	@ 0x30
 8006708:	0028      	movs	r0, r5
 800670a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800670c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800670e:	3901      	subs	r1, #1
 8006710:	3050      	adds	r0, #80	@ 0x50
 8006712:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006714:	f7ff ff14 	bl	8006540 <__exponent>
 8006718:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800671a:	0004      	movs	r4, r0
 800671c:	1813      	adds	r3, r2, r0
 800671e:	612b      	str	r3, [r5, #16]
 8006720:	2a01      	cmp	r2, #1
 8006722:	dc02      	bgt.n	800672a <_printf_float+0x16a>
 8006724:	682a      	ldr	r2, [r5, #0]
 8006726:	07d2      	lsls	r2, r2, #31
 8006728:	d501      	bpl.n	800672e <_printf_float+0x16e>
 800672a:	3301      	adds	r3, #1
 800672c:	612b      	str	r3, [r5, #16]
 800672e:	2323      	movs	r3, #35	@ 0x23
 8006730:	aa0a      	add	r2, sp, #40	@ 0x28
 8006732:	189b      	adds	r3, r3, r2
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d100      	bne.n	800673c <_printf_float+0x17c>
 800673a:	e792      	b.n	8006662 <_printf_float+0xa2>
 800673c:	002b      	movs	r3, r5
 800673e:	222d      	movs	r2, #45	@ 0x2d
 8006740:	3343      	adds	r3, #67	@ 0x43
 8006742:	701a      	strb	r2, [r3, #0]
 8006744:	e78d      	b.n	8006662 <_printf_float+0xa2>
 8006746:	2c47      	cmp	r4, #71	@ 0x47
 8006748:	d1b8      	bne.n	80066bc <_printf_float+0xfc>
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1b6      	bne.n	80066bc <_printf_float+0xfc>
 800674e:	3301      	adds	r3, #1
 8006750:	e7b3      	b.n	80066ba <_printf_float+0xfa>
 8006752:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006754:	2b65      	cmp	r3, #101	@ 0x65
 8006756:	d9d7      	bls.n	8006708 <_printf_float+0x148>
 8006758:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800675a:	2b66      	cmp	r3, #102	@ 0x66
 800675c:	d11a      	bne.n	8006794 <_printf_float+0x1d4>
 800675e:	686b      	ldr	r3, [r5, #4]
 8006760:	2a00      	cmp	r2, #0
 8006762:	dd09      	ble.n	8006778 <_printf_float+0x1b8>
 8006764:	612a      	str	r2, [r5, #16]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d102      	bne.n	8006770 <_printf_float+0x1b0>
 800676a:	6829      	ldr	r1, [r5, #0]
 800676c:	07c9      	lsls	r1, r1, #31
 800676e:	d50b      	bpl.n	8006788 <_printf_float+0x1c8>
 8006770:	3301      	adds	r3, #1
 8006772:	189b      	adds	r3, r3, r2
 8006774:	612b      	str	r3, [r5, #16]
 8006776:	e007      	b.n	8006788 <_printf_float+0x1c8>
 8006778:	2b00      	cmp	r3, #0
 800677a:	d103      	bne.n	8006784 <_printf_float+0x1c4>
 800677c:	2201      	movs	r2, #1
 800677e:	6829      	ldr	r1, [r5, #0]
 8006780:	4211      	tst	r1, r2
 8006782:	d000      	beq.n	8006786 <_printf_float+0x1c6>
 8006784:	1c9a      	adds	r2, r3, #2
 8006786:	612a      	str	r2, [r5, #16]
 8006788:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800678a:	2400      	movs	r4, #0
 800678c:	65ab      	str	r3, [r5, #88]	@ 0x58
 800678e:	e7ce      	b.n	800672e <_printf_float+0x16e>
 8006790:	2367      	movs	r3, #103	@ 0x67
 8006792:	930c      	str	r3, [sp, #48]	@ 0x30
 8006794:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006796:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006798:	4299      	cmp	r1, r3
 800679a:	db06      	blt.n	80067aa <_printf_float+0x1ea>
 800679c:	682b      	ldr	r3, [r5, #0]
 800679e:	6129      	str	r1, [r5, #16]
 80067a0:	07db      	lsls	r3, r3, #31
 80067a2:	d5f1      	bpl.n	8006788 <_printf_float+0x1c8>
 80067a4:	3101      	adds	r1, #1
 80067a6:	6129      	str	r1, [r5, #16]
 80067a8:	e7ee      	b.n	8006788 <_printf_float+0x1c8>
 80067aa:	2201      	movs	r2, #1
 80067ac:	2900      	cmp	r1, #0
 80067ae:	dce0      	bgt.n	8006772 <_printf_float+0x1b2>
 80067b0:	1892      	adds	r2, r2, r2
 80067b2:	1a52      	subs	r2, r2, r1
 80067b4:	e7dd      	b.n	8006772 <_printf_float+0x1b2>
 80067b6:	682a      	ldr	r2, [r5, #0]
 80067b8:	0553      	lsls	r3, r2, #21
 80067ba:	d408      	bmi.n	80067ce <_printf_float+0x20e>
 80067bc:	692b      	ldr	r3, [r5, #16]
 80067be:	003a      	movs	r2, r7
 80067c0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80067c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067c4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80067c6:	47a0      	blx	r4
 80067c8:	3001      	adds	r0, #1
 80067ca:	d129      	bne.n	8006820 <_printf_float+0x260>
 80067cc:	e754      	b.n	8006678 <_printf_float+0xb8>
 80067ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80067d0:	2b65      	cmp	r3, #101	@ 0x65
 80067d2:	d800      	bhi.n	80067d6 <_printf_float+0x216>
 80067d4:	e0db      	b.n	800698e <_printf_float+0x3ce>
 80067d6:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80067d8:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80067da:	2200      	movs	r2, #0
 80067dc:	2300      	movs	r3, #0
 80067de:	f7f9 fe33 	bl	8000448 <__aeabi_dcmpeq>
 80067e2:	2800      	cmp	r0, #0
 80067e4:	d033      	beq.n	800684e <_printf_float+0x28e>
 80067e6:	2301      	movs	r3, #1
 80067e8:	4a37      	ldr	r2, [pc, #220]	@ (80068c8 <_printf_float+0x308>)
 80067ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80067ec:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067ee:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80067f0:	47a0      	blx	r4
 80067f2:	3001      	adds	r0, #1
 80067f4:	d100      	bne.n	80067f8 <_printf_float+0x238>
 80067f6:	e73f      	b.n	8006678 <_printf_float+0xb8>
 80067f8:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80067fa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80067fc:	42b3      	cmp	r3, r6
 80067fe:	db02      	blt.n	8006806 <_printf_float+0x246>
 8006800:	682b      	ldr	r3, [r5, #0]
 8006802:	07db      	lsls	r3, r3, #31
 8006804:	d50c      	bpl.n	8006820 <_printf_float+0x260>
 8006806:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006808:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800680a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800680c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800680e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006810:	47a0      	blx	r4
 8006812:	2400      	movs	r4, #0
 8006814:	3001      	adds	r0, #1
 8006816:	d100      	bne.n	800681a <_printf_float+0x25a>
 8006818:	e72e      	b.n	8006678 <_printf_float+0xb8>
 800681a:	1e73      	subs	r3, r6, #1
 800681c:	42a3      	cmp	r3, r4
 800681e:	dc0a      	bgt.n	8006836 <_printf_float+0x276>
 8006820:	682b      	ldr	r3, [r5, #0]
 8006822:	079b      	lsls	r3, r3, #30
 8006824:	d500      	bpl.n	8006828 <_printf_float+0x268>
 8006826:	e106      	b.n	8006a36 <_printf_float+0x476>
 8006828:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800682a:	68e8      	ldr	r0, [r5, #12]
 800682c:	4298      	cmp	r0, r3
 800682e:	db00      	blt.n	8006832 <_printf_float+0x272>
 8006830:	e724      	b.n	800667c <_printf_float+0xbc>
 8006832:	0018      	movs	r0, r3
 8006834:	e722      	b.n	800667c <_printf_float+0xbc>
 8006836:	002a      	movs	r2, r5
 8006838:	2301      	movs	r3, #1
 800683a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800683c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800683e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006840:	321a      	adds	r2, #26
 8006842:	47b8      	blx	r7
 8006844:	3001      	adds	r0, #1
 8006846:	d100      	bne.n	800684a <_printf_float+0x28a>
 8006848:	e716      	b.n	8006678 <_printf_float+0xb8>
 800684a:	3401      	adds	r4, #1
 800684c:	e7e5      	b.n	800681a <_printf_float+0x25a>
 800684e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006850:	2b00      	cmp	r3, #0
 8006852:	dc3b      	bgt.n	80068cc <_printf_float+0x30c>
 8006854:	2301      	movs	r3, #1
 8006856:	4a1c      	ldr	r2, [pc, #112]	@ (80068c8 <_printf_float+0x308>)
 8006858:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800685a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800685c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800685e:	47a0      	blx	r4
 8006860:	3001      	adds	r0, #1
 8006862:	d100      	bne.n	8006866 <_printf_float+0x2a6>
 8006864:	e708      	b.n	8006678 <_printf_float+0xb8>
 8006866:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8006868:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800686a:	4333      	orrs	r3, r6
 800686c:	d102      	bne.n	8006874 <_printf_float+0x2b4>
 800686e:	682b      	ldr	r3, [r5, #0]
 8006870:	07db      	lsls	r3, r3, #31
 8006872:	d5d5      	bpl.n	8006820 <_printf_float+0x260>
 8006874:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006876:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006878:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800687a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800687c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800687e:	47a0      	blx	r4
 8006880:	2300      	movs	r3, #0
 8006882:	3001      	adds	r0, #1
 8006884:	d100      	bne.n	8006888 <_printf_float+0x2c8>
 8006886:	e6f7      	b.n	8006678 <_printf_float+0xb8>
 8006888:	930c      	str	r3, [sp, #48]	@ 0x30
 800688a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800688c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800688e:	425b      	negs	r3, r3
 8006890:	4293      	cmp	r3, r2
 8006892:	dc01      	bgt.n	8006898 <_printf_float+0x2d8>
 8006894:	0033      	movs	r3, r6
 8006896:	e792      	b.n	80067be <_printf_float+0x1fe>
 8006898:	002a      	movs	r2, r5
 800689a:	2301      	movs	r3, #1
 800689c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800689e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80068a0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80068a2:	321a      	adds	r2, #26
 80068a4:	47a0      	blx	r4
 80068a6:	3001      	adds	r0, #1
 80068a8:	d100      	bne.n	80068ac <_printf_float+0x2ec>
 80068aa:	e6e5      	b.n	8006678 <_printf_float+0xb8>
 80068ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80068ae:	3301      	adds	r3, #1
 80068b0:	e7ea      	b.n	8006888 <_printf_float+0x2c8>
 80068b2:	46c0      	nop			@ (mov r8, r8)
 80068b4:	7fefffff 	.word	0x7fefffff
 80068b8:	08009c10 	.word	0x08009c10
 80068bc:	08009c0c 	.word	0x08009c0c
 80068c0:	08009c18 	.word	0x08009c18
 80068c4:	08009c14 	.word	0x08009c14
 80068c8:	08009c1c 	.word	0x08009c1c
 80068cc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80068ce:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80068d0:	930c      	str	r3, [sp, #48]	@ 0x30
 80068d2:	429e      	cmp	r6, r3
 80068d4:	dd00      	ble.n	80068d8 <_printf_float+0x318>
 80068d6:	001e      	movs	r6, r3
 80068d8:	2e00      	cmp	r6, #0
 80068da:	dc31      	bgt.n	8006940 <_printf_float+0x380>
 80068dc:	43f3      	mvns	r3, r6
 80068de:	2400      	movs	r4, #0
 80068e0:	17db      	asrs	r3, r3, #31
 80068e2:	4033      	ands	r3, r6
 80068e4:	930e      	str	r3, [sp, #56]	@ 0x38
 80068e6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80068e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80068ea:	1af3      	subs	r3, r6, r3
 80068ec:	42a3      	cmp	r3, r4
 80068ee:	dc30      	bgt.n	8006952 <_printf_float+0x392>
 80068f0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80068f2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80068f4:	429a      	cmp	r2, r3
 80068f6:	dc38      	bgt.n	800696a <_printf_float+0x3aa>
 80068f8:	682b      	ldr	r3, [r5, #0]
 80068fa:	07db      	lsls	r3, r3, #31
 80068fc:	d435      	bmi.n	800696a <_printf_float+0x3aa>
 80068fe:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8006900:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006902:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006904:	1b9b      	subs	r3, r3, r6
 8006906:	1b14      	subs	r4, r2, r4
 8006908:	429c      	cmp	r4, r3
 800690a:	dd00      	ble.n	800690e <_printf_float+0x34e>
 800690c:	001c      	movs	r4, r3
 800690e:	2c00      	cmp	r4, #0
 8006910:	dc34      	bgt.n	800697c <_printf_float+0x3bc>
 8006912:	43e3      	mvns	r3, r4
 8006914:	2600      	movs	r6, #0
 8006916:	17db      	asrs	r3, r3, #31
 8006918:	401c      	ands	r4, r3
 800691a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800691c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	1b1b      	subs	r3, r3, r4
 8006922:	42b3      	cmp	r3, r6
 8006924:	dc00      	bgt.n	8006928 <_printf_float+0x368>
 8006926:	e77b      	b.n	8006820 <_printf_float+0x260>
 8006928:	002a      	movs	r2, r5
 800692a:	2301      	movs	r3, #1
 800692c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800692e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006930:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006932:	321a      	adds	r2, #26
 8006934:	47b8      	blx	r7
 8006936:	3001      	adds	r0, #1
 8006938:	d100      	bne.n	800693c <_printf_float+0x37c>
 800693a:	e69d      	b.n	8006678 <_printf_float+0xb8>
 800693c:	3601      	adds	r6, #1
 800693e:	e7ec      	b.n	800691a <_printf_float+0x35a>
 8006940:	0033      	movs	r3, r6
 8006942:	003a      	movs	r2, r7
 8006944:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006946:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006948:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800694a:	47a0      	blx	r4
 800694c:	3001      	adds	r0, #1
 800694e:	d1c5      	bne.n	80068dc <_printf_float+0x31c>
 8006950:	e692      	b.n	8006678 <_printf_float+0xb8>
 8006952:	002a      	movs	r2, r5
 8006954:	2301      	movs	r3, #1
 8006956:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006958:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800695a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800695c:	321a      	adds	r2, #26
 800695e:	47b0      	blx	r6
 8006960:	3001      	adds	r0, #1
 8006962:	d100      	bne.n	8006966 <_printf_float+0x3a6>
 8006964:	e688      	b.n	8006678 <_printf_float+0xb8>
 8006966:	3401      	adds	r4, #1
 8006968:	e7bd      	b.n	80068e6 <_printf_float+0x326>
 800696a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800696c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800696e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006970:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006972:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006974:	47a0      	blx	r4
 8006976:	3001      	adds	r0, #1
 8006978:	d1c1      	bne.n	80068fe <_printf_float+0x33e>
 800697a:	e67d      	b.n	8006678 <_printf_float+0xb8>
 800697c:	19ba      	adds	r2, r7, r6
 800697e:	0023      	movs	r3, r4
 8006980:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006982:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006984:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006986:	47b0      	blx	r6
 8006988:	3001      	adds	r0, #1
 800698a:	d1c2      	bne.n	8006912 <_printf_float+0x352>
 800698c:	e674      	b.n	8006678 <_printf_float+0xb8>
 800698e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006990:	930c      	str	r3, [sp, #48]	@ 0x30
 8006992:	2b01      	cmp	r3, #1
 8006994:	dc02      	bgt.n	800699c <_printf_float+0x3dc>
 8006996:	2301      	movs	r3, #1
 8006998:	421a      	tst	r2, r3
 800699a:	d039      	beq.n	8006a10 <_printf_float+0x450>
 800699c:	2301      	movs	r3, #1
 800699e:	003a      	movs	r2, r7
 80069a0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80069a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069a4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80069a6:	47b0      	blx	r6
 80069a8:	3001      	adds	r0, #1
 80069aa:	d100      	bne.n	80069ae <_printf_float+0x3ee>
 80069ac:	e664      	b.n	8006678 <_printf_float+0xb8>
 80069ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80069b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80069b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80069b4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069b6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80069b8:	47b0      	blx	r6
 80069ba:	3001      	adds	r0, #1
 80069bc:	d100      	bne.n	80069c0 <_printf_float+0x400>
 80069be:	e65b      	b.n	8006678 <_printf_float+0xb8>
 80069c0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80069c2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80069c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80069c6:	2200      	movs	r2, #0
 80069c8:	3b01      	subs	r3, #1
 80069ca:	930c      	str	r3, [sp, #48]	@ 0x30
 80069cc:	2300      	movs	r3, #0
 80069ce:	f7f9 fd3b 	bl	8000448 <__aeabi_dcmpeq>
 80069d2:	2800      	cmp	r0, #0
 80069d4:	d11a      	bne.n	8006a0c <_printf_float+0x44c>
 80069d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80069d8:	1c7a      	adds	r2, r7, #1
 80069da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80069dc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069de:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80069e0:	47b0      	blx	r6
 80069e2:	3001      	adds	r0, #1
 80069e4:	d10e      	bne.n	8006a04 <_printf_float+0x444>
 80069e6:	e647      	b.n	8006678 <_printf_float+0xb8>
 80069e8:	002a      	movs	r2, r5
 80069ea:	2301      	movs	r3, #1
 80069ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80069ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069f0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80069f2:	321a      	adds	r2, #26
 80069f4:	47b8      	blx	r7
 80069f6:	3001      	adds	r0, #1
 80069f8:	d100      	bne.n	80069fc <_printf_float+0x43c>
 80069fa:	e63d      	b.n	8006678 <_printf_float+0xb8>
 80069fc:	3601      	adds	r6, #1
 80069fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006a00:	429e      	cmp	r6, r3
 8006a02:	dbf1      	blt.n	80069e8 <_printf_float+0x428>
 8006a04:	002a      	movs	r2, r5
 8006a06:	0023      	movs	r3, r4
 8006a08:	3250      	adds	r2, #80	@ 0x50
 8006a0a:	e6d9      	b.n	80067c0 <_printf_float+0x200>
 8006a0c:	2600      	movs	r6, #0
 8006a0e:	e7f6      	b.n	80069fe <_printf_float+0x43e>
 8006a10:	003a      	movs	r2, r7
 8006a12:	e7e2      	b.n	80069da <_printf_float+0x41a>
 8006a14:	002a      	movs	r2, r5
 8006a16:	2301      	movs	r3, #1
 8006a18:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006a1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a1c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006a1e:	3219      	adds	r2, #25
 8006a20:	47b0      	blx	r6
 8006a22:	3001      	adds	r0, #1
 8006a24:	d100      	bne.n	8006a28 <_printf_float+0x468>
 8006a26:	e627      	b.n	8006678 <_printf_float+0xb8>
 8006a28:	3401      	adds	r4, #1
 8006a2a:	68eb      	ldr	r3, [r5, #12]
 8006a2c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006a2e:	1a9b      	subs	r3, r3, r2
 8006a30:	42a3      	cmp	r3, r4
 8006a32:	dcef      	bgt.n	8006a14 <_printf_float+0x454>
 8006a34:	e6f8      	b.n	8006828 <_printf_float+0x268>
 8006a36:	2400      	movs	r4, #0
 8006a38:	e7f7      	b.n	8006a2a <_printf_float+0x46a>
 8006a3a:	46c0      	nop			@ (mov r8, r8)

08006a3c <_printf_common>:
 8006a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a3e:	0016      	movs	r6, r2
 8006a40:	9301      	str	r3, [sp, #4]
 8006a42:	688a      	ldr	r2, [r1, #8]
 8006a44:	690b      	ldr	r3, [r1, #16]
 8006a46:	000c      	movs	r4, r1
 8006a48:	9000      	str	r0, [sp, #0]
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	da00      	bge.n	8006a50 <_printf_common+0x14>
 8006a4e:	0013      	movs	r3, r2
 8006a50:	0022      	movs	r2, r4
 8006a52:	6033      	str	r3, [r6, #0]
 8006a54:	3243      	adds	r2, #67	@ 0x43
 8006a56:	7812      	ldrb	r2, [r2, #0]
 8006a58:	2a00      	cmp	r2, #0
 8006a5a:	d001      	beq.n	8006a60 <_printf_common+0x24>
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	6033      	str	r3, [r6, #0]
 8006a60:	6823      	ldr	r3, [r4, #0]
 8006a62:	069b      	lsls	r3, r3, #26
 8006a64:	d502      	bpl.n	8006a6c <_printf_common+0x30>
 8006a66:	6833      	ldr	r3, [r6, #0]
 8006a68:	3302      	adds	r3, #2
 8006a6a:	6033      	str	r3, [r6, #0]
 8006a6c:	6822      	ldr	r2, [r4, #0]
 8006a6e:	2306      	movs	r3, #6
 8006a70:	0015      	movs	r5, r2
 8006a72:	401d      	ands	r5, r3
 8006a74:	421a      	tst	r2, r3
 8006a76:	d027      	beq.n	8006ac8 <_printf_common+0x8c>
 8006a78:	0023      	movs	r3, r4
 8006a7a:	3343      	adds	r3, #67	@ 0x43
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	1e5a      	subs	r2, r3, #1
 8006a80:	4193      	sbcs	r3, r2
 8006a82:	6822      	ldr	r2, [r4, #0]
 8006a84:	0692      	lsls	r2, r2, #26
 8006a86:	d430      	bmi.n	8006aea <_printf_common+0xae>
 8006a88:	0022      	movs	r2, r4
 8006a8a:	9901      	ldr	r1, [sp, #4]
 8006a8c:	9800      	ldr	r0, [sp, #0]
 8006a8e:	9d08      	ldr	r5, [sp, #32]
 8006a90:	3243      	adds	r2, #67	@ 0x43
 8006a92:	47a8      	blx	r5
 8006a94:	3001      	adds	r0, #1
 8006a96:	d025      	beq.n	8006ae4 <_printf_common+0xa8>
 8006a98:	2206      	movs	r2, #6
 8006a9a:	6823      	ldr	r3, [r4, #0]
 8006a9c:	2500      	movs	r5, #0
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	2b04      	cmp	r3, #4
 8006aa2:	d105      	bne.n	8006ab0 <_printf_common+0x74>
 8006aa4:	6833      	ldr	r3, [r6, #0]
 8006aa6:	68e5      	ldr	r5, [r4, #12]
 8006aa8:	1aed      	subs	r5, r5, r3
 8006aaa:	43eb      	mvns	r3, r5
 8006aac:	17db      	asrs	r3, r3, #31
 8006aae:	401d      	ands	r5, r3
 8006ab0:	68a3      	ldr	r3, [r4, #8]
 8006ab2:	6922      	ldr	r2, [r4, #16]
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	dd01      	ble.n	8006abc <_printf_common+0x80>
 8006ab8:	1a9b      	subs	r3, r3, r2
 8006aba:	18ed      	adds	r5, r5, r3
 8006abc:	2600      	movs	r6, #0
 8006abe:	42b5      	cmp	r5, r6
 8006ac0:	d120      	bne.n	8006b04 <_printf_common+0xc8>
 8006ac2:	2000      	movs	r0, #0
 8006ac4:	e010      	b.n	8006ae8 <_printf_common+0xac>
 8006ac6:	3501      	adds	r5, #1
 8006ac8:	68e3      	ldr	r3, [r4, #12]
 8006aca:	6832      	ldr	r2, [r6, #0]
 8006acc:	1a9b      	subs	r3, r3, r2
 8006ace:	42ab      	cmp	r3, r5
 8006ad0:	ddd2      	ble.n	8006a78 <_printf_common+0x3c>
 8006ad2:	0022      	movs	r2, r4
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	9901      	ldr	r1, [sp, #4]
 8006ad8:	9800      	ldr	r0, [sp, #0]
 8006ada:	9f08      	ldr	r7, [sp, #32]
 8006adc:	3219      	adds	r2, #25
 8006ade:	47b8      	blx	r7
 8006ae0:	3001      	adds	r0, #1
 8006ae2:	d1f0      	bne.n	8006ac6 <_printf_common+0x8a>
 8006ae4:	2001      	movs	r0, #1
 8006ae6:	4240      	negs	r0, r0
 8006ae8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006aea:	2030      	movs	r0, #48	@ 0x30
 8006aec:	18e1      	adds	r1, r4, r3
 8006aee:	3143      	adds	r1, #67	@ 0x43
 8006af0:	7008      	strb	r0, [r1, #0]
 8006af2:	0021      	movs	r1, r4
 8006af4:	1c5a      	adds	r2, r3, #1
 8006af6:	3145      	adds	r1, #69	@ 0x45
 8006af8:	7809      	ldrb	r1, [r1, #0]
 8006afa:	18a2      	adds	r2, r4, r2
 8006afc:	3243      	adds	r2, #67	@ 0x43
 8006afe:	3302      	adds	r3, #2
 8006b00:	7011      	strb	r1, [r2, #0]
 8006b02:	e7c1      	b.n	8006a88 <_printf_common+0x4c>
 8006b04:	0022      	movs	r2, r4
 8006b06:	2301      	movs	r3, #1
 8006b08:	9901      	ldr	r1, [sp, #4]
 8006b0a:	9800      	ldr	r0, [sp, #0]
 8006b0c:	9f08      	ldr	r7, [sp, #32]
 8006b0e:	321a      	adds	r2, #26
 8006b10:	47b8      	blx	r7
 8006b12:	3001      	adds	r0, #1
 8006b14:	d0e6      	beq.n	8006ae4 <_printf_common+0xa8>
 8006b16:	3601      	adds	r6, #1
 8006b18:	e7d1      	b.n	8006abe <_printf_common+0x82>
	...

08006b1c <_printf_i>:
 8006b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b1e:	b08b      	sub	sp, #44	@ 0x2c
 8006b20:	9206      	str	r2, [sp, #24]
 8006b22:	000a      	movs	r2, r1
 8006b24:	3243      	adds	r2, #67	@ 0x43
 8006b26:	9307      	str	r3, [sp, #28]
 8006b28:	9005      	str	r0, [sp, #20]
 8006b2a:	9203      	str	r2, [sp, #12]
 8006b2c:	7e0a      	ldrb	r2, [r1, #24]
 8006b2e:	000c      	movs	r4, r1
 8006b30:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006b32:	2a78      	cmp	r2, #120	@ 0x78
 8006b34:	d809      	bhi.n	8006b4a <_printf_i+0x2e>
 8006b36:	2a62      	cmp	r2, #98	@ 0x62
 8006b38:	d80b      	bhi.n	8006b52 <_printf_i+0x36>
 8006b3a:	2a00      	cmp	r2, #0
 8006b3c:	d100      	bne.n	8006b40 <_printf_i+0x24>
 8006b3e:	e0ba      	b.n	8006cb6 <_printf_i+0x19a>
 8006b40:	497a      	ldr	r1, [pc, #488]	@ (8006d2c <_printf_i+0x210>)
 8006b42:	9104      	str	r1, [sp, #16]
 8006b44:	2a58      	cmp	r2, #88	@ 0x58
 8006b46:	d100      	bne.n	8006b4a <_printf_i+0x2e>
 8006b48:	e08e      	b.n	8006c68 <_printf_i+0x14c>
 8006b4a:	0025      	movs	r5, r4
 8006b4c:	3542      	adds	r5, #66	@ 0x42
 8006b4e:	702a      	strb	r2, [r5, #0]
 8006b50:	e022      	b.n	8006b98 <_printf_i+0x7c>
 8006b52:	0010      	movs	r0, r2
 8006b54:	3863      	subs	r0, #99	@ 0x63
 8006b56:	2815      	cmp	r0, #21
 8006b58:	d8f7      	bhi.n	8006b4a <_printf_i+0x2e>
 8006b5a:	f7f9 fae5 	bl	8000128 <__gnu_thumb1_case_shi>
 8006b5e:	0016      	.short	0x0016
 8006b60:	fff6001f 	.word	0xfff6001f
 8006b64:	fff6fff6 	.word	0xfff6fff6
 8006b68:	001ffff6 	.word	0x001ffff6
 8006b6c:	fff6fff6 	.word	0xfff6fff6
 8006b70:	fff6fff6 	.word	0xfff6fff6
 8006b74:	0036009f 	.word	0x0036009f
 8006b78:	fff6007e 	.word	0xfff6007e
 8006b7c:	00b0fff6 	.word	0x00b0fff6
 8006b80:	0036fff6 	.word	0x0036fff6
 8006b84:	fff6fff6 	.word	0xfff6fff6
 8006b88:	0082      	.short	0x0082
 8006b8a:	0025      	movs	r5, r4
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	3542      	adds	r5, #66	@ 0x42
 8006b90:	1d11      	adds	r1, r2, #4
 8006b92:	6019      	str	r1, [r3, #0]
 8006b94:	6813      	ldr	r3, [r2, #0]
 8006b96:	702b      	strb	r3, [r5, #0]
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e09e      	b.n	8006cda <_printf_i+0x1be>
 8006b9c:	6818      	ldr	r0, [r3, #0]
 8006b9e:	6809      	ldr	r1, [r1, #0]
 8006ba0:	1d02      	adds	r2, r0, #4
 8006ba2:	060d      	lsls	r5, r1, #24
 8006ba4:	d50b      	bpl.n	8006bbe <_printf_i+0xa2>
 8006ba6:	6806      	ldr	r6, [r0, #0]
 8006ba8:	601a      	str	r2, [r3, #0]
 8006baa:	2e00      	cmp	r6, #0
 8006bac:	da03      	bge.n	8006bb6 <_printf_i+0x9a>
 8006bae:	232d      	movs	r3, #45	@ 0x2d
 8006bb0:	9a03      	ldr	r2, [sp, #12]
 8006bb2:	4276      	negs	r6, r6
 8006bb4:	7013      	strb	r3, [r2, #0]
 8006bb6:	4b5d      	ldr	r3, [pc, #372]	@ (8006d2c <_printf_i+0x210>)
 8006bb8:	270a      	movs	r7, #10
 8006bba:	9304      	str	r3, [sp, #16]
 8006bbc:	e018      	b.n	8006bf0 <_printf_i+0xd4>
 8006bbe:	6806      	ldr	r6, [r0, #0]
 8006bc0:	601a      	str	r2, [r3, #0]
 8006bc2:	0649      	lsls	r1, r1, #25
 8006bc4:	d5f1      	bpl.n	8006baa <_printf_i+0x8e>
 8006bc6:	b236      	sxth	r6, r6
 8006bc8:	e7ef      	b.n	8006baa <_printf_i+0x8e>
 8006bca:	6808      	ldr	r0, [r1, #0]
 8006bcc:	6819      	ldr	r1, [r3, #0]
 8006bce:	c940      	ldmia	r1!, {r6}
 8006bd0:	0605      	lsls	r5, r0, #24
 8006bd2:	d402      	bmi.n	8006bda <_printf_i+0xbe>
 8006bd4:	0640      	lsls	r0, r0, #25
 8006bd6:	d500      	bpl.n	8006bda <_printf_i+0xbe>
 8006bd8:	b2b6      	uxth	r6, r6
 8006bda:	6019      	str	r1, [r3, #0]
 8006bdc:	4b53      	ldr	r3, [pc, #332]	@ (8006d2c <_printf_i+0x210>)
 8006bde:	270a      	movs	r7, #10
 8006be0:	9304      	str	r3, [sp, #16]
 8006be2:	2a6f      	cmp	r2, #111	@ 0x6f
 8006be4:	d100      	bne.n	8006be8 <_printf_i+0xcc>
 8006be6:	3f02      	subs	r7, #2
 8006be8:	0023      	movs	r3, r4
 8006bea:	2200      	movs	r2, #0
 8006bec:	3343      	adds	r3, #67	@ 0x43
 8006bee:	701a      	strb	r2, [r3, #0]
 8006bf0:	6863      	ldr	r3, [r4, #4]
 8006bf2:	60a3      	str	r3, [r4, #8]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	db06      	blt.n	8006c06 <_printf_i+0xea>
 8006bf8:	2104      	movs	r1, #4
 8006bfa:	6822      	ldr	r2, [r4, #0]
 8006bfc:	9d03      	ldr	r5, [sp, #12]
 8006bfe:	438a      	bics	r2, r1
 8006c00:	6022      	str	r2, [r4, #0]
 8006c02:	4333      	orrs	r3, r6
 8006c04:	d00c      	beq.n	8006c20 <_printf_i+0x104>
 8006c06:	9d03      	ldr	r5, [sp, #12]
 8006c08:	0030      	movs	r0, r6
 8006c0a:	0039      	movs	r1, r7
 8006c0c:	f7f9 fb1c 	bl	8000248 <__aeabi_uidivmod>
 8006c10:	9b04      	ldr	r3, [sp, #16]
 8006c12:	3d01      	subs	r5, #1
 8006c14:	5c5b      	ldrb	r3, [r3, r1]
 8006c16:	702b      	strb	r3, [r5, #0]
 8006c18:	0033      	movs	r3, r6
 8006c1a:	0006      	movs	r6, r0
 8006c1c:	429f      	cmp	r7, r3
 8006c1e:	d9f3      	bls.n	8006c08 <_printf_i+0xec>
 8006c20:	2f08      	cmp	r7, #8
 8006c22:	d109      	bne.n	8006c38 <_printf_i+0x11c>
 8006c24:	6823      	ldr	r3, [r4, #0]
 8006c26:	07db      	lsls	r3, r3, #31
 8006c28:	d506      	bpl.n	8006c38 <_printf_i+0x11c>
 8006c2a:	6862      	ldr	r2, [r4, #4]
 8006c2c:	6923      	ldr	r3, [r4, #16]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	dc02      	bgt.n	8006c38 <_printf_i+0x11c>
 8006c32:	2330      	movs	r3, #48	@ 0x30
 8006c34:	3d01      	subs	r5, #1
 8006c36:	702b      	strb	r3, [r5, #0]
 8006c38:	9b03      	ldr	r3, [sp, #12]
 8006c3a:	1b5b      	subs	r3, r3, r5
 8006c3c:	6123      	str	r3, [r4, #16]
 8006c3e:	9b07      	ldr	r3, [sp, #28]
 8006c40:	0021      	movs	r1, r4
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	9805      	ldr	r0, [sp, #20]
 8006c46:	9b06      	ldr	r3, [sp, #24]
 8006c48:	aa09      	add	r2, sp, #36	@ 0x24
 8006c4a:	f7ff fef7 	bl	8006a3c <_printf_common>
 8006c4e:	3001      	adds	r0, #1
 8006c50:	d148      	bne.n	8006ce4 <_printf_i+0x1c8>
 8006c52:	2001      	movs	r0, #1
 8006c54:	4240      	negs	r0, r0
 8006c56:	b00b      	add	sp, #44	@ 0x2c
 8006c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c5a:	2220      	movs	r2, #32
 8006c5c:	6809      	ldr	r1, [r1, #0]
 8006c5e:	430a      	orrs	r2, r1
 8006c60:	6022      	str	r2, [r4, #0]
 8006c62:	2278      	movs	r2, #120	@ 0x78
 8006c64:	4932      	ldr	r1, [pc, #200]	@ (8006d30 <_printf_i+0x214>)
 8006c66:	9104      	str	r1, [sp, #16]
 8006c68:	0021      	movs	r1, r4
 8006c6a:	3145      	adds	r1, #69	@ 0x45
 8006c6c:	700a      	strb	r2, [r1, #0]
 8006c6e:	6819      	ldr	r1, [r3, #0]
 8006c70:	6822      	ldr	r2, [r4, #0]
 8006c72:	c940      	ldmia	r1!, {r6}
 8006c74:	0610      	lsls	r0, r2, #24
 8006c76:	d402      	bmi.n	8006c7e <_printf_i+0x162>
 8006c78:	0650      	lsls	r0, r2, #25
 8006c7a:	d500      	bpl.n	8006c7e <_printf_i+0x162>
 8006c7c:	b2b6      	uxth	r6, r6
 8006c7e:	6019      	str	r1, [r3, #0]
 8006c80:	07d3      	lsls	r3, r2, #31
 8006c82:	d502      	bpl.n	8006c8a <_printf_i+0x16e>
 8006c84:	2320      	movs	r3, #32
 8006c86:	4313      	orrs	r3, r2
 8006c88:	6023      	str	r3, [r4, #0]
 8006c8a:	2e00      	cmp	r6, #0
 8006c8c:	d001      	beq.n	8006c92 <_printf_i+0x176>
 8006c8e:	2710      	movs	r7, #16
 8006c90:	e7aa      	b.n	8006be8 <_printf_i+0xcc>
 8006c92:	2220      	movs	r2, #32
 8006c94:	6823      	ldr	r3, [r4, #0]
 8006c96:	4393      	bics	r3, r2
 8006c98:	6023      	str	r3, [r4, #0]
 8006c9a:	e7f8      	b.n	8006c8e <_printf_i+0x172>
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	680d      	ldr	r5, [r1, #0]
 8006ca0:	1d10      	adds	r0, r2, #4
 8006ca2:	6949      	ldr	r1, [r1, #20]
 8006ca4:	6018      	str	r0, [r3, #0]
 8006ca6:	6813      	ldr	r3, [r2, #0]
 8006ca8:	062e      	lsls	r6, r5, #24
 8006caa:	d501      	bpl.n	8006cb0 <_printf_i+0x194>
 8006cac:	6019      	str	r1, [r3, #0]
 8006cae:	e002      	b.n	8006cb6 <_printf_i+0x19a>
 8006cb0:	066d      	lsls	r5, r5, #25
 8006cb2:	d5fb      	bpl.n	8006cac <_printf_i+0x190>
 8006cb4:	8019      	strh	r1, [r3, #0]
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	9d03      	ldr	r5, [sp, #12]
 8006cba:	6123      	str	r3, [r4, #16]
 8006cbc:	e7bf      	b.n	8006c3e <_printf_i+0x122>
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	1d11      	adds	r1, r2, #4
 8006cc2:	6019      	str	r1, [r3, #0]
 8006cc4:	6815      	ldr	r5, [r2, #0]
 8006cc6:	2100      	movs	r1, #0
 8006cc8:	0028      	movs	r0, r5
 8006cca:	6862      	ldr	r2, [r4, #4]
 8006ccc:	f000 f930 	bl	8006f30 <memchr>
 8006cd0:	2800      	cmp	r0, #0
 8006cd2:	d001      	beq.n	8006cd8 <_printf_i+0x1bc>
 8006cd4:	1b40      	subs	r0, r0, r5
 8006cd6:	6060      	str	r0, [r4, #4]
 8006cd8:	6863      	ldr	r3, [r4, #4]
 8006cda:	6123      	str	r3, [r4, #16]
 8006cdc:	2300      	movs	r3, #0
 8006cde:	9a03      	ldr	r2, [sp, #12]
 8006ce0:	7013      	strb	r3, [r2, #0]
 8006ce2:	e7ac      	b.n	8006c3e <_printf_i+0x122>
 8006ce4:	002a      	movs	r2, r5
 8006ce6:	6923      	ldr	r3, [r4, #16]
 8006ce8:	9906      	ldr	r1, [sp, #24]
 8006cea:	9805      	ldr	r0, [sp, #20]
 8006cec:	9d07      	ldr	r5, [sp, #28]
 8006cee:	47a8      	blx	r5
 8006cf0:	3001      	adds	r0, #1
 8006cf2:	d0ae      	beq.n	8006c52 <_printf_i+0x136>
 8006cf4:	6823      	ldr	r3, [r4, #0]
 8006cf6:	079b      	lsls	r3, r3, #30
 8006cf8:	d415      	bmi.n	8006d26 <_printf_i+0x20a>
 8006cfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cfc:	68e0      	ldr	r0, [r4, #12]
 8006cfe:	4298      	cmp	r0, r3
 8006d00:	daa9      	bge.n	8006c56 <_printf_i+0x13a>
 8006d02:	0018      	movs	r0, r3
 8006d04:	e7a7      	b.n	8006c56 <_printf_i+0x13a>
 8006d06:	0022      	movs	r2, r4
 8006d08:	2301      	movs	r3, #1
 8006d0a:	9906      	ldr	r1, [sp, #24]
 8006d0c:	9805      	ldr	r0, [sp, #20]
 8006d0e:	9e07      	ldr	r6, [sp, #28]
 8006d10:	3219      	adds	r2, #25
 8006d12:	47b0      	blx	r6
 8006d14:	3001      	adds	r0, #1
 8006d16:	d09c      	beq.n	8006c52 <_printf_i+0x136>
 8006d18:	3501      	adds	r5, #1
 8006d1a:	68e3      	ldr	r3, [r4, #12]
 8006d1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d1e:	1a9b      	subs	r3, r3, r2
 8006d20:	42ab      	cmp	r3, r5
 8006d22:	dcf0      	bgt.n	8006d06 <_printf_i+0x1ea>
 8006d24:	e7e9      	b.n	8006cfa <_printf_i+0x1de>
 8006d26:	2500      	movs	r5, #0
 8006d28:	e7f7      	b.n	8006d1a <_printf_i+0x1fe>
 8006d2a:	46c0      	nop			@ (mov r8, r8)
 8006d2c:	08009c1e 	.word	0x08009c1e
 8006d30:	08009c2f 	.word	0x08009c2f

08006d34 <std>:
 8006d34:	2300      	movs	r3, #0
 8006d36:	b510      	push	{r4, lr}
 8006d38:	0004      	movs	r4, r0
 8006d3a:	6003      	str	r3, [r0, #0]
 8006d3c:	6043      	str	r3, [r0, #4]
 8006d3e:	6083      	str	r3, [r0, #8]
 8006d40:	8181      	strh	r1, [r0, #12]
 8006d42:	6643      	str	r3, [r0, #100]	@ 0x64
 8006d44:	81c2      	strh	r2, [r0, #14]
 8006d46:	6103      	str	r3, [r0, #16]
 8006d48:	6143      	str	r3, [r0, #20]
 8006d4a:	6183      	str	r3, [r0, #24]
 8006d4c:	0019      	movs	r1, r3
 8006d4e:	2208      	movs	r2, #8
 8006d50:	305c      	adds	r0, #92	@ 0x5c
 8006d52:	f000 f8b3 	bl	8006ebc <memset>
 8006d56:	4b0b      	ldr	r3, [pc, #44]	@ (8006d84 <std+0x50>)
 8006d58:	6224      	str	r4, [r4, #32]
 8006d5a:	6263      	str	r3, [r4, #36]	@ 0x24
 8006d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8006d88 <std+0x54>)
 8006d5e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006d60:	4b0a      	ldr	r3, [pc, #40]	@ (8006d8c <std+0x58>)
 8006d62:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006d64:	4b0a      	ldr	r3, [pc, #40]	@ (8006d90 <std+0x5c>)
 8006d66:	6323      	str	r3, [r4, #48]	@ 0x30
 8006d68:	4b0a      	ldr	r3, [pc, #40]	@ (8006d94 <std+0x60>)
 8006d6a:	429c      	cmp	r4, r3
 8006d6c:	d005      	beq.n	8006d7a <std+0x46>
 8006d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8006d98 <std+0x64>)
 8006d70:	429c      	cmp	r4, r3
 8006d72:	d002      	beq.n	8006d7a <std+0x46>
 8006d74:	4b09      	ldr	r3, [pc, #36]	@ (8006d9c <std+0x68>)
 8006d76:	429c      	cmp	r4, r3
 8006d78:	d103      	bne.n	8006d82 <std+0x4e>
 8006d7a:	0020      	movs	r0, r4
 8006d7c:	3058      	adds	r0, #88	@ 0x58
 8006d7e:	f000 f8cf 	bl	8006f20 <__retarget_lock_init_recursive>
 8006d82:	bd10      	pop	{r4, pc}
 8006d84:	08008645 	.word	0x08008645
 8006d88:	0800866d 	.word	0x0800866d
 8006d8c:	080086a5 	.word	0x080086a5
 8006d90:	080086d1 	.word	0x080086d1
 8006d94:	20000350 	.word	0x20000350
 8006d98:	200003b8 	.word	0x200003b8
 8006d9c:	20000420 	.word	0x20000420

08006da0 <stdio_exit_handler>:
 8006da0:	b510      	push	{r4, lr}
 8006da2:	4a03      	ldr	r2, [pc, #12]	@ (8006db0 <stdio_exit_handler+0x10>)
 8006da4:	4903      	ldr	r1, [pc, #12]	@ (8006db4 <stdio_exit_handler+0x14>)
 8006da6:	4804      	ldr	r0, [pc, #16]	@ (8006db8 <stdio_exit_handler+0x18>)
 8006da8:	f000 f86c 	bl	8006e84 <_fwalk_sglue>
 8006dac:	bd10      	pop	{r4, pc}
 8006dae:	46c0      	nop			@ (mov r8, r8)
 8006db0:	20000014 	.word	0x20000014
 8006db4:	08007e95 	.word	0x08007e95
 8006db8:	20000024 	.word	0x20000024

08006dbc <cleanup_stdio>:
 8006dbc:	6841      	ldr	r1, [r0, #4]
 8006dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8006dec <cleanup_stdio+0x30>)
 8006dc0:	b510      	push	{r4, lr}
 8006dc2:	0004      	movs	r4, r0
 8006dc4:	4299      	cmp	r1, r3
 8006dc6:	d001      	beq.n	8006dcc <cleanup_stdio+0x10>
 8006dc8:	f001 f864 	bl	8007e94 <_fflush_r>
 8006dcc:	68a1      	ldr	r1, [r4, #8]
 8006dce:	4b08      	ldr	r3, [pc, #32]	@ (8006df0 <cleanup_stdio+0x34>)
 8006dd0:	4299      	cmp	r1, r3
 8006dd2:	d002      	beq.n	8006dda <cleanup_stdio+0x1e>
 8006dd4:	0020      	movs	r0, r4
 8006dd6:	f001 f85d 	bl	8007e94 <_fflush_r>
 8006dda:	68e1      	ldr	r1, [r4, #12]
 8006ddc:	4b05      	ldr	r3, [pc, #20]	@ (8006df4 <cleanup_stdio+0x38>)
 8006dde:	4299      	cmp	r1, r3
 8006de0:	d002      	beq.n	8006de8 <cleanup_stdio+0x2c>
 8006de2:	0020      	movs	r0, r4
 8006de4:	f001 f856 	bl	8007e94 <_fflush_r>
 8006de8:	bd10      	pop	{r4, pc}
 8006dea:	46c0      	nop			@ (mov r8, r8)
 8006dec:	20000350 	.word	0x20000350
 8006df0:	200003b8 	.word	0x200003b8
 8006df4:	20000420 	.word	0x20000420

08006df8 <global_stdio_init.part.0>:
 8006df8:	b510      	push	{r4, lr}
 8006dfa:	4b09      	ldr	r3, [pc, #36]	@ (8006e20 <global_stdio_init.part.0+0x28>)
 8006dfc:	4a09      	ldr	r2, [pc, #36]	@ (8006e24 <global_stdio_init.part.0+0x2c>)
 8006dfe:	2104      	movs	r1, #4
 8006e00:	601a      	str	r2, [r3, #0]
 8006e02:	4809      	ldr	r0, [pc, #36]	@ (8006e28 <global_stdio_init.part.0+0x30>)
 8006e04:	2200      	movs	r2, #0
 8006e06:	f7ff ff95 	bl	8006d34 <std>
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	2109      	movs	r1, #9
 8006e0e:	4807      	ldr	r0, [pc, #28]	@ (8006e2c <global_stdio_init.part.0+0x34>)
 8006e10:	f7ff ff90 	bl	8006d34 <std>
 8006e14:	2202      	movs	r2, #2
 8006e16:	2112      	movs	r1, #18
 8006e18:	4805      	ldr	r0, [pc, #20]	@ (8006e30 <global_stdio_init.part.0+0x38>)
 8006e1a:	f7ff ff8b 	bl	8006d34 <std>
 8006e1e:	bd10      	pop	{r4, pc}
 8006e20:	20000488 	.word	0x20000488
 8006e24:	08006da1 	.word	0x08006da1
 8006e28:	20000350 	.word	0x20000350
 8006e2c:	200003b8 	.word	0x200003b8
 8006e30:	20000420 	.word	0x20000420

08006e34 <__sfp_lock_acquire>:
 8006e34:	b510      	push	{r4, lr}
 8006e36:	4802      	ldr	r0, [pc, #8]	@ (8006e40 <__sfp_lock_acquire+0xc>)
 8006e38:	f000 f873 	bl	8006f22 <__retarget_lock_acquire_recursive>
 8006e3c:	bd10      	pop	{r4, pc}
 8006e3e:	46c0      	nop			@ (mov r8, r8)
 8006e40:	2000048d 	.word	0x2000048d

08006e44 <__sfp_lock_release>:
 8006e44:	b510      	push	{r4, lr}
 8006e46:	4802      	ldr	r0, [pc, #8]	@ (8006e50 <__sfp_lock_release+0xc>)
 8006e48:	f000 f86c 	bl	8006f24 <__retarget_lock_release_recursive>
 8006e4c:	bd10      	pop	{r4, pc}
 8006e4e:	46c0      	nop			@ (mov r8, r8)
 8006e50:	2000048d 	.word	0x2000048d

08006e54 <__sinit>:
 8006e54:	b510      	push	{r4, lr}
 8006e56:	0004      	movs	r4, r0
 8006e58:	f7ff ffec 	bl	8006e34 <__sfp_lock_acquire>
 8006e5c:	6a23      	ldr	r3, [r4, #32]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d002      	beq.n	8006e68 <__sinit+0x14>
 8006e62:	f7ff ffef 	bl	8006e44 <__sfp_lock_release>
 8006e66:	bd10      	pop	{r4, pc}
 8006e68:	4b04      	ldr	r3, [pc, #16]	@ (8006e7c <__sinit+0x28>)
 8006e6a:	6223      	str	r3, [r4, #32]
 8006e6c:	4b04      	ldr	r3, [pc, #16]	@ (8006e80 <__sinit+0x2c>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d1f6      	bne.n	8006e62 <__sinit+0xe>
 8006e74:	f7ff ffc0 	bl	8006df8 <global_stdio_init.part.0>
 8006e78:	e7f3      	b.n	8006e62 <__sinit+0xe>
 8006e7a:	46c0      	nop			@ (mov r8, r8)
 8006e7c:	08006dbd 	.word	0x08006dbd
 8006e80:	20000488 	.word	0x20000488

08006e84 <_fwalk_sglue>:
 8006e84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e86:	0014      	movs	r4, r2
 8006e88:	2600      	movs	r6, #0
 8006e8a:	9000      	str	r0, [sp, #0]
 8006e8c:	9101      	str	r1, [sp, #4]
 8006e8e:	68a5      	ldr	r5, [r4, #8]
 8006e90:	6867      	ldr	r7, [r4, #4]
 8006e92:	3f01      	subs	r7, #1
 8006e94:	d504      	bpl.n	8006ea0 <_fwalk_sglue+0x1c>
 8006e96:	6824      	ldr	r4, [r4, #0]
 8006e98:	2c00      	cmp	r4, #0
 8006e9a:	d1f8      	bne.n	8006e8e <_fwalk_sglue+0xa>
 8006e9c:	0030      	movs	r0, r6
 8006e9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006ea0:	89ab      	ldrh	r3, [r5, #12]
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d908      	bls.n	8006eb8 <_fwalk_sglue+0x34>
 8006ea6:	220e      	movs	r2, #14
 8006ea8:	5eab      	ldrsh	r3, [r5, r2]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	d004      	beq.n	8006eb8 <_fwalk_sglue+0x34>
 8006eae:	0029      	movs	r1, r5
 8006eb0:	9800      	ldr	r0, [sp, #0]
 8006eb2:	9b01      	ldr	r3, [sp, #4]
 8006eb4:	4798      	blx	r3
 8006eb6:	4306      	orrs	r6, r0
 8006eb8:	3568      	adds	r5, #104	@ 0x68
 8006eba:	e7ea      	b.n	8006e92 <_fwalk_sglue+0xe>

08006ebc <memset>:
 8006ebc:	0003      	movs	r3, r0
 8006ebe:	1882      	adds	r2, r0, r2
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d100      	bne.n	8006ec6 <memset+0xa>
 8006ec4:	4770      	bx	lr
 8006ec6:	7019      	strb	r1, [r3, #0]
 8006ec8:	3301      	adds	r3, #1
 8006eca:	e7f9      	b.n	8006ec0 <memset+0x4>

08006ecc <__errno>:
 8006ecc:	4b01      	ldr	r3, [pc, #4]	@ (8006ed4 <__errno+0x8>)
 8006ece:	6818      	ldr	r0, [r3, #0]
 8006ed0:	4770      	bx	lr
 8006ed2:	46c0      	nop			@ (mov r8, r8)
 8006ed4:	20000020 	.word	0x20000020

08006ed8 <__libc_init_array>:
 8006ed8:	b570      	push	{r4, r5, r6, lr}
 8006eda:	2600      	movs	r6, #0
 8006edc:	4c0c      	ldr	r4, [pc, #48]	@ (8006f10 <__libc_init_array+0x38>)
 8006ede:	4d0d      	ldr	r5, [pc, #52]	@ (8006f14 <__libc_init_array+0x3c>)
 8006ee0:	1b64      	subs	r4, r4, r5
 8006ee2:	10a4      	asrs	r4, r4, #2
 8006ee4:	42a6      	cmp	r6, r4
 8006ee6:	d109      	bne.n	8006efc <__libc_init_array+0x24>
 8006ee8:	2600      	movs	r6, #0
 8006eea:	f001 ffe9 	bl	8008ec0 <_init>
 8006eee:	4c0a      	ldr	r4, [pc, #40]	@ (8006f18 <__libc_init_array+0x40>)
 8006ef0:	4d0a      	ldr	r5, [pc, #40]	@ (8006f1c <__libc_init_array+0x44>)
 8006ef2:	1b64      	subs	r4, r4, r5
 8006ef4:	10a4      	asrs	r4, r4, #2
 8006ef6:	42a6      	cmp	r6, r4
 8006ef8:	d105      	bne.n	8006f06 <__libc_init_array+0x2e>
 8006efa:	bd70      	pop	{r4, r5, r6, pc}
 8006efc:	00b3      	lsls	r3, r6, #2
 8006efe:	58eb      	ldr	r3, [r5, r3]
 8006f00:	4798      	blx	r3
 8006f02:	3601      	adds	r6, #1
 8006f04:	e7ee      	b.n	8006ee4 <__libc_init_array+0xc>
 8006f06:	00b3      	lsls	r3, r6, #2
 8006f08:	58eb      	ldr	r3, [r5, r3]
 8006f0a:	4798      	blx	r3
 8006f0c:	3601      	adds	r6, #1
 8006f0e:	e7f2      	b.n	8006ef6 <__libc_init_array+0x1e>
 8006f10:	08009f8c 	.word	0x08009f8c
 8006f14:	08009f8c 	.word	0x08009f8c
 8006f18:	08009f90 	.word	0x08009f90
 8006f1c:	08009f8c 	.word	0x08009f8c

08006f20 <__retarget_lock_init_recursive>:
 8006f20:	4770      	bx	lr

08006f22 <__retarget_lock_acquire_recursive>:
 8006f22:	4770      	bx	lr

08006f24 <__retarget_lock_release_recursive>:
 8006f24:	4770      	bx	lr
	...

08006f28 <_localeconv_r>:
 8006f28:	4800      	ldr	r0, [pc, #0]	@ (8006f2c <_localeconv_r+0x4>)
 8006f2a:	4770      	bx	lr
 8006f2c:	20000160 	.word	0x20000160

08006f30 <memchr>:
 8006f30:	b2c9      	uxtb	r1, r1
 8006f32:	1882      	adds	r2, r0, r2
 8006f34:	4290      	cmp	r0, r2
 8006f36:	d101      	bne.n	8006f3c <memchr+0xc>
 8006f38:	2000      	movs	r0, #0
 8006f3a:	4770      	bx	lr
 8006f3c:	7803      	ldrb	r3, [r0, #0]
 8006f3e:	428b      	cmp	r3, r1
 8006f40:	d0fb      	beq.n	8006f3a <memchr+0xa>
 8006f42:	3001      	adds	r0, #1
 8006f44:	e7f6      	b.n	8006f34 <memchr+0x4>

08006f46 <quorem>:
 8006f46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f48:	6903      	ldr	r3, [r0, #16]
 8006f4a:	690c      	ldr	r4, [r1, #16]
 8006f4c:	b089      	sub	sp, #36	@ 0x24
 8006f4e:	9003      	str	r0, [sp, #12]
 8006f50:	9106      	str	r1, [sp, #24]
 8006f52:	2000      	movs	r0, #0
 8006f54:	42a3      	cmp	r3, r4
 8006f56:	db63      	blt.n	8007020 <quorem+0xda>
 8006f58:	000b      	movs	r3, r1
 8006f5a:	3c01      	subs	r4, #1
 8006f5c:	3314      	adds	r3, #20
 8006f5e:	00a5      	lsls	r5, r4, #2
 8006f60:	9304      	str	r3, [sp, #16]
 8006f62:	195b      	adds	r3, r3, r5
 8006f64:	9305      	str	r3, [sp, #20]
 8006f66:	9b03      	ldr	r3, [sp, #12]
 8006f68:	3314      	adds	r3, #20
 8006f6a:	9301      	str	r3, [sp, #4]
 8006f6c:	195d      	adds	r5, r3, r5
 8006f6e:	9b05      	ldr	r3, [sp, #20]
 8006f70:	682f      	ldr	r7, [r5, #0]
 8006f72:	681e      	ldr	r6, [r3, #0]
 8006f74:	0038      	movs	r0, r7
 8006f76:	3601      	adds	r6, #1
 8006f78:	0031      	movs	r1, r6
 8006f7a:	f7f9 f8df 	bl	800013c <__udivsi3>
 8006f7e:	9002      	str	r0, [sp, #8]
 8006f80:	42b7      	cmp	r7, r6
 8006f82:	d327      	bcc.n	8006fd4 <quorem+0x8e>
 8006f84:	9b04      	ldr	r3, [sp, #16]
 8006f86:	2700      	movs	r7, #0
 8006f88:	469c      	mov	ip, r3
 8006f8a:	9e01      	ldr	r6, [sp, #4]
 8006f8c:	9707      	str	r7, [sp, #28]
 8006f8e:	4662      	mov	r2, ip
 8006f90:	ca08      	ldmia	r2!, {r3}
 8006f92:	6830      	ldr	r0, [r6, #0]
 8006f94:	4694      	mov	ip, r2
 8006f96:	9a02      	ldr	r2, [sp, #8]
 8006f98:	b299      	uxth	r1, r3
 8006f9a:	4351      	muls	r1, r2
 8006f9c:	0c1b      	lsrs	r3, r3, #16
 8006f9e:	4353      	muls	r3, r2
 8006fa0:	19c9      	adds	r1, r1, r7
 8006fa2:	0c0a      	lsrs	r2, r1, #16
 8006fa4:	189b      	adds	r3, r3, r2
 8006fa6:	b289      	uxth	r1, r1
 8006fa8:	b282      	uxth	r2, r0
 8006faa:	1a52      	subs	r2, r2, r1
 8006fac:	9907      	ldr	r1, [sp, #28]
 8006fae:	0c1f      	lsrs	r7, r3, #16
 8006fb0:	1852      	adds	r2, r2, r1
 8006fb2:	0c00      	lsrs	r0, r0, #16
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	1411      	asrs	r1, r2, #16
 8006fb8:	1ac3      	subs	r3, r0, r3
 8006fba:	185b      	adds	r3, r3, r1
 8006fbc:	1419      	asrs	r1, r3, #16
 8006fbe:	b292      	uxth	r2, r2
 8006fc0:	041b      	lsls	r3, r3, #16
 8006fc2:	431a      	orrs	r2, r3
 8006fc4:	9b05      	ldr	r3, [sp, #20]
 8006fc6:	9107      	str	r1, [sp, #28]
 8006fc8:	c604      	stmia	r6!, {r2}
 8006fca:	4563      	cmp	r3, ip
 8006fcc:	d2df      	bcs.n	8006f8e <quorem+0x48>
 8006fce:	682b      	ldr	r3, [r5, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d02b      	beq.n	800702c <quorem+0xe6>
 8006fd4:	9906      	ldr	r1, [sp, #24]
 8006fd6:	9803      	ldr	r0, [sp, #12]
 8006fd8:	f001 fa1e 	bl	8008418 <__mcmp>
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	db1e      	blt.n	800701e <quorem+0xd8>
 8006fe0:	2600      	movs	r6, #0
 8006fe2:	9d01      	ldr	r5, [sp, #4]
 8006fe4:	9904      	ldr	r1, [sp, #16]
 8006fe6:	c901      	ldmia	r1!, {r0}
 8006fe8:	682b      	ldr	r3, [r5, #0]
 8006fea:	b287      	uxth	r7, r0
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	1bd2      	subs	r2, r2, r7
 8006ff0:	1992      	adds	r2, r2, r6
 8006ff2:	0c00      	lsrs	r0, r0, #16
 8006ff4:	0c1b      	lsrs	r3, r3, #16
 8006ff6:	1a1b      	subs	r3, r3, r0
 8006ff8:	1410      	asrs	r0, r2, #16
 8006ffa:	181b      	adds	r3, r3, r0
 8006ffc:	141e      	asrs	r6, r3, #16
 8006ffe:	b292      	uxth	r2, r2
 8007000:	041b      	lsls	r3, r3, #16
 8007002:	431a      	orrs	r2, r3
 8007004:	9b05      	ldr	r3, [sp, #20]
 8007006:	c504      	stmia	r5!, {r2}
 8007008:	428b      	cmp	r3, r1
 800700a:	d2ec      	bcs.n	8006fe6 <quorem+0xa0>
 800700c:	9a01      	ldr	r2, [sp, #4]
 800700e:	00a3      	lsls	r3, r4, #2
 8007010:	18d3      	adds	r3, r2, r3
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	2a00      	cmp	r2, #0
 8007016:	d014      	beq.n	8007042 <quorem+0xfc>
 8007018:	9b02      	ldr	r3, [sp, #8]
 800701a:	3301      	adds	r3, #1
 800701c:	9302      	str	r3, [sp, #8]
 800701e:	9802      	ldr	r0, [sp, #8]
 8007020:	b009      	add	sp, #36	@ 0x24
 8007022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007024:	682b      	ldr	r3, [r5, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d104      	bne.n	8007034 <quorem+0xee>
 800702a:	3c01      	subs	r4, #1
 800702c:	9b01      	ldr	r3, [sp, #4]
 800702e:	3d04      	subs	r5, #4
 8007030:	42ab      	cmp	r3, r5
 8007032:	d3f7      	bcc.n	8007024 <quorem+0xde>
 8007034:	9b03      	ldr	r3, [sp, #12]
 8007036:	611c      	str	r4, [r3, #16]
 8007038:	e7cc      	b.n	8006fd4 <quorem+0x8e>
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	2a00      	cmp	r2, #0
 800703e:	d104      	bne.n	800704a <quorem+0x104>
 8007040:	3c01      	subs	r4, #1
 8007042:	9a01      	ldr	r2, [sp, #4]
 8007044:	3b04      	subs	r3, #4
 8007046:	429a      	cmp	r2, r3
 8007048:	d3f7      	bcc.n	800703a <quorem+0xf4>
 800704a:	9b03      	ldr	r3, [sp, #12]
 800704c:	611c      	str	r4, [r3, #16]
 800704e:	e7e3      	b.n	8007018 <quorem+0xd2>

08007050 <_dtoa_r>:
 8007050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007052:	0014      	movs	r4, r2
 8007054:	001d      	movs	r5, r3
 8007056:	69c6      	ldr	r6, [r0, #28]
 8007058:	b09d      	sub	sp, #116	@ 0x74
 800705a:	940a      	str	r4, [sp, #40]	@ 0x28
 800705c:	950b      	str	r5, [sp, #44]	@ 0x2c
 800705e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8007060:	9003      	str	r0, [sp, #12]
 8007062:	2e00      	cmp	r6, #0
 8007064:	d10f      	bne.n	8007086 <_dtoa_r+0x36>
 8007066:	2010      	movs	r0, #16
 8007068:	f000 fde2 	bl	8007c30 <malloc>
 800706c:	9b03      	ldr	r3, [sp, #12]
 800706e:	1e02      	subs	r2, r0, #0
 8007070:	61d8      	str	r0, [r3, #28]
 8007072:	d104      	bne.n	800707e <_dtoa_r+0x2e>
 8007074:	21ef      	movs	r1, #239	@ 0xef
 8007076:	4bc7      	ldr	r3, [pc, #796]	@ (8007394 <_dtoa_r+0x344>)
 8007078:	48c7      	ldr	r0, [pc, #796]	@ (8007398 <_dtoa_r+0x348>)
 800707a:	f001 fb99 	bl	80087b0 <__assert_func>
 800707e:	6046      	str	r6, [r0, #4]
 8007080:	6086      	str	r6, [r0, #8]
 8007082:	6006      	str	r6, [r0, #0]
 8007084:	60c6      	str	r6, [r0, #12]
 8007086:	9b03      	ldr	r3, [sp, #12]
 8007088:	69db      	ldr	r3, [r3, #28]
 800708a:	6819      	ldr	r1, [r3, #0]
 800708c:	2900      	cmp	r1, #0
 800708e:	d00b      	beq.n	80070a8 <_dtoa_r+0x58>
 8007090:	685a      	ldr	r2, [r3, #4]
 8007092:	2301      	movs	r3, #1
 8007094:	4093      	lsls	r3, r2
 8007096:	604a      	str	r2, [r1, #4]
 8007098:	608b      	str	r3, [r1, #8]
 800709a:	9803      	ldr	r0, [sp, #12]
 800709c:	f000 ff7a 	bl	8007f94 <_Bfree>
 80070a0:	2200      	movs	r2, #0
 80070a2:	9b03      	ldr	r3, [sp, #12]
 80070a4:	69db      	ldr	r3, [r3, #28]
 80070a6:	601a      	str	r2, [r3, #0]
 80070a8:	2d00      	cmp	r5, #0
 80070aa:	da1e      	bge.n	80070ea <_dtoa_r+0x9a>
 80070ac:	2301      	movs	r3, #1
 80070ae:	603b      	str	r3, [r7, #0]
 80070b0:	006b      	lsls	r3, r5, #1
 80070b2:	085b      	lsrs	r3, r3, #1
 80070b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070b6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80070b8:	4bb8      	ldr	r3, [pc, #736]	@ (800739c <_dtoa_r+0x34c>)
 80070ba:	4ab8      	ldr	r2, [pc, #736]	@ (800739c <_dtoa_r+0x34c>)
 80070bc:	403b      	ands	r3, r7
 80070be:	4293      	cmp	r3, r2
 80070c0:	d116      	bne.n	80070f0 <_dtoa_r+0xa0>
 80070c2:	4bb7      	ldr	r3, [pc, #732]	@ (80073a0 <_dtoa_r+0x350>)
 80070c4:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80070c6:	6013      	str	r3, [r2, #0]
 80070c8:	033b      	lsls	r3, r7, #12
 80070ca:	0b1b      	lsrs	r3, r3, #12
 80070cc:	4323      	orrs	r3, r4
 80070ce:	d101      	bne.n	80070d4 <_dtoa_r+0x84>
 80070d0:	f000 fd80 	bl	8007bd4 <_dtoa_r+0xb84>
 80070d4:	4bb3      	ldr	r3, [pc, #716]	@ (80073a4 <_dtoa_r+0x354>)
 80070d6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80070d8:	9308      	str	r3, [sp, #32]
 80070da:	2a00      	cmp	r2, #0
 80070dc:	d002      	beq.n	80070e4 <_dtoa_r+0x94>
 80070de:	4bb2      	ldr	r3, [pc, #712]	@ (80073a8 <_dtoa_r+0x358>)
 80070e0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80070e2:	6013      	str	r3, [r2, #0]
 80070e4:	9808      	ldr	r0, [sp, #32]
 80070e6:	b01d      	add	sp, #116	@ 0x74
 80070e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070ea:	2300      	movs	r3, #0
 80070ec:	603b      	str	r3, [r7, #0]
 80070ee:	e7e2      	b.n	80070b6 <_dtoa_r+0x66>
 80070f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80070f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070f4:	9212      	str	r2, [sp, #72]	@ 0x48
 80070f6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80070f8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80070fa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80070fc:	2200      	movs	r2, #0
 80070fe:	2300      	movs	r3, #0
 8007100:	f7f9 f9a2 	bl	8000448 <__aeabi_dcmpeq>
 8007104:	1e06      	subs	r6, r0, #0
 8007106:	d00b      	beq.n	8007120 <_dtoa_r+0xd0>
 8007108:	2301      	movs	r3, #1
 800710a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800710c:	6013      	str	r3, [r2, #0]
 800710e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8007110:	2b00      	cmp	r3, #0
 8007112:	d002      	beq.n	800711a <_dtoa_r+0xca>
 8007114:	4ba5      	ldr	r3, [pc, #660]	@ (80073ac <_dtoa_r+0x35c>)
 8007116:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007118:	6013      	str	r3, [r2, #0]
 800711a:	4ba5      	ldr	r3, [pc, #660]	@ (80073b0 <_dtoa_r+0x360>)
 800711c:	9308      	str	r3, [sp, #32]
 800711e:	e7e1      	b.n	80070e4 <_dtoa_r+0x94>
 8007120:	ab1a      	add	r3, sp, #104	@ 0x68
 8007122:	9301      	str	r3, [sp, #4]
 8007124:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007126:	9300      	str	r3, [sp, #0]
 8007128:	9803      	ldr	r0, [sp, #12]
 800712a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800712c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800712e:	f001 fa29 	bl	8008584 <__d2b>
 8007132:	007a      	lsls	r2, r7, #1
 8007134:	9005      	str	r0, [sp, #20]
 8007136:	0d52      	lsrs	r2, r2, #21
 8007138:	d100      	bne.n	800713c <_dtoa_r+0xec>
 800713a:	e07b      	b.n	8007234 <_dtoa_r+0x1e4>
 800713c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800713e:	9618      	str	r6, [sp, #96]	@ 0x60
 8007140:	0319      	lsls	r1, r3, #12
 8007142:	4b9c      	ldr	r3, [pc, #624]	@ (80073b4 <_dtoa_r+0x364>)
 8007144:	0b09      	lsrs	r1, r1, #12
 8007146:	430b      	orrs	r3, r1
 8007148:	499b      	ldr	r1, [pc, #620]	@ (80073b8 <_dtoa_r+0x368>)
 800714a:	1857      	adds	r7, r2, r1
 800714c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800714e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007150:	0019      	movs	r1, r3
 8007152:	2200      	movs	r2, #0
 8007154:	4b99      	ldr	r3, [pc, #612]	@ (80073bc <_dtoa_r+0x36c>)
 8007156:	f7fa fd77 	bl	8001c48 <__aeabi_dsub>
 800715a:	4a99      	ldr	r2, [pc, #612]	@ (80073c0 <_dtoa_r+0x370>)
 800715c:	4b99      	ldr	r3, [pc, #612]	@ (80073c4 <_dtoa_r+0x374>)
 800715e:	f7fa fa8d 	bl	800167c <__aeabi_dmul>
 8007162:	4a99      	ldr	r2, [pc, #612]	@ (80073c8 <_dtoa_r+0x378>)
 8007164:	4b99      	ldr	r3, [pc, #612]	@ (80073cc <_dtoa_r+0x37c>)
 8007166:	f7f9 fa89 	bl	800067c <__aeabi_dadd>
 800716a:	0004      	movs	r4, r0
 800716c:	0038      	movs	r0, r7
 800716e:	000d      	movs	r5, r1
 8007170:	f7fb f9d2 	bl	8002518 <__aeabi_i2d>
 8007174:	4a96      	ldr	r2, [pc, #600]	@ (80073d0 <_dtoa_r+0x380>)
 8007176:	4b97      	ldr	r3, [pc, #604]	@ (80073d4 <_dtoa_r+0x384>)
 8007178:	f7fa fa80 	bl	800167c <__aeabi_dmul>
 800717c:	0002      	movs	r2, r0
 800717e:	000b      	movs	r3, r1
 8007180:	0020      	movs	r0, r4
 8007182:	0029      	movs	r1, r5
 8007184:	f7f9 fa7a 	bl	800067c <__aeabi_dadd>
 8007188:	0004      	movs	r4, r0
 800718a:	000d      	movs	r5, r1
 800718c:	f7fb f988 	bl	80024a0 <__aeabi_d2iz>
 8007190:	2200      	movs	r2, #0
 8007192:	9004      	str	r0, [sp, #16]
 8007194:	2300      	movs	r3, #0
 8007196:	0020      	movs	r0, r4
 8007198:	0029      	movs	r1, r5
 800719a:	f7f9 f95b 	bl	8000454 <__aeabi_dcmplt>
 800719e:	2800      	cmp	r0, #0
 80071a0:	d00b      	beq.n	80071ba <_dtoa_r+0x16a>
 80071a2:	9804      	ldr	r0, [sp, #16]
 80071a4:	f7fb f9b8 	bl	8002518 <__aeabi_i2d>
 80071a8:	002b      	movs	r3, r5
 80071aa:	0022      	movs	r2, r4
 80071ac:	f7f9 f94c 	bl	8000448 <__aeabi_dcmpeq>
 80071b0:	4243      	negs	r3, r0
 80071b2:	4158      	adcs	r0, r3
 80071b4:	9b04      	ldr	r3, [sp, #16]
 80071b6:	1a1b      	subs	r3, r3, r0
 80071b8:	9304      	str	r3, [sp, #16]
 80071ba:	2301      	movs	r3, #1
 80071bc:	9315      	str	r3, [sp, #84]	@ 0x54
 80071be:	9b04      	ldr	r3, [sp, #16]
 80071c0:	2b16      	cmp	r3, #22
 80071c2:	d810      	bhi.n	80071e6 <_dtoa_r+0x196>
 80071c4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80071c6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80071c8:	9a04      	ldr	r2, [sp, #16]
 80071ca:	4b83      	ldr	r3, [pc, #524]	@ (80073d8 <_dtoa_r+0x388>)
 80071cc:	00d2      	lsls	r2, r2, #3
 80071ce:	189b      	adds	r3, r3, r2
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	f7f9 f93e 	bl	8000454 <__aeabi_dcmplt>
 80071d8:	2800      	cmp	r0, #0
 80071da:	d047      	beq.n	800726c <_dtoa_r+0x21c>
 80071dc:	9b04      	ldr	r3, [sp, #16]
 80071de:	3b01      	subs	r3, #1
 80071e0:	9304      	str	r3, [sp, #16]
 80071e2:	2300      	movs	r3, #0
 80071e4:	9315      	str	r3, [sp, #84]	@ 0x54
 80071e6:	2200      	movs	r2, #0
 80071e8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80071ea:	9206      	str	r2, [sp, #24]
 80071ec:	1bdb      	subs	r3, r3, r7
 80071ee:	1e5a      	subs	r2, r3, #1
 80071f0:	d53e      	bpl.n	8007270 <_dtoa_r+0x220>
 80071f2:	2201      	movs	r2, #1
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	9306      	str	r3, [sp, #24]
 80071f8:	2300      	movs	r3, #0
 80071fa:	930d      	str	r3, [sp, #52]	@ 0x34
 80071fc:	9b04      	ldr	r3, [sp, #16]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	db38      	blt.n	8007274 <_dtoa_r+0x224>
 8007202:	9a04      	ldr	r2, [sp, #16]
 8007204:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007206:	4694      	mov	ip, r2
 8007208:	4463      	add	r3, ip
 800720a:	930d      	str	r3, [sp, #52]	@ 0x34
 800720c:	2300      	movs	r3, #0
 800720e:	9214      	str	r2, [sp, #80]	@ 0x50
 8007210:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007212:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007214:	2401      	movs	r4, #1
 8007216:	2b09      	cmp	r3, #9
 8007218:	d862      	bhi.n	80072e0 <_dtoa_r+0x290>
 800721a:	2b05      	cmp	r3, #5
 800721c:	dd02      	ble.n	8007224 <_dtoa_r+0x1d4>
 800721e:	2400      	movs	r4, #0
 8007220:	3b04      	subs	r3, #4
 8007222:	9322      	str	r3, [sp, #136]	@ 0x88
 8007224:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007226:	1e98      	subs	r0, r3, #2
 8007228:	2803      	cmp	r0, #3
 800722a:	d863      	bhi.n	80072f4 <_dtoa_r+0x2a4>
 800722c:	f7f8 ff72 	bl	8000114 <__gnu_thumb1_case_uqi>
 8007230:	2b385654 	.word	0x2b385654
 8007234:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8007236:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8007238:	18f6      	adds	r6, r6, r3
 800723a:	4b68      	ldr	r3, [pc, #416]	@ (80073dc <_dtoa_r+0x38c>)
 800723c:	18f2      	adds	r2, r6, r3
 800723e:	2a20      	cmp	r2, #32
 8007240:	dd0f      	ble.n	8007262 <_dtoa_r+0x212>
 8007242:	2340      	movs	r3, #64	@ 0x40
 8007244:	1a9b      	subs	r3, r3, r2
 8007246:	409f      	lsls	r7, r3
 8007248:	4b65      	ldr	r3, [pc, #404]	@ (80073e0 <_dtoa_r+0x390>)
 800724a:	0038      	movs	r0, r7
 800724c:	18f3      	adds	r3, r6, r3
 800724e:	40dc      	lsrs	r4, r3
 8007250:	4320      	orrs	r0, r4
 8007252:	f7fb f98f 	bl	8002574 <__aeabi_ui2d>
 8007256:	2201      	movs	r2, #1
 8007258:	4b62      	ldr	r3, [pc, #392]	@ (80073e4 <_dtoa_r+0x394>)
 800725a:	1e77      	subs	r7, r6, #1
 800725c:	18cb      	adds	r3, r1, r3
 800725e:	9218      	str	r2, [sp, #96]	@ 0x60
 8007260:	e776      	b.n	8007150 <_dtoa_r+0x100>
 8007262:	2320      	movs	r3, #32
 8007264:	0020      	movs	r0, r4
 8007266:	1a9b      	subs	r3, r3, r2
 8007268:	4098      	lsls	r0, r3
 800726a:	e7f2      	b.n	8007252 <_dtoa_r+0x202>
 800726c:	9015      	str	r0, [sp, #84]	@ 0x54
 800726e:	e7ba      	b.n	80071e6 <_dtoa_r+0x196>
 8007270:	920d      	str	r2, [sp, #52]	@ 0x34
 8007272:	e7c3      	b.n	80071fc <_dtoa_r+0x1ac>
 8007274:	9b06      	ldr	r3, [sp, #24]
 8007276:	9a04      	ldr	r2, [sp, #16]
 8007278:	1a9b      	subs	r3, r3, r2
 800727a:	9306      	str	r3, [sp, #24]
 800727c:	4253      	negs	r3, r2
 800727e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007280:	2300      	movs	r3, #0
 8007282:	9314      	str	r3, [sp, #80]	@ 0x50
 8007284:	e7c5      	b.n	8007212 <_dtoa_r+0x1c2>
 8007286:	2301      	movs	r3, #1
 8007288:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800728a:	9310      	str	r3, [sp, #64]	@ 0x40
 800728c:	4694      	mov	ip, r2
 800728e:	9b04      	ldr	r3, [sp, #16]
 8007290:	4463      	add	r3, ip
 8007292:	930e      	str	r3, [sp, #56]	@ 0x38
 8007294:	3301      	adds	r3, #1
 8007296:	9309      	str	r3, [sp, #36]	@ 0x24
 8007298:	2b00      	cmp	r3, #0
 800729a:	dc08      	bgt.n	80072ae <_dtoa_r+0x25e>
 800729c:	2301      	movs	r3, #1
 800729e:	e006      	b.n	80072ae <_dtoa_r+0x25e>
 80072a0:	2301      	movs	r3, #1
 80072a2:	9310      	str	r3, [sp, #64]	@ 0x40
 80072a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	dd28      	ble.n	80072fc <_dtoa_r+0x2ac>
 80072aa:	930e      	str	r3, [sp, #56]	@ 0x38
 80072ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80072ae:	9a03      	ldr	r2, [sp, #12]
 80072b0:	2100      	movs	r1, #0
 80072b2:	69d0      	ldr	r0, [r2, #28]
 80072b4:	2204      	movs	r2, #4
 80072b6:	0015      	movs	r5, r2
 80072b8:	3514      	adds	r5, #20
 80072ba:	429d      	cmp	r5, r3
 80072bc:	d923      	bls.n	8007306 <_dtoa_r+0x2b6>
 80072be:	6041      	str	r1, [r0, #4]
 80072c0:	9803      	ldr	r0, [sp, #12]
 80072c2:	f000 fe23 	bl	8007f0c <_Balloc>
 80072c6:	9008      	str	r0, [sp, #32]
 80072c8:	2800      	cmp	r0, #0
 80072ca:	d11f      	bne.n	800730c <_dtoa_r+0x2bc>
 80072cc:	21b0      	movs	r1, #176	@ 0xb0
 80072ce:	4b46      	ldr	r3, [pc, #280]	@ (80073e8 <_dtoa_r+0x398>)
 80072d0:	4831      	ldr	r0, [pc, #196]	@ (8007398 <_dtoa_r+0x348>)
 80072d2:	9a08      	ldr	r2, [sp, #32]
 80072d4:	31ff      	adds	r1, #255	@ 0xff
 80072d6:	e6d0      	b.n	800707a <_dtoa_r+0x2a>
 80072d8:	2300      	movs	r3, #0
 80072da:	e7e2      	b.n	80072a2 <_dtoa_r+0x252>
 80072dc:	2300      	movs	r3, #0
 80072de:	e7d3      	b.n	8007288 <_dtoa_r+0x238>
 80072e0:	2300      	movs	r3, #0
 80072e2:	9410      	str	r4, [sp, #64]	@ 0x40
 80072e4:	9322      	str	r3, [sp, #136]	@ 0x88
 80072e6:	3b01      	subs	r3, #1
 80072e8:	2200      	movs	r2, #0
 80072ea:	930e      	str	r3, [sp, #56]	@ 0x38
 80072ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80072ee:	3313      	adds	r3, #19
 80072f0:	9223      	str	r2, [sp, #140]	@ 0x8c
 80072f2:	e7dc      	b.n	80072ae <_dtoa_r+0x25e>
 80072f4:	2301      	movs	r3, #1
 80072f6:	9310      	str	r3, [sp, #64]	@ 0x40
 80072f8:	3b02      	subs	r3, #2
 80072fa:	e7f5      	b.n	80072e8 <_dtoa_r+0x298>
 80072fc:	2301      	movs	r3, #1
 80072fe:	001a      	movs	r2, r3
 8007300:	930e      	str	r3, [sp, #56]	@ 0x38
 8007302:	9309      	str	r3, [sp, #36]	@ 0x24
 8007304:	e7f4      	b.n	80072f0 <_dtoa_r+0x2a0>
 8007306:	3101      	adds	r1, #1
 8007308:	0052      	lsls	r2, r2, #1
 800730a:	e7d4      	b.n	80072b6 <_dtoa_r+0x266>
 800730c:	9b03      	ldr	r3, [sp, #12]
 800730e:	9a08      	ldr	r2, [sp, #32]
 8007310:	69db      	ldr	r3, [r3, #28]
 8007312:	601a      	str	r2, [r3, #0]
 8007314:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007316:	2b0e      	cmp	r3, #14
 8007318:	d900      	bls.n	800731c <_dtoa_r+0x2cc>
 800731a:	e0d6      	b.n	80074ca <_dtoa_r+0x47a>
 800731c:	2c00      	cmp	r4, #0
 800731e:	d100      	bne.n	8007322 <_dtoa_r+0x2d2>
 8007320:	e0d3      	b.n	80074ca <_dtoa_r+0x47a>
 8007322:	9b04      	ldr	r3, [sp, #16]
 8007324:	2b00      	cmp	r3, #0
 8007326:	dd63      	ble.n	80073f0 <_dtoa_r+0x3a0>
 8007328:	210f      	movs	r1, #15
 800732a:	9a04      	ldr	r2, [sp, #16]
 800732c:	4b2a      	ldr	r3, [pc, #168]	@ (80073d8 <_dtoa_r+0x388>)
 800732e:	400a      	ands	r2, r1
 8007330:	00d2      	lsls	r2, r2, #3
 8007332:	189b      	adds	r3, r3, r2
 8007334:	681e      	ldr	r6, [r3, #0]
 8007336:	685f      	ldr	r7, [r3, #4]
 8007338:	9b04      	ldr	r3, [sp, #16]
 800733a:	2402      	movs	r4, #2
 800733c:	111d      	asrs	r5, r3, #4
 800733e:	05db      	lsls	r3, r3, #23
 8007340:	d50a      	bpl.n	8007358 <_dtoa_r+0x308>
 8007342:	4b2a      	ldr	r3, [pc, #168]	@ (80073ec <_dtoa_r+0x39c>)
 8007344:	400d      	ands	r5, r1
 8007346:	6a1a      	ldr	r2, [r3, #32]
 8007348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800734a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800734c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800734e:	f7f9 fd5b 	bl	8000e08 <__aeabi_ddiv>
 8007352:	900a      	str	r0, [sp, #40]	@ 0x28
 8007354:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007356:	3401      	adds	r4, #1
 8007358:	4b24      	ldr	r3, [pc, #144]	@ (80073ec <_dtoa_r+0x39c>)
 800735a:	930c      	str	r3, [sp, #48]	@ 0x30
 800735c:	2d00      	cmp	r5, #0
 800735e:	d108      	bne.n	8007372 <_dtoa_r+0x322>
 8007360:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007362:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007364:	0032      	movs	r2, r6
 8007366:	003b      	movs	r3, r7
 8007368:	f7f9 fd4e 	bl	8000e08 <__aeabi_ddiv>
 800736c:	900a      	str	r0, [sp, #40]	@ 0x28
 800736e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007370:	e059      	b.n	8007426 <_dtoa_r+0x3d6>
 8007372:	2301      	movs	r3, #1
 8007374:	421d      	tst	r5, r3
 8007376:	d009      	beq.n	800738c <_dtoa_r+0x33c>
 8007378:	18e4      	adds	r4, r4, r3
 800737a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800737c:	0030      	movs	r0, r6
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	0039      	movs	r1, r7
 8007384:	f7fa f97a 	bl	800167c <__aeabi_dmul>
 8007388:	0006      	movs	r6, r0
 800738a:	000f      	movs	r7, r1
 800738c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800738e:	106d      	asrs	r5, r5, #1
 8007390:	3308      	adds	r3, #8
 8007392:	e7e2      	b.n	800735a <_dtoa_r+0x30a>
 8007394:	08009c4d 	.word	0x08009c4d
 8007398:	08009c64 	.word	0x08009c64
 800739c:	7ff00000 	.word	0x7ff00000
 80073a0:	0000270f 	.word	0x0000270f
 80073a4:	08009c49 	.word	0x08009c49
 80073a8:	08009c4c 	.word	0x08009c4c
 80073ac:	08009c1d 	.word	0x08009c1d
 80073b0:	08009c1c 	.word	0x08009c1c
 80073b4:	3ff00000 	.word	0x3ff00000
 80073b8:	fffffc01 	.word	0xfffffc01
 80073bc:	3ff80000 	.word	0x3ff80000
 80073c0:	636f4361 	.word	0x636f4361
 80073c4:	3fd287a7 	.word	0x3fd287a7
 80073c8:	8b60c8b3 	.word	0x8b60c8b3
 80073cc:	3fc68a28 	.word	0x3fc68a28
 80073d0:	509f79fb 	.word	0x509f79fb
 80073d4:	3fd34413 	.word	0x3fd34413
 80073d8:	08009db8 	.word	0x08009db8
 80073dc:	00000432 	.word	0x00000432
 80073e0:	00000412 	.word	0x00000412
 80073e4:	fe100000 	.word	0xfe100000
 80073e8:	08009cbc 	.word	0x08009cbc
 80073ec:	08009d90 	.word	0x08009d90
 80073f0:	9b04      	ldr	r3, [sp, #16]
 80073f2:	2402      	movs	r4, #2
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d016      	beq.n	8007426 <_dtoa_r+0x3d6>
 80073f8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80073fa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80073fc:	220f      	movs	r2, #15
 80073fe:	425d      	negs	r5, r3
 8007400:	402a      	ands	r2, r5
 8007402:	4bd5      	ldr	r3, [pc, #852]	@ (8007758 <_dtoa_r+0x708>)
 8007404:	00d2      	lsls	r2, r2, #3
 8007406:	189b      	adds	r3, r3, r2
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	f7fa f936 	bl	800167c <__aeabi_dmul>
 8007410:	2701      	movs	r7, #1
 8007412:	2300      	movs	r3, #0
 8007414:	900a      	str	r0, [sp, #40]	@ 0x28
 8007416:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007418:	4ed0      	ldr	r6, [pc, #832]	@ (800775c <_dtoa_r+0x70c>)
 800741a:	112d      	asrs	r5, r5, #4
 800741c:	2d00      	cmp	r5, #0
 800741e:	d000      	beq.n	8007422 <_dtoa_r+0x3d2>
 8007420:	e095      	b.n	800754e <_dtoa_r+0x4fe>
 8007422:	2b00      	cmp	r3, #0
 8007424:	d1a2      	bne.n	800736c <_dtoa_r+0x31c>
 8007426:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007428:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800742a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800742c:	2b00      	cmp	r3, #0
 800742e:	d100      	bne.n	8007432 <_dtoa_r+0x3e2>
 8007430:	e098      	b.n	8007564 <_dtoa_r+0x514>
 8007432:	2200      	movs	r2, #0
 8007434:	0030      	movs	r0, r6
 8007436:	0039      	movs	r1, r7
 8007438:	4bc9      	ldr	r3, [pc, #804]	@ (8007760 <_dtoa_r+0x710>)
 800743a:	f7f9 f80b 	bl	8000454 <__aeabi_dcmplt>
 800743e:	2800      	cmp	r0, #0
 8007440:	d100      	bne.n	8007444 <_dtoa_r+0x3f4>
 8007442:	e08f      	b.n	8007564 <_dtoa_r+0x514>
 8007444:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007446:	2b00      	cmp	r3, #0
 8007448:	d100      	bne.n	800744c <_dtoa_r+0x3fc>
 800744a:	e08b      	b.n	8007564 <_dtoa_r+0x514>
 800744c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800744e:	2b00      	cmp	r3, #0
 8007450:	dd37      	ble.n	80074c2 <_dtoa_r+0x472>
 8007452:	9b04      	ldr	r3, [sp, #16]
 8007454:	2200      	movs	r2, #0
 8007456:	3b01      	subs	r3, #1
 8007458:	930c      	str	r3, [sp, #48]	@ 0x30
 800745a:	0030      	movs	r0, r6
 800745c:	4bc1      	ldr	r3, [pc, #772]	@ (8007764 <_dtoa_r+0x714>)
 800745e:	0039      	movs	r1, r7
 8007460:	f7fa f90c 	bl	800167c <__aeabi_dmul>
 8007464:	900a      	str	r0, [sp, #40]	@ 0x28
 8007466:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007468:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800746a:	3401      	adds	r4, #1
 800746c:	0020      	movs	r0, r4
 800746e:	9311      	str	r3, [sp, #68]	@ 0x44
 8007470:	f7fb f852 	bl	8002518 <__aeabi_i2d>
 8007474:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007476:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007478:	f7fa f900 	bl	800167c <__aeabi_dmul>
 800747c:	4bba      	ldr	r3, [pc, #744]	@ (8007768 <_dtoa_r+0x718>)
 800747e:	2200      	movs	r2, #0
 8007480:	f7f9 f8fc 	bl	800067c <__aeabi_dadd>
 8007484:	4bb9      	ldr	r3, [pc, #740]	@ (800776c <_dtoa_r+0x71c>)
 8007486:	0006      	movs	r6, r0
 8007488:	18cf      	adds	r7, r1, r3
 800748a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800748c:	2b00      	cmp	r3, #0
 800748e:	d16d      	bne.n	800756c <_dtoa_r+0x51c>
 8007490:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007492:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007494:	2200      	movs	r2, #0
 8007496:	4bb6      	ldr	r3, [pc, #728]	@ (8007770 <_dtoa_r+0x720>)
 8007498:	f7fa fbd6 	bl	8001c48 <__aeabi_dsub>
 800749c:	0032      	movs	r2, r6
 800749e:	003b      	movs	r3, r7
 80074a0:	0004      	movs	r4, r0
 80074a2:	000d      	movs	r5, r1
 80074a4:	f7f8 ffea 	bl	800047c <__aeabi_dcmpgt>
 80074a8:	2800      	cmp	r0, #0
 80074aa:	d000      	beq.n	80074ae <_dtoa_r+0x45e>
 80074ac:	e2b6      	b.n	8007a1c <_dtoa_r+0x9cc>
 80074ae:	2180      	movs	r1, #128	@ 0x80
 80074b0:	0609      	lsls	r1, r1, #24
 80074b2:	187b      	adds	r3, r7, r1
 80074b4:	0032      	movs	r2, r6
 80074b6:	0020      	movs	r0, r4
 80074b8:	0029      	movs	r1, r5
 80074ba:	f7f8 ffcb 	bl	8000454 <__aeabi_dcmplt>
 80074be:	2800      	cmp	r0, #0
 80074c0:	d128      	bne.n	8007514 <_dtoa_r+0x4c4>
 80074c2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80074c4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80074c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80074c8:	940b      	str	r4, [sp, #44]	@ 0x2c
 80074ca:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	da00      	bge.n	80074d2 <_dtoa_r+0x482>
 80074d0:	e174      	b.n	80077bc <_dtoa_r+0x76c>
 80074d2:	9a04      	ldr	r2, [sp, #16]
 80074d4:	2a0e      	cmp	r2, #14
 80074d6:	dd00      	ble.n	80074da <_dtoa_r+0x48a>
 80074d8:	e170      	b.n	80077bc <_dtoa_r+0x76c>
 80074da:	4b9f      	ldr	r3, [pc, #636]	@ (8007758 <_dtoa_r+0x708>)
 80074dc:	00d2      	lsls	r2, r2, #3
 80074de:	189b      	adds	r3, r3, r2
 80074e0:	685c      	ldr	r4, [r3, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	9306      	str	r3, [sp, #24]
 80074e6:	9407      	str	r4, [sp, #28]
 80074e8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	db00      	blt.n	80074f0 <_dtoa_r+0x4a0>
 80074ee:	e0e7      	b.n	80076c0 <_dtoa_r+0x670>
 80074f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	dd00      	ble.n	80074f8 <_dtoa_r+0x4a8>
 80074f6:	e0e3      	b.n	80076c0 <_dtoa_r+0x670>
 80074f8:	d10c      	bne.n	8007514 <_dtoa_r+0x4c4>
 80074fa:	9806      	ldr	r0, [sp, #24]
 80074fc:	9907      	ldr	r1, [sp, #28]
 80074fe:	2200      	movs	r2, #0
 8007500:	4b9b      	ldr	r3, [pc, #620]	@ (8007770 <_dtoa_r+0x720>)
 8007502:	f7fa f8bb 	bl	800167c <__aeabi_dmul>
 8007506:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007508:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800750a:	f7f8 ffc1 	bl	8000490 <__aeabi_dcmpge>
 800750e:	2800      	cmp	r0, #0
 8007510:	d100      	bne.n	8007514 <_dtoa_r+0x4c4>
 8007512:	e286      	b.n	8007a22 <_dtoa_r+0x9d2>
 8007514:	2600      	movs	r6, #0
 8007516:	0037      	movs	r7, r6
 8007518:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800751a:	9c08      	ldr	r4, [sp, #32]
 800751c:	43db      	mvns	r3, r3
 800751e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007520:	9704      	str	r7, [sp, #16]
 8007522:	2700      	movs	r7, #0
 8007524:	0031      	movs	r1, r6
 8007526:	9803      	ldr	r0, [sp, #12]
 8007528:	f000 fd34 	bl	8007f94 <_Bfree>
 800752c:	9b04      	ldr	r3, [sp, #16]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d100      	bne.n	8007534 <_dtoa_r+0x4e4>
 8007532:	e0bb      	b.n	80076ac <_dtoa_r+0x65c>
 8007534:	2f00      	cmp	r7, #0
 8007536:	d005      	beq.n	8007544 <_dtoa_r+0x4f4>
 8007538:	429f      	cmp	r7, r3
 800753a:	d003      	beq.n	8007544 <_dtoa_r+0x4f4>
 800753c:	0039      	movs	r1, r7
 800753e:	9803      	ldr	r0, [sp, #12]
 8007540:	f000 fd28 	bl	8007f94 <_Bfree>
 8007544:	9904      	ldr	r1, [sp, #16]
 8007546:	9803      	ldr	r0, [sp, #12]
 8007548:	f000 fd24 	bl	8007f94 <_Bfree>
 800754c:	e0ae      	b.n	80076ac <_dtoa_r+0x65c>
 800754e:	423d      	tst	r5, r7
 8007550:	d005      	beq.n	800755e <_dtoa_r+0x50e>
 8007552:	6832      	ldr	r2, [r6, #0]
 8007554:	6873      	ldr	r3, [r6, #4]
 8007556:	f7fa f891 	bl	800167c <__aeabi_dmul>
 800755a:	003b      	movs	r3, r7
 800755c:	3401      	adds	r4, #1
 800755e:	106d      	asrs	r5, r5, #1
 8007560:	3608      	adds	r6, #8
 8007562:	e75b      	b.n	800741c <_dtoa_r+0x3cc>
 8007564:	9b04      	ldr	r3, [sp, #16]
 8007566:	930c      	str	r3, [sp, #48]	@ 0x30
 8007568:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800756a:	e77f      	b.n	800746c <_dtoa_r+0x41c>
 800756c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800756e:	4b7a      	ldr	r3, [pc, #488]	@ (8007758 <_dtoa_r+0x708>)
 8007570:	3a01      	subs	r2, #1
 8007572:	00d2      	lsls	r2, r2, #3
 8007574:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8007576:	189b      	adds	r3, r3, r2
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	2900      	cmp	r1, #0
 800757e:	d04c      	beq.n	800761a <_dtoa_r+0x5ca>
 8007580:	2000      	movs	r0, #0
 8007582:	497c      	ldr	r1, [pc, #496]	@ (8007774 <_dtoa_r+0x724>)
 8007584:	f7f9 fc40 	bl	8000e08 <__aeabi_ddiv>
 8007588:	0032      	movs	r2, r6
 800758a:	003b      	movs	r3, r7
 800758c:	f7fa fb5c 	bl	8001c48 <__aeabi_dsub>
 8007590:	9a08      	ldr	r2, [sp, #32]
 8007592:	0006      	movs	r6, r0
 8007594:	4694      	mov	ip, r2
 8007596:	000f      	movs	r7, r1
 8007598:	9b08      	ldr	r3, [sp, #32]
 800759a:	9316      	str	r3, [sp, #88]	@ 0x58
 800759c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800759e:	4463      	add	r3, ip
 80075a0:	9311      	str	r3, [sp, #68]	@ 0x44
 80075a2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80075a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80075a6:	f7fa ff7b 	bl	80024a0 <__aeabi_d2iz>
 80075aa:	0005      	movs	r5, r0
 80075ac:	f7fa ffb4 	bl	8002518 <__aeabi_i2d>
 80075b0:	0002      	movs	r2, r0
 80075b2:	000b      	movs	r3, r1
 80075b4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80075b6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80075b8:	f7fa fb46 	bl	8001c48 <__aeabi_dsub>
 80075bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80075be:	3530      	adds	r5, #48	@ 0x30
 80075c0:	1c5c      	adds	r4, r3, #1
 80075c2:	701d      	strb	r5, [r3, #0]
 80075c4:	0032      	movs	r2, r6
 80075c6:	003b      	movs	r3, r7
 80075c8:	900a      	str	r0, [sp, #40]	@ 0x28
 80075ca:	910b      	str	r1, [sp, #44]	@ 0x2c
 80075cc:	f7f8 ff42 	bl	8000454 <__aeabi_dcmplt>
 80075d0:	2800      	cmp	r0, #0
 80075d2:	d16b      	bne.n	80076ac <_dtoa_r+0x65c>
 80075d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80075d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075d8:	2000      	movs	r0, #0
 80075da:	4961      	ldr	r1, [pc, #388]	@ (8007760 <_dtoa_r+0x710>)
 80075dc:	f7fa fb34 	bl	8001c48 <__aeabi_dsub>
 80075e0:	0032      	movs	r2, r6
 80075e2:	003b      	movs	r3, r7
 80075e4:	f7f8 ff36 	bl	8000454 <__aeabi_dcmplt>
 80075e8:	2800      	cmp	r0, #0
 80075ea:	d000      	beq.n	80075ee <_dtoa_r+0x59e>
 80075ec:	e0c6      	b.n	800777c <_dtoa_r+0x72c>
 80075ee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80075f0:	42a3      	cmp	r3, r4
 80075f2:	d100      	bne.n	80075f6 <_dtoa_r+0x5a6>
 80075f4:	e765      	b.n	80074c2 <_dtoa_r+0x472>
 80075f6:	2200      	movs	r2, #0
 80075f8:	0030      	movs	r0, r6
 80075fa:	0039      	movs	r1, r7
 80075fc:	4b59      	ldr	r3, [pc, #356]	@ (8007764 <_dtoa_r+0x714>)
 80075fe:	f7fa f83d 	bl	800167c <__aeabi_dmul>
 8007602:	2200      	movs	r2, #0
 8007604:	0006      	movs	r6, r0
 8007606:	000f      	movs	r7, r1
 8007608:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800760a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800760c:	4b55      	ldr	r3, [pc, #340]	@ (8007764 <_dtoa_r+0x714>)
 800760e:	f7fa f835 	bl	800167c <__aeabi_dmul>
 8007612:	9416      	str	r4, [sp, #88]	@ 0x58
 8007614:	900a      	str	r0, [sp, #40]	@ 0x28
 8007616:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007618:	e7c3      	b.n	80075a2 <_dtoa_r+0x552>
 800761a:	0030      	movs	r0, r6
 800761c:	0039      	movs	r1, r7
 800761e:	f7fa f82d 	bl	800167c <__aeabi_dmul>
 8007622:	9d08      	ldr	r5, [sp, #32]
 8007624:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007626:	002b      	movs	r3, r5
 8007628:	4694      	mov	ip, r2
 800762a:	9016      	str	r0, [sp, #88]	@ 0x58
 800762c:	9117      	str	r1, [sp, #92]	@ 0x5c
 800762e:	4463      	add	r3, ip
 8007630:	9319      	str	r3, [sp, #100]	@ 0x64
 8007632:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007634:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007636:	f7fa ff33 	bl	80024a0 <__aeabi_d2iz>
 800763a:	0004      	movs	r4, r0
 800763c:	f7fa ff6c 	bl	8002518 <__aeabi_i2d>
 8007640:	000b      	movs	r3, r1
 8007642:	0002      	movs	r2, r0
 8007644:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007646:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007648:	f7fa fafe 	bl	8001c48 <__aeabi_dsub>
 800764c:	3430      	adds	r4, #48	@ 0x30
 800764e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007650:	702c      	strb	r4, [r5, #0]
 8007652:	3501      	adds	r5, #1
 8007654:	0006      	movs	r6, r0
 8007656:	000f      	movs	r7, r1
 8007658:	42ab      	cmp	r3, r5
 800765a:	d12a      	bne.n	80076b2 <_dtoa_r+0x662>
 800765c:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800765e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8007660:	9b08      	ldr	r3, [sp, #32]
 8007662:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8007664:	469c      	mov	ip, r3
 8007666:	2200      	movs	r2, #0
 8007668:	4b42      	ldr	r3, [pc, #264]	@ (8007774 <_dtoa_r+0x724>)
 800766a:	4464      	add	r4, ip
 800766c:	f7f9 f806 	bl	800067c <__aeabi_dadd>
 8007670:	0002      	movs	r2, r0
 8007672:	000b      	movs	r3, r1
 8007674:	0030      	movs	r0, r6
 8007676:	0039      	movs	r1, r7
 8007678:	f7f8 ff00 	bl	800047c <__aeabi_dcmpgt>
 800767c:	2800      	cmp	r0, #0
 800767e:	d000      	beq.n	8007682 <_dtoa_r+0x632>
 8007680:	e07c      	b.n	800777c <_dtoa_r+0x72c>
 8007682:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007684:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007686:	2000      	movs	r0, #0
 8007688:	493a      	ldr	r1, [pc, #232]	@ (8007774 <_dtoa_r+0x724>)
 800768a:	f7fa fadd 	bl	8001c48 <__aeabi_dsub>
 800768e:	0002      	movs	r2, r0
 8007690:	000b      	movs	r3, r1
 8007692:	0030      	movs	r0, r6
 8007694:	0039      	movs	r1, r7
 8007696:	f7f8 fedd 	bl	8000454 <__aeabi_dcmplt>
 800769a:	2800      	cmp	r0, #0
 800769c:	d100      	bne.n	80076a0 <_dtoa_r+0x650>
 800769e:	e710      	b.n	80074c2 <_dtoa_r+0x472>
 80076a0:	0023      	movs	r3, r4
 80076a2:	3c01      	subs	r4, #1
 80076a4:	7822      	ldrb	r2, [r4, #0]
 80076a6:	2a30      	cmp	r2, #48	@ 0x30
 80076a8:	d0fa      	beq.n	80076a0 <_dtoa_r+0x650>
 80076aa:	001c      	movs	r4, r3
 80076ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80076ae:	9304      	str	r3, [sp, #16]
 80076b0:	e042      	b.n	8007738 <_dtoa_r+0x6e8>
 80076b2:	2200      	movs	r2, #0
 80076b4:	4b2b      	ldr	r3, [pc, #172]	@ (8007764 <_dtoa_r+0x714>)
 80076b6:	f7f9 ffe1 	bl	800167c <__aeabi_dmul>
 80076ba:	900a      	str	r0, [sp, #40]	@ 0x28
 80076bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80076be:	e7b8      	b.n	8007632 <_dtoa_r+0x5e2>
 80076c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076c2:	9d08      	ldr	r5, [sp, #32]
 80076c4:	3b01      	subs	r3, #1
 80076c6:	195b      	adds	r3, r3, r5
 80076c8:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80076ca:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80076cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80076ce:	9a06      	ldr	r2, [sp, #24]
 80076d0:	9b07      	ldr	r3, [sp, #28]
 80076d2:	0030      	movs	r0, r6
 80076d4:	0039      	movs	r1, r7
 80076d6:	f7f9 fb97 	bl	8000e08 <__aeabi_ddiv>
 80076da:	f7fa fee1 	bl	80024a0 <__aeabi_d2iz>
 80076de:	9009      	str	r0, [sp, #36]	@ 0x24
 80076e0:	f7fa ff1a 	bl	8002518 <__aeabi_i2d>
 80076e4:	9a06      	ldr	r2, [sp, #24]
 80076e6:	9b07      	ldr	r3, [sp, #28]
 80076e8:	f7f9 ffc8 	bl	800167c <__aeabi_dmul>
 80076ec:	0002      	movs	r2, r0
 80076ee:	000b      	movs	r3, r1
 80076f0:	0030      	movs	r0, r6
 80076f2:	0039      	movs	r1, r7
 80076f4:	f7fa faa8 	bl	8001c48 <__aeabi_dsub>
 80076f8:	002b      	movs	r3, r5
 80076fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076fc:	3501      	adds	r5, #1
 80076fe:	3230      	adds	r2, #48	@ 0x30
 8007700:	701a      	strb	r2, [r3, #0]
 8007702:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007704:	002c      	movs	r4, r5
 8007706:	429a      	cmp	r2, r3
 8007708:	d14b      	bne.n	80077a2 <_dtoa_r+0x752>
 800770a:	0002      	movs	r2, r0
 800770c:	000b      	movs	r3, r1
 800770e:	f7f8 ffb5 	bl	800067c <__aeabi_dadd>
 8007712:	9a06      	ldr	r2, [sp, #24]
 8007714:	9b07      	ldr	r3, [sp, #28]
 8007716:	0006      	movs	r6, r0
 8007718:	000f      	movs	r7, r1
 800771a:	f7f8 feaf 	bl	800047c <__aeabi_dcmpgt>
 800771e:	2800      	cmp	r0, #0
 8007720:	d12a      	bne.n	8007778 <_dtoa_r+0x728>
 8007722:	9a06      	ldr	r2, [sp, #24]
 8007724:	9b07      	ldr	r3, [sp, #28]
 8007726:	0030      	movs	r0, r6
 8007728:	0039      	movs	r1, r7
 800772a:	f7f8 fe8d 	bl	8000448 <__aeabi_dcmpeq>
 800772e:	2800      	cmp	r0, #0
 8007730:	d002      	beq.n	8007738 <_dtoa_r+0x6e8>
 8007732:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007734:	07dd      	lsls	r5, r3, #31
 8007736:	d41f      	bmi.n	8007778 <_dtoa_r+0x728>
 8007738:	9905      	ldr	r1, [sp, #20]
 800773a:	9803      	ldr	r0, [sp, #12]
 800773c:	f000 fc2a 	bl	8007f94 <_Bfree>
 8007740:	2300      	movs	r3, #0
 8007742:	7023      	strb	r3, [r4, #0]
 8007744:	9b04      	ldr	r3, [sp, #16]
 8007746:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007748:	3301      	adds	r3, #1
 800774a:	6013      	str	r3, [r2, #0]
 800774c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800774e:	2b00      	cmp	r3, #0
 8007750:	d100      	bne.n	8007754 <_dtoa_r+0x704>
 8007752:	e4c7      	b.n	80070e4 <_dtoa_r+0x94>
 8007754:	601c      	str	r4, [r3, #0]
 8007756:	e4c5      	b.n	80070e4 <_dtoa_r+0x94>
 8007758:	08009db8 	.word	0x08009db8
 800775c:	08009d90 	.word	0x08009d90
 8007760:	3ff00000 	.word	0x3ff00000
 8007764:	40240000 	.word	0x40240000
 8007768:	401c0000 	.word	0x401c0000
 800776c:	fcc00000 	.word	0xfcc00000
 8007770:	40140000 	.word	0x40140000
 8007774:	3fe00000 	.word	0x3fe00000
 8007778:	9b04      	ldr	r3, [sp, #16]
 800777a:	930c      	str	r3, [sp, #48]	@ 0x30
 800777c:	0023      	movs	r3, r4
 800777e:	001c      	movs	r4, r3
 8007780:	3b01      	subs	r3, #1
 8007782:	781a      	ldrb	r2, [r3, #0]
 8007784:	2a39      	cmp	r2, #57	@ 0x39
 8007786:	d108      	bne.n	800779a <_dtoa_r+0x74a>
 8007788:	9a08      	ldr	r2, [sp, #32]
 800778a:	429a      	cmp	r2, r3
 800778c:	d1f7      	bne.n	800777e <_dtoa_r+0x72e>
 800778e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007790:	9908      	ldr	r1, [sp, #32]
 8007792:	3201      	adds	r2, #1
 8007794:	920c      	str	r2, [sp, #48]	@ 0x30
 8007796:	2230      	movs	r2, #48	@ 0x30
 8007798:	700a      	strb	r2, [r1, #0]
 800779a:	781a      	ldrb	r2, [r3, #0]
 800779c:	3201      	adds	r2, #1
 800779e:	701a      	strb	r2, [r3, #0]
 80077a0:	e784      	b.n	80076ac <_dtoa_r+0x65c>
 80077a2:	2200      	movs	r2, #0
 80077a4:	4bc6      	ldr	r3, [pc, #792]	@ (8007ac0 <_dtoa_r+0xa70>)
 80077a6:	f7f9 ff69 	bl	800167c <__aeabi_dmul>
 80077aa:	2200      	movs	r2, #0
 80077ac:	2300      	movs	r3, #0
 80077ae:	0006      	movs	r6, r0
 80077b0:	000f      	movs	r7, r1
 80077b2:	f7f8 fe49 	bl	8000448 <__aeabi_dcmpeq>
 80077b6:	2800      	cmp	r0, #0
 80077b8:	d089      	beq.n	80076ce <_dtoa_r+0x67e>
 80077ba:	e7bd      	b.n	8007738 <_dtoa_r+0x6e8>
 80077bc:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80077be:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80077c0:	9c06      	ldr	r4, [sp, #24]
 80077c2:	2f00      	cmp	r7, #0
 80077c4:	d014      	beq.n	80077f0 <_dtoa_r+0x7a0>
 80077c6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80077c8:	2a01      	cmp	r2, #1
 80077ca:	dd00      	ble.n	80077ce <_dtoa_r+0x77e>
 80077cc:	e0e4      	b.n	8007998 <_dtoa_r+0x948>
 80077ce:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80077d0:	2a00      	cmp	r2, #0
 80077d2:	d100      	bne.n	80077d6 <_dtoa_r+0x786>
 80077d4:	e0da      	b.n	800798c <_dtoa_r+0x93c>
 80077d6:	4abb      	ldr	r2, [pc, #748]	@ (8007ac4 <_dtoa_r+0xa74>)
 80077d8:	189b      	adds	r3, r3, r2
 80077da:	9a06      	ldr	r2, [sp, #24]
 80077dc:	2101      	movs	r1, #1
 80077de:	18d2      	adds	r2, r2, r3
 80077e0:	9206      	str	r2, [sp, #24]
 80077e2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80077e4:	9803      	ldr	r0, [sp, #12]
 80077e6:	18d3      	adds	r3, r2, r3
 80077e8:	930d      	str	r3, [sp, #52]	@ 0x34
 80077ea:	f000 fc8b 	bl	8008104 <__i2b>
 80077ee:	0007      	movs	r7, r0
 80077f0:	2c00      	cmp	r4, #0
 80077f2:	d00e      	beq.n	8007812 <_dtoa_r+0x7c2>
 80077f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	dd0b      	ble.n	8007812 <_dtoa_r+0x7c2>
 80077fa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80077fc:	0023      	movs	r3, r4
 80077fe:	4294      	cmp	r4, r2
 8007800:	dd00      	ble.n	8007804 <_dtoa_r+0x7b4>
 8007802:	0013      	movs	r3, r2
 8007804:	9a06      	ldr	r2, [sp, #24]
 8007806:	1ae4      	subs	r4, r4, r3
 8007808:	1ad2      	subs	r2, r2, r3
 800780a:	9206      	str	r2, [sp, #24]
 800780c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800780e:	1ad3      	subs	r3, r2, r3
 8007810:	930d      	str	r3, [sp, #52]	@ 0x34
 8007812:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007814:	2b00      	cmp	r3, #0
 8007816:	d021      	beq.n	800785c <_dtoa_r+0x80c>
 8007818:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800781a:	2b00      	cmp	r3, #0
 800781c:	d100      	bne.n	8007820 <_dtoa_r+0x7d0>
 800781e:	e0d3      	b.n	80079c8 <_dtoa_r+0x978>
 8007820:	9e05      	ldr	r6, [sp, #20]
 8007822:	2d00      	cmp	r5, #0
 8007824:	d014      	beq.n	8007850 <_dtoa_r+0x800>
 8007826:	0039      	movs	r1, r7
 8007828:	002a      	movs	r2, r5
 800782a:	9803      	ldr	r0, [sp, #12]
 800782c:	f000 fd2c 	bl	8008288 <__pow5mult>
 8007830:	9a05      	ldr	r2, [sp, #20]
 8007832:	0001      	movs	r1, r0
 8007834:	0007      	movs	r7, r0
 8007836:	9803      	ldr	r0, [sp, #12]
 8007838:	f000 fc7c 	bl	8008134 <__multiply>
 800783c:	0006      	movs	r6, r0
 800783e:	9905      	ldr	r1, [sp, #20]
 8007840:	9803      	ldr	r0, [sp, #12]
 8007842:	f000 fba7 	bl	8007f94 <_Bfree>
 8007846:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007848:	9605      	str	r6, [sp, #20]
 800784a:	1b5b      	subs	r3, r3, r5
 800784c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800784e:	d005      	beq.n	800785c <_dtoa_r+0x80c>
 8007850:	0031      	movs	r1, r6
 8007852:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007854:	9803      	ldr	r0, [sp, #12]
 8007856:	f000 fd17 	bl	8008288 <__pow5mult>
 800785a:	9005      	str	r0, [sp, #20]
 800785c:	2101      	movs	r1, #1
 800785e:	9803      	ldr	r0, [sp, #12]
 8007860:	f000 fc50 	bl	8008104 <__i2b>
 8007864:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007866:	0006      	movs	r6, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d100      	bne.n	800786e <_dtoa_r+0x81e>
 800786c:	e1bc      	b.n	8007be8 <_dtoa_r+0xb98>
 800786e:	001a      	movs	r2, r3
 8007870:	0001      	movs	r1, r0
 8007872:	9803      	ldr	r0, [sp, #12]
 8007874:	f000 fd08 	bl	8008288 <__pow5mult>
 8007878:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800787a:	0006      	movs	r6, r0
 800787c:	2500      	movs	r5, #0
 800787e:	2b01      	cmp	r3, #1
 8007880:	dc16      	bgt.n	80078b0 <_dtoa_r+0x860>
 8007882:	2500      	movs	r5, #0
 8007884:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007886:	42ab      	cmp	r3, r5
 8007888:	d10e      	bne.n	80078a8 <_dtoa_r+0x858>
 800788a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800788c:	031b      	lsls	r3, r3, #12
 800788e:	42ab      	cmp	r3, r5
 8007890:	d10a      	bne.n	80078a8 <_dtoa_r+0x858>
 8007892:	4b8d      	ldr	r3, [pc, #564]	@ (8007ac8 <_dtoa_r+0xa78>)
 8007894:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007896:	4213      	tst	r3, r2
 8007898:	d006      	beq.n	80078a8 <_dtoa_r+0x858>
 800789a:	9b06      	ldr	r3, [sp, #24]
 800789c:	3501      	adds	r5, #1
 800789e:	3301      	adds	r3, #1
 80078a0:	9306      	str	r3, [sp, #24]
 80078a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80078a4:	3301      	adds	r3, #1
 80078a6:	930d      	str	r3, [sp, #52]	@ 0x34
 80078a8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80078aa:	2001      	movs	r0, #1
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d008      	beq.n	80078c2 <_dtoa_r+0x872>
 80078b0:	6933      	ldr	r3, [r6, #16]
 80078b2:	3303      	adds	r3, #3
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	18f3      	adds	r3, r6, r3
 80078b8:	6858      	ldr	r0, [r3, #4]
 80078ba:	f000 fbd3 	bl	8008064 <__hi0bits>
 80078be:	2320      	movs	r3, #32
 80078c0:	1a18      	subs	r0, r3, r0
 80078c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80078c4:	1818      	adds	r0, r3, r0
 80078c6:	0002      	movs	r2, r0
 80078c8:	231f      	movs	r3, #31
 80078ca:	401a      	ands	r2, r3
 80078cc:	4218      	tst	r0, r3
 80078ce:	d100      	bne.n	80078d2 <_dtoa_r+0x882>
 80078d0:	e081      	b.n	80079d6 <_dtoa_r+0x986>
 80078d2:	3301      	adds	r3, #1
 80078d4:	1a9b      	subs	r3, r3, r2
 80078d6:	2b04      	cmp	r3, #4
 80078d8:	dd79      	ble.n	80079ce <_dtoa_r+0x97e>
 80078da:	231c      	movs	r3, #28
 80078dc:	1a9b      	subs	r3, r3, r2
 80078de:	9a06      	ldr	r2, [sp, #24]
 80078e0:	18e4      	adds	r4, r4, r3
 80078e2:	18d2      	adds	r2, r2, r3
 80078e4:	9206      	str	r2, [sp, #24]
 80078e6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80078e8:	18d3      	adds	r3, r2, r3
 80078ea:	930d      	str	r3, [sp, #52]	@ 0x34
 80078ec:	9b06      	ldr	r3, [sp, #24]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	dd05      	ble.n	80078fe <_dtoa_r+0x8ae>
 80078f2:	001a      	movs	r2, r3
 80078f4:	9905      	ldr	r1, [sp, #20]
 80078f6:	9803      	ldr	r0, [sp, #12]
 80078f8:	f000 fd22 	bl	8008340 <__lshift>
 80078fc:	9005      	str	r0, [sp, #20]
 80078fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007900:	2b00      	cmp	r3, #0
 8007902:	dd05      	ble.n	8007910 <_dtoa_r+0x8c0>
 8007904:	0031      	movs	r1, r6
 8007906:	001a      	movs	r2, r3
 8007908:	9803      	ldr	r0, [sp, #12]
 800790a:	f000 fd19 	bl	8008340 <__lshift>
 800790e:	0006      	movs	r6, r0
 8007910:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007912:	2b00      	cmp	r3, #0
 8007914:	d061      	beq.n	80079da <_dtoa_r+0x98a>
 8007916:	0031      	movs	r1, r6
 8007918:	9805      	ldr	r0, [sp, #20]
 800791a:	f000 fd7d 	bl	8008418 <__mcmp>
 800791e:	2800      	cmp	r0, #0
 8007920:	da5b      	bge.n	80079da <_dtoa_r+0x98a>
 8007922:	9b04      	ldr	r3, [sp, #16]
 8007924:	220a      	movs	r2, #10
 8007926:	3b01      	subs	r3, #1
 8007928:	930c      	str	r3, [sp, #48]	@ 0x30
 800792a:	9905      	ldr	r1, [sp, #20]
 800792c:	2300      	movs	r3, #0
 800792e:	9803      	ldr	r0, [sp, #12]
 8007930:	f000 fb54 	bl	8007fdc <__multadd>
 8007934:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007936:	9005      	str	r0, [sp, #20]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d100      	bne.n	800793e <_dtoa_r+0x8ee>
 800793c:	e15b      	b.n	8007bf6 <_dtoa_r+0xba6>
 800793e:	2300      	movs	r3, #0
 8007940:	0039      	movs	r1, r7
 8007942:	220a      	movs	r2, #10
 8007944:	9803      	ldr	r0, [sp, #12]
 8007946:	f000 fb49 	bl	8007fdc <__multadd>
 800794a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800794c:	0007      	movs	r7, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	dc4d      	bgt.n	80079ee <_dtoa_r+0x99e>
 8007952:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007954:	2b02      	cmp	r3, #2
 8007956:	dd46      	ble.n	80079e6 <_dtoa_r+0x996>
 8007958:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800795a:	2b00      	cmp	r3, #0
 800795c:	d000      	beq.n	8007960 <_dtoa_r+0x910>
 800795e:	e5db      	b.n	8007518 <_dtoa_r+0x4c8>
 8007960:	0031      	movs	r1, r6
 8007962:	2205      	movs	r2, #5
 8007964:	9803      	ldr	r0, [sp, #12]
 8007966:	f000 fb39 	bl	8007fdc <__multadd>
 800796a:	0006      	movs	r6, r0
 800796c:	0001      	movs	r1, r0
 800796e:	9805      	ldr	r0, [sp, #20]
 8007970:	f000 fd52 	bl	8008418 <__mcmp>
 8007974:	2800      	cmp	r0, #0
 8007976:	dc00      	bgt.n	800797a <_dtoa_r+0x92a>
 8007978:	e5ce      	b.n	8007518 <_dtoa_r+0x4c8>
 800797a:	9b08      	ldr	r3, [sp, #32]
 800797c:	9a08      	ldr	r2, [sp, #32]
 800797e:	1c5c      	adds	r4, r3, #1
 8007980:	2331      	movs	r3, #49	@ 0x31
 8007982:	7013      	strb	r3, [r2, #0]
 8007984:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007986:	3301      	adds	r3, #1
 8007988:	930c      	str	r3, [sp, #48]	@ 0x30
 800798a:	e5c9      	b.n	8007520 <_dtoa_r+0x4d0>
 800798c:	2336      	movs	r3, #54	@ 0x36
 800798e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007990:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8007992:	1a9b      	subs	r3, r3, r2
 8007994:	9c06      	ldr	r4, [sp, #24]
 8007996:	e720      	b.n	80077da <_dtoa_r+0x78a>
 8007998:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800799a:	1e5d      	subs	r5, r3, #1
 800799c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800799e:	42ab      	cmp	r3, r5
 80079a0:	db08      	blt.n	80079b4 <_dtoa_r+0x964>
 80079a2:	1b5d      	subs	r5, r3, r5
 80079a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	daf4      	bge.n	8007994 <_dtoa_r+0x944>
 80079aa:	9b06      	ldr	r3, [sp, #24]
 80079ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079ae:	1a9c      	subs	r4, r3, r2
 80079b0:	2300      	movs	r3, #0
 80079b2:	e712      	b.n	80077da <_dtoa_r+0x78a>
 80079b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80079b8:	1aeb      	subs	r3, r5, r3
 80079ba:	18d3      	adds	r3, r2, r3
 80079bc:	9314      	str	r3, [sp, #80]	@ 0x50
 80079be:	950f      	str	r5, [sp, #60]	@ 0x3c
 80079c0:	9c06      	ldr	r4, [sp, #24]
 80079c2:	2500      	movs	r5, #0
 80079c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079c6:	e708      	b.n	80077da <_dtoa_r+0x78a>
 80079c8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80079ca:	9905      	ldr	r1, [sp, #20]
 80079cc:	e742      	b.n	8007854 <_dtoa_r+0x804>
 80079ce:	2b04      	cmp	r3, #4
 80079d0:	d08c      	beq.n	80078ec <_dtoa_r+0x89c>
 80079d2:	331c      	adds	r3, #28
 80079d4:	e783      	b.n	80078de <_dtoa_r+0x88e>
 80079d6:	0013      	movs	r3, r2
 80079d8:	e7fb      	b.n	80079d2 <_dtoa_r+0x982>
 80079da:	9b04      	ldr	r3, [sp, #16]
 80079dc:	930c      	str	r3, [sp, #48]	@ 0x30
 80079de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079e0:	930e      	str	r3, [sp, #56]	@ 0x38
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	ddb5      	ble.n	8007952 <_dtoa_r+0x902>
 80079e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d100      	bne.n	80079ee <_dtoa_r+0x99e>
 80079ec:	e107      	b.n	8007bfe <_dtoa_r+0xbae>
 80079ee:	2c00      	cmp	r4, #0
 80079f0:	dd05      	ble.n	80079fe <_dtoa_r+0x9ae>
 80079f2:	0039      	movs	r1, r7
 80079f4:	0022      	movs	r2, r4
 80079f6:	9803      	ldr	r0, [sp, #12]
 80079f8:	f000 fca2 	bl	8008340 <__lshift>
 80079fc:	0007      	movs	r7, r0
 80079fe:	9704      	str	r7, [sp, #16]
 8007a00:	2d00      	cmp	r5, #0
 8007a02:	d020      	beq.n	8007a46 <_dtoa_r+0x9f6>
 8007a04:	6879      	ldr	r1, [r7, #4]
 8007a06:	9803      	ldr	r0, [sp, #12]
 8007a08:	f000 fa80 	bl	8007f0c <_Balloc>
 8007a0c:	1e04      	subs	r4, r0, #0
 8007a0e:	d10c      	bne.n	8007a2a <_dtoa_r+0x9da>
 8007a10:	0022      	movs	r2, r4
 8007a12:	4b2e      	ldr	r3, [pc, #184]	@ (8007acc <_dtoa_r+0xa7c>)
 8007a14:	482e      	ldr	r0, [pc, #184]	@ (8007ad0 <_dtoa_r+0xa80>)
 8007a16:	492f      	ldr	r1, [pc, #188]	@ (8007ad4 <_dtoa_r+0xa84>)
 8007a18:	f7ff fb2f 	bl	800707a <_dtoa_r+0x2a>
 8007a1c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8007a1e:	0037      	movs	r7, r6
 8007a20:	e7ab      	b.n	800797a <_dtoa_r+0x92a>
 8007a22:	9b04      	ldr	r3, [sp, #16]
 8007a24:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8007a26:	930c      	str	r3, [sp, #48]	@ 0x30
 8007a28:	e7f9      	b.n	8007a1e <_dtoa_r+0x9ce>
 8007a2a:	0039      	movs	r1, r7
 8007a2c:	693a      	ldr	r2, [r7, #16]
 8007a2e:	310c      	adds	r1, #12
 8007a30:	3202      	adds	r2, #2
 8007a32:	0092      	lsls	r2, r2, #2
 8007a34:	300c      	adds	r0, #12
 8007a36:	f000 feb1 	bl	800879c <memcpy>
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	0021      	movs	r1, r4
 8007a3e:	9803      	ldr	r0, [sp, #12]
 8007a40:	f000 fc7e 	bl	8008340 <__lshift>
 8007a44:	9004      	str	r0, [sp, #16]
 8007a46:	9b08      	ldr	r3, [sp, #32]
 8007a48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007a4a:	9306      	str	r3, [sp, #24]
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	189b      	adds	r3, r3, r2
 8007a50:	2201      	movs	r2, #1
 8007a52:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007a54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a56:	4013      	ands	r3, r2
 8007a58:	930e      	str	r3, [sp, #56]	@ 0x38
 8007a5a:	0031      	movs	r1, r6
 8007a5c:	9805      	ldr	r0, [sp, #20]
 8007a5e:	f7ff fa72 	bl	8006f46 <quorem>
 8007a62:	0039      	movs	r1, r7
 8007a64:	0005      	movs	r5, r0
 8007a66:	900a      	str	r0, [sp, #40]	@ 0x28
 8007a68:	9805      	ldr	r0, [sp, #20]
 8007a6a:	f000 fcd5 	bl	8008418 <__mcmp>
 8007a6e:	9a04      	ldr	r2, [sp, #16]
 8007a70:	900d      	str	r0, [sp, #52]	@ 0x34
 8007a72:	0031      	movs	r1, r6
 8007a74:	9803      	ldr	r0, [sp, #12]
 8007a76:	f000 fceb 	bl	8008450 <__mdiff>
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	68c3      	ldr	r3, [r0, #12]
 8007a7e:	0004      	movs	r4, r0
 8007a80:	3530      	adds	r5, #48	@ 0x30
 8007a82:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d104      	bne.n	8007a92 <_dtoa_r+0xa42>
 8007a88:	0001      	movs	r1, r0
 8007a8a:	9805      	ldr	r0, [sp, #20]
 8007a8c:	f000 fcc4 	bl	8008418 <__mcmp>
 8007a90:	9009      	str	r0, [sp, #36]	@ 0x24
 8007a92:	0021      	movs	r1, r4
 8007a94:	9803      	ldr	r0, [sp, #12]
 8007a96:	f000 fa7d 	bl	8007f94 <_Bfree>
 8007a9a:	9b06      	ldr	r3, [sp, #24]
 8007a9c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007a9e:	1c5c      	adds	r4, r3, #1
 8007aa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	d116      	bne.n	8007ad8 <_dtoa_r+0xa88>
 8007aaa:	2d39      	cmp	r5, #57	@ 0x39
 8007aac:	d02f      	beq.n	8007b0e <_dtoa_r+0xabe>
 8007aae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	dd01      	ble.n	8007ab8 <_dtoa_r+0xa68>
 8007ab4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8007ab6:	3531      	adds	r5, #49	@ 0x31
 8007ab8:	9b06      	ldr	r3, [sp, #24]
 8007aba:	701d      	strb	r5, [r3, #0]
 8007abc:	e532      	b.n	8007524 <_dtoa_r+0x4d4>
 8007abe:	46c0      	nop			@ (mov r8, r8)
 8007ac0:	40240000 	.word	0x40240000
 8007ac4:	00000433 	.word	0x00000433
 8007ac8:	7ff00000 	.word	0x7ff00000
 8007acc:	08009cbc 	.word	0x08009cbc
 8007ad0:	08009c64 	.word	0x08009c64
 8007ad4:	000002ef 	.word	0x000002ef
 8007ad8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	db04      	blt.n	8007ae8 <_dtoa_r+0xa98>
 8007ade:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	d11e      	bne.n	8007b26 <_dtoa_r+0xad6>
 8007ae8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	dde4      	ble.n	8007ab8 <_dtoa_r+0xa68>
 8007aee:	9905      	ldr	r1, [sp, #20]
 8007af0:	2201      	movs	r2, #1
 8007af2:	9803      	ldr	r0, [sp, #12]
 8007af4:	f000 fc24 	bl	8008340 <__lshift>
 8007af8:	0031      	movs	r1, r6
 8007afa:	9005      	str	r0, [sp, #20]
 8007afc:	f000 fc8c 	bl	8008418 <__mcmp>
 8007b00:	2800      	cmp	r0, #0
 8007b02:	dc02      	bgt.n	8007b0a <_dtoa_r+0xaba>
 8007b04:	d1d8      	bne.n	8007ab8 <_dtoa_r+0xa68>
 8007b06:	07eb      	lsls	r3, r5, #31
 8007b08:	d5d6      	bpl.n	8007ab8 <_dtoa_r+0xa68>
 8007b0a:	2d39      	cmp	r5, #57	@ 0x39
 8007b0c:	d1d2      	bne.n	8007ab4 <_dtoa_r+0xa64>
 8007b0e:	2339      	movs	r3, #57	@ 0x39
 8007b10:	9a06      	ldr	r2, [sp, #24]
 8007b12:	7013      	strb	r3, [r2, #0]
 8007b14:	0023      	movs	r3, r4
 8007b16:	001c      	movs	r4, r3
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	781a      	ldrb	r2, [r3, #0]
 8007b1c:	2a39      	cmp	r2, #57	@ 0x39
 8007b1e:	d050      	beq.n	8007bc2 <_dtoa_r+0xb72>
 8007b20:	3201      	adds	r2, #1
 8007b22:	701a      	strb	r2, [r3, #0]
 8007b24:	e4fe      	b.n	8007524 <_dtoa_r+0x4d4>
 8007b26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	dd03      	ble.n	8007b34 <_dtoa_r+0xae4>
 8007b2c:	2d39      	cmp	r5, #57	@ 0x39
 8007b2e:	d0ee      	beq.n	8007b0e <_dtoa_r+0xabe>
 8007b30:	3501      	adds	r5, #1
 8007b32:	e7c1      	b.n	8007ab8 <_dtoa_r+0xa68>
 8007b34:	9b06      	ldr	r3, [sp, #24]
 8007b36:	9a06      	ldr	r2, [sp, #24]
 8007b38:	701d      	strb	r5, [r3, #0]
 8007b3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d02b      	beq.n	8007b98 <_dtoa_r+0xb48>
 8007b40:	2300      	movs	r3, #0
 8007b42:	220a      	movs	r2, #10
 8007b44:	9905      	ldr	r1, [sp, #20]
 8007b46:	9803      	ldr	r0, [sp, #12]
 8007b48:	f000 fa48 	bl	8007fdc <__multadd>
 8007b4c:	9b04      	ldr	r3, [sp, #16]
 8007b4e:	9005      	str	r0, [sp, #20]
 8007b50:	429f      	cmp	r7, r3
 8007b52:	d109      	bne.n	8007b68 <_dtoa_r+0xb18>
 8007b54:	0039      	movs	r1, r7
 8007b56:	2300      	movs	r3, #0
 8007b58:	220a      	movs	r2, #10
 8007b5a:	9803      	ldr	r0, [sp, #12]
 8007b5c:	f000 fa3e 	bl	8007fdc <__multadd>
 8007b60:	0007      	movs	r7, r0
 8007b62:	9004      	str	r0, [sp, #16]
 8007b64:	9406      	str	r4, [sp, #24]
 8007b66:	e778      	b.n	8007a5a <_dtoa_r+0xa0a>
 8007b68:	0039      	movs	r1, r7
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	220a      	movs	r2, #10
 8007b6e:	9803      	ldr	r0, [sp, #12]
 8007b70:	f000 fa34 	bl	8007fdc <__multadd>
 8007b74:	2300      	movs	r3, #0
 8007b76:	0007      	movs	r7, r0
 8007b78:	220a      	movs	r2, #10
 8007b7a:	9904      	ldr	r1, [sp, #16]
 8007b7c:	9803      	ldr	r0, [sp, #12]
 8007b7e:	f000 fa2d 	bl	8007fdc <__multadd>
 8007b82:	9004      	str	r0, [sp, #16]
 8007b84:	e7ee      	b.n	8007b64 <_dtoa_r+0xb14>
 8007b86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b88:	2401      	movs	r4, #1
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	dd00      	ble.n	8007b90 <_dtoa_r+0xb40>
 8007b8e:	001c      	movs	r4, r3
 8007b90:	9704      	str	r7, [sp, #16]
 8007b92:	2700      	movs	r7, #0
 8007b94:	9b08      	ldr	r3, [sp, #32]
 8007b96:	191c      	adds	r4, r3, r4
 8007b98:	9905      	ldr	r1, [sp, #20]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	9803      	ldr	r0, [sp, #12]
 8007b9e:	f000 fbcf 	bl	8008340 <__lshift>
 8007ba2:	0031      	movs	r1, r6
 8007ba4:	9005      	str	r0, [sp, #20]
 8007ba6:	f000 fc37 	bl	8008418 <__mcmp>
 8007baa:	2800      	cmp	r0, #0
 8007bac:	dcb2      	bgt.n	8007b14 <_dtoa_r+0xac4>
 8007bae:	d101      	bne.n	8007bb4 <_dtoa_r+0xb64>
 8007bb0:	07ed      	lsls	r5, r5, #31
 8007bb2:	d4af      	bmi.n	8007b14 <_dtoa_r+0xac4>
 8007bb4:	0023      	movs	r3, r4
 8007bb6:	001c      	movs	r4, r3
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	781a      	ldrb	r2, [r3, #0]
 8007bbc:	2a30      	cmp	r2, #48	@ 0x30
 8007bbe:	d0fa      	beq.n	8007bb6 <_dtoa_r+0xb66>
 8007bc0:	e4b0      	b.n	8007524 <_dtoa_r+0x4d4>
 8007bc2:	9a08      	ldr	r2, [sp, #32]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d1a6      	bne.n	8007b16 <_dtoa_r+0xac6>
 8007bc8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007bca:	3301      	adds	r3, #1
 8007bcc:	930c      	str	r3, [sp, #48]	@ 0x30
 8007bce:	2331      	movs	r3, #49	@ 0x31
 8007bd0:	7013      	strb	r3, [r2, #0]
 8007bd2:	e4a7      	b.n	8007524 <_dtoa_r+0x4d4>
 8007bd4:	4b14      	ldr	r3, [pc, #80]	@ (8007c28 <_dtoa_r+0xbd8>)
 8007bd6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007bd8:	9308      	str	r3, [sp, #32]
 8007bda:	4b14      	ldr	r3, [pc, #80]	@ (8007c2c <_dtoa_r+0xbdc>)
 8007bdc:	2a00      	cmp	r2, #0
 8007bde:	d001      	beq.n	8007be4 <_dtoa_r+0xb94>
 8007be0:	f7ff fa7e 	bl	80070e0 <_dtoa_r+0x90>
 8007be4:	f7ff fa7e 	bl	80070e4 <_dtoa_r+0x94>
 8007be8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	dc00      	bgt.n	8007bf0 <_dtoa_r+0xba0>
 8007bee:	e648      	b.n	8007882 <_dtoa_r+0x832>
 8007bf0:	2001      	movs	r0, #1
 8007bf2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8007bf4:	e665      	b.n	80078c2 <_dtoa_r+0x872>
 8007bf6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	dc00      	bgt.n	8007bfe <_dtoa_r+0xbae>
 8007bfc:	e6a9      	b.n	8007952 <_dtoa_r+0x902>
 8007bfe:	2400      	movs	r4, #0
 8007c00:	0031      	movs	r1, r6
 8007c02:	9805      	ldr	r0, [sp, #20]
 8007c04:	f7ff f99f 	bl	8006f46 <quorem>
 8007c08:	9b08      	ldr	r3, [sp, #32]
 8007c0a:	3030      	adds	r0, #48	@ 0x30
 8007c0c:	5518      	strb	r0, [r3, r4]
 8007c0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c10:	3401      	adds	r4, #1
 8007c12:	0005      	movs	r5, r0
 8007c14:	42a3      	cmp	r3, r4
 8007c16:	ddb6      	ble.n	8007b86 <_dtoa_r+0xb36>
 8007c18:	2300      	movs	r3, #0
 8007c1a:	220a      	movs	r2, #10
 8007c1c:	9905      	ldr	r1, [sp, #20]
 8007c1e:	9803      	ldr	r0, [sp, #12]
 8007c20:	f000 f9dc 	bl	8007fdc <__multadd>
 8007c24:	9005      	str	r0, [sp, #20]
 8007c26:	e7eb      	b.n	8007c00 <_dtoa_r+0xbb0>
 8007c28:	08009c40 	.word	0x08009c40
 8007c2c:	08009c48 	.word	0x08009c48

08007c30 <malloc>:
 8007c30:	b510      	push	{r4, lr}
 8007c32:	4b03      	ldr	r3, [pc, #12]	@ (8007c40 <malloc+0x10>)
 8007c34:	0001      	movs	r1, r0
 8007c36:	6818      	ldr	r0, [r3, #0]
 8007c38:	f000 f826 	bl	8007c88 <_malloc_r>
 8007c3c:	bd10      	pop	{r4, pc}
 8007c3e:	46c0      	nop			@ (mov r8, r8)
 8007c40:	20000020 	.word	0x20000020

08007c44 <sbrk_aligned>:
 8007c44:	b570      	push	{r4, r5, r6, lr}
 8007c46:	4e0f      	ldr	r6, [pc, #60]	@ (8007c84 <sbrk_aligned+0x40>)
 8007c48:	000d      	movs	r5, r1
 8007c4a:	6831      	ldr	r1, [r6, #0]
 8007c4c:	0004      	movs	r4, r0
 8007c4e:	2900      	cmp	r1, #0
 8007c50:	d102      	bne.n	8007c58 <sbrk_aligned+0x14>
 8007c52:	f000 fd6b 	bl	800872c <_sbrk_r>
 8007c56:	6030      	str	r0, [r6, #0]
 8007c58:	0029      	movs	r1, r5
 8007c5a:	0020      	movs	r0, r4
 8007c5c:	f000 fd66 	bl	800872c <_sbrk_r>
 8007c60:	1c43      	adds	r3, r0, #1
 8007c62:	d103      	bne.n	8007c6c <sbrk_aligned+0x28>
 8007c64:	2501      	movs	r5, #1
 8007c66:	426d      	negs	r5, r5
 8007c68:	0028      	movs	r0, r5
 8007c6a:	bd70      	pop	{r4, r5, r6, pc}
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	1cc5      	adds	r5, r0, #3
 8007c70:	439d      	bics	r5, r3
 8007c72:	42a8      	cmp	r0, r5
 8007c74:	d0f8      	beq.n	8007c68 <sbrk_aligned+0x24>
 8007c76:	1a29      	subs	r1, r5, r0
 8007c78:	0020      	movs	r0, r4
 8007c7a:	f000 fd57 	bl	800872c <_sbrk_r>
 8007c7e:	3001      	adds	r0, #1
 8007c80:	d1f2      	bne.n	8007c68 <sbrk_aligned+0x24>
 8007c82:	e7ef      	b.n	8007c64 <sbrk_aligned+0x20>
 8007c84:	20000490 	.word	0x20000490

08007c88 <_malloc_r>:
 8007c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c8a:	2203      	movs	r2, #3
 8007c8c:	1ccb      	adds	r3, r1, #3
 8007c8e:	4393      	bics	r3, r2
 8007c90:	3308      	adds	r3, #8
 8007c92:	0005      	movs	r5, r0
 8007c94:	001f      	movs	r7, r3
 8007c96:	2b0c      	cmp	r3, #12
 8007c98:	d234      	bcs.n	8007d04 <_malloc_r+0x7c>
 8007c9a:	270c      	movs	r7, #12
 8007c9c:	42b9      	cmp	r1, r7
 8007c9e:	d833      	bhi.n	8007d08 <_malloc_r+0x80>
 8007ca0:	0028      	movs	r0, r5
 8007ca2:	f000 f923 	bl	8007eec <__malloc_lock>
 8007ca6:	4e37      	ldr	r6, [pc, #220]	@ (8007d84 <_malloc_r+0xfc>)
 8007ca8:	6833      	ldr	r3, [r6, #0]
 8007caa:	001c      	movs	r4, r3
 8007cac:	2c00      	cmp	r4, #0
 8007cae:	d12f      	bne.n	8007d10 <_malloc_r+0x88>
 8007cb0:	0039      	movs	r1, r7
 8007cb2:	0028      	movs	r0, r5
 8007cb4:	f7ff ffc6 	bl	8007c44 <sbrk_aligned>
 8007cb8:	0004      	movs	r4, r0
 8007cba:	1c43      	adds	r3, r0, #1
 8007cbc:	d15f      	bne.n	8007d7e <_malloc_r+0xf6>
 8007cbe:	6834      	ldr	r4, [r6, #0]
 8007cc0:	9400      	str	r4, [sp, #0]
 8007cc2:	9b00      	ldr	r3, [sp, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d14a      	bne.n	8007d5e <_malloc_r+0xd6>
 8007cc8:	2c00      	cmp	r4, #0
 8007cca:	d052      	beq.n	8007d72 <_malloc_r+0xea>
 8007ccc:	6823      	ldr	r3, [r4, #0]
 8007cce:	0028      	movs	r0, r5
 8007cd0:	18e3      	adds	r3, r4, r3
 8007cd2:	9900      	ldr	r1, [sp, #0]
 8007cd4:	9301      	str	r3, [sp, #4]
 8007cd6:	f000 fd29 	bl	800872c <_sbrk_r>
 8007cda:	9b01      	ldr	r3, [sp, #4]
 8007cdc:	4283      	cmp	r3, r0
 8007cde:	d148      	bne.n	8007d72 <_malloc_r+0xea>
 8007ce0:	6823      	ldr	r3, [r4, #0]
 8007ce2:	0028      	movs	r0, r5
 8007ce4:	1aff      	subs	r7, r7, r3
 8007ce6:	0039      	movs	r1, r7
 8007ce8:	f7ff ffac 	bl	8007c44 <sbrk_aligned>
 8007cec:	3001      	adds	r0, #1
 8007cee:	d040      	beq.n	8007d72 <_malloc_r+0xea>
 8007cf0:	6823      	ldr	r3, [r4, #0]
 8007cf2:	19db      	adds	r3, r3, r7
 8007cf4:	6023      	str	r3, [r4, #0]
 8007cf6:	6833      	ldr	r3, [r6, #0]
 8007cf8:	685a      	ldr	r2, [r3, #4]
 8007cfa:	2a00      	cmp	r2, #0
 8007cfc:	d133      	bne.n	8007d66 <_malloc_r+0xde>
 8007cfe:	9b00      	ldr	r3, [sp, #0]
 8007d00:	6033      	str	r3, [r6, #0]
 8007d02:	e019      	b.n	8007d38 <_malloc_r+0xb0>
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	dac9      	bge.n	8007c9c <_malloc_r+0x14>
 8007d08:	230c      	movs	r3, #12
 8007d0a:	602b      	str	r3, [r5, #0]
 8007d0c:	2000      	movs	r0, #0
 8007d0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007d10:	6821      	ldr	r1, [r4, #0]
 8007d12:	1bc9      	subs	r1, r1, r7
 8007d14:	d420      	bmi.n	8007d58 <_malloc_r+0xd0>
 8007d16:	290b      	cmp	r1, #11
 8007d18:	d90a      	bls.n	8007d30 <_malloc_r+0xa8>
 8007d1a:	19e2      	adds	r2, r4, r7
 8007d1c:	6027      	str	r7, [r4, #0]
 8007d1e:	42a3      	cmp	r3, r4
 8007d20:	d104      	bne.n	8007d2c <_malloc_r+0xa4>
 8007d22:	6032      	str	r2, [r6, #0]
 8007d24:	6863      	ldr	r3, [r4, #4]
 8007d26:	6011      	str	r1, [r2, #0]
 8007d28:	6053      	str	r3, [r2, #4]
 8007d2a:	e005      	b.n	8007d38 <_malloc_r+0xb0>
 8007d2c:	605a      	str	r2, [r3, #4]
 8007d2e:	e7f9      	b.n	8007d24 <_malloc_r+0x9c>
 8007d30:	6862      	ldr	r2, [r4, #4]
 8007d32:	42a3      	cmp	r3, r4
 8007d34:	d10e      	bne.n	8007d54 <_malloc_r+0xcc>
 8007d36:	6032      	str	r2, [r6, #0]
 8007d38:	0028      	movs	r0, r5
 8007d3a:	f000 f8df 	bl	8007efc <__malloc_unlock>
 8007d3e:	0020      	movs	r0, r4
 8007d40:	2207      	movs	r2, #7
 8007d42:	300b      	adds	r0, #11
 8007d44:	1d23      	adds	r3, r4, #4
 8007d46:	4390      	bics	r0, r2
 8007d48:	1ac2      	subs	r2, r0, r3
 8007d4a:	4298      	cmp	r0, r3
 8007d4c:	d0df      	beq.n	8007d0e <_malloc_r+0x86>
 8007d4e:	1a1b      	subs	r3, r3, r0
 8007d50:	50a3      	str	r3, [r4, r2]
 8007d52:	e7dc      	b.n	8007d0e <_malloc_r+0x86>
 8007d54:	605a      	str	r2, [r3, #4]
 8007d56:	e7ef      	b.n	8007d38 <_malloc_r+0xb0>
 8007d58:	0023      	movs	r3, r4
 8007d5a:	6864      	ldr	r4, [r4, #4]
 8007d5c:	e7a6      	b.n	8007cac <_malloc_r+0x24>
 8007d5e:	9c00      	ldr	r4, [sp, #0]
 8007d60:	6863      	ldr	r3, [r4, #4]
 8007d62:	9300      	str	r3, [sp, #0]
 8007d64:	e7ad      	b.n	8007cc2 <_malloc_r+0x3a>
 8007d66:	001a      	movs	r2, r3
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	42a3      	cmp	r3, r4
 8007d6c:	d1fb      	bne.n	8007d66 <_malloc_r+0xde>
 8007d6e:	2300      	movs	r3, #0
 8007d70:	e7da      	b.n	8007d28 <_malloc_r+0xa0>
 8007d72:	230c      	movs	r3, #12
 8007d74:	0028      	movs	r0, r5
 8007d76:	602b      	str	r3, [r5, #0]
 8007d78:	f000 f8c0 	bl	8007efc <__malloc_unlock>
 8007d7c:	e7c6      	b.n	8007d0c <_malloc_r+0x84>
 8007d7e:	6007      	str	r7, [r0, #0]
 8007d80:	e7da      	b.n	8007d38 <_malloc_r+0xb0>
 8007d82:	46c0      	nop			@ (mov r8, r8)
 8007d84:	20000494 	.word	0x20000494

08007d88 <__sflush_r>:
 8007d88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d8a:	220c      	movs	r2, #12
 8007d8c:	5e8b      	ldrsh	r3, [r1, r2]
 8007d8e:	0005      	movs	r5, r0
 8007d90:	000c      	movs	r4, r1
 8007d92:	071a      	lsls	r2, r3, #28
 8007d94:	d456      	bmi.n	8007e44 <__sflush_r+0xbc>
 8007d96:	684a      	ldr	r2, [r1, #4]
 8007d98:	2a00      	cmp	r2, #0
 8007d9a:	dc02      	bgt.n	8007da2 <__sflush_r+0x1a>
 8007d9c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8007d9e:	2a00      	cmp	r2, #0
 8007da0:	dd4e      	ble.n	8007e40 <__sflush_r+0xb8>
 8007da2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8007da4:	2f00      	cmp	r7, #0
 8007da6:	d04b      	beq.n	8007e40 <__sflush_r+0xb8>
 8007da8:	2200      	movs	r2, #0
 8007daa:	2080      	movs	r0, #128	@ 0x80
 8007dac:	682e      	ldr	r6, [r5, #0]
 8007dae:	602a      	str	r2, [r5, #0]
 8007db0:	001a      	movs	r2, r3
 8007db2:	0140      	lsls	r0, r0, #5
 8007db4:	6a21      	ldr	r1, [r4, #32]
 8007db6:	4002      	ands	r2, r0
 8007db8:	4203      	tst	r3, r0
 8007dba:	d033      	beq.n	8007e24 <__sflush_r+0x9c>
 8007dbc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007dbe:	89a3      	ldrh	r3, [r4, #12]
 8007dc0:	075b      	lsls	r3, r3, #29
 8007dc2:	d506      	bpl.n	8007dd2 <__sflush_r+0x4a>
 8007dc4:	6863      	ldr	r3, [r4, #4]
 8007dc6:	1ad2      	subs	r2, r2, r3
 8007dc8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d001      	beq.n	8007dd2 <__sflush_r+0x4a>
 8007dce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007dd0:	1ad2      	subs	r2, r2, r3
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	0028      	movs	r0, r5
 8007dd6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8007dd8:	6a21      	ldr	r1, [r4, #32]
 8007dda:	47b8      	blx	r7
 8007ddc:	89a2      	ldrh	r2, [r4, #12]
 8007dde:	1c43      	adds	r3, r0, #1
 8007de0:	d106      	bne.n	8007df0 <__sflush_r+0x68>
 8007de2:	6829      	ldr	r1, [r5, #0]
 8007de4:	291d      	cmp	r1, #29
 8007de6:	d846      	bhi.n	8007e76 <__sflush_r+0xee>
 8007de8:	4b29      	ldr	r3, [pc, #164]	@ (8007e90 <__sflush_r+0x108>)
 8007dea:	40cb      	lsrs	r3, r1
 8007dec:	07db      	lsls	r3, r3, #31
 8007dee:	d542      	bpl.n	8007e76 <__sflush_r+0xee>
 8007df0:	2300      	movs	r3, #0
 8007df2:	6063      	str	r3, [r4, #4]
 8007df4:	6923      	ldr	r3, [r4, #16]
 8007df6:	6023      	str	r3, [r4, #0]
 8007df8:	04d2      	lsls	r2, r2, #19
 8007dfa:	d505      	bpl.n	8007e08 <__sflush_r+0x80>
 8007dfc:	1c43      	adds	r3, r0, #1
 8007dfe:	d102      	bne.n	8007e06 <__sflush_r+0x7e>
 8007e00:	682b      	ldr	r3, [r5, #0]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d100      	bne.n	8007e08 <__sflush_r+0x80>
 8007e06:	6560      	str	r0, [r4, #84]	@ 0x54
 8007e08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e0a:	602e      	str	r6, [r5, #0]
 8007e0c:	2900      	cmp	r1, #0
 8007e0e:	d017      	beq.n	8007e40 <__sflush_r+0xb8>
 8007e10:	0023      	movs	r3, r4
 8007e12:	3344      	adds	r3, #68	@ 0x44
 8007e14:	4299      	cmp	r1, r3
 8007e16:	d002      	beq.n	8007e1e <__sflush_r+0x96>
 8007e18:	0028      	movs	r0, r5
 8007e1a:	f000 fd15 	bl	8008848 <_free_r>
 8007e1e:	2300      	movs	r3, #0
 8007e20:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e22:	e00d      	b.n	8007e40 <__sflush_r+0xb8>
 8007e24:	2301      	movs	r3, #1
 8007e26:	0028      	movs	r0, r5
 8007e28:	47b8      	blx	r7
 8007e2a:	0002      	movs	r2, r0
 8007e2c:	1c43      	adds	r3, r0, #1
 8007e2e:	d1c6      	bne.n	8007dbe <__sflush_r+0x36>
 8007e30:	682b      	ldr	r3, [r5, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d0c3      	beq.n	8007dbe <__sflush_r+0x36>
 8007e36:	2b1d      	cmp	r3, #29
 8007e38:	d001      	beq.n	8007e3e <__sflush_r+0xb6>
 8007e3a:	2b16      	cmp	r3, #22
 8007e3c:	d11a      	bne.n	8007e74 <__sflush_r+0xec>
 8007e3e:	602e      	str	r6, [r5, #0]
 8007e40:	2000      	movs	r0, #0
 8007e42:	e01e      	b.n	8007e82 <__sflush_r+0xfa>
 8007e44:	690e      	ldr	r6, [r1, #16]
 8007e46:	2e00      	cmp	r6, #0
 8007e48:	d0fa      	beq.n	8007e40 <__sflush_r+0xb8>
 8007e4a:	680f      	ldr	r7, [r1, #0]
 8007e4c:	600e      	str	r6, [r1, #0]
 8007e4e:	1bba      	subs	r2, r7, r6
 8007e50:	9201      	str	r2, [sp, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	079b      	lsls	r3, r3, #30
 8007e56:	d100      	bne.n	8007e5a <__sflush_r+0xd2>
 8007e58:	694a      	ldr	r2, [r1, #20]
 8007e5a:	60a2      	str	r2, [r4, #8]
 8007e5c:	9b01      	ldr	r3, [sp, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	ddee      	ble.n	8007e40 <__sflush_r+0xb8>
 8007e62:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007e64:	0032      	movs	r2, r6
 8007e66:	001f      	movs	r7, r3
 8007e68:	0028      	movs	r0, r5
 8007e6a:	9b01      	ldr	r3, [sp, #4]
 8007e6c:	6a21      	ldr	r1, [r4, #32]
 8007e6e:	47b8      	blx	r7
 8007e70:	2800      	cmp	r0, #0
 8007e72:	dc07      	bgt.n	8007e84 <__sflush_r+0xfc>
 8007e74:	89a2      	ldrh	r2, [r4, #12]
 8007e76:	2340      	movs	r3, #64	@ 0x40
 8007e78:	2001      	movs	r0, #1
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	b21b      	sxth	r3, r3
 8007e7e:	81a3      	strh	r3, [r4, #12]
 8007e80:	4240      	negs	r0, r0
 8007e82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007e84:	9b01      	ldr	r3, [sp, #4]
 8007e86:	1836      	adds	r6, r6, r0
 8007e88:	1a1b      	subs	r3, r3, r0
 8007e8a:	9301      	str	r3, [sp, #4]
 8007e8c:	e7e6      	b.n	8007e5c <__sflush_r+0xd4>
 8007e8e:	46c0      	nop			@ (mov r8, r8)
 8007e90:	20400001 	.word	0x20400001

08007e94 <_fflush_r>:
 8007e94:	690b      	ldr	r3, [r1, #16]
 8007e96:	b570      	push	{r4, r5, r6, lr}
 8007e98:	0005      	movs	r5, r0
 8007e9a:	000c      	movs	r4, r1
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d102      	bne.n	8007ea6 <_fflush_r+0x12>
 8007ea0:	2500      	movs	r5, #0
 8007ea2:	0028      	movs	r0, r5
 8007ea4:	bd70      	pop	{r4, r5, r6, pc}
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	d004      	beq.n	8007eb4 <_fflush_r+0x20>
 8007eaa:	6a03      	ldr	r3, [r0, #32]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d101      	bne.n	8007eb4 <_fflush_r+0x20>
 8007eb0:	f7fe ffd0 	bl	8006e54 <__sinit>
 8007eb4:	220c      	movs	r2, #12
 8007eb6:	5ea3      	ldrsh	r3, [r4, r2]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d0f1      	beq.n	8007ea0 <_fflush_r+0xc>
 8007ebc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007ebe:	07d2      	lsls	r2, r2, #31
 8007ec0:	d404      	bmi.n	8007ecc <_fflush_r+0x38>
 8007ec2:	059b      	lsls	r3, r3, #22
 8007ec4:	d402      	bmi.n	8007ecc <_fflush_r+0x38>
 8007ec6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ec8:	f7ff f82b 	bl	8006f22 <__retarget_lock_acquire_recursive>
 8007ecc:	0028      	movs	r0, r5
 8007ece:	0021      	movs	r1, r4
 8007ed0:	f7ff ff5a 	bl	8007d88 <__sflush_r>
 8007ed4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ed6:	0005      	movs	r5, r0
 8007ed8:	07db      	lsls	r3, r3, #31
 8007eda:	d4e2      	bmi.n	8007ea2 <_fflush_r+0xe>
 8007edc:	89a3      	ldrh	r3, [r4, #12]
 8007ede:	059b      	lsls	r3, r3, #22
 8007ee0:	d4df      	bmi.n	8007ea2 <_fflush_r+0xe>
 8007ee2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ee4:	f7ff f81e 	bl	8006f24 <__retarget_lock_release_recursive>
 8007ee8:	e7db      	b.n	8007ea2 <_fflush_r+0xe>
	...

08007eec <__malloc_lock>:
 8007eec:	b510      	push	{r4, lr}
 8007eee:	4802      	ldr	r0, [pc, #8]	@ (8007ef8 <__malloc_lock+0xc>)
 8007ef0:	f7ff f817 	bl	8006f22 <__retarget_lock_acquire_recursive>
 8007ef4:	bd10      	pop	{r4, pc}
 8007ef6:	46c0      	nop			@ (mov r8, r8)
 8007ef8:	2000048c 	.word	0x2000048c

08007efc <__malloc_unlock>:
 8007efc:	b510      	push	{r4, lr}
 8007efe:	4802      	ldr	r0, [pc, #8]	@ (8007f08 <__malloc_unlock+0xc>)
 8007f00:	f7ff f810 	bl	8006f24 <__retarget_lock_release_recursive>
 8007f04:	bd10      	pop	{r4, pc}
 8007f06:	46c0      	nop			@ (mov r8, r8)
 8007f08:	2000048c 	.word	0x2000048c

08007f0c <_Balloc>:
 8007f0c:	b570      	push	{r4, r5, r6, lr}
 8007f0e:	69c5      	ldr	r5, [r0, #28]
 8007f10:	0006      	movs	r6, r0
 8007f12:	000c      	movs	r4, r1
 8007f14:	2d00      	cmp	r5, #0
 8007f16:	d10e      	bne.n	8007f36 <_Balloc+0x2a>
 8007f18:	2010      	movs	r0, #16
 8007f1a:	f7ff fe89 	bl	8007c30 <malloc>
 8007f1e:	1e02      	subs	r2, r0, #0
 8007f20:	61f0      	str	r0, [r6, #28]
 8007f22:	d104      	bne.n	8007f2e <_Balloc+0x22>
 8007f24:	216b      	movs	r1, #107	@ 0x6b
 8007f26:	4b19      	ldr	r3, [pc, #100]	@ (8007f8c <_Balloc+0x80>)
 8007f28:	4819      	ldr	r0, [pc, #100]	@ (8007f90 <_Balloc+0x84>)
 8007f2a:	f000 fc41 	bl	80087b0 <__assert_func>
 8007f2e:	6045      	str	r5, [r0, #4]
 8007f30:	6085      	str	r5, [r0, #8]
 8007f32:	6005      	str	r5, [r0, #0]
 8007f34:	60c5      	str	r5, [r0, #12]
 8007f36:	69f5      	ldr	r5, [r6, #28]
 8007f38:	68eb      	ldr	r3, [r5, #12]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d013      	beq.n	8007f66 <_Balloc+0x5a>
 8007f3e:	69f3      	ldr	r3, [r6, #28]
 8007f40:	00a2      	lsls	r2, r4, #2
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	189b      	adds	r3, r3, r2
 8007f46:	6818      	ldr	r0, [r3, #0]
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	d118      	bne.n	8007f7e <_Balloc+0x72>
 8007f4c:	2101      	movs	r1, #1
 8007f4e:	000d      	movs	r5, r1
 8007f50:	40a5      	lsls	r5, r4
 8007f52:	1d6a      	adds	r2, r5, #5
 8007f54:	0030      	movs	r0, r6
 8007f56:	0092      	lsls	r2, r2, #2
 8007f58:	f000 fc48 	bl	80087ec <_calloc_r>
 8007f5c:	2800      	cmp	r0, #0
 8007f5e:	d00c      	beq.n	8007f7a <_Balloc+0x6e>
 8007f60:	6044      	str	r4, [r0, #4]
 8007f62:	6085      	str	r5, [r0, #8]
 8007f64:	e00d      	b.n	8007f82 <_Balloc+0x76>
 8007f66:	2221      	movs	r2, #33	@ 0x21
 8007f68:	2104      	movs	r1, #4
 8007f6a:	0030      	movs	r0, r6
 8007f6c:	f000 fc3e 	bl	80087ec <_calloc_r>
 8007f70:	69f3      	ldr	r3, [r6, #28]
 8007f72:	60e8      	str	r0, [r5, #12]
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d1e1      	bne.n	8007f3e <_Balloc+0x32>
 8007f7a:	2000      	movs	r0, #0
 8007f7c:	bd70      	pop	{r4, r5, r6, pc}
 8007f7e:	6802      	ldr	r2, [r0, #0]
 8007f80:	601a      	str	r2, [r3, #0]
 8007f82:	2300      	movs	r3, #0
 8007f84:	6103      	str	r3, [r0, #16]
 8007f86:	60c3      	str	r3, [r0, #12]
 8007f88:	e7f8      	b.n	8007f7c <_Balloc+0x70>
 8007f8a:	46c0      	nop			@ (mov r8, r8)
 8007f8c:	08009c4d 	.word	0x08009c4d
 8007f90:	08009ccd 	.word	0x08009ccd

08007f94 <_Bfree>:
 8007f94:	b570      	push	{r4, r5, r6, lr}
 8007f96:	69c6      	ldr	r6, [r0, #28]
 8007f98:	0005      	movs	r5, r0
 8007f9a:	000c      	movs	r4, r1
 8007f9c:	2e00      	cmp	r6, #0
 8007f9e:	d10e      	bne.n	8007fbe <_Bfree+0x2a>
 8007fa0:	2010      	movs	r0, #16
 8007fa2:	f7ff fe45 	bl	8007c30 <malloc>
 8007fa6:	1e02      	subs	r2, r0, #0
 8007fa8:	61e8      	str	r0, [r5, #28]
 8007faa:	d104      	bne.n	8007fb6 <_Bfree+0x22>
 8007fac:	218f      	movs	r1, #143	@ 0x8f
 8007fae:	4b09      	ldr	r3, [pc, #36]	@ (8007fd4 <_Bfree+0x40>)
 8007fb0:	4809      	ldr	r0, [pc, #36]	@ (8007fd8 <_Bfree+0x44>)
 8007fb2:	f000 fbfd 	bl	80087b0 <__assert_func>
 8007fb6:	6046      	str	r6, [r0, #4]
 8007fb8:	6086      	str	r6, [r0, #8]
 8007fba:	6006      	str	r6, [r0, #0]
 8007fbc:	60c6      	str	r6, [r0, #12]
 8007fbe:	2c00      	cmp	r4, #0
 8007fc0:	d007      	beq.n	8007fd2 <_Bfree+0x3e>
 8007fc2:	69eb      	ldr	r3, [r5, #28]
 8007fc4:	6862      	ldr	r2, [r4, #4]
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	0092      	lsls	r2, r2, #2
 8007fca:	189b      	adds	r3, r3, r2
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	6022      	str	r2, [r4, #0]
 8007fd0:	601c      	str	r4, [r3, #0]
 8007fd2:	bd70      	pop	{r4, r5, r6, pc}
 8007fd4:	08009c4d 	.word	0x08009c4d
 8007fd8:	08009ccd 	.word	0x08009ccd

08007fdc <__multadd>:
 8007fdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fde:	000f      	movs	r7, r1
 8007fe0:	9001      	str	r0, [sp, #4]
 8007fe2:	000c      	movs	r4, r1
 8007fe4:	001e      	movs	r6, r3
 8007fe6:	2000      	movs	r0, #0
 8007fe8:	690d      	ldr	r5, [r1, #16]
 8007fea:	3714      	adds	r7, #20
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	3001      	adds	r0, #1
 8007ff0:	b299      	uxth	r1, r3
 8007ff2:	4351      	muls	r1, r2
 8007ff4:	0c1b      	lsrs	r3, r3, #16
 8007ff6:	4353      	muls	r3, r2
 8007ff8:	1989      	adds	r1, r1, r6
 8007ffa:	0c0e      	lsrs	r6, r1, #16
 8007ffc:	199b      	adds	r3, r3, r6
 8007ffe:	0c1e      	lsrs	r6, r3, #16
 8008000:	b289      	uxth	r1, r1
 8008002:	041b      	lsls	r3, r3, #16
 8008004:	185b      	adds	r3, r3, r1
 8008006:	c708      	stmia	r7!, {r3}
 8008008:	4285      	cmp	r5, r0
 800800a:	dcef      	bgt.n	8007fec <__multadd+0x10>
 800800c:	2e00      	cmp	r6, #0
 800800e:	d022      	beq.n	8008056 <__multadd+0x7a>
 8008010:	68a3      	ldr	r3, [r4, #8]
 8008012:	42ab      	cmp	r3, r5
 8008014:	dc19      	bgt.n	800804a <__multadd+0x6e>
 8008016:	6861      	ldr	r1, [r4, #4]
 8008018:	9801      	ldr	r0, [sp, #4]
 800801a:	3101      	adds	r1, #1
 800801c:	f7ff ff76 	bl	8007f0c <_Balloc>
 8008020:	1e07      	subs	r7, r0, #0
 8008022:	d105      	bne.n	8008030 <__multadd+0x54>
 8008024:	003a      	movs	r2, r7
 8008026:	21ba      	movs	r1, #186	@ 0xba
 8008028:	4b0c      	ldr	r3, [pc, #48]	@ (800805c <__multadd+0x80>)
 800802a:	480d      	ldr	r0, [pc, #52]	@ (8008060 <__multadd+0x84>)
 800802c:	f000 fbc0 	bl	80087b0 <__assert_func>
 8008030:	0021      	movs	r1, r4
 8008032:	6922      	ldr	r2, [r4, #16]
 8008034:	310c      	adds	r1, #12
 8008036:	3202      	adds	r2, #2
 8008038:	0092      	lsls	r2, r2, #2
 800803a:	300c      	adds	r0, #12
 800803c:	f000 fbae 	bl	800879c <memcpy>
 8008040:	0021      	movs	r1, r4
 8008042:	9801      	ldr	r0, [sp, #4]
 8008044:	f7ff ffa6 	bl	8007f94 <_Bfree>
 8008048:	003c      	movs	r4, r7
 800804a:	1d2b      	adds	r3, r5, #4
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	18e3      	adds	r3, r4, r3
 8008050:	3501      	adds	r5, #1
 8008052:	605e      	str	r6, [r3, #4]
 8008054:	6125      	str	r5, [r4, #16]
 8008056:	0020      	movs	r0, r4
 8008058:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800805a:	46c0      	nop			@ (mov r8, r8)
 800805c:	08009cbc 	.word	0x08009cbc
 8008060:	08009ccd 	.word	0x08009ccd

08008064 <__hi0bits>:
 8008064:	2280      	movs	r2, #128	@ 0x80
 8008066:	0003      	movs	r3, r0
 8008068:	0252      	lsls	r2, r2, #9
 800806a:	2000      	movs	r0, #0
 800806c:	4293      	cmp	r3, r2
 800806e:	d201      	bcs.n	8008074 <__hi0bits+0x10>
 8008070:	041b      	lsls	r3, r3, #16
 8008072:	3010      	adds	r0, #16
 8008074:	2280      	movs	r2, #128	@ 0x80
 8008076:	0452      	lsls	r2, r2, #17
 8008078:	4293      	cmp	r3, r2
 800807a:	d201      	bcs.n	8008080 <__hi0bits+0x1c>
 800807c:	3008      	adds	r0, #8
 800807e:	021b      	lsls	r3, r3, #8
 8008080:	2280      	movs	r2, #128	@ 0x80
 8008082:	0552      	lsls	r2, r2, #21
 8008084:	4293      	cmp	r3, r2
 8008086:	d201      	bcs.n	800808c <__hi0bits+0x28>
 8008088:	3004      	adds	r0, #4
 800808a:	011b      	lsls	r3, r3, #4
 800808c:	2280      	movs	r2, #128	@ 0x80
 800808e:	05d2      	lsls	r2, r2, #23
 8008090:	4293      	cmp	r3, r2
 8008092:	d201      	bcs.n	8008098 <__hi0bits+0x34>
 8008094:	3002      	adds	r0, #2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	2b00      	cmp	r3, #0
 800809a:	db03      	blt.n	80080a4 <__hi0bits+0x40>
 800809c:	3001      	adds	r0, #1
 800809e:	4213      	tst	r3, r2
 80080a0:	d100      	bne.n	80080a4 <__hi0bits+0x40>
 80080a2:	2020      	movs	r0, #32
 80080a4:	4770      	bx	lr

080080a6 <__lo0bits>:
 80080a6:	6803      	ldr	r3, [r0, #0]
 80080a8:	0001      	movs	r1, r0
 80080aa:	2207      	movs	r2, #7
 80080ac:	0018      	movs	r0, r3
 80080ae:	4010      	ands	r0, r2
 80080b0:	4213      	tst	r3, r2
 80080b2:	d00d      	beq.n	80080d0 <__lo0bits+0x2a>
 80080b4:	3a06      	subs	r2, #6
 80080b6:	2000      	movs	r0, #0
 80080b8:	4213      	tst	r3, r2
 80080ba:	d105      	bne.n	80080c8 <__lo0bits+0x22>
 80080bc:	3002      	adds	r0, #2
 80080be:	4203      	tst	r3, r0
 80080c0:	d003      	beq.n	80080ca <__lo0bits+0x24>
 80080c2:	40d3      	lsrs	r3, r2
 80080c4:	0010      	movs	r0, r2
 80080c6:	600b      	str	r3, [r1, #0]
 80080c8:	4770      	bx	lr
 80080ca:	089b      	lsrs	r3, r3, #2
 80080cc:	600b      	str	r3, [r1, #0]
 80080ce:	e7fb      	b.n	80080c8 <__lo0bits+0x22>
 80080d0:	b29a      	uxth	r2, r3
 80080d2:	2a00      	cmp	r2, #0
 80080d4:	d101      	bne.n	80080da <__lo0bits+0x34>
 80080d6:	2010      	movs	r0, #16
 80080d8:	0c1b      	lsrs	r3, r3, #16
 80080da:	b2da      	uxtb	r2, r3
 80080dc:	2a00      	cmp	r2, #0
 80080de:	d101      	bne.n	80080e4 <__lo0bits+0x3e>
 80080e0:	3008      	adds	r0, #8
 80080e2:	0a1b      	lsrs	r3, r3, #8
 80080e4:	071a      	lsls	r2, r3, #28
 80080e6:	d101      	bne.n	80080ec <__lo0bits+0x46>
 80080e8:	3004      	adds	r0, #4
 80080ea:	091b      	lsrs	r3, r3, #4
 80080ec:	079a      	lsls	r2, r3, #30
 80080ee:	d101      	bne.n	80080f4 <__lo0bits+0x4e>
 80080f0:	3002      	adds	r0, #2
 80080f2:	089b      	lsrs	r3, r3, #2
 80080f4:	07da      	lsls	r2, r3, #31
 80080f6:	d4e9      	bmi.n	80080cc <__lo0bits+0x26>
 80080f8:	3001      	adds	r0, #1
 80080fa:	085b      	lsrs	r3, r3, #1
 80080fc:	d1e6      	bne.n	80080cc <__lo0bits+0x26>
 80080fe:	2020      	movs	r0, #32
 8008100:	e7e2      	b.n	80080c8 <__lo0bits+0x22>
	...

08008104 <__i2b>:
 8008104:	b510      	push	{r4, lr}
 8008106:	000c      	movs	r4, r1
 8008108:	2101      	movs	r1, #1
 800810a:	f7ff feff 	bl	8007f0c <_Balloc>
 800810e:	2800      	cmp	r0, #0
 8008110:	d107      	bne.n	8008122 <__i2b+0x1e>
 8008112:	2146      	movs	r1, #70	@ 0x46
 8008114:	4c05      	ldr	r4, [pc, #20]	@ (800812c <__i2b+0x28>)
 8008116:	0002      	movs	r2, r0
 8008118:	4b05      	ldr	r3, [pc, #20]	@ (8008130 <__i2b+0x2c>)
 800811a:	0020      	movs	r0, r4
 800811c:	31ff      	adds	r1, #255	@ 0xff
 800811e:	f000 fb47 	bl	80087b0 <__assert_func>
 8008122:	2301      	movs	r3, #1
 8008124:	6144      	str	r4, [r0, #20]
 8008126:	6103      	str	r3, [r0, #16]
 8008128:	bd10      	pop	{r4, pc}
 800812a:	46c0      	nop			@ (mov r8, r8)
 800812c:	08009ccd 	.word	0x08009ccd
 8008130:	08009cbc 	.word	0x08009cbc

08008134 <__multiply>:
 8008134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008136:	0014      	movs	r4, r2
 8008138:	690a      	ldr	r2, [r1, #16]
 800813a:	6923      	ldr	r3, [r4, #16]
 800813c:	000d      	movs	r5, r1
 800813e:	b089      	sub	sp, #36	@ 0x24
 8008140:	429a      	cmp	r2, r3
 8008142:	db02      	blt.n	800814a <__multiply+0x16>
 8008144:	0023      	movs	r3, r4
 8008146:	000c      	movs	r4, r1
 8008148:	001d      	movs	r5, r3
 800814a:	6927      	ldr	r7, [r4, #16]
 800814c:	692e      	ldr	r6, [r5, #16]
 800814e:	6861      	ldr	r1, [r4, #4]
 8008150:	19bb      	adds	r3, r7, r6
 8008152:	9300      	str	r3, [sp, #0]
 8008154:	68a3      	ldr	r3, [r4, #8]
 8008156:	19ba      	adds	r2, r7, r6
 8008158:	4293      	cmp	r3, r2
 800815a:	da00      	bge.n	800815e <__multiply+0x2a>
 800815c:	3101      	adds	r1, #1
 800815e:	f7ff fed5 	bl	8007f0c <_Balloc>
 8008162:	4684      	mov	ip, r0
 8008164:	2800      	cmp	r0, #0
 8008166:	d106      	bne.n	8008176 <__multiply+0x42>
 8008168:	21b1      	movs	r1, #177	@ 0xb1
 800816a:	4662      	mov	r2, ip
 800816c:	4b44      	ldr	r3, [pc, #272]	@ (8008280 <__multiply+0x14c>)
 800816e:	4845      	ldr	r0, [pc, #276]	@ (8008284 <__multiply+0x150>)
 8008170:	0049      	lsls	r1, r1, #1
 8008172:	f000 fb1d 	bl	80087b0 <__assert_func>
 8008176:	0002      	movs	r2, r0
 8008178:	19bb      	adds	r3, r7, r6
 800817a:	3214      	adds	r2, #20
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	18d3      	adds	r3, r2, r3
 8008180:	9301      	str	r3, [sp, #4]
 8008182:	2100      	movs	r1, #0
 8008184:	0013      	movs	r3, r2
 8008186:	9801      	ldr	r0, [sp, #4]
 8008188:	4283      	cmp	r3, r0
 800818a:	d328      	bcc.n	80081de <__multiply+0xaa>
 800818c:	0023      	movs	r3, r4
 800818e:	00bf      	lsls	r7, r7, #2
 8008190:	3314      	adds	r3, #20
 8008192:	9304      	str	r3, [sp, #16]
 8008194:	3514      	adds	r5, #20
 8008196:	19db      	adds	r3, r3, r7
 8008198:	00b6      	lsls	r6, r6, #2
 800819a:	9302      	str	r3, [sp, #8]
 800819c:	19ab      	adds	r3, r5, r6
 800819e:	9307      	str	r3, [sp, #28]
 80081a0:	2304      	movs	r3, #4
 80081a2:	9305      	str	r3, [sp, #20]
 80081a4:	0023      	movs	r3, r4
 80081a6:	9902      	ldr	r1, [sp, #8]
 80081a8:	3315      	adds	r3, #21
 80081aa:	4299      	cmp	r1, r3
 80081ac:	d305      	bcc.n	80081ba <__multiply+0x86>
 80081ae:	1b0c      	subs	r4, r1, r4
 80081b0:	3c15      	subs	r4, #21
 80081b2:	08a4      	lsrs	r4, r4, #2
 80081b4:	3401      	adds	r4, #1
 80081b6:	00a3      	lsls	r3, r4, #2
 80081b8:	9305      	str	r3, [sp, #20]
 80081ba:	9b07      	ldr	r3, [sp, #28]
 80081bc:	429d      	cmp	r5, r3
 80081be:	d310      	bcc.n	80081e2 <__multiply+0xae>
 80081c0:	9b00      	ldr	r3, [sp, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	dd05      	ble.n	80081d2 <__multiply+0x9e>
 80081c6:	9b01      	ldr	r3, [sp, #4]
 80081c8:	3b04      	subs	r3, #4
 80081ca:	9301      	str	r3, [sp, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d052      	beq.n	8008278 <__multiply+0x144>
 80081d2:	4663      	mov	r3, ip
 80081d4:	4660      	mov	r0, ip
 80081d6:	9a00      	ldr	r2, [sp, #0]
 80081d8:	611a      	str	r2, [r3, #16]
 80081da:	b009      	add	sp, #36	@ 0x24
 80081dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081de:	c302      	stmia	r3!, {r1}
 80081e0:	e7d1      	b.n	8008186 <__multiply+0x52>
 80081e2:	682c      	ldr	r4, [r5, #0]
 80081e4:	b2a4      	uxth	r4, r4
 80081e6:	2c00      	cmp	r4, #0
 80081e8:	d01f      	beq.n	800822a <__multiply+0xf6>
 80081ea:	2300      	movs	r3, #0
 80081ec:	0017      	movs	r7, r2
 80081ee:	9e04      	ldr	r6, [sp, #16]
 80081f0:	9303      	str	r3, [sp, #12]
 80081f2:	ce08      	ldmia	r6!, {r3}
 80081f4:	6839      	ldr	r1, [r7, #0]
 80081f6:	9306      	str	r3, [sp, #24]
 80081f8:	466b      	mov	r3, sp
 80081fa:	8b1b      	ldrh	r3, [r3, #24]
 80081fc:	b288      	uxth	r0, r1
 80081fe:	4363      	muls	r3, r4
 8008200:	181b      	adds	r3, r3, r0
 8008202:	9803      	ldr	r0, [sp, #12]
 8008204:	0c09      	lsrs	r1, r1, #16
 8008206:	181b      	adds	r3, r3, r0
 8008208:	9806      	ldr	r0, [sp, #24]
 800820a:	0c00      	lsrs	r0, r0, #16
 800820c:	4360      	muls	r0, r4
 800820e:	1840      	adds	r0, r0, r1
 8008210:	0c19      	lsrs	r1, r3, #16
 8008212:	1841      	adds	r1, r0, r1
 8008214:	0c08      	lsrs	r0, r1, #16
 8008216:	b29b      	uxth	r3, r3
 8008218:	0409      	lsls	r1, r1, #16
 800821a:	4319      	orrs	r1, r3
 800821c:	9b02      	ldr	r3, [sp, #8]
 800821e:	9003      	str	r0, [sp, #12]
 8008220:	c702      	stmia	r7!, {r1}
 8008222:	42b3      	cmp	r3, r6
 8008224:	d8e5      	bhi.n	80081f2 <__multiply+0xbe>
 8008226:	9b05      	ldr	r3, [sp, #20]
 8008228:	50d0      	str	r0, [r2, r3]
 800822a:	682c      	ldr	r4, [r5, #0]
 800822c:	0c24      	lsrs	r4, r4, #16
 800822e:	d020      	beq.n	8008272 <__multiply+0x13e>
 8008230:	2100      	movs	r1, #0
 8008232:	0010      	movs	r0, r2
 8008234:	6813      	ldr	r3, [r2, #0]
 8008236:	9e04      	ldr	r6, [sp, #16]
 8008238:	9103      	str	r1, [sp, #12]
 800823a:	6831      	ldr	r1, [r6, #0]
 800823c:	6807      	ldr	r7, [r0, #0]
 800823e:	b289      	uxth	r1, r1
 8008240:	4361      	muls	r1, r4
 8008242:	0c3f      	lsrs	r7, r7, #16
 8008244:	19c9      	adds	r1, r1, r7
 8008246:	9f03      	ldr	r7, [sp, #12]
 8008248:	b29b      	uxth	r3, r3
 800824a:	19c9      	adds	r1, r1, r7
 800824c:	040f      	lsls	r7, r1, #16
 800824e:	431f      	orrs	r7, r3
 8008250:	6007      	str	r7, [r0, #0]
 8008252:	ce80      	ldmia	r6!, {r7}
 8008254:	6843      	ldr	r3, [r0, #4]
 8008256:	0c3f      	lsrs	r7, r7, #16
 8008258:	4367      	muls	r7, r4
 800825a:	b29b      	uxth	r3, r3
 800825c:	0c09      	lsrs	r1, r1, #16
 800825e:	18fb      	adds	r3, r7, r3
 8008260:	185b      	adds	r3, r3, r1
 8008262:	0c19      	lsrs	r1, r3, #16
 8008264:	9103      	str	r1, [sp, #12]
 8008266:	9902      	ldr	r1, [sp, #8]
 8008268:	3004      	adds	r0, #4
 800826a:	42b1      	cmp	r1, r6
 800826c:	d8e5      	bhi.n	800823a <__multiply+0x106>
 800826e:	9905      	ldr	r1, [sp, #20]
 8008270:	5053      	str	r3, [r2, r1]
 8008272:	3504      	adds	r5, #4
 8008274:	3204      	adds	r2, #4
 8008276:	e7a0      	b.n	80081ba <__multiply+0x86>
 8008278:	9b00      	ldr	r3, [sp, #0]
 800827a:	3b01      	subs	r3, #1
 800827c:	9300      	str	r3, [sp, #0]
 800827e:	e79f      	b.n	80081c0 <__multiply+0x8c>
 8008280:	08009cbc 	.word	0x08009cbc
 8008284:	08009ccd 	.word	0x08009ccd

08008288 <__pow5mult>:
 8008288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800828a:	2303      	movs	r3, #3
 800828c:	0015      	movs	r5, r2
 800828e:	0007      	movs	r7, r0
 8008290:	000e      	movs	r6, r1
 8008292:	401a      	ands	r2, r3
 8008294:	421d      	tst	r5, r3
 8008296:	d008      	beq.n	80082aa <__pow5mult+0x22>
 8008298:	4925      	ldr	r1, [pc, #148]	@ (8008330 <__pow5mult+0xa8>)
 800829a:	3a01      	subs	r2, #1
 800829c:	0092      	lsls	r2, r2, #2
 800829e:	5852      	ldr	r2, [r2, r1]
 80082a0:	2300      	movs	r3, #0
 80082a2:	0031      	movs	r1, r6
 80082a4:	f7ff fe9a 	bl	8007fdc <__multadd>
 80082a8:	0006      	movs	r6, r0
 80082aa:	10ad      	asrs	r5, r5, #2
 80082ac:	d03d      	beq.n	800832a <__pow5mult+0xa2>
 80082ae:	69fc      	ldr	r4, [r7, #28]
 80082b0:	2c00      	cmp	r4, #0
 80082b2:	d10f      	bne.n	80082d4 <__pow5mult+0x4c>
 80082b4:	2010      	movs	r0, #16
 80082b6:	f7ff fcbb 	bl	8007c30 <malloc>
 80082ba:	1e02      	subs	r2, r0, #0
 80082bc:	61f8      	str	r0, [r7, #28]
 80082be:	d105      	bne.n	80082cc <__pow5mult+0x44>
 80082c0:	21b4      	movs	r1, #180	@ 0xb4
 80082c2:	4b1c      	ldr	r3, [pc, #112]	@ (8008334 <__pow5mult+0xac>)
 80082c4:	481c      	ldr	r0, [pc, #112]	@ (8008338 <__pow5mult+0xb0>)
 80082c6:	31ff      	adds	r1, #255	@ 0xff
 80082c8:	f000 fa72 	bl	80087b0 <__assert_func>
 80082cc:	6044      	str	r4, [r0, #4]
 80082ce:	6084      	str	r4, [r0, #8]
 80082d0:	6004      	str	r4, [r0, #0]
 80082d2:	60c4      	str	r4, [r0, #12]
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	689c      	ldr	r4, [r3, #8]
 80082d8:	9301      	str	r3, [sp, #4]
 80082da:	2c00      	cmp	r4, #0
 80082dc:	d108      	bne.n	80082f0 <__pow5mult+0x68>
 80082de:	0038      	movs	r0, r7
 80082e0:	4916      	ldr	r1, [pc, #88]	@ (800833c <__pow5mult+0xb4>)
 80082e2:	f7ff ff0f 	bl	8008104 <__i2b>
 80082e6:	9b01      	ldr	r3, [sp, #4]
 80082e8:	0004      	movs	r4, r0
 80082ea:	6098      	str	r0, [r3, #8]
 80082ec:	2300      	movs	r3, #0
 80082ee:	6003      	str	r3, [r0, #0]
 80082f0:	2301      	movs	r3, #1
 80082f2:	421d      	tst	r5, r3
 80082f4:	d00a      	beq.n	800830c <__pow5mult+0x84>
 80082f6:	0031      	movs	r1, r6
 80082f8:	0022      	movs	r2, r4
 80082fa:	0038      	movs	r0, r7
 80082fc:	f7ff ff1a 	bl	8008134 <__multiply>
 8008300:	0031      	movs	r1, r6
 8008302:	9001      	str	r0, [sp, #4]
 8008304:	0038      	movs	r0, r7
 8008306:	f7ff fe45 	bl	8007f94 <_Bfree>
 800830a:	9e01      	ldr	r6, [sp, #4]
 800830c:	106d      	asrs	r5, r5, #1
 800830e:	d00c      	beq.n	800832a <__pow5mult+0xa2>
 8008310:	6820      	ldr	r0, [r4, #0]
 8008312:	2800      	cmp	r0, #0
 8008314:	d107      	bne.n	8008326 <__pow5mult+0x9e>
 8008316:	0022      	movs	r2, r4
 8008318:	0021      	movs	r1, r4
 800831a:	0038      	movs	r0, r7
 800831c:	f7ff ff0a 	bl	8008134 <__multiply>
 8008320:	2300      	movs	r3, #0
 8008322:	6020      	str	r0, [r4, #0]
 8008324:	6003      	str	r3, [r0, #0]
 8008326:	0004      	movs	r4, r0
 8008328:	e7e2      	b.n	80082f0 <__pow5mult+0x68>
 800832a:	0030      	movs	r0, r6
 800832c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800832e:	46c0      	nop			@ (mov r8, r8)
 8008330:	08009d80 	.word	0x08009d80
 8008334:	08009c4d 	.word	0x08009c4d
 8008338:	08009ccd 	.word	0x08009ccd
 800833c:	00000271 	.word	0x00000271

08008340 <__lshift>:
 8008340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008342:	000c      	movs	r4, r1
 8008344:	0016      	movs	r6, r2
 8008346:	6923      	ldr	r3, [r4, #16]
 8008348:	1157      	asrs	r7, r2, #5
 800834a:	b085      	sub	sp, #20
 800834c:	18fb      	adds	r3, r7, r3
 800834e:	9301      	str	r3, [sp, #4]
 8008350:	3301      	adds	r3, #1
 8008352:	9300      	str	r3, [sp, #0]
 8008354:	6849      	ldr	r1, [r1, #4]
 8008356:	68a3      	ldr	r3, [r4, #8]
 8008358:	9002      	str	r0, [sp, #8]
 800835a:	9a00      	ldr	r2, [sp, #0]
 800835c:	4293      	cmp	r3, r2
 800835e:	db10      	blt.n	8008382 <__lshift+0x42>
 8008360:	9802      	ldr	r0, [sp, #8]
 8008362:	f7ff fdd3 	bl	8007f0c <_Balloc>
 8008366:	2300      	movs	r3, #0
 8008368:	0001      	movs	r1, r0
 800836a:	0005      	movs	r5, r0
 800836c:	001a      	movs	r2, r3
 800836e:	3114      	adds	r1, #20
 8008370:	4298      	cmp	r0, r3
 8008372:	d10c      	bne.n	800838e <__lshift+0x4e>
 8008374:	21ef      	movs	r1, #239	@ 0xef
 8008376:	002a      	movs	r2, r5
 8008378:	4b25      	ldr	r3, [pc, #148]	@ (8008410 <__lshift+0xd0>)
 800837a:	4826      	ldr	r0, [pc, #152]	@ (8008414 <__lshift+0xd4>)
 800837c:	0049      	lsls	r1, r1, #1
 800837e:	f000 fa17 	bl	80087b0 <__assert_func>
 8008382:	3101      	adds	r1, #1
 8008384:	005b      	lsls	r3, r3, #1
 8008386:	e7e8      	b.n	800835a <__lshift+0x1a>
 8008388:	0098      	lsls	r0, r3, #2
 800838a:	500a      	str	r2, [r1, r0]
 800838c:	3301      	adds	r3, #1
 800838e:	42bb      	cmp	r3, r7
 8008390:	dbfa      	blt.n	8008388 <__lshift+0x48>
 8008392:	43fb      	mvns	r3, r7
 8008394:	17db      	asrs	r3, r3, #31
 8008396:	401f      	ands	r7, r3
 8008398:	00bf      	lsls	r7, r7, #2
 800839a:	0023      	movs	r3, r4
 800839c:	201f      	movs	r0, #31
 800839e:	19c9      	adds	r1, r1, r7
 80083a0:	0037      	movs	r7, r6
 80083a2:	6922      	ldr	r2, [r4, #16]
 80083a4:	3314      	adds	r3, #20
 80083a6:	0092      	lsls	r2, r2, #2
 80083a8:	189a      	adds	r2, r3, r2
 80083aa:	4007      	ands	r7, r0
 80083ac:	4206      	tst	r6, r0
 80083ae:	d029      	beq.n	8008404 <__lshift+0xc4>
 80083b0:	3001      	adds	r0, #1
 80083b2:	1bc0      	subs	r0, r0, r7
 80083b4:	9003      	str	r0, [sp, #12]
 80083b6:	468c      	mov	ip, r1
 80083b8:	2000      	movs	r0, #0
 80083ba:	681e      	ldr	r6, [r3, #0]
 80083bc:	40be      	lsls	r6, r7
 80083be:	4306      	orrs	r6, r0
 80083c0:	4660      	mov	r0, ip
 80083c2:	c040      	stmia	r0!, {r6}
 80083c4:	4684      	mov	ip, r0
 80083c6:	9e03      	ldr	r6, [sp, #12]
 80083c8:	cb01      	ldmia	r3!, {r0}
 80083ca:	40f0      	lsrs	r0, r6
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d8f4      	bhi.n	80083ba <__lshift+0x7a>
 80083d0:	0026      	movs	r6, r4
 80083d2:	3615      	adds	r6, #21
 80083d4:	2304      	movs	r3, #4
 80083d6:	42b2      	cmp	r2, r6
 80083d8:	d304      	bcc.n	80083e4 <__lshift+0xa4>
 80083da:	1b13      	subs	r3, r2, r4
 80083dc:	3b15      	subs	r3, #21
 80083de:	089b      	lsrs	r3, r3, #2
 80083e0:	3301      	adds	r3, #1
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	50c8      	str	r0, [r1, r3]
 80083e6:	2800      	cmp	r0, #0
 80083e8:	d002      	beq.n	80083f0 <__lshift+0xb0>
 80083ea:	9b01      	ldr	r3, [sp, #4]
 80083ec:	3302      	adds	r3, #2
 80083ee:	9300      	str	r3, [sp, #0]
 80083f0:	9b00      	ldr	r3, [sp, #0]
 80083f2:	9802      	ldr	r0, [sp, #8]
 80083f4:	3b01      	subs	r3, #1
 80083f6:	0021      	movs	r1, r4
 80083f8:	612b      	str	r3, [r5, #16]
 80083fa:	f7ff fdcb 	bl	8007f94 <_Bfree>
 80083fe:	0028      	movs	r0, r5
 8008400:	b005      	add	sp, #20
 8008402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008404:	cb01      	ldmia	r3!, {r0}
 8008406:	c101      	stmia	r1!, {r0}
 8008408:	429a      	cmp	r2, r3
 800840a:	d8fb      	bhi.n	8008404 <__lshift+0xc4>
 800840c:	e7f0      	b.n	80083f0 <__lshift+0xb0>
 800840e:	46c0      	nop			@ (mov r8, r8)
 8008410:	08009cbc 	.word	0x08009cbc
 8008414:	08009ccd 	.word	0x08009ccd

08008418 <__mcmp>:
 8008418:	b530      	push	{r4, r5, lr}
 800841a:	690b      	ldr	r3, [r1, #16]
 800841c:	6904      	ldr	r4, [r0, #16]
 800841e:	0002      	movs	r2, r0
 8008420:	1ae0      	subs	r0, r4, r3
 8008422:	429c      	cmp	r4, r3
 8008424:	d10f      	bne.n	8008446 <__mcmp+0x2e>
 8008426:	3214      	adds	r2, #20
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	3114      	adds	r1, #20
 800842c:	0014      	movs	r4, r2
 800842e:	18c9      	adds	r1, r1, r3
 8008430:	18d2      	adds	r2, r2, r3
 8008432:	3a04      	subs	r2, #4
 8008434:	3904      	subs	r1, #4
 8008436:	6815      	ldr	r5, [r2, #0]
 8008438:	680b      	ldr	r3, [r1, #0]
 800843a:	429d      	cmp	r5, r3
 800843c:	d004      	beq.n	8008448 <__mcmp+0x30>
 800843e:	2001      	movs	r0, #1
 8008440:	429d      	cmp	r5, r3
 8008442:	d200      	bcs.n	8008446 <__mcmp+0x2e>
 8008444:	3802      	subs	r0, #2
 8008446:	bd30      	pop	{r4, r5, pc}
 8008448:	4294      	cmp	r4, r2
 800844a:	d3f2      	bcc.n	8008432 <__mcmp+0x1a>
 800844c:	e7fb      	b.n	8008446 <__mcmp+0x2e>
	...

08008450 <__mdiff>:
 8008450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008452:	000c      	movs	r4, r1
 8008454:	b087      	sub	sp, #28
 8008456:	9000      	str	r0, [sp, #0]
 8008458:	0011      	movs	r1, r2
 800845a:	0020      	movs	r0, r4
 800845c:	0017      	movs	r7, r2
 800845e:	f7ff ffdb 	bl	8008418 <__mcmp>
 8008462:	1e05      	subs	r5, r0, #0
 8008464:	d110      	bne.n	8008488 <__mdiff+0x38>
 8008466:	0001      	movs	r1, r0
 8008468:	9800      	ldr	r0, [sp, #0]
 800846a:	f7ff fd4f 	bl	8007f0c <_Balloc>
 800846e:	1e02      	subs	r2, r0, #0
 8008470:	d104      	bne.n	800847c <__mdiff+0x2c>
 8008472:	4b40      	ldr	r3, [pc, #256]	@ (8008574 <__mdiff+0x124>)
 8008474:	4840      	ldr	r0, [pc, #256]	@ (8008578 <__mdiff+0x128>)
 8008476:	4941      	ldr	r1, [pc, #260]	@ (800857c <__mdiff+0x12c>)
 8008478:	f000 f99a 	bl	80087b0 <__assert_func>
 800847c:	2301      	movs	r3, #1
 800847e:	6145      	str	r5, [r0, #20]
 8008480:	6103      	str	r3, [r0, #16]
 8008482:	0010      	movs	r0, r2
 8008484:	b007      	add	sp, #28
 8008486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008488:	2600      	movs	r6, #0
 800848a:	42b0      	cmp	r0, r6
 800848c:	da03      	bge.n	8008496 <__mdiff+0x46>
 800848e:	0023      	movs	r3, r4
 8008490:	003c      	movs	r4, r7
 8008492:	001f      	movs	r7, r3
 8008494:	3601      	adds	r6, #1
 8008496:	6861      	ldr	r1, [r4, #4]
 8008498:	9800      	ldr	r0, [sp, #0]
 800849a:	f7ff fd37 	bl	8007f0c <_Balloc>
 800849e:	1e02      	subs	r2, r0, #0
 80084a0:	d103      	bne.n	80084aa <__mdiff+0x5a>
 80084a2:	4b34      	ldr	r3, [pc, #208]	@ (8008574 <__mdiff+0x124>)
 80084a4:	4834      	ldr	r0, [pc, #208]	@ (8008578 <__mdiff+0x128>)
 80084a6:	4936      	ldr	r1, [pc, #216]	@ (8008580 <__mdiff+0x130>)
 80084a8:	e7e6      	b.n	8008478 <__mdiff+0x28>
 80084aa:	6923      	ldr	r3, [r4, #16]
 80084ac:	3414      	adds	r4, #20
 80084ae:	9300      	str	r3, [sp, #0]
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	18e3      	adds	r3, r4, r3
 80084b4:	0021      	movs	r1, r4
 80084b6:	9401      	str	r4, [sp, #4]
 80084b8:	003c      	movs	r4, r7
 80084ba:	9302      	str	r3, [sp, #8]
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	3414      	adds	r4, #20
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	18e3      	adds	r3, r4, r3
 80084c4:	9303      	str	r3, [sp, #12]
 80084c6:	0003      	movs	r3, r0
 80084c8:	60c6      	str	r6, [r0, #12]
 80084ca:	468c      	mov	ip, r1
 80084cc:	2000      	movs	r0, #0
 80084ce:	3314      	adds	r3, #20
 80084d0:	9304      	str	r3, [sp, #16]
 80084d2:	9305      	str	r3, [sp, #20]
 80084d4:	4663      	mov	r3, ip
 80084d6:	cb20      	ldmia	r3!, {r5}
 80084d8:	b2a9      	uxth	r1, r5
 80084da:	000e      	movs	r6, r1
 80084dc:	469c      	mov	ip, r3
 80084de:	cc08      	ldmia	r4!, {r3}
 80084e0:	0c2d      	lsrs	r5, r5, #16
 80084e2:	b299      	uxth	r1, r3
 80084e4:	1a71      	subs	r1, r6, r1
 80084e6:	1809      	adds	r1, r1, r0
 80084e8:	0c1b      	lsrs	r3, r3, #16
 80084ea:	1408      	asrs	r0, r1, #16
 80084ec:	1aeb      	subs	r3, r5, r3
 80084ee:	181b      	adds	r3, r3, r0
 80084f0:	1418      	asrs	r0, r3, #16
 80084f2:	b289      	uxth	r1, r1
 80084f4:	041b      	lsls	r3, r3, #16
 80084f6:	4319      	orrs	r1, r3
 80084f8:	9b05      	ldr	r3, [sp, #20]
 80084fa:	c302      	stmia	r3!, {r1}
 80084fc:	9305      	str	r3, [sp, #20]
 80084fe:	9b03      	ldr	r3, [sp, #12]
 8008500:	42a3      	cmp	r3, r4
 8008502:	d8e7      	bhi.n	80084d4 <__mdiff+0x84>
 8008504:	0039      	movs	r1, r7
 8008506:	9c03      	ldr	r4, [sp, #12]
 8008508:	3115      	adds	r1, #21
 800850a:	2304      	movs	r3, #4
 800850c:	428c      	cmp	r4, r1
 800850e:	d304      	bcc.n	800851a <__mdiff+0xca>
 8008510:	1be3      	subs	r3, r4, r7
 8008512:	3b15      	subs	r3, #21
 8008514:	089b      	lsrs	r3, r3, #2
 8008516:	3301      	adds	r3, #1
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	9901      	ldr	r1, [sp, #4]
 800851c:	18cd      	adds	r5, r1, r3
 800851e:	9904      	ldr	r1, [sp, #16]
 8008520:	002e      	movs	r6, r5
 8008522:	18cb      	adds	r3, r1, r3
 8008524:	001f      	movs	r7, r3
 8008526:	9902      	ldr	r1, [sp, #8]
 8008528:	428e      	cmp	r6, r1
 800852a:	d311      	bcc.n	8008550 <__mdiff+0x100>
 800852c:	9c02      	ldr	r4, [sp, #8]
 800852e:	1ee9      	subs	r1, r5, #3
 8008530:	2000      	movs	r0, #0
 8008532:	428c      	cmp	r4, r1
 8008534:	d304      	bcc.n	8008540 <__mdiff+0xf0>
 8008536:	0021      	movs	r1, r4
 8008538:	3103      	adds	r1, #3
 800853a:	1b49      	subs	r1, r1, r5
 800853c:	0889      	lsrs	r1, r1, #2
 800853e:	0088      	lsls	r0, r1, #2
 8008540:	181b      	adds	r3, r3, r0
 8008542:	3b04      	subs	r3, #4
 8008544:	6819      	ldr	r1, [r3, #0]
 8008546:	2900      	cmp	r1, #0
 8008548:	d010      	beq.n	800856c <__mdiff+0x11c>
 800854a:	9b00      	ldr	r3, [sp, #0]
 800854c:	6113      	str	r3, [r2, #16]
 800854e:	e798      	b.n	8008482 <__mdiff+0x32>
 8008550:	4684      	mov	ip, r0
 8008552:	ce02      	ldmia	r6!, {r1}
 8008554:	b288      	uxth	r0, r1
 8008556:	4460      	add	r0, ip
 8008558:	1400      	asrs	r0, r0, #16
 800855a:	0c0c      	lsrs	r4, r1, #16
 800855c:	1904      	adds	r4, r0, r4
 800855e:	4461      	add	r1, ip
 8008560:	1420      	asrs	r0, r4, #16
 8008562:	b289      	uxth	r1, r1
 8008564:	0424      	lsls	r4, r4, #16
 8008566:	4321      	orrs	r1, r4
 8008568:	c702      	stmia	r7!, {r1}
 800856a:	e7dc      	b.n	8008526 <__mdiff+0xd6>
 800856c:	9900      	ldr	r1, [sp, #0]
 800856e:	3901      	subs	r1, #1
 8008570:	9100      	str	r1, [sp, #0]
 8008572:	e7e6      	b.n	8008542 <__mdiff+0xf2>
 8008574:	08009cbc 	.word	0x08009cbc
 8008578:	08009ccd 	.word	0x08009ccd
 800857c:	00000237 	.word	0x00000237
 8008580:	00000245 	.word	0x00000245

08008584 <__d2b>:
 8008584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008586:	2101      	movs	r1, #1
 8008588:	0016      	movs	r6, r2
 800858a:	001f      	movs	r7, r3
 800858c:	f7ff fcbe 	bl	8007f0c <_Balloc>
 8008590:	1e04      	subs	r4, r0, #0
 8008592:	d105      	bne.n	80085a0 <__d2b+0x1c>
 8008594:	0022      	movs	r2, r4
 8008596:	4b25      	ldr	r3, [pc, #148]	@ (800862c <__d2b+0xa8>)
 8008598:	4825      	ldr	r0, [pc, #148]	@ (8008630 <__d2b+0xac>)
 800859a:	4926      	ldr	r1, [pc, #152]	@ (8008634 <__d2b+0xb0>)
 800859c:	f000 f908 	bl	80087b0 <__assert_func>
 80085a0:	033b      	lsls	r3, r7, #12
 80085a2:	007d      	lsls	r5, r7, #1
 80085a4:	0b1b      	lsrs	r3, r3, #12
 80085a6:	0d6d      	lsrs	r5, r5, #21
 80085a8:	d002      	beq.n	80085b0 <__d2b+0x2c>
 80085aa:	2280      	movs	r2, #128	@ 0x80
 80085ac:	0352      	lsls	r2, r2, #13
 80085ae:	4313      	orrs	r3, r2
 80085b0:	9301      	str	r3, [sp, #4]
 80085b2:	2e00      	cmp	r6, #0
 80085b4:	d025      	beq.n	8008602 <__d2b+0x7e>
 80085b6:	4668      	mov	r0, sp
 80085b8:	9600      	str	r6, [sp, #0]
 80085ba:	f7ff fd74 	bl	80080a6 <__lo0bits>
 80085be:	9b01      	ldr	r3, [sp, #4]
 80085c0:	9900      	ldr	r1, [sp, #0]
 80085c2:	2800      	cmp	r0, #0
 80085c4:	d01b      	beq.n	80085fe <__d2b+0x7a>
 80085c6:	2220      	movs	r2, #32
 80085c8:	001e      	movs	r6, r3
 80085ca:	1a12      	subs	r2, r2, r0
 80085cc:	4096      	lsls	r6, r2
 80085ce:	0032      	movs	r2, r6
 80085d0:	40c3      	lsrs	r3, r0
 80085d2:	430a      	orrs	r2, r1
 80085d4:	6162      	str	r2, [r4, #20]
 80085d6:	9301      	str	r3, [sp, #4]
 80085d8:	9e01      	ldr	r6, [sp, #4]
 80085da:	61a6      	str	r6, [r4, #24]
 80085dc:	1e73      	subs	r3, r6, #1
 80085de:	419e      	sbcs	r6, r3
 80085e0:	3601      	adds	r6, #1
 80085e2:	6126      	str	r6, [r4, #16]
 80085e4:	2d00      	cmp	r5, #0
 80085e6:	d014      	beq.n	8008612 <__d2b+0x8e>
 80085e8:	2635      	movs	r6, #53	@ 0x35
 80085ea:	4b13      	ldr	r3, [pc, #76]	@ (8008638 <__d2b+0xb4>)
 80085ec:	18ed      	adds	r5, r5, r3
 80085ee:	9b08      	ldr	r3, [sp, #32]
 80085f0:	182d      	adds	r5, r5, r0
 80085f2:	601d      	str	r5, [r3, #0]
 80085f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085f6:	1a36      	subs	r6, r6, r0
 80085f8:	601e      	str	r6, [r3, #0]
 80085fa:	0020      	movs	r0, r4
 80085fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80085fe:	6161      	str	r1, [r4, #20]
 8008600:	e7ea      	b.n	80085d8 <__d2b+0x54>
 8008602:	a801      	add	r0, sp, #4
 8008604:	f7ff fd4f 	bl	80080a6 <__lo0bits>
 8008608:	9b01      	ldr	r3, [sp, #4]
 800860a:	2601      	movs	r6, #1
 800860c:	6163      	str	r3, [r4, #20]
 800860e:	3020      	adds	r0, #32
 8008610:	e7e7      	b.n	80085e2 <__d2b+0x5e>
 8008612:	4b0a      	ldr	r3, [pc, #40]	@ (800863c <__d2b+0xb8>)
 8008614:	18c0      	adds	r0, r0, r3
 8008616:	9b08      	ldr	r3, [sp, #32]
 8008618:	6018      	str	r0, [r3, #0]
 800861a:	4b09      	ldr	r3, [pc, #36]	@ (8008640 <__d2b+0xbc>)
 800861c:	18f3      	adds	r3, r6, r3
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	18e3      	adds	r3, r4, r3
 8008622:	6958      	ldr	r0, [r3, #20]
 8008624:	f7ff fd1e 	bl	8008064 <__hi0bits>
 8008628:	0176      	lsls	r6, r6, #5
 800862a:	e7e3      	b.n	80085f4 <__d2b+0x70>
 800862c:	08009cbc 	.word	0x08009cbc
 8008630:	08009ccd 	.word	0x08009ccd
 8008634:	0000030f 	.word	0x0000030f
 8008638:	fffffbcd 	.word	0xfffffbcd
 800863c:	fffffbce 	.word	0xfffffbce
 8008640:	3fffffff 	.word	0x3fffffff

08008644 <__sread>:
 8008644:	b570      	push	{r4, r5, r6, lr}
 8008646:	000c      	movs	r4, r1
 8008648:	250e      	movs	r5, #14
 800864a:	5f49      	ldrsh	r1, [r1, r5]
 800864c:	f000 f85a 	bl	8008704 <_read_r>
 8008650:	2800      	cmp	r0, #0
 8008652:	db03      	blt.n	800865c <__sread+0x18>
 8008654:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008656:	181b      	adds	r3, r3, r0
 8008658:	6563      	str	r3, [r4, #84]	@ 0x54
 800865a:	bd70      	pop	{r4, r5, r6, pc}
 800865c:	89a3      	ldrh	r3, [r4, #12]
 800865e:	4a02      	ldr	r2, [pc, #8]	@ (8008668 <__sread+0x24>)
 8008660:	4013      	ands	r3, r2
 8008662:	81a3      	strh	r3, [r4, #12]
 8008664:	e7f9      	b.n	800865a <__sread+0x16>
 8008666:	46c0      	nop			@ (mov r8, r8)
 8008668:	ffffefff 	.word	0xffffefff

0800866c <__swrite>:
 800866c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800866e:	001f      	movs	r7, r3
 8008670:	898b      	ldrh	r3, [r1, #12]
 8008672:	0005      	movs	r5, r0
 8008674:	000c      	movs	r4, r1
 8008676:	0016      	movs	r6, r2
 8008678:	05db      	lsls	r3, r3, #23
 800867a:	d505      	bpl.n	8008688 <__swrite+0x1c>
 800867c:	230e      	movs	r3, #14
 800867e:	5ec9      	ldrsh	r1, [r1, r3]
 8008680:	2200      	movs	r2, #0
 8008682:	2302      	movs	r3, #2
 8008684:	f000 f82a 	bl	80086dc <_lseek_r>
 8008688:	89a3      	ldrh	r3, [r4, #12]
 800868a:	4a05      	ldr	r2, [pc, #20]	@ (80086a0 <__swrite+0x34>)
 800868c:	0028      	movs	r0, r5
 800868e:	4013      	ands	r3, r2
 8008690:	81a3      	strh	r3, [r4, #12]
 8008692:	0032      	movs	r2, r6
 8008694:	230e      	movs	r3, #14
 8008696:	5ee1      	ldrsh	r1, [r4, r3]
 8008698:	003b      	movs	r3, r7
 800869a:	f000 f859 	bl	8008750 <_write_r>
 800869e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086a0:	ffffefff 	.word	0xffffefff

080086a4 <__sseek>:
 80086a4:	b570      	push	{r4, r5, r6, lr}
 80086a6:	000c      	movs	r4, r1
 80086a8:	250e      	movs	r5, #14
 80086aa:	5f49      	ldrsh	r1, [r1, r5]
 80086ac:	f000 f816 	bl	80086dc <_lseek_r>
 80086b0:	89a3      	ldrh	r3, [r4, #12]
 80086b2:	1c42      	adds	r2, r0, #1
 80086b4:	d103      	bne.n	80086be <__sseek+0x1a>
 80086b6:	4a05      	ldr	r2, [pc, #20]	@ (80086cc <__sseek+0x28>)
 80086b8:	4013      	ands	r3, r2
 80086ba:	81a3      	strh	r3, [r4, #12]
 80086bc:	bd70      	pop	{r4, r5, r6, pc}
 80086be:	2280      	movs	r2, #128	@ 0x80
 80086c0:	0152      	lsls	r2, r2, #5
 80086c2:	4313      	orrs	r3, r2
 80086c4:	81a3      	strh	r3, [r4, #12]
 80086c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80086c8:	e7f8      	b.n	80086bc <__sseek+0x18>
 80086ca:	46c0      	nop			@ (mov r8, r8)
 80086cc:	ffffefff 	.word	0xffffefff

080086d0 <__sclose>:
 80086d0:	b510      	push	{r4, lr}
 80086d2:	230e      	movs	r3, #14
 80086d4:	5ec9      	ldrsh	r1, [r1, r3]
 80086d6:	f000 f84f 	bl	8008778 <_close_r>
 80086da:	bd10      	pop	{r4, pc}

080086dc <_lseek_r>:
 80086dc:	b570      	push	{r4, r5, r6, lr}
 80086de:	0004      	movs	r4, r0
 80086e0:	0008      	movs	r0, r1
 80086e2:	0011      	movs	r1, r2
 80086e4:	001a      	movs	r2, r3
 80086e6:	2300      	movs	r3, #0
 80086e8:	4d05      	ldr	r5, [pc, #20]	@ (8008700 <_lseek_r+0x24>)
 80086ea:	602b      	str	r3, [r5, #0]
 80086ec:	f7fa ff4c 	bl	8003588 <_lseek>
 80086f0:	1c43      	adds	r3, r0, #1
 80086f2:	d103      	bne.n	80086fc <_lseek_r+0x20>
 80086f4:	682b      	ldr	r3, [r5, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d000      	beq.n	80086fc <_lseek_r+0x20>
 80086fa:	6023      	str	r3, [r4, #0]
 80086fc:	bd70      	pop	{r4, r5, r6, pc}
 80086fe:	46c0      	nop			@ (mov r8, r8)
 8008700:	20000498 	.word	0x20000498

08008704 <_read_r>:
 8008704:	b570      	push	{r4, r5, r6, lr}
 8008706:	0004      	movs	r4, r0
 8008708:	0008      	movs	r0, r1
 800870a:	0011      	movs	r1, r2
 800870c:	001a      	movs	r2, r3
 800870e:	2300      	movs	r3, #0
 8008710:	4d05      	ldr	r5, [pc, #20]	@ (8008728 <_read_r+0x24>)
 8008712:	602b      	str	r3, [r5, #0]
 8008714:	f7fa fede 	bl	80034d4 <_read>
 8008718:	1c43      	adds	r3, r0, #1
 800871a:	d103      	bne.n	8008724 <_read_r+0x20>
 800871c:	682b      	ldr	r3, [r5, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d000      	beq.n	8008724 <_read_r+0x20>
 8008722:	6023      	str	r3, [r4, #0]
 8008724:	bd70      	pop	{r4, r5, r6, pc}
 8008726:	46c0      	nop			@ (mov r8, r8)
 8008728:	20000498 	.word	0x20000498

0800872c <_sbrk_r>:
 800872c:	2300      	movs	r3, #0
 800872e:	b570      	push	{r4, r5, r6, lr}
 8008730:	4d06      	ldr	r5, [pc, #24]	@ (800874c <_sbrk_r+0x20>)
 8008732:	0004      	movs	r4, r0
 8008734:	0008      	movs	r0, r1
 8008736:	602b      	str	r3, [r5, #0]
 8008738:	f7fa ff32 	bl	80035a0 <_sbrk>
 800873c:	1c43      	adds	r3, r0, #1
 800873e:	d103      	bne.n	8008748 <_sbrk_r+0x1c>
 8008740:	682b      	ldr	r3, [r5, #0]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d000      	beq.n	8008748 <_sbrk_r+0x1c>
 8008746:	6023      	str	r3, [r4, #0]
 8008748:	bd70      	pop	{r4, r5, r6, pc}
 800874a:	46c0      	nop			@ (mov r8, r8)
 800874c:	20000498 	.word	0x20000498

08008750 <_write_r>:
 8008750:	b570      	push	{r4, r5, r6, lr}
 8008752:	0004      	movs	r4, r0
 8008754:	0008      	movs	r0, r1
 8008756:	0011      	movs	r1, r2
 8008758:	001a      	movs	r2, r3
 800875a:	2300      	movs	r3, #0
 800875c:	4d05      	ldr	r5, [pc, #20]	@ (8008774 <_write_r+0x24>)
 800875e:	602b      	str	r3, [r5, #0]
 8008760:	f7fa fed5 	bl	800350e <_write>
 8008764:	1c43      	adds	r3, r0, #1
 8008766:	d103      	bne.n	8008770 <_write_r+0x20>
 8008768:	682b      	ldr	r3, [r5, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d000      	beq.n	8008770 <_write_r+0x20>
 800876e:	6023      	str	r3, [r4, #0]
 8008770:	bd70      	pop	{r4, r5, r6, pc}
 8008772:	46c0      	nop			@ (mov r8, r8)
 8008774:	20000498 	.word	0x20000498

08008778 <_close_r>:
 8008778:	2300      	movs	r3, #0
 800877a:	b570      	push	{r4, r5, r6, lr}
 800877c:	4d06      	ldr	r5, [pc, #24]	@ (8008798 <_close_r+0x20>)
 800877e:	0004      	movs	r4, r0
 8008780:	0008      	movs	r0, r1
 8008782:	602b      	str	r3, [r5, #0]
 8008784:	f7fa fedf 	bl	8003546 <_close>
 8008788:	1c43      	adds	r3, r0, #1
 800878a:	d103      	bne.n	8008794 <_close_r+0x1c>
 800878c:	682b      	ldr	r3, [r5, #0]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d000      	beq.n	8008794 <_close_r+0x1c>
 8008792:	6023      	str	r3, [r4, #0]
 8008794:	bd70      	pop	{r4, r5, r6, pc}
 8008796:	46c0      	nop			@ (mov r8, r8)
 8008798:	20000498 	.word	0x20000498

0800879c <memcpy>:
 800879c:	2300      	movs	r3, #0
 800879e:	b510      	push	{r4, lr}
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d100      	bne.n	80087a6 <memcpy+0xa>
 80087a4:	bd10      	pop	{r4, pc}
 80087a6:	5ccc      	ldrb	r4, [r1, r3]
 80087a8:	54c4      	strb	r4, [r0, r3]
 80087aa:	3301      	adds	r3, #1
 80087ac:	e7f8      	b.n	80087a0 <memcpy+0x4>
	...

080087b0 <__assert_func>:
 80087b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80087b2:	0014      	movs	r4, r2
 80087b4:	001a      	movs	r2, r3
 80087b6:	4b09      	ldr	r3, [pc, #36]	@ (80087dc <__assert_func+0x2c>)
 80087b8:	0005      	movs	r5, r0
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	000e      	movs	r6, r1
 80087be:	68d8      	ldr	r0, [r3, #12]
 80087c0:	4b07      	ldr	r3, [pc, #28]	@ (80087e0 <__assert_func+0x30>)
 80087c2:	2c00      	cmp	r4, #0
 80087c4:	d101      	bne.n	80087ca <__assert_func+0x1a>
 80087c6:	4b07      	ldr	r3, [pc, #28]	@ (80087e4 <__assert_func+0x34>)
 80087c8:	001c      	movs	r4, r3
 80087ca:	4907      	ldr	r1, [pc, #28]	@ (80087e8 <__assert_func+0x38>)
 80087cc:	9301      	str	r3, [sp, #4]
 80087ce:	9402      	str	r4, [sp, #8]
 80087d0:	002b      	movs	r3, r5
 80087d2:	9600      	str	r6, [sp, #0]
 80087d4:	f000 f894 	bl	8008900 <fiprintf>
 80087d8:	f000 f8af 	bl	800893a <abort>
 80087dc:	20000020 	.word	0x20000020
 80087e0:	08009d30 	.word	0x08009d30
 80087e4:	08009d6b 	.word	0x08009d6b
 80087e8:	08009d3d 	.word	0x08009d3d

080087ec <_calloc_r>:
 80087ec:	b570      	push	{r4, r5, r6, lr}
 80087ee:	0c0b      	lsrs	r3, r1, #16
 80087f0:	0c15      	lsrs	r5, r2, #16
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d11e      	bne.n	8008834 <_calloc_r+0x48>
 80087f6:	2d00      	cmp	r5, #0
 80087f8:	d10c      	bne.n	8008814 <_calloc_r+0x28>
 80087fa:	b289      	uxth	r1, r1
 80087fc:	b294      	uxth	r4, r2
 80087fe:	434c      	muls	r4, r1
 8008800:	0021      	movs	r1, r4
 8008802:	f7ff fa41 	bl	8007c88 <_malloc_r>
 8008806:	1e05      	subs	r5, r0, #0
 8008808:	d01b      	beq.n	8008842 <_calloc_r+0x56>
 800880a:	0022      	movs	r2, r4
 800880c:	2100      	movs	r1, #0
 800880e:	f7fe fb55 	bl	8006ebc <memset>
 8008812:	e016      	b.n	8008842 <_calloc_r+0x56>
 8008814:	1c2b      	adds	r3, r5, #0
 8008816:	1c0c      	adds	r4, r1, #0
 8008818:	b289      	uxth	r1, r1
 800881a:	b292      	uxth	r2, r2
 800881c:	434a      	muls	r2, r1
 800881e:	b29b      	uxth	r3, r3
 8008820:	b2a1      	uxth	r1, r4
 8008822:	4359      	muls	r1, r3
 8008824:	0c14      	lsrs	r4, r2, #16
 8008826:	190c      	adds	r4, r1, r4
 8008828:	0c23      	lsrs	r3, r4, #16
 800882a:	d107      	bne.n	800883c <_calloc_r+0x50>
 800882c:	0424      	lsls	r4, r4, #16
 800882e:	b292      	uxth	r2, r2
 8008830:	4314      	orrs	r4, r2
 8008832:	e7e5      	b.n	8008800 <_calloc_r+0x14>
 8008834:	2d00      	cmp	r5, #0
 8008836:	d101      	bne.n	800883c <_calloc_r+0x50>
 8008838:	1c14      	adds	r4, r2, #0
 800883a:	e7ed      	b.n	8008818 <_calloc_r+0x2c>
 800883c:	230c      	movs	r3, #12
 800883e:	2500      	movs	r5, #0
 8008840:	6003      	str	r3, [r0, #0]
 8008842:	0028      	movs	r0, r5
 8008844:	bd70      	pop	{r4, r5, r6, pc}
	...

08008848 <_free_r>:
 8008848:	b570      	push	{r4, r5, r6, lr}
 800884a:	0005      	movs	r5, r0
 800884c:	1e0c      	subs	r4, r1, #0
 800884e:	d010      	beq.n	8008872 <_free_r+0x2a>
 8008850:	3c04      	subs	r4, #4
 8008852:	6823      	ldr	r3, [r4, #0]
 8008854:	2b00      	cmp	r3, #0
 8008856:	da00      	bge.n	800885a <_free_r+0x12>
 8008858:	18e4      	adds	r4, r4, r3
 800885a:	0028      	movs	r0, r5
 800885c:	f7ff fb46 	bl	8007eec <__malloc_lock>
 8008860:	4a1d      	ldr	r2, [pc, #116]	@ (80088d8 <_free_r+0x90>)
 8008862:	6813      	ldr	r3, [r2, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d105      	bne.n	8008874 <_free_r+0x2c>
 8008868:	6063      	str	r3, [r4, #4]
 800886a:	6014      	str	r4, [r2, #0]
 800886c:	0028      	movs	r0, r5
 800886e:	f7ff fb45 	bl	8007efc <__malloc_unlock>
 8008872:	bd70      	pop	{r4, r5, r6, pc}
 8008874:	42a3      	cmp	r3, r4
 8008876:	d908      	bls.n	800888a <_free_r+0x42>
 8008878:	6820      	ldr	r0, [r4, #0]
 800887a:	1821      	adds	r1, r4, r0
 800887c:	428b      	cmp	r3, r1
 800887e:	d1f3      	bne.n	8008868 <_free_r+0x20>
 8008880:	6819      	ldr	r1, [r3, #0]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	1809      	adds	r1, r1, r0
 8008886:	6021      	str	r1, [r4, #0]
 8008888:	e7ee      	b.n	8008868 <_free_r+0x20>
 800888a:	001a      	movs	r2, r3
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d001      	beq.n	8008896 <_free_r+0x4e>
 8008892:	42a3      	cmp	r3, r4
 8008894:	d9f9      	bls.n	800888a <_free_r+0x42>
 8008896:	6811      	ldr	r1, [r2, #0]
 8008898:	1850      	adds	r0, r2, r1
 800889a:	42a0      	cmp	r0, r4
 800889c:	d10b      	bne.n	80088b6 <_free_r+0x6e>
 800889e:	6820      	ldr	r0, [r4, #0]
 80088a0:	1809      	adds	r1, r1, r0
 80088a2:	1850      	adds	r0, r2, r1
 80088a4:	6011      	str	r1, [r2, #0]
 80088a6:	4283      	cmp	r3, r0
 80088a8:	d1e0      	bne.n	800886c <_free_r+0x24>
 80088aa:	6818      	ldr	r0, [r3, #0]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	1841      	adds	r1, r0, r1
 80088b0:	6011      	str	r1, [r2, #0]
 80088b2:	6053      	str	r3, [r2, #4]
 80088b4:	e7da      	b.n	800886c <_free_r+0x24>
 80088b6:	42a0      	cmp	r0, r4
 80088b8:	d902      	bls.n	80088c0 <_free_r+0x78>
 80088ba:	230c      	movs	r3, #12
 80088bc:	602b      	str	r3, [r5, #0]
 80088be:	e7d5      	b.n	800886c <_free_r+0x24>
 80088c0:	6820      	ldr	r0, [r4, #0]
 80088c2:	1821      	adds	r1, r4, r0
 80088c4:	428b      	cmp	r3, r1
 80088c6:	d103      	bne.n	80088d0 <_free_r+0x88>
 80088c8:	6819      	ldr	r1, [r3, #0]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	1809      	adds	r1, r1, r0
 80088ce:	6021      	str	r1, [r4, #0]
 80088d0:	6063      	str	r3, [r4, #4]
 80088d2:	6054      	str	r4, [r2, #4]
 80088d4:	e7ca      	b.n	800886c <_free_r+0x24>
 80088d6:	46c0      	nop			@ (mov r8, r8)
 80088d8:	20000494 	.word	0x20000494

080088dc <__ascii_mbtowc>:
 80088dc:	b082      	sub	sp, #8
 80088de:	2900      	cmp	r1, #0
 80088e0:	d100      	bne.n	80088e4 <__ascii_mbtowc+0x8>
 80088e2:	a901      	add	r1, sp, #4
 80088e4:	1e10      	subs	r0, r2, #0
 80088e6:	d006      	beq.n	80088f6 <__ascii_mbtowc+0x1a>
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d006      	beq.n	80088fa <__ascii_mbtowc+0x1e>
 80088ec:	7813      	ldrb	r3, [r2, #0]
 80088ee:	600b      	str	r3, [r1, #0]
 80088f0:	7810      	ldrb	r0, [r2, #0]
 80088f2:	1e43      	subs	r3, r0, #1
 80088f4:	4198      	sbcs	r0, r3
 80088f6:	b002      	add	sp, #8
 80088f8:	4770      	bx	lr
 80088fa:	2002      	movs	r0, #2
 80088fc:	4240      	negs	r0, r0
 80088fe:	e7fa      	b.n	80088f6 <__ascii_mbtowc+0x1a>

08008900 <fiprintf>:
 8008900:	b40e      	push	{r1, r2, r3}
 8008902:	b517      	push	{r0, r1, r2, r4, lr}
 8008904:	4c05      	ldr	r4, [pc, #20]	@ (800891c <fiprintf+0x1c>)
 8008906:	ab05      	add	r3, sp, #20
 8008908:	cb04      	ldmia	r3!, {r2}
 800890a:	0001      	movs	r1, r0
 800890c:	6820      	ldr	r0, [r4, #0]
 800890e:	9301      	str	r3, [sp, #4]
 8008910:	f000 f842 	bl	8008998 <_vfiprintf_r>
 8008914:	bc1e      	pop	{r1, r2, r3, r4}
 8008916:	bc08      	pop	{r3}
 8008918:	b003      	add	sp, #12
 800891a:	4718      	bx	r3
 800891c:	20000020 	.word	0x20000020

08008920 <__ascii_wctomb>:
 8008920:	0003      	movs	r3, r0
 8008922:	1e08      	subs	r0, r1, #0
 8008924:	d005      	beq.n	8008932 <__ascii_wctomb+0x12>
 8008926:	2aff      	cmp	r2, #255	@ 0xff
 8008928:	d904      	bls.n	8008934 <__ascii_wctomb+0x14>
 800892a:	228a      	movs	r2, #138	@ 0x8a
 800892c:	2001      	movs	r0, #1
 800892e:	601a      	str	r2, [r3, #0]
 8008930:	4240      	negs	r0, r0
 8008932:	4770      	bx	lr
 8008934:	2001      	movs	r0, #1
 8008936:	700a      	strb	r2, [r1, #0]
 8008938:	e7fb      	b.n	8008932 <__ascii_wctomb+0x12>

0800893a <abort>:
 800893a:	2006      	movs	r0, #6
 800893c:	b510      	push	{r4, lr}
 800893e:	f000 fa7b 	bl	8008e38 <raise>
 8008942:	2001      	movs	r0, #1
 8008944:	f7fa fdb9 	bl	80034ba <_exit>

08008948 <__sfputc_r>:
 8008948:	6893      	ldr	r3, [r2, #8]
 800894a:	b510      	push	{r4, lr}
 800894c:	3b01      	subs	r3, #1
 800894e:	6093      	str	r3, [r2, #8]
 8008950:	2b00      	cmp	r3, #0
 8008952:	da04      	bge.n	800895e <__sfputc_r+0x16>
 8008954:	6994      	ldr	r4, [r2, #24]
 8008956:	42a3      	cmp	r3, r4
 8008958:	db07      	blt.n	800896a <__sfputc_r+0x22>
 800895a:	290a      	cmp	r1, #10
 800895c:	d005      	beq.n	800896a <__sfputc_r+0x22>
 800895e:	6813      	ldr	r3, [r2, #0]
 8008960:	1c58      	adds	r0, r3, #1
 8008962:	6010      	str	r0, [r2, #0]
 8008964:	7019      	strb	r1, [r3, #0]
 8008966:	0008      	movs	r0, r1
 8008968:	bd10      	pop	{r4, pc}
 800896a:	f000 f931 	bl	8008bd0 <__swbuf_r>
 800896e:	0001      	movs	r1, r0
 8008970:	e7f9      	b.n	8008966 <__sfputc_r+0x1e>

08008972 <__sfputs_r>:
 8008972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008974:	0006      	movs	r6, r0
 8008976:	000f      	movs	r7, r1
 8008978:	0014      	movs	r4, r2
 800897a:	18d5      	adds	r5, r2, r3
 800897c:	42ac      	cmp	r4, r5
 800897e:	d101      	bne.n	8008984 <__sfputs_r+0x12>
 8008980:	2000      	movs	r0, #0
 8008982:	e007      	b.n	8008994 <__sfputs_r+0x22>
 8008984:	7821      	ldrb	r1, [r4, #0]
 8008986:	003a      	movs	r2, r7
 8008988:	0030      	movs	r0, r6
 800898a:	f7ff ffdd 	bl	8008948 <__sfputc_r>
 800898e:	3401      	adds	r4, #1
 8008990:	1c43      	adds	r3, r0, #1
 8008992:	d1f3      	bne.n	800897c <__sfputs_r+0xa>
 8008994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008998 <_vfiprintf_r>:
 8008998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800899a:	b0a1      	sub	sp, #132	@ 0x84
 800899c:	000f      	movs	r7, r1
 800899e:	0015      	movs	r5, r2
 80089a0:	001e      	movs	r6, r3
 80089a2:	9003      	str	r0, [sp, #12]
 80089a4:	2800      	cmp	r0, #0
 80089a6:	d004      	beq.n	80089b2 <_vfiprintf_r+0x1a>
 80089a8:	6a03      	ldr	r3, [r0, #32]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d101      	bne.n	80089b2 <_vfiprintf_r+0x1a>
 80089ae:	f7fe fa51 	bl	8006e54 <__sinit>
 80089b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089b4:	07db      	lsls	r3, r3, #31
 80089b6:	d405      	bmi.n	80089c4 <_vfiprintf_r+0x2c>
 80089b8:	89bb      	ldrh	r3, [r7, #12]
 80089ba:	059b      	lsls	r3, r3, #22
 80089bc:	d402      	bmi.n	80089c4 <_vfiprintf_r+0x2c>
 80089be:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80089c0:	f7fe faaf 	bl	8006f22 <__retarget_lock_acquire_recursive>
 80089c4:	89bb      	ldrh	r3, [r7, #12]
 80089c6:	071b      	lsls	r3, r3, #28
 80089c8:	d502      	bpl.n	80089d0 <_vfiprintf_r+0x38>
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d113      	bne.n	80089f8 <_vfiprintf_r+0x60>
 80089d0:	0039      	movs	r1, r7
 80089d2:	9803      	ldr	r0, [sp, #12]
 80089d4:	f000 f93e 	bl	8008c54 <__swsetup_r>
 80089d8:	2800      	cmp	r0, #0
 80089da:	d00d      	beq.n	80089f8 <_vfiprintf_r+0x60>
 80089dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089de:	07db      	lsls	r3, r3, #31
 80089e0:	d503      	bpl.n	80089ea <_vfiprintf_r+0x52>
 80089e2:	2001      	movs	r0, #1
 80089e4:	4240      	negs	r0, r0
 80089e6:	b021      	add	sp, #132	@ 0x84
 80089e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089ea:	89bb      	ldrh	r3, [r7, #12]
 80089ec:	059b      	lsls	r3, r3, #22
 80089ee:	d4f8      	bmi.n	80089e2 <_vfiprintf_r+0x4a>
 80089f0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80089f2:	f7fe fa97 	bl	8006f24 <__retarget_lock_release_recursive>
 80089f6:	e7f4      	b.n	80089e2 <_vfiprintf_r+0x4a>
 80089f8:	2300      	movs	r3, #0
 80089fa:	ac08      	add	r4, sp, #32
 80089fc:	6163      	str	r3, [r4, #20]
 80089fe:	3320      	adds	r3, #32
 8008a00:	7663      	strb	r3, [r4, #25]
 8008a02:	3310      	adds	r3, #16
 8008a04:	76a3      	strb	r3, [r4, #26]
 8008a06:	9607      	str	r6, [sp, #28]
 8008a08:	002e      	movs	r6, r5
 8008a0a:	7833      	ldrb	r3, [r6, #0]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d001      	beq.n	8008a14 <_vfiprintf_r+0x7c>
 8008a10:	2b25      	cmp	r3, #37	@ 0x25
 8008a12:	d148      	bne.n	8008aa6 <_vfiprintf_r+0x10e>
 8008a14:	1b73      	subs	r3, r6, r5
 8008a16:	9305      	str	r3, [sp, #20]
 8008a18:	42ae      	cmp	r6, r5
 8008a1a:	d00b      	beq.n	8008a34 <_vfiprintf_r+0x9c>
 8008a1c:	002a      	movs	r2, r5
 8008a1e:	0039      	movs	r1, r7
 8008a20:	9803      	ldr	r0, [sp, #12]
 8008a22:	f7ff ffa6 	bl	8008972 <__sfputs_r>
 8008a26:	3001      	adds	r0, #1
 8008a28:	d100      	bne.n	8008a2c <_vfiprintf_r+0x94>
 8008a2a:	e0ae      	b.n	8008b8a <_vfiprintf_r+0x1f2>
 8008a2c:	6963      	ldr	r3, [r4, #20]
 8008a2e:	9a05      	ldr	r2, [sp, #20]
 8008a30:	189b      	adds	r3, r3, r2
 8008a32:	6163      	str	r3, [r4, #20]
 8008a34:	7833      	ldrb	r3, [r6, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d100      	bne.n	8008a3c <_vfiprintf_r+0xa4>
 8008a3a:	e0a6      	b.n	8008b8a <_vfiprintf_r+0x1f2>
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	2300      	movs	r3, #0
 8008a40:	4252      	negs	r2, r2
 8008a42:	6062      	str	r2, [r4, #4]
 8008a44:	a904      	add	r1, sp, #16
 8008a46:	3254      	adds	r2, #84	@ 0x54
 8008a48:	1852      	adds	r2, r2, r1
 8008a4a:	1c75      	adds	r5, r6, #1
 8008a4c:	6023      	str	r3, [r4, #0]
 8008a4e:	60e3      	str	r3, [r4, #12]
 8008a50:	60a3      	str	r3, [r4, #8]
 8008a52:	7013      	strb	r3, [r2, #0]
 8008a54:	65a3      	str	r3, [r4, #88]	@ 0x58
 8008a56:	4b59      	ldr	r3, [pc, #356]	@ (8008bbc <_vfiprintf_r+0x224>)
 8008a58:	2205      	movs	r2, #5
 8008a5a:	0018      	movs	r0, r3
 8008a5c:	7829      	ldrb	r1, [r5, #0]
 8008a5e:	9305      	str	r3, [sp, #20]
 8008a60:	f7fe fa66 	bl	8006f30 <memchr>
 8008a64:	1c6e      	adds	r6, r5, #1
 8008a66:	2800      	cmp	r0, #0
 8008a68:	d11f      	bne.n	8008aaa <_vfiprintf_r+0x112>
 8008a6a:	6822      	ldr	r2, [r4, #0]
 8008a6c:	06d3      	lsls	r3, r2, #27
 8008a6e:	d504      	bpl.n	8008a7a <_vfiprintf_r+0xe2>
 8008a70:	2353      	movs	r3, #83	@ 0x53
 8008a72:	a904      	add	r1, sp, #16
 8008a74:	185b      	adds	r3, r3, r1
 8008a76:	2120      	movs	r1, #32
 8008a78:	7019      	strb	r1, [r3, #0]
 8008a7a:	0713      	lsls	r3, r2, #28
 8008a7c:	d504      	bpl.n	8008a88 <_vfiprintf_r+0xf0>
 8008a7e:	2353      	movs	r3, #83	@ 0x53
 8008a80:	a904      	add	r1, sp, #16
 8008a82:	185b      	adds	r3, r3, r1
 8008a84:	212b      	movs	r1, #43	@ 0x2b
 8008a86:	7019      	strb	r1, [r3, #0]
 8008a88:	782b      	ldrb	r3, [r5, #0]
 8008a8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a8c:	d016      	beq.n	8008abc <_vfiprintf_r+0x124>
 8008a8e:	002e      	movs	r6, r5
 8008a90:	2100      	movs	r1, #0
 8008a92:	200a      	movs	r0, #10
 8008a94:	68e3      	ldr	r3, [r4, #12]
 8008a96:	7832      	ldrb	r2, [r6, #0]
 8008a98:	1c75      	adds	r5, r6, #1
 8008a9a:	3a30      	subs	r2, #48	@ 0x30
 8008a9c:	2a09      	cmp	r2, #9
 8008a9e:	d950      	bls.n	8008b42 <_vfiprintf_r+0x1aa>
 8008aa0:	2900      	cmp	r1, #0
 8008aa2:	d111      	bne.n	8008ac8 <_vfiprintf_r+0x130>
 8008aa4:	e017      	b.n	8008ad6 <_vfiprintf_r+0x13e>
 8008aa6:	3601      	adds	r6, #1
 8008aa8:	e7af      	b.n	8008a0a <_vfiprintf_r+0x72>
 8008aaa:	9b05      	ldr	r3, [sp, #20]
 8008aac:	6822      	ldr	r2, [r4, #0]
 8008aae:	1ac0      	subs	r0, r0, r3
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	4083      	lsls	r3, r0
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	0035      	movs	r5, r6
 8008ab8:	6023      	str	r3, [r4, #0]
 8008aba:	e7cc      	b.n	8008a56 <_vfiprintf_r+0xbe>
 8008abc:	9b07      	ldr	r3, [sp, #28]
 8008abe:	1d19      	adds	r1, r3, #4
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	9107      	str	r1, [sp, #28]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	db01      	blt.n	8008acc <_vfiprintf_r+0x134>
 8008ac8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008aca:	e004      	b.n	8008ad6 <_vfiprintf_r+0x13e>
 8008acc:	425b      	negs	r3, r3
 8008ace:	60e3      	str	r3, [r4, #12]
 8008ad0:	2302      	movs	r3, #2
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	6023      	str	r3, [r4, #0]
 8008ad6:	7833      	ldrb	r3, [r6, #0]
 8008ad8:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ada:	d10c      	bne.n	8008af6 <_vfiprintf_r+0x15e>
 8008adc:	7873      	ldrb	r3, [r6, #1]
 8008ade:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ae0:	d134      	bne.n	8008b4c <_vfiprintf_r+0x1b4>
 8008ae2:	9b07      	ldr	r3, [sp, #28]
 8008ae4:	3602      	adds	r6, #2
 8008ae6:	1d1a      	adds	r2, r3, #4
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	9207      	str	r2, [sp, #28]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	da01      	bge.n	8008af4 <_vfiprintf_r+0x15c>
 8008af0:	2301      	movs	r3, #1
 8008af2:	425b      	negs	r3, r3
 8008af4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008af6:	4d32      	ldr	r5, [pc, #200]	@ (8008bc0 <_vfiprintf_r+0x228>)
 8008af8:	2203      	movs	r2, #3
 8008afa:	0028      	movs	r0, r5
 8008afc:	7831      	ldrb	r1, [r6, #0]
 8008afe:	f7fe fa17 	bl	8006f30 <memchr>
 8008b02:	2800      	cmp	r0, #0
 8008b04:	d006      	beq.n	8008b14 <_vfiprintf_r+0x17c>
 8008b06:	2340      	movs	r3, #64	@ 0x40
 8008b08:	1b40      	subs	r0, r0, r5
 8008b0a:	4083      	lsls	r3, r0
 8008b0c:	6822      	ldr	r2, [r4, #0]
 8008b0e:	3601      	adds	r6, #1
 8008b10:	4313      	orrs	r3, r2
 8008b12:	6023      	str	r3, [r4, #0]
 8008b14:	7831      	ldrb	r1, [r6, #0]
 8008b16:	2206      	movs	r2, #6
 8008b18:	482a      	ldr	r0, [pc, #168]	@ (8008bc4 <_vfiprintf_r+0x22c>)
 8008b1a:	1c75      	adds	r5, r6, #1
 8008b1c:	7621      	strb	r1, [r4, #24]
 8008b1e:	f7fe fa07 	bl	8006f30 <memchr>
 8008b22:	2800      	cmp	r0, #0
 8008b24:	d040      	beq.n	8008ba8 <_vfiprintf_r+0x210>
 8008b26:	4b28      	ldr	r3, [pc, #160]	@ (8008bc8 <_vfiprintf_r+0x230>)
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d122      	bne.n	8008b72 <_vfiprintf_r+0x1da>
 8008b2c:	2207      	movs	r2, #7
 8008b2e:	9b07      	ldr	r3, [sp, #28]
 8008b30:	3307      	adds	r3, #7
 8008b32:	4393      	bics	r3, r2
 8008b34:	3308      	adds	r3, #8
 8008b36:	9307      	str	r3, [sp, #28]
 8008b38:	6963      	ldr	r3, [r4, #20]
 8008b3a:	9a04      	ldr	r2, [sp, #16]
 8008b3c:	189b      	adds	r3, r3, r2
 8008b3e:	6163      	str	r3, [r4, #20]
 8008b40:	e762      	b.n	8008a08 <_vfiprintf_r+0x70>
 8008b42:	4343      	muls	r3, r0
 8008b44:	002e      	movs	r6, r5
 8008b46:	2101      	movs	r1, #1
 8008b48:	189b      	adds	r3, r3, r2
 8008b4a:	e7a4      	b.n	8008a96 <_vfiprintf_r+0xfe>
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	200a      	movs	r0, #10
 8008b50:	0019      	movs	r1, r3
 8008b52:	3601      	adds	r6, #1
 8008b54:	6063      	str	r3, [r4, #4]
 8008b56:	7832      	ldrb	r2, [r6, #0]
 8008b58:	1c75      	adds	r5, r6, #1
 8008b5a:	3a30      	subs	r2, #48	@ 0x30
 8008b5c:	2a09      	cmp	r2, #9
 8008b5e:	d903      	bls.n	8008b68 <_vfiprintf_r+0x1d0>
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d0c8      	beq.n	8008af6 <_vfiprintf_r+0x15e>
 8008b64:	9109      	str	r1, [sp, #36]	@ 0x24
 8008b66:	e7c6      	b.n	8008af6 <_vfiprintf_r+0x15e>
 8008b68:	4341      	muls	r1, r0
 8008b6a:	002e      	movs	r6, r5
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	1889      	adds	r1, r1, r2
 8008b70:	e7f1      	b.n	8008b56 <_vfiprintf_r+0x1be>
 8008b72:	aa07      	add	r2, sp, #28
 8008b74:	9200      	str	r2, [sp, #0]
 8008b76:	0021      	movs	r1, r4
 8008b78:	003a      	movs	r2, r7
 8008b7a:	4b14      	ldr	r3, [pc, #80]	@ (8008bcc <_vfiprintf_r+0x234>)
 8008b7c:	9803      	ldr	r0, [sp, #12]
 8008b7e:	f7fd fd1f 	bl	80065c0 <_printf_float>
 8008b82:	9004      	str	r0, [sp, #16]
 8008b84:	9b04      	ldr	r3, [sp, #16]
 8008b86:	3301      	adds	r3, #1
 8008b88:	d1d6      	bne.n	8008b38 <_vfiprintf_r+0x1a0>
 8008b8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b8c:	07db      	lsls	r3, r3, #31
 8008b8e:	d405      	bmi.n	8008b9c <_vfiprintf_r+0x204>
 8008b90:	89bb      	ldrh	r3, [r7, #12]
 8008b92:	059b      	lsls	r3, r3, #22
 8008b94:	d402      	bmi.n	8008b9c <_vfiprintf_r+0x204>
 8008b96:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008b98:	f7fe f9c4 	bl	8006f24 <__retarget_lock_release_recursive>
 8008b9c:	89bb      	ldrh	r3, [r7, #12]
 8008b9e:	065b      	lsls	r3, r3, #25
 8008ba0:	d500      	bpl.n	8008ba4 <_vfiprintf_r+0x20c>
 8008ba2:	e71e      	b.n	80089e2 <_vfiprintf_r+0x4a>
 8008ba4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008ba6:	e71e      	b.n	80089e6 <_vfiprintf_r+0x4e>
 8008ba8:	aa07      	add	r2, sp, #28
 8008baa:	9200      	str	r2, [sp, #0]
 8008bac:	0021      	movs	r1, r4
 8008bae:	003a      	movs	r2, r7
 8008bb0:	4b06      	ldr	r3, [pc, #24]	@ (8008bcc <_vfiprintf_r+0x234>)
 8008bb2:	9803      	ldr	r0, [sp, #12]
 8008bb4:	f7fd ffb2 	bl	8006b1c <_printf_i>
 8008bb8:	e7e3      	b.n	8008b82 <_vfiprintf_r+0x1ea>
 8008bba:	46c0      	nop			@ (mov r8, r8)
 8008bbc:	08009d6c 	.word	0x08009d6c
 8008bc0:	08009d72 	.word	0x08009d72
 8008bc4:	08009d76 	.word	0x08009d76
 8008bc8:	080065c1 	.word	0x080065c1
 8008bcc:	08008973 	.word	0x08008973

08008bd0 <__swbuf_r>:
 8008bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd2:	0006      	movs	r6, r0
 8008bd4:	000d      	movs	r5, r1
 8008bd6:	0014      	movs	r4, r2
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	d004      	beq.n	8008be6 <__swbuf_r+0x16>
 8008bdc:	6a03      	ldr	r3, [r0, #32]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d101      	bne.n	8008be6 <__swbuf_r+0x16>
 8008be2:	f7fe f937 	bl	8006e54 <__sinit>
 8008be6:	69a3      	ldr	r3, [r4, #24]
 8008be8:	60a3      	str	r3, [r4, #8]
 8008bea:	89a3      	ldrh	r3, [r4, #12]
 8008bec:	071b      	lsls	r3, r3, #28
 8008bee:	d502      	bpl.n	8008bf6 <__swbuf_r+0x26>
 8008bf0:	6923      	ldr	r3, [r4, #16]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d109      	bne.n	8008c0a <__swbuf_r+0x3a>
 8008bf6:	0021      	movs	r1, r4
 8008bf8:	0030      	movs	r0, r6
 8008bfa:	f000 f82b 	bl	8008c54 <__swsetup_r>
 8008bfe:	2800      	cmp	r0, #0
 8008c00:	d003      	beq.n	8008c0a <__swbuf_r+0x3a>
 8008c02:	2501      	movs	r5, #1
 8008c04:	426d      	negs	r5, r5
 8008c06:	0028      	movs	r0, r5
 8008c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c0a:	6923      	ldr	r3, [r4, #16]
 8008c0c:	6820      	ldr	r0, [r4, #0]
 8008c0e:	b2ef      	uxtb	r7, r5
 8008c10:	1ac0      	subs	r0, r0, r3
 8008c12:	6963      	ldr	r3, [r4, #20]
 8008c14:	b2ed      	uxtb	r5, r5
 8008c16:	4283      	cmp	r3, r0
 8008c18:	dc05      	bgt.n	8008c26 <__swbuf_r+0x56>
 8008c1a:	0021      	movs	r1, r4
 8008c1c:	0030      	movs	r0, r6
 8008c1e:	f7ff f939 	bl	8007e94 <_fflush_r>
 8008c22:	2800      	cmp	r0, #0
 8008c24:	d1ed      	bne.n	8008c02 <__swbuf_r+0x32>
 8008c26:	68a3      	ldr	r3, [r4, #8]
 8008c28:	3001      	adds	r0, #1
 8008c2a:	3b01      	subs	r3, #1
 8008c2c:	60a3      	str	r3, [r4, #8]
 8008c2e:	6823      	ldr	r3, [r4, #0]
 8008c30:	1c5a      	adds	r2, r3, #1
 8008c32:	6022      	str	r2, [r4, #0]
 8008c34:	701f      	strb	r7, [r3, #0]
 8008c36:	6963      	ldr	r3, [r4, #20]
 8008c38:	4283      	cmp	r3, r0
 8008c3a:	d004      	beq.n	8008c46 <__swbuf_r+0x76>
 8008c3c:	89a3      	ldrh	r3, [r4, #12]
 8008c3e:	07db      	lsls	r3, r3, #31
 8008c40:	d5e1      	bpl.n	8008c06 <__swbuf_r+0x36>
 8008c42:	2d0a      	cmp	r5, #10
 8008c44:	d1df      	bne.n	8008c06 <__swbuf_r+0x36>
 8008c46:	0021      	movs	r1, r4
 8008c48:	0030      	movs	r0, r6
 8008c4a:	f7ff f923 	bl	8007e94 <_fflush_r>
 8008c4e:	2800      	cmp	r0, #0
 8008c50:	d0d9      	beq.n	8008c06 <__swbuf_r+0x36>
 8008c52:	e7d6      	b.n	8008c02 <__swbuf_r+0x32>

08008c54 <__swsetup_r>:
 8008c54:	4b2d      	ldr	r3, [pc, #180]	@ (8008d0c <__swsetup_r+0xb8>)
 8008c56:	b570      	push	{r4, r5, r6, lr}
 8008c58:	0005      	movs	r5, r0
 8008c5a:	6818      	ldr	r0, [r3, #0]
 8008c5c:	000c      	movs	r4, r1
 8008c5e:	2800      	cmp	r0, #0
 8008c60:	d004      	beq.n	8008c6c <__swsetup_r+0x18>
 8008c62:	6a03      	ldr	r3, [r0, #32]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d101      	bne.n	8008c6c <__swsetup_r+0x18>
 8008c68:	f7fe f8f4 	bl	8006e54 <__sinit>
 8008c6c:	220c      	movs	r2, #12
 8008c6e:	5ea3      	ldrsh	r3, [r4, r2]
 8008c70:	071a      	lsls	r2, r3, #28
 8008c72:	d423      	bmi.n	8008cbc <__swsetup_r+0x68>
 8008c74:	06da      	lsls	r2, r3, #27
 8008c76:	d407      	bmi.n	8008c88 <__swsetup_r+0x34>
 8008c78:	2209      	movs	r2, #9
 8008c7a:	602a      	str	r2, [r5, #0]
 8008c7c:	2240      	movs	r2, #64	@ 0x40
 8008c7e:	2001      	movs	r0, #1
 8008c80:	4313      	orrs	r3, r2
 8008c82:	81a3      	strh	r3, [r4, #12]
 8008c84:	4240      	negs	r0, r0
 8008c86:	e03a      	b.n	8008cfe <__swsetup_r+0xaa>
 8008c88:	075b      	lsls	r3, r3, #29
 8008c8a:	d513      	bpl.n	8008cb4 <__swsetup_r+0x60>
 8008c8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c8e:	2900      	cmp	r1, #0
 8008c90:	d008      	beq.n	8008ca4 <__swsetup_r+0x50>
 8008c92:	0023      	movs	r3, r4
 8008c94:	3344      	adds	r3, #68	@ 0x44
 8008c96:	4299      	cmp	r1, r3
 8008c98:	d002      	beq.n	8008ca0 <__swsetup_r+0x4c>
 8008c9a:	0028      	movs	r0, r5
 8008c9c:	f7ff fdd4 	bl	8008848 <_free_r>
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ca4:	2224      	movs	r2, #36	@ 0x24
 8008ca6:	89a3      	ldrh	r3, [r4, #12]
 8008ca8:	4393      	bics	r3, r2
 8008caa:	81a3      	strh	r3, [r4, #12]
 8008cac:	2300      	movs	r3, #0
 8008cae:	6063      	str	r3, [r4, #4]
 8008cb0:	6923      	ldr	r3, [r4, #16]
 8008cb2:	6023      	str	r3, [r4, #0]
 8008cb4:	2308      	movs	r3, #8
 8008cb6:	89a2      	ldrh	r2, [r4, #12]
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	81a3      	strh	r3, [r4, #12]
 8008cbc:	6923      	ldr	r3, [r4, #16]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d10b      	bne.n	8008cda <__swsetup_r+0x86>
 8008cc2:	21a0      	movs	r1, #160	@ 0xa0
 8008cc4:	2280      	movs	r2, #128	@ 0x80
 8008cc6:	89a3      	ldrh	r3, [r4, #12]
 8008cc8:	0089      	lsls	r1, r1, #2
 8008cca:	0092      	lsls	r2, r2, #2
 8008ccc:	400b      	ands	r3, r1
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d003      	beq.n	8008cda <__swsetup_r+0x86>
 8008cd2:	0021      	movs	r1, r4
 8008cd4:	0028      	movs	r0, r5
 8008cd6:	f000 f845 	bl	8008d64 <__smakebuf_r>
 8008cda:	220c      	movs	r2, #12
 8008cdc:	5ea3      	ldrsh	r3, [r4, r2]
 8008cde:	2101      	movs	r1, #1
 8008ce0:	001a      	movs	r2, r3
 8008ce2:	400a      	ands	r2, r1
 8008ce4:	420b      	tst	r3, r1
 8008ce6:	d00b      	beq.n	8008d00 <__swsetup_r+0xac>
 8008ce8:	2200      	movs	r2, #0
 8008cea:	60a2      	str	r2, [r4, #8]
 8008cec:	6962      	ldr	r2, [r4, #20]
 8008cee:	4252      	negs	r2, r2
 8008cf0:	61a2      	str	r2, [r4, #24]
 8008cf2:	2000      	movs	r0, #0
 8008cf4:	6922      	ldr	r2, [r4, #16]
 8008cf6:	4282      	cmp	r2, r0
 8008cf8:	d101      	bne.n	8008cfe <__swsetup_r+0xaa>
 8008cfa:	061a      	lsls	r2, r3, #24
 8008cfc:	d4be      	bmi.n	8008c7c <__swsetup_r+0x28>
 8008cfe:	bd70      	pop	{r4, r5, r6, pc}
 8008d00:	0799      	lsls	r1, r3, #30
 8008d02:	d400      	bmi.n	8008d06 <__swsetup_r+0xb2>
 8008d04:	6962      	ldr	r2, [r4, #20]
 8008d06:	60a2      	str	r2, [r4, #8]
 8008d08:	e7f3      	b.n	8008cf2 <__swsetup_r+0x9e>
 8008d0a:	46c0      	nop			@ (mov r8, r8)
 8008d0c:	20000020 	.word	0x20000020

08008d10 <__swhatbuf_r>:
 8008d10:	b570      	push	{r4, r5, r6, lr}
 8008d12:	000e      	movs	r6, r1
 8008d14:	001d      	movs	r5, r3
 8008d16:	230e      	movs	r3, #14
 8008d18:	5ec9      	ldrsh	r1, [r1, r3]
 8008d1a:	0014      	movs	r4, r2
 8008d1c:	b096      	sub	sp, #88	@ 0x58
 8008d1e:	2900      	cmp	r1, #0
 8008d20:	da0c      	bge.n	8008d3c <__swhatbuf_r+0x2c>
 8008d22:	89b2      	ldrh	r2, [r6, #12]
 8008d24:	2380      	movs	r3, #128	@ 0x80
 8008d26:	0011      	movs	r1, r2
 8008d28:	4019      	ands	r1, r3
 8008d2a:	421a      	tst	r2, r3
 8008d2c:	d114      	bne.n	8008d58 <__swhatbuf_r+0x48>
 8008d2e:	2380      	movs	r3, #128	@ 0x80
 8008d30:	00db      	lsls	r3, r3, #3
 8008d32:	2000      	movs	r0, #0
 8008d34:	6029      	str	r1, [r5, #0]
 8008d36:	6023      	str	r3, [r4, #0]
 8008d38:	b016      	add	sp, #88	@ 0x58
 8008d3a:	bd70      	pop	{r4, r5, r6, pc}
 8008d3c:	466a      	mov	r2, sp
 8008d3e:	f000 f8ad 	bl	8008e9c <_fstat_r>
 8008d42:	2800      	cmp	r0, #0
 8008d44:	dbed      	blt.n	8008d22 <__swhatbuf_r+0x12>
 8008d46:	23f0      	movs	r3, #240	@ 0xf0
 8008d48:	9901      	ldr	r1, [sp, #4]
 8008d4a:	021b      	lsls	r3, r3, #8
 8008d4c:	4019      	ands	r1, r3
 8008d4e:	4b04      	ldr	r3, [pc, #16]	@ (8008d60 <__swhatbuf_r+0x50>)
 8008d50:	18c9      	adds	r1, r1, r3
 8008d52:	424b      	negs	r3, r1
 8008d54:	4159      	adcs	r1, r3
 8008d56:	e7ea      	b.n	8008d2e <__swhatbuf_r+0x1e>
 8008d58:	2100      	movs	r1, #0
 8008d5a:	2340      	movs	r3, #64	@ 0x40
 8008d5c:	e7e9      	b.n	8008d32 <__swhatbuf_r+0x22>
 8008d5e:	46c0      	nop			@ (mov r8, r8)
 8008d60:	ffffe000 	.word	0xffffe000

08008d64 <__smakebuf_r>:
 8008d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d66:	2602      	movs	r6, #2
 8008d68:	898b      	ldrh	r3, [r1, #12]
 8008d6a:	0005      	movs	r5, r0
 8008d6c:	000c      	movs	r4, r1
 8008d6e:	b085      	sub	sp, #20
 8008d70:	4233      	tst	r3, r6
 8008d72:	d007      	beq.n	8008d84 <__smakebuf_r+0x20>
 8008d74:	0023      	movs	r3, r4
 8008d76:	3347      	adds	r3, #71	@ 0x47
 8008d78:	6023      	str	r3, [r4, #0]
 8008d7a:	6123      	str	r3, [r4, #16]
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	6163      	str	r3, [r4, #20]
 8008d80:	b005      	add	sp, #20
 8008d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d84:	ab03      	add	r3, sp, #12
 8008d86:	aa02      	add	r2, sp, #8
 8008d88:	f7ff ffc2 	bl	8008d10 <__swhatbuf_r>
 8008d8c:	9f02      	ldr	r7, [sp, #8]
 8008d8e:	9001      	str	r0, [sp, #4]
 8008d90:	0039      	movs	r1, r7
 8008d92:	0028      	movs	r0, r5
 8008d94:	f7fe ff78 	bl	8007c88 <_malloc_r>
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	d108      	bne.n	8008dae <__smakebuf_r+0x4a>
 8008d9c:	220c      	movs	r2, #12
 8008d9e:	5ea3      	ldrsh	r3, [r4, r2]
 8008da0:	059a      	lsls	r2, r3, #22
 8008da2:	d4ed      	bmi.n	8008d80 <__smakebuf_r+0x1c>
 8008da4:	2203      	movs	r2, #3
 8008da6:	4393      	bics	r3, r2
 8008da8:	431e      	orrs	r6, r3
 8008daa:	81a6      	strh	r6, [r4, #12]
 8008dac:	e7e2      	b.n	8008d74 <__smakebuf_r+0x10>
 8008dae:	2380      	movs	r3, #128	@ 0x80
 8008db0:	89a2      	ldrh	r2, [r4, #12]
 8008db2:	6020      	str	r0, [r4, #0]
 8008db4:	4313      	orrs	r3, r2
 8008db6:	81a3      	strh	r3, [r4, #12]
 8008db8:	9b03      	ldr	r3, [sp, #12]
 8008dba:	6120      	str	r0, [r4, #16]
 8008dbc:	6167      	str	r7, [r4, #20]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d00c      	beq.n	8008ddc <__smakebuf_r+0x78>
 8008dc2:	0028      	movs	r0, r5
 8008dc4:	230e      	movs	r3, #14
 8008dc6:	5ee1      	ldrsh	r1, [r4, r3]
 8008dc8:	f000 f840 	bl	8008e4c <_isatty_r>
 8008dcc:	2800      	cmp	r0, #0
 8008dce:	d005      	beq.n	8008ddc <__smakebuf_r+0x78>
 8008dd0:	2303      	movs	r3, #3
 8008dd2:	89a2      	ldrh	r2, [r4, #12]
 8008dd4:	439a      	bics	r2, r3
 8008dd6:	3b02      	subs	r3, #2
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	81a3      	strh	r3, [r4, #12]
 8008ddc:	89a3      	ldrh	r3, [r4, #12]
 8008dde:	9a01      	ldr	r2, [sp, #4]
 8008de0:	4313      	orrs	r3, r2
 8008de2:	81a3      	strh	r3, [r4, #12]
 8008de4:	e7cc      	b.n	8008d80 <__smakebuf_r+0x1c>

08008de6 <_raise_r>:
 8008de6:	b570      	push	{r4, r5, r6, lr}
 8008de8:	0004      	movs	r4, r0
 8008dea:	000d      	movs	r5, r1
 8008dec:	291f      	cmp	r1, #31
 8008dee:	d904      	bls.n	8008dfa <_raise_r+0x14>
 8008df0:	2316      	movs	r3, #22
 8008df2:	6003      	str	r3, [r0, #0]
 8008df4:	2001      	movs	r0, #1
 8008df6:	4240      	negs	r0, r0
 8008df8:	bd70      	pop	{r4, r5, r6, pc}
 8008dfa:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d004      	beq.n	8008e0a <_raise_r+0x24>
 8008e00:	008a      	lsls	r2, r1, #2
 8008e02:	189b      	adds	r3, r3, r2
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	2a00      	cmp	r2, #0
 8008e08:	d108      	bne.n	8008e1c <_raise_r+0x36>
 8008e0a:	0020      	movs	r0, r4
 8008e0c:	f000 f842 	bl	8008e94 <_getpid_r>
 8008e10:	002a      	movs	r2, r5
 8008e12:	0001      	movs	r1, r0
 8008e14:	0020      	movs	r0, r4
 8008e16:	f000 f82b 	bl	8008e70 <_kill_r>
 8008e1a:	e7ed      	b.n	8008df8 <_raise_r+0x12>
 8008e1c:	2a01      	cmp	r2, #1
 8008e1e:	d009      	beq.n	8008e34 <_raise_r+0x4e>
 8008e20:	1c51      	adds	r1, r2, #1
 8008e22:	d103      	bne.n	8008e2c <_raise_r+0x46>
 8008e24:	2316      	movs	r3, #22
 8008e26:	6003      	str	r3, [r0, #0]
 8008e28:	2001      	movs	r0, #1
 8008e2a:	e7e5      	b.n	8008df8 <_raise_r+0x12>
 8008e2c:	2100      	movs	r1, #0
 8008e2e:	0028      	movs	r0, r5
 8008e30:	6019      	str	r1, [r3, #0]
 8008e32:	4790      	blx	r2
 8008e34:	2000      	movs	r0, #0
 8008e36:	e7df      	b.n	8008df8 <_raise_r+0x12>

08008e38 <raise>:
 8008e38:	b510      	push	{r4, lr}
 8008e3a:	4b03      	ldr	r3, [pc, #12]	@ (8008e48 <raise+0x10>)
 8008e3c:	0001      	movs	r1, r0
 8008e3e:	6818      	ldr	r0, [r3, #0]
 8008e40:	f7ff ffd1 	bl	8008de6 <_raise_r>
 8008e44:	bd10      	pop	{r4, pc}
 8008e46:	46c0      	nop			@ (mov r8, r8)
 8008e48:	20000020 	.word	0x20000020

08008e4c <_isatty_r>:
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	b570      	push	{r4, r5, r6, lr}
 8008e50:	4d06      	ldr	r5, [pc, #24]	@ (8008e6c <_isatty_r+0x20>)
 8008e52:	0004      	movs	r4, r0
 8008e54:	0008      	movs	r0, r1
 8008e56:	602b      	str	r3, [r5, #0]
 8008e58:	f7fa fb8d 	bl	8003576 <_isatty>
 8008e5c:	1c43      	adds	r3, r0, #1
 8008e5e:	d103      	bne.n	8008e68 <_isatty_r+0x1c>
 8008e60:	682b      	ldr	r3, [r5, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d000      	beq.n	8008e68 <_isatty_r+0x1c>
 8008e66:	6023      	str	r3, [r4, #0]
 8008e68:	bd70      	pop	{r4, r5, r6, pc}
 8008e6a:	46c0      	nop			@ (mov r8, r8)
 8008e6c:	20000498 	.word	0x20000498

08008e70 <_kill_r>:
 8008e70:	2300      	movs	r3, #0
 8008e72:	b570      	push	{r4, r5, r6, lr}
 8008e74:	4d06      	ldr	r5, [pc, #24]	@ (8008e90 <_kill_r+0x20>)
 8008e76:	0004      	movs	r4, r0
 8008e78:	0008      	movs	r0, r1
 8008e7a:	0011      	movs	r1, r2
 8008e7c:	602b      	str	r3, [r5, #0]
 8008e7e:	f7fa fb0c 	bl	800349a <_kill>
 8008e82:	1c43      	adds	r3, r0, #1
 8008e84:	d103      	bne.n	8008e8e <_kill_r+0x1e>
 8008e86:	682b      	ldr	r3, [r5, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d000      	beq.n	8008e8e <_kill_r+0x1e>
 8008e8c:	6023      	str	r3, [r4, #0]
 8008e8e:	bd70      	pop	{r4, r5, r6, pc}
 8008e90:	20000498 	.word	0x20000498

08008e94 <_getpid_r>:
 8008e94:	b510      	push	{r4, lr}
 8008e96:	f7fa fafa 	bl	800348e <_getpid>
 8008e9a:	bd10      	pop	{r4, pc}

08008e9c <_fstat_r>:
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	b570      	push	{r4, r5, r6, lr}
 8008ea0:	4d06      	ldr	r5, [pc, #24]	@ (8008ebc <_fstat_r+0x20>)
 8008ea2:	0004      	movs	r4, r0
 8008ea4:	0008      	movs	r0, r1
 8008ea6:	0011      	movs	r1, r2
 8008ea8:	602b      	str	r3, [r5, #0]
 8008eaa:	f7fa fb56 	bl	800355a <_fstat>
 8008eae:	1c43      	adds	r3, r0, #1
 8008eb0:	d103      	bne.n	8008eba <_fstat_r+0x1e>
 8008eb2:	682b      	ldr	r3, [r5, #0]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d000      	beq.n	8008eba <_fstat_r+0x1e>
 8008eb8:	6023      	str	r3, [r4, #0]
 8008eba:	bd70      	pop	{r4, r5, r6, pc}
 8008ebc:	20000498 	.word	0x20000498

08008ec0 <_init>:
 8008ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ec2:	46c0      	nop			@ (mov r8, r8)
 8008ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ec6:	bc08      	pop	{r3}
 8008ec8:	469e      	mov	lr, r3
 8008eca:	4770      	bx	lr

08008ecc <_fini>:
 8008ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ece:	46c0      	nop			@ (mov r8, r8)
 8008ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ed2:	bc08      	pop	{r3}
 8008ed4:	469e      	mov	lr, r3
 8008ed6:	4770      	bx	lr
