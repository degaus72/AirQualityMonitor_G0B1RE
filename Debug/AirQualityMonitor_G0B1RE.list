
AirQualityMonitor_G0B1RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003384  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003440  08003440  00004440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034c8  080034c8  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080034c8  080034c8  000044c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034d0  080034d0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034d0  080034d0  000044d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080034d4  080034d4  000044d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080034d8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000000c  080034e4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  080034e4  00005178  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000105c0  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026ca  00000000  00000000  000155f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  00017cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aed  00000000  00000000  00018ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bf8e  00000000  00000000  000195b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013349  00000000  00000000  00035543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b2512  00000000  00000000  0004888c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fad9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003184  00000000  00000000  000fade4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000fdf68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003428 	.word	0x08003428

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003428 	.word	0x08003428

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b08b      	sub	sp, #44	@ 0x2c
 8000620:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	2414      	movs	r4, #20
 8000624:	193b      	adds	r3, r7, r4
 8000626:	0018      	movs	r0, r3
 8000628:	2314      	movs	r3, #20
 800062a:	001a      	movs	r2, r3
 800062c:	2100      	movs	r1, #0
 800062e:	f002 fecf 	bl	80033d0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000632:	4b57      	ldr	r3, [pc, #348]	@ (8000790 <MX_GPIO_Init+0x174>)
 8000634:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000636:	4b56      	ldr	r3, [pc, #344]	@ (8000790 <MX_GPIO_Init+0x174>)
 8000638:	2104      	movs	r1, #4
 800063a:	430a      	orrs	r2, r1
 800063c:	635a      	str	r2, [r3, #52]	@ 0x34
 800063e:	4b54      	ldr	r3, [pc, #336]	@ (8000790 <MX_GPIO_Init+0x174>)
 8000640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000642:	2204      	movs	r2, #4
 8000644:	4013      	ands	r3, r2
 8000646:	613b      	str	r3, [r7, #16]
 8000648:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800064a:	4b51      	ldr	r3, [pc, #324]	@ (8000790 <MX_GPIO_Init+0x174>)
 800064c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800064e:	4b50      	ldr	r3, [pc, #320]	@ (8000790 <MX_GPIO_Init+0x174>)
 8000650:	2120      	movs	r1, #32
 8000652:	430a      	orrs	r2, r1
 8000654:	635a      	str	r2, [r3, #52]	@ 0x34
 8000656:	4b4e      	ldr	r3, [pc, #312]	@ (8000790 <MX_GPIO_Init+0x174>)
 8000658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800065a:	2220      	movs	r2, #32
 800065c:	4013      	ands	r3, r2
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b4b      	ldr	r3, [pc, #300]	@ (8000790 <MX_GPIO_Init+0x174>)
 8000664:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000666:	4b4a      	ldr	r3, [pc, #296]	@ (8000790 <MX_GPIO_Init+0x174>)
 8000668:	2101      	movs	r1, #1
 800066a:	430a      	orrs	r2, r1
 800066c:	635a      	str	r2, [r3, #52]	@ 0x34
 800066e:	4b48      	ldr	r3, [pc, #288]	@ (8000790 <MX_GPIO_Init+0x174>)
 8000670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000672:	2201      	movs	r2, #1
 8000674:	4013      	ands	r3, r2
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	4b45      	ldr	r3, [pc, #276]	@ (8000790 <MX_GPIO_Init+0x174>)
 800067c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800067e:	4b44      	ldr	r3, [pc, #272]	@ (8000790 <MX_GPIO_Init+0x174>)
 8000680:	2102      	movs	r1, #2
 8000682:	430a      	orrs	r2, r1
 8000684:	635a      	str	r2, [r3, #52]	@ 0x34
 8000686:	4b42      	ldr	r3, [pc, #264]	@ (8000790 <MX_GPIO_Init+0x174>)
 8000688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800068a:	2202      	movs	r2, #2
 800068c:	4013      	ands	r3, r2
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000692:	23a0      	movs	r3, #160	@ 0xa0
 8000694:	05db      	lsls	r3, r3, #23
 8000696:	2200      	movs	r2, #0
 8000698:	2120      	movs	r1, #32
 800069a:	0018      	movs	r0, r3
 800069c:	f000 fdf8 	bl	8001290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_SET);
 80006a0:	493c      	ldr	r1, [pc, #240]	@ (8000794 <MX_GPIO_Init+0x178>)
 80006a2:	4b3d      	ldr	r3, [pc, #244]	@ (8000798 <MX_GPIO_Init+0x17c>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	0018      	movs	r0, r3
 80006a8:	f000 fdf2 	bl	8001290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	0059      	lsls	r1, r3, #1
 80006b0:	23a0      	movs	r3, #160	@ 0xa0
 80006b2:	05db      	lsls	r3, r3, #23
 80006b4:	2201      	movs	r2, #1
 80006b6:	0018      	movs	r0, r3
 80006b8:	f000 fdea 	bl	8001290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 80006bc:	4b37      	ldr	r3, [pc, #220]	@ (800079c <MX_GPIO_Init+0x180>)
 80006be:	2201      	movs	r2, #1
 80006c0:	2180      	movs	r1, #128	@ 0x80
 80006c2:	0018      	movs	r0, r3
 80006c4:	f000 fde4 	bl	8001290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	2280      	movs	r2, #128	@ 0x80
 80006cc:	0192      	lsls	r2, r2, #6
 80006ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006d0:	193b      	adds	r3, r7, r4
 80006d2:	2288      	movs	r2, #136	@ 0x88
 80006d4:	0352      	lsls	r2, r2, #13
 80006d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	4a2e      	ldr	r2, [pc, #184]	@ (800079c <MX_GPIO_Init+0x180>)
 80006e2:	0019      	movs	r1, r3
 80006e4:	0010      	movs	r0, r2
 80006e6:	f000 fc67 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	2220      	movs	r2, #32
 80006ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f0:	193b      	adds	r3, r7, r4
 80006f2:	2201      	movs	r2, #1
 80006f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	2202      	movs	r2, #2
 8000700:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000702:	193a      	adds	r2, r7, r4
 8000704:	23a0      	movs	r3, #160	@ 0xa0
 8000706:	05db      	lsls	r3, r3, #23
 8000708:	0011      	movs	r1, r2
 800070a:	0018      	movs	r0, r3
 800070c:	f000 fc54 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_CS_Pin;
 8000710:	193b      	adds	r3, r7, r4
 8000712:	4a20      	ldr	r2, [pc, #128]	@ (8000794 <MX_GPIO_Init+0x178>)
 8000714:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000716:	193b      	adds	r3, r7, r4
 8000718:	2201      	movs	r2, #1
 800071a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	193b      	adds	r3, r7, r4
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000722:	193b      	adds	r3, r7, r4
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000728:	193b      	adds	r3, r7, r4
 800072a:	4a1b      	ldr	r2, [pc, #108]	@ (8000798 <MX_GPIO_Init+0x17c>)
 800072c:	0019      	movs	r1, r3
 800072e:	0010      	movs	r0, r2
 8000730:	f000 fc42 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8000734:	0021      	movs	r1, r4
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2280      	movs	r2, #128	@ 0x80
 800073a:	0052      	lsls	r2, r2, #1
 800073c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	000c      	movs	r4, r1
 8000740:	193b      	adds	r3, r7, r4
 8000742:	2201      	movs	r2, #1
 8000744:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	193b      	adds	r3, r7, r4
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	193b      	adds	r3, r7, r4
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8000752:	193a      	adds	r2, r7, r4
 8000754:	23a0      	movs	r3, #160	@ 0xa0
 8000756:	05db      	lsls	r3, r3, #23
 8000758:	0011      	movs	r1, r2
 800075a:	0018      	movs	r0, r3
 800075c:	f000 fc2c 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8000760:	0021      	movs	r1, r4
 8000762:	187b      	adds	r3, r7, r1
 8000764:	2280      	movs	r2, #128	@ 0x80
 8000766:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000768:	187b      	adds	r3, r7, r1
 800076a:	2201      	movs	r2, #1
 800076c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	187b      	adds	r3, r7, r1
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 800077a:	187b      	adds	r3, r7, r1
 800077c:	4a07      	ldr	r2, [pc, #28]	@ (800079c <MX_GPIO_Init+0x180>)
 800077e:	0019      	movs	r1, r3
 8000780:	0010      	movs	r0, r2
 8000782:	f000 fc19 	bl	8000fb8 <HAL_GPIO_Init>

}
 8000786:	46c0      	nop			@ (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	b00b      	add	sp, #44	@ 0x2c
 800078c:	bd90      	pop	{r4, r7, pc}
 800078e:	46c0      	nop			@ (mov r8, r8)
 8000790:	40021000 	.word	0x40021000
 8000794:	00004040 	.word	0x00004040
 8000798:	50000400 	.word	0x50000400
 800079c:	50000800 	.word	0x50000800

080007a0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000814 <MX_I2C1_Init+0x74>)
 80007a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000818 <MX_I2C1_Init+0x78>)
 80007a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C12166;
 80007aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000814 <MX_I2C1_Init+0x74>)
 80007ac:	4a1b      	ldr	r2, [pc, #108]	@ (800081c <MX_I2C1_Init+0x7c>)
 80007ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007b0:	4b18      	ldr	r3, [pc, #96]	@ (8000814 <MX_I2C1_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b6:	4b17      	ldr	r3, [pc, #92]	@ (8000814 <MX_I2C1_Init+0x74>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007bc:	4b15      	ldr	r3, [pc, #84]	@ (8000814 <MX_I2C1_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007c2:	4b14      	ldr	r3, [pc, #80]	@ (8000814 <MX_I2C1_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007c8:	4b12      	ldr	r3, [pc, #72]	@ (8000814 <MX_I2C1_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ce:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <MX_I2C1_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000814 <MX_I2C1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007da:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <MX_I2C1_Init+0x74>)
 80007dc:	0018      	movs	r0, r3
 80007de:	f000 fd75 	bl	80012cc <HAL_I2C_Init>
 80007e2:	1e03      	subs	r3, r0, #0
 80007e4:	d001      	beq.n	80007ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007e6:	f000 f8eb 	bl	80009c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000814 <MX_I2C1_Init+0x74>)
 80007ec:	2100      	movs	r1, #0
 80007ee:	0018      	movs	r0, r3
 80007f0:	f000 fe12 	bl	8001418 <HAL_I2CEx_ConfigAnalogFilter>
 80007f4:	1e03      	subs	r3, r0, #0
 80007f6:	d001      	beq.n	80007fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007f8:	f000 f8e2 	bl	80009c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007fc:	4b05      	ldr	r3, [pc, #20]	@ (8000814 <MX_I2C1_Init+0x74>)
 80007fe:	2100      	movs	r1, #0
 8000800:	0018      	movs	r0, r3
 8000802:	f000 fe55 	bl	80014b0 <HAL_I2CEx_ConfigDigitalFilter>
 8000806:	1e03      	subs	r3, r0, #0
 8000808:	d001      	beq.n	800080e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800080a:	f000 f8d9 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800080e:	46c0      	nop			@ (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000028 	.word	0x20000028
 8000818:	40005400 	.word	0x40005400
 800081c:	00c12166 	.word	0x00c12166

08000820 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b09d      	sub	sp, #116	@ 0x74
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	235c      	movs	r3, #92	@ 0x5c
 800082a:	18fb      	adds	r3, r7, r3
 800082c:	0018      	movs	r0, r3
 800082e:	2314      	movs	r3, #20
 8000830:	001a      	movs	r2, r3
 8000832:	2100      	movs	r1, #0
 8000834:	f002 fdcc 	bl	80033d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000838:	2410      	movs	r4, #16
 800083a:	193b      	adds	r3, r7, r4
 800083c:	0018      	movs	r0, r3
 800083e:	234c      	movs	r3, #76	@ 0x4c
 8000840:	001a      	movs	r2, r3
 8000842:	2100      	movs	r1, #0
 8000844:	f002 fdc4 	bl	80033d0 <memset>
  if(i2cHandle->Instance==I2C1)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a23      	ldr	r2, [pc, #140]	@ (80008dc <HAL_I2C_MspInit+0xbc>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d13f      	bne.n	80008d2 <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000852:	193b      	adds	r3, r7, r4
 8000854:	2220      	movs	r2, #32
 8000856:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000858:	193b      	adds	r3, r7, r4
 800085a:	2200      	movs	r2, #0
 800085c:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800085e:	193b      	adds	r3, r7, r4
 8000860:	0018      	movs	r0, r3
 8000862:	f001 fbc7 	bl	8001ff4 <HAL_RCCEx_PeriphCLKConfig>
 8000866:	1e03      	subs	r3, r0, #0
 8000868:	d001      	beq.n	800086e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800086a:	f000 f8a9 	bl	80009c0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	4b1c      	ldr	r3, [pc, #112]	@ (80008e0 <HAL_I2C_MspInit+0xc0>)
 8000870:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000872:	4b1b      	ldr	r3, [pc, #108]	@ (80008e0 <HAL_I2C_MspInit+0xc0>)
 8000874:	2101      	movs	r1, #1
 8000876:	430a      	orrs	r2, r1
 8000878:	635a      	str	r2, [r3, #52]	@ 0x34
 800087a:	4b19      	ldr	r3, [pc, #100]	@ (80008e0 <HAL_I2C_MspInit+0xc0>)
 800087c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800087e:	2201      	movs	r2, #1
 8000880:	4013      	ands	r3, r2
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000886:	215c      	movs	r1, #92	@ 0x5c
 8000888:	187b      	adds	r3, r7, r1
 800088a:	22c0      	movs	r2, #192	@ 0xc0
 800088c:	00d2      	lsls	r2, r2, #3
 800088e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000890:	187b      	adds	r3, r7, r1
 8000892:	2212      	movs	r2, #18
 8000894:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2206      	movs	r2, #6
 80008a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	187a      	adds	r2, r7, r1
 80008aa:	23a0      	movs	r3, #160	@ 0xa0
 80008ac:	05db      	lsls	r3, r3, #23
 80008ae:	0011      	movs	r1, r2
 80008b0:	0018      	movs	r0, r3
 80008b2:	f000 fb81 	bl	8000fb8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008b6:	4b0a      	ldr	r3, [pc, #40]	@ (80008e0 <HAL_I2C_MspInit+0xc0>)
 80008b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008ba:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <HAL_I2C_MspInit+0xc0>)
 80008bc:	2180      	movs	r1, #128	@ 0x80
 80008be:	0389      	lsls	r1, r1, #14
 80008c0:	430a      	orrs	r2, r1
 80008c2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008c4:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <HAL_I2C_MspInit+0xc0>)
 80008c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008c8:	2380      	movs	r3, #128	@ 0x80
 80008ca:	039b      	lsls	r3, r3, #14
 80008cc:	4013      	ands	r3, r2
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008d2:	46c0      	nop			@ (mov r8, r8)
 80008d4:	46bd      	mov	sp, r7
 80008d6:	b01d      	add	sp, #116	@ 0x74
 80008d8:	bd90      	pop	{r4, r7, pc}
 80008da:	46c0      	nop			@ (mov r8, r8)
 80008dc:	40005400 	.word	0x40005400
 80008e0:	40021000 	.word	0x40021000

080008e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e8:	f000 fa16 	bl	8000d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ec:	f000 f80a 	bl	8000904 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f0:	f7ff fe94 	bl	800061c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008f4:	f000 f938 	bl	8000b68 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80008f8:	f7ff ff52 	bl	80007a0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80008fc:	f000 f866 	bl	80009cc <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000900:	46c0      	nop			@ (mov r8, r8)
 8000902:	e7fd      	b.n	8000900 <main+0x1c>

08000904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000904:	b590      	push	{r4, r7, lr}
 8000906:	b095      	sub	sp, #84	@ 0x54
 8000908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090a:	2414      	movs	r4, #20
 800090c:	193b      	adds	r3, r7, r4
 800090e:	0018      	movs	r0, r3
 8000910:	233c      	movs	r3, #60	@ 0x3c
 8000912:	001a      	movs	r2, r3
 8000914:	2100      	movs	r1, #0
 8000916:	f002 fd5b 	bl	80033d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	0018      	movs	r0, r3
 800091e:	2310      	movs	r3, #16
 8000920:	001a      	movs	r2, r3
 8000922:	2100      	movs	r1, #0
 8000924:	f002 fd54 	bl	80033d0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000928:	2380      	movs	r3, #128	@ 0x80
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	0018      	movs	r0, r3
 800092e:	f000 fe0b 	bl	8001548 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000932:	193b      	adds	r3, r7, r4
 8000934:	2202      	movs	r2, #2
 8000936:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000938:	193b      	adds	r3, r7, r4
 800093a:	2280      	movs	r2, #128	@ 0x80
 800093c:	0052      	lsls	r2, r2, #1
 800093e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000940:	0021      	movs	r1, r4
 8000942:	187b      	adds	r3, r7, r1
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000948:	187b      	adds	r3, r7, r1
 800094a:	2240      	movs	r2, #64	@ 0x40
 800094c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094e:	187b      	adds	r3, r7, r1
 8000950:	2202      	movs	r2, #2
 8000952:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000954:	187b      	adds	r3, r7, r1
 8000956:	2202      	movs	r2, #2
 8000958:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800095a:	187b      	adds	r3, r7, r1
 800095c:	2200      	movs	r2, #0
 800095e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000960:	187b      	adds	r3, r7, r1
 8000962:	2208      	movs	r2, #8
 8000964:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000966:	187b      	adds	r3, r7, r1
 8000968:	2280      	movs	r2, #128	@ 0x80
 800096a:	0292      	lsls	r2, r2, #10
 800096c:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2280      	movs	r2, #128	@ 0x80
 8000972:	0492      	lsls	r2, r2, #18
 8000974:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000976:	187b      	adds	r3, r7, r1
 8000978:	2280      	movs	r2, #128	@ 0x80
 800097a:	0592      	lsls	r2, r2, #22
 800097c:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097e:	187b      	adds	r3, r7, r1
 8000980:	0018      	movs	r0, r3
 8000982:	f000 fe2d 	bl	80015e0 <HAL_RCC_OscConfig>
 8000986:	1e03      	subs	r3, r0, #0
 8000988:	d001      	beq.n	800098e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800098a:	f000 f819 	bl	80009c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	2207      	movs	r2, #7
 8000992:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	2202      	movs	r2, #2
 8000998:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	2102      	movs	r1, #2
 80009aa:	0018      	movs	r0, r3
 80009ac:	f001 f978 	bl	8001ca0 <HAL_RCC_ClockConfig>
 80009b0:	1e03      	subs	r3, r0, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80009b4:	f000 f804 	bl	80009c0 <Error_Handler>
  }
}
 80009b8:	46c0      	nop			@ (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b015      	add	sp, #84	@ 0x54
 80009be:	bd90      	pop	{r4, r7, pc}

080009c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c4:	b672      	cpsid	i
}
 80009c6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c8:	46c0      	nop			@ (mov r8, r8)
 80009ca:	e7fd      	b.n	80009c8 <Error_Handler+0x8>

080009cc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80009d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a40 <MX_SPI1_Init+0x74>)
 80009d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000a44 <MX_SPI1_Init+0x78>)
 80009d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a40 <MX_SPI1_Init+0x74>)
 80009d8:	2282      	movs	r2, #130	@ 0x82
 80009da:	0052      	lsls	r2, r2, #1
 80009dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009de:	4b18      	ldr	r3, [pc, #96]	@ (8000a40 <MX_SPI1_Init+0x74>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009e4:	4b16      	ldr	r3, [pc, #88]	@ (8000a40 <MX_SPI1_Init+0x74>)
 80009e6:	22e0      	movs	r2, #224	@ 0xe0
 80009e8:	00d2      	lsls	r2, r2, #3
 80009ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ec:	4b14      	ldr	r3, [pc, #80]	@ (8000a40 <MX_SPI1_Init+0x74>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009f2:	4b13      	ldr	r3, [pc, #76]	@ (8000a40 <MX_SPI1_Init+0x74>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009f8:	4b11      	ldr	r3, [pc, #68]	@ (8000a40 <MX_SPI1_Init+0x74>)
 80009fa:	2280      	movs	r2, #128	@ 0x80
 80009fc:	0092      	lsls	r2, r2, #2
 80009fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	@ (8000a40 <MX_SPI1_Init+0x74>)
 8000a02:	2210      	movs	r2, #16
 8000a04:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	@ (8000a40 <MX_SPI1_Init+0x74>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a40 <MX_SPI1_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	@ (8000a40 <MX_SPI1_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a18:	4b09      	ldr	r3, [pc, #36]	@ (8000a40 <MX_SPI1_Init+0x74>)
 8000a1a:	2207      	movs	r2, #7
 8000a1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	@ (8000a40 <MX_SPI1_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a24:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <MX_SPI1_Init+0x74>)
 8000a26:	2208      	movs	r2, #8
 8000a28:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a2a:	4b05      	ldr	r3, [pc, #20]	@ (8000a40 <MX_SPI1_Init+0x74>)
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f001 fd1d 	bl	800246c <HAL_SPI_Init>
 8000a32:	1e03      	subs	r3, r0, #0
 8000a34:	d001      	beq.n	8000a3a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a36:	f7ff ffc3 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a3a:	46c0      	nop			@ (mov r8, r8)
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	2000007c 	.word	0x2000007c
 8000a44:	40013000 	.word	0x40013000

08000a48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a48:	b590      	push	{r4, r7, lr}
 8000a4a:	b08b      	sub	sp, #44	@ 0x2c
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	2414      	movs	r4, #20
 8000a52:	193b      	adds	r3, r7, r4
 8000a54:	0018      	movs	r0, r3
 8000a56:	2314      	movs	r3, #20
 8000a58:	001a      	movs	r2, r3
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	f002 fcb8 	bl	80033d0 <memset>
  if(spiHandle->Instance==SPI1)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a1b      	ldr	r2, [pc, #108]	@ (8000ad4 <HAL_SPI_MspInit+0x8c>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d130      	bne.n	8000acc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad8 <HAL_SPI_MspInit+0x90>)
 8000a6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad8 <HAL_SPI_MspInit+0x90>)
 8000a70:	2180      	movs	r1, #128	@ 0x80
 8000a72:	0149      	lsls	r1, r1, #5
 8000a74:	430a      	orrs	r2, r1
 8000a76:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a78:	4b17      	ldr	r3, [pc, #92]	@ (8000ad8 <HAL_SPI_MspInit+0x90>)
 8000a7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a7c:	2380      	movs	r3, #128	@ 0x80
 8000a7e:	015b      	lsls	r3, r3, #5
 8000a80:	4013      	ands	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	4b14      	ldr	r3, [pc, #80]	@ (8000ad8 <HAL_SPI_MspInit+0x90>)
 8000a88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a8a:	4b13      	ldr	r3, [pc, #76]	@ (8000ad8 <HAL_SPI_MspInit+0x90>)
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	430a      	orrs	r2, r1
 8000a90:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a92:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <HAL_SPI_MspInit+0x90>)
 8000a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a96:	2201      	movs	r2, #1
 8000a98:	4013      	ands	r3, r2
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000a9e:	0021      	movs	r1, r4
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	22c2      	movs	r2, #194	@ 0xc2
 8000aa4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	187b      	adds	r3, r7, r1
 8000aa8:	2202      	movs	r2, #2
 8000aaa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000ab8:	187b      	adds	r3, r7, r1
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abe:	187a      	adds	r2, r7, r1
 8000ac0:	23a0      	movs	r3, #160	@ 0xa0
 8000ac2:	05db      	lsls	r3, r3, #23
 8000ac4:	0011      	movs	r1, r2
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f000 fa76 	bl	8000fb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000acc:	46c0      	nop			@ (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b00b      	add	sp, #44	@ 0x2c
 8000ad2:	bd90      	pop	{r4, r7, pc}
 8000ad4:	40013000 	.word	0x40013000
 8000ad8:	40021000 	.word	0x40021000

08000adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae2:	4b11      	ldr	r3, [pc, #68]	@ (8000b28 <HAL_MspInit+0x4c>)
 8000ae4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ae6:	4b10      	ldr	r3, [pc, #64]	@ (8000b28 <HAL_MspInit+0x4c>)
 8000ae8:	2101      	movs	r1, #1
 8000aea:	430a      	orrs	r2, r1
 8000aec:	641a      	str	r2, [r3, #64]	@ 0x40
 8000aee:	4b0e      	ldr	r3, [pc, #56]	@ (8000b28 <HAL_MspInit+0x4c>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af2:	2201      	movs	r2, #1
 8000af4:	4013      	ands	r3, r2
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afa:	4b0b      	ldr	r3, [pc, #44]	@ (8000b28 <HAL_MspInit+0x4c>)
 8000afc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000afe:	4b0a      	ldr	r3, [pc, #40]	@ (8000b28 <HAL_MspInit+0x4c>)
 8000b00:	2180      	movs	r1, #128	@ 0x80
 8000b02:	0549      	lsls	r1, r1, #21
 8000b04:	430a      	orrs	r2, r1
 8000b06:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b08:	4b07      	ldr	r3, [pc, #28]	@ (8000b28 <HAL_MspInit+0x4c>)
 8000b0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b0c:	2380      	movs	r3, #128	@ 0x80
 8000b0e:	055b      	lsls	r3, r3, #21
 8000b10:	4013      	ands	r3, r2
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000b16:	23c0      	movs	r3, #192	@ 0xc0
 8000b18:	00db      	lsls	r3, r3, #3
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f000 f982 	bl	8000e24 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b20:	46c0      	nop			@ (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	b002      	add	sp, #8
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40021000 	.word	0x40021000

08000b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b30:	46c0      	nop			@ (mov r8, r8)
 8000b32:	e7fd      	b.n	8000b30 <NMI_Handler+0x4>

08000b34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b38:	46c0      	nop			@ (mov r8, r8)
 8000b3a:	e7fd      	b.n	8000b38 <HardFault_Handler+0x4>

08000b3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b40:	46c0      	nop			@ (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4a:	46c0      	nop			@ (mov r8, r8)
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b54:	f000 f94a 	bl	8000dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b58:	46c0      	nop			@ (mov r8, r8)
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b6c:	4b23      	ldr	r3, [pc, #140]	@ (8000bfc <MX_USART2_UART_Init+0x94>)
 8000b6e:	4a24      	ldr	r2, [pc, #144]	@ (8000c00 <MX_USART2_UART_Init+0x98>)
 8000b70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b72:	4b22      	ldr	r3, [pc, #136]	@ (8000bfc <MX_USART2_UART_Init+0x94>)
 8000b74:	22e1      	movs	r2, #225	@ 0xe1
 8000b76:	0252      	lsls	r2, r2, #9
 8000b78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7a:	4b20      	ldr	r3, [pc, #128]	@ (8000bfc <MX_USART2_UART_Init+0x94>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b80:	4b1e      	ldr	r3, [pc, #120]	@ (8000bfc <MX_USART2_UART_Init+0x94>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b86:	4b1d      	ldr	r3, [pc, #116]	@ (8000bfc <MX_USART2_UART_Init+0x94>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bfc <MX_USART2_UART_Init+0x94>)
 8000b8e:	220c      	movs	r2, #12
 8000b90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b92:	4b1a      	ldr	r3, [pc, #104]	@ (8000bfc <MX_USART2_UART_Init+0x94>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b98:	4b18      	ldr	r3, [pc, #96]	@ (8000bfc <MX_USART2_UART_Init+0x94>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b9e:	4b17      	ldr	r3, [pc, #92]	@ (8000bfc <MX_USART2_UART_Init+0x94>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ba4:	4b15      	ldr	r3, [pc, #84]	@ (8000bfc <MX_USART2_UART_Init+0x94>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000baa:	4b14      	ldr	r3, [pc, #80]	@ (8000bfc <MX_USART2_UART_Init+0x94>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bb0:	4b12      	ldr	r3, [pc, #72]	@ (8000bfc <MX_USART2_UART_Init+0x94>)
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f001 fd12 	bl	80025dc <HAL_UART_Init>
 8000bb8:	1e03      	subs	r3, r0, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000bbc:	f7ff ff00 	bl	80009c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <MX_USART2_UART_Init+0x94>)
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f002 fb23 	bl	8003210 <HAL_UARTEx_SetTxFifoThreshold>
 8000bca:	1e03      	subs	r3, r0, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000bce:	f7ff fef7 	bl	80009c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bfc <MX_USART2_UART_Init+0x94>)
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f002 fb5a 	bl	8003290 <HAL_UARTEx_SetRxFifoThreshold>
 8000bdc:	1e03      	subs	r3, r0, #0
 8000bde:	d001      	beq.n	8000be4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000be0:	f7ff feee 	bl	80009c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000be4:	4b05      	ldr	r3, [pc, #20]	@ (8000bfc <MX_USART2_UART_Init+0x94>)
 8000be6:	0018      	movs	r0, r3
 8000be8:	f002 fad8 	bl	800319c <HAL_UARTEx_DisableFifoMode>
 8000bec:	1e03      	subs	r3, r0, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000bf0:	f7ff fee6 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bf4:	46c0      	nop			@ (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	200000e0 	.word	0x200000e0
 8000c00:	40004400 	.word	0x40004400

08000c04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c04:	b590      	push	{r4, r7, lr}
 8000c06:	b09d      	sub	sp, #116	@ 0x74
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	235c      	movs	r3, #92	@ 0x5c
 8000c0e:	18fb      	adds	r3, r7, r3
 8000c10:	0018      	movs	r0, r3
 8000c12:	2314      	movs	r3, #20
 8000c14:	001a      	movs	r2, r3
 8000c16:	2100      	movs	r1, #0
 8000c18:	f002 fbda 	bl	80033d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c1c:	2410      	movs	r4, #16
 8000c1e:	193b      	adds	r3, r7, r4
 8000c20:	0018      	movs	r0, r3
 8000c22:	234c      	movs	r3, #76	@ 0x4c
 8000c24:	001a      	movs	r2, r3
 8000c26:	2100      	movs	r1, #0
 8000c28:	f002 fbd2 	bl	80033d0 <memset>
  if(uartHandle->Instance==USART2)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a22      	ldr	r2, [pc, #136]	@ (8000cbc <HAL_UART_MspInit+0xb8>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d13e      	bne.n	8000cb4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c36:	193b      	adds	r3, r7, r4
 8000c38:	2202      	movs	r2, #2
 8000c3a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c3c:	193b      	adds	r3, r7, r4
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c42:	193b      	adds	r3, r7, r4
 8000c44:	0018      	movs	r0, r3
 8000c46:	f001 f9d5 	bl	8001ff4 <HAL_RCCEx_PeriphCLKConfig>
 8000c4a:	1e03      	subs	r3, r0, #0
 8000c4c:	d001      	beq.n	8000c52 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c4e:	f7ff feb7 	bl	80009c0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c52:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc0 <HAL_UART_MspInit+0xbc>)
 8000c54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c56:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc0 <HAL_UART_MspInit+0xbc>)
 8000c58:	2180      	movs	r1, #128	@ 0x80
 8000c5a:	0289      	lsls	r1, r1, #10
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c60:	4b17      	ldr	r3, [pc, #92]	@ (8000cc0 <HAL_UART_MspInit+0xbc>)
 8000c62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c64:	2380      	movs	r3, #128	@ 0x80
 8000c66:	029b      	lsls	r3, r3, #10
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	4b14      	ldr	r3, [pc, #80]	@ (8000cc0 <HAL_UART_MspInit+0xbc>)
 8000c70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c72:	4b13      	ldr	r3, [pc, #76]	@ (8000cc0 <HAL_UART_MspInit+0xbc>)
 8000c74:	2101      	movs	r1, #1
 8000c76:	430a      	orrs	r2, r1
 8000c78:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c7a:	4b11      	ldr	r3, [pc, #68]	@ (8000cc0 <HAL_UART_MspInit+0xbc>)
 8000c7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c7e:	2201      	movs	r2, #1
 8000c80:	4013      	ands	r3, r2
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000c86:	215c      	movs	r1, #92	@ 0x5c
 8000c88:	187b      	adds	r3, r7, r1
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	187b      	adds	r3, r7, r1
 8000c90:	2202      	movs	r2, #2
 8000c92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	187b      	adds	r3, r7, r1
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	187b      	adds	r3, r7, r1
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca6:	187a      	adds	r2, r7, r1
 8000ca8:	23a0      	movs	r3, #160	@ 0xa0
 8000caa:	05db      	lsls	r3, r3, #23
 8000cac:	0011      	movs	r1, r2
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f000 f982 	bl	8000fb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000cb4:	46c0      	nop			@ (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b01d      	add	sp, #116	@ 0x74
 8000cba:	bd90      	pop	{r4, r7, pc}
 8000cbc:	40004400 	.word	0x40004400
 8000cc0:	40021000 	.word	0x40021000

08000cc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cc4:	480d      	ldr	r0, [pc, #52]	@ (8000cfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cc6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cc8:	f7ff ff49 	bl	8000b5e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ccc:	480c      	ldr	r0, [pc, #48]	@ (8000d00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cce:	490d      	ldr	r1, [pc, #52]	@ (8000d04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d08 <LoopForever+0xe>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd4:	e002      	b.n	8000cdc <LoopCopyDataInit>

08000cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cda:	3304      	adds	r3, #4

08000cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce0:	d3f9      	bcc.n	8000cd6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8000d0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ce4:	4c0a      	ldr	r4, [pc, #40]	@ (8000d10 <LoopForever+0x16>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce8:	e001      	b.n	8000cee <LoopFillZerobss>

08000cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cec:	3204      	adds	r2, #4

08000cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf0:	d3fb      	bcc.n	8000cea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cf2:	f002 fb75 	bl	80033e0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000cf6:	f7ff fdf5 	bl	80008e4 <main>

08000cfa <LoopForever>:

LoopForever:
  b LoopForever
 8000cfa:	e7fe      	b.n	8000cfa <LoopForever>
  ldr   r0, =_estack
 8000cfc:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d08:	080034d8 	.word	0x080034d8
  ldr r2, =_sbss
 8000d0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d10:	20000178 	.word	0x20000178

08000d14 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <ADC1_COMP_IRQHandler>
	...

08000d18 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d1e:	1dfb      	adds	r3, r7, #7
 8000d20:	2200      	movs	r2, #0
 8000d22:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d24:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <HAL_Init+0x3c>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b0a      	ldr	r3, [pc, #40]	@ (8000d54 <HAL_Init+0x3c>)
 8000d2a:	2180      	movs	r1, #128	@ 0x80
 8000d2c:	0049      	lsls	r1, r1, #1
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d32:	2000      	movs	r0, #0
 8000d34:	f000 f810 	bl	8000d58 <HAL_InitTick>
 8000d38:	1e03      	subs	r3, r0, #0
 8000d3a:	d003      	beq.n	8000d44 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d3c:	1dfb      	adds	r3, r7, #7
 8000d3e:	2201      	movs	r2, #1
 8000d40:	701a      	strb	r2, [r3, #0]
 8000d42:	e001      	b.n	8000d48 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d44:	f7ff feca 	bl	8000adc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d48:	1dfb      	adds	r3, r7, #7
 8000d4a:	781b      	ldrb	r3, [r3, #0]
}
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b002      	add	sp, #8
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40022000 	.word	0x40022000

08000d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d60:	230f      	movs	r3, #15
 8000d62:	18fb      	adds	r3, r7, r3
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d68:	4b1d      	ldr	r3, [pc, #116]	@ (8000de0 <HAL_InitTick+0x88>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d02b      	beq.n	8000dc8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d70:	4b1c      	ldr	r3, [pc, #112]	@ (8000de4 <HAL_InitTick+0x8c>)
 8000d72:	681c      	ldr	r4, [r3, #0]
 8000d74:	4b1a      	ldr	r3, [pc, #104]	@ (8000de0 <HAL_InitTick+0x88>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	0019      	movs	r1, r3
 8000d7a:	23fa      	movs	r3, #250	@ 0xfa
 8000d7c:	0098      	lsls	r0, r3, #2
 8000d7e:	f7ff f9c1 	bl	8000104 <__udivsi3>
 8000d82:	0003      	movs	r3, r0
 8000d84:	0019      	movs	r1, r3
 8000d86:	0020      	movs	r0, r4
 8000d88:	f7ff f9bc 	bl	8000104 <__udivsi3>
 8000d8c:	0003      	movs	r3, r0
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f000 f905 	bl	8000f9e <HAL_SYSTICK_Config>
 8000d94:	1e03      	subs	r3, r0, #0
 8000d96:	d112      	bne.n	8000dbe <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b03      	cmp	r3, #3
 8000d9c:	d80a      	bhi.n	8000db4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	2301      	movs	r3, #1
 8000da2:	425b      	negs	r3, r3
 8000da4:	2200      	movs	r2, #0
 8000da6:	0018      	movs	r0, r3
 8000da8:	f000 f8e4 	bl	8000f74 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dac:	4b0e      	ldr	r3, [pc, #56]	@ (8000de8 <HAL_InitTick+0x90>)
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	e00d      	b.n	8000dd0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000db4:	230f      	movs	r3, #15
 8000db6:	18fb      	adds	r3, r7, r3
 8000db8:	2201      	movs	r2, #1
 8000dba:	701a      	strb	r2, [r3, #0]
 8000dbc:	e008      	b.n	8000dd0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dbe:	230f      	movs	r3, #15
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	701a      	strb	r2, [r3, #0]
 8000dc6:	e003      	b.n	8000dd0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dc8:	230f      	movs	r3, #15
 8000dca:	18fb      	adds	r3, r7, r3
 8000dcc:	2201      	movs	r2, #1
 8000dce:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000dd0:	230f      	movs	r3, #15
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	781b      	ldrb	r3, [r3, #0]
}
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	b005      	add	sp, #20
 8000ddc:	bd90      	pop	{r4, r7, pc}
 8000dde:	46c0      	nop			@ (mov r8, r8)
 8000de0:	20000008 	.word	0x20000008
 8000de4:	20000000 	.word	0x20000000
 8000de8:	20000004 	.word	0x20000004

08000dec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000df0:	4b05      	ldr	r3, [pc, #20]	@ (8000e08 <HAL_IncTick+0x1c>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	001a      	movs	r2, r3
 8000df6:	4b05      	ldr	r3, [pc, #20]	@ (8000e0c <HAL_IncTick+0x20>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	18d2      	adds	r2, r2, r3
 8000dfc:	4b03      	ldr	r3, [pc, #12]	@ (8000e0c <HAL_IncTick+0x20>)
 8000dfe:	601a      	str	r2, [r3, #0]
}
 8000e00:	46c0      	nop			@ (mov r8, r8)
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	46c0      	nop			@ (mov r8, r8)
 8000e08:	20000008 	.word	0x20000008
 8000e0c:	20000174 	.word	0x20000174

08000e10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  return uwTick;
 8000e14:	4b02      	ldr	r3, [pc, #8]	@ (8000e20 <HAL_GetTick+0x10>)
 8000e16:	681b      	ldr	r3, [r3, #0]
}
 8000e18:	0018      	movs	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	46c0      	nop			@ (mov r8, r8)
 8000e20:	20000174 	.word	0x20000174

08000e24 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000e2c:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a06      	ldr	r2, [pc, #24]	@ (8000e4c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000e32:	4013      	ands	r3, r2
 8000e34:	0019      	movs	r1, r3
 8000e36:	4b04      	ldr	r3, [pc, #16]	@ (8000e48 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	601a      	str	r2, [r3, #0]
}
 8000e3e:	46c0      	nop			@ (mov r8, r8)
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b002      	add	sp, #8
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	46c0      	nop			@ (mov r8, r8)
 8000e48:	40010000 	.word	0x40010000
 8000e4c:	fffff9ff 	.word	0xfffff9ff

08000e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e50:	b590      	push	{r4, r7, lr}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	0002      	movs	r2, r0
 8000e58:	6039      	str	r1, [r7, #0]
 8000e5a:	1dfb      	adds	r3, r7, #7
 8000e5c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e5e:	1dfb      	adds	r3, r7, #7
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e64:	d828      	bhi.n	8000eb8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e66:	4a2f      	ldr	r2, [pc, #188]	@ (8000f24 <__NVIC_SetPriority+0xd4>)
 8000e68:	1dfb      	adds	r3, r7, #7
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	b25b      	sxtb	r3, r3
 8000e6e:	089b      	lsrs	r3, r3, #2
 8000e70:	33c0      	adds	r3, #192	@ 0xc0
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	589b      	ldr	r3, [r3, r2]
 8000e76:	1dfa      	adds	r2, r7, #7
 8000e78:	7812      	ldrb	r2, [r2, #0]
 8000e7a:	0011      	movs	r1, r2
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	400a      	ands	r2, r1
 8000e80:	00d2      	lsls	r2, r2, #3
 8000e82:	21ff      	movs	r1, #255	@ 0xff
 8000e84:	4091      	lsls	r1, r2
 8000e86:	000a      	movs	r2, r1
 8000e88:	43d2      	mvns	r2, r2
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	019b      	lsls	r3, r3, #6
 8000e92:	22ff      	movs	r2, #255	@ 0xff
 8000e94:	401a      	ands	r2, r3
 8000e96:	1dfb      	adds	r3, r7, #7
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	4003      	ands	r3, r0
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ea4:	481f      	ldr	r0, [pc, #124]	@ (8000f24 <__NVIC_SetPriority+0xd4>)
 8000ea6:	1dfb      	adds	r3, r7, #7
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	b25b      	sxtb	r3, r3
 8000eac:	089b      	lsrs	r3, r3, #2
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	33c0      	adds	r3, #192	@ 0xc0
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000eb6:	e031      	b.n	8000f1c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eb8:	4a1b      	ldr	r2, [pc, #108]	@ (8000f28 <__NVIC_SetPriority+0xd8>)
 8000eba:	1dfb      	adds	r3, r7, #7
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	0019      	movs	r1, r3
 8000ec0:	230f      	movs	r3, #15
 8000ec2:	400b      	ands	r3, r1
 8000ec4:	3b08      	subs	r3, #8
 8000ec6:	089b      	lsrs	r3, r3, #2
 8000ec8:	3306      	adds	r3, #6
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	18d3      	adds	r3, r2, r3
 8000ece:	3304      	adds	r3, #4
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	1dfa      	adds	r2, r7, #7
 8000ed4:	7812      	ldrb	r2, [r2, #0]
 8000ed6:	0011      	movs	r1, r2
 8000ed8:	2203      	movs	r2, #3
 8000eda:	400a      	ands	r2, r1
 8000edc:	00d2      	lsls	r2, r2, #3
 8000ede:	21ff      	movs	r1, #255	@ 0xff
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	000a      	movs	r2, r1
 8000ee4:	43d2      	mvns	r2, r2
 8000ee6:	401a      	ands	r2, r3
 8000ee8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	019b      	lsls	r3, r3, #6
 8000eee:	22ff      	movs	r2, #255	@ 0xff
 8000ef0:	401a      	ands	r2, r3
 8000ef2:	1dfb      	adds	r3, r7, #7
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	2303      	movs	r3, #3
 8000efa:	4003      	ands	r3, r0
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f00:	4809      	ldr	r0, [pc, #36]	@ (8000f28 <__NVIC_SetPriority+0xd8>)
 8000f02:	1dfb      	adds	r3, r7, #7
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	001c      	movs	r4, r3
 8000f08:	230f      	movs	r3, #15
 8000f0a:	4023      	ands	r3, r4
 8000f0c:	3b08      	subs	r3, #8
 8000f0e:	089b      	lsrs	r3, r3, #2
 8000f10:	430a      	orrs	r2, r1
 8000f12:	3306      	adds	r3, #6
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	18c3      	adds	r3, r0, r3
 8000f18:	3304      	adds	r3, #4
 8000f1a:	601a      	str	r2, [r3, #0]
}
 8000f1c:	46c0      	nop			@ (mov r8, r8)
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	b003      	add	sp, #12
 8000f22:	bd90      	pop	{r4, r7, pc}
 8000f24:	e000e100 	.word	0xe000e100
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	1e5a      	subs	r2, r3, #1
 8000f38:	2380      	movs	r3, #128	@ 0x80
 8000f3a:	045b      	lsls	r3, r3, #17
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d301      	bcc.n	8000f44 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f40:	2301      	movs	r3, #1
 8000f42:	e010      	b.n	8000f66 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f44:	4b0a      	ldr	r3, [pc, #40]	@ (8000f70 <SysTick_Config+0x44>)
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	3a01      	subs	r2, #1
 8000f4a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	425b      	negs	r3, r3
 8000f50:	2103      	movs	r1, #3
 8000f52:	0018      	movs	r0, r3
 8000f54:	f7ff ff7c 	bl	8000e50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f58:	4b05      	ldr	r3, [pc, #20]	@ (8000f70 <SysTick_Config+0x44>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f5e:	4b04      	ldr	r3, [pc, #16]	@ (8000f70 <SysTick_Config+0x44>)
 8000f60:	2207      	movs	r2, #7
 8000f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	0018      	movs	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	b002      	add	sp, #8
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	46c0      	nop			@ (mov r8, r8)
 8000f70:	e000e010 	.word	0xe000e010

08000f74 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
 8000f7e:	210f      	movs	r1, #15
 8000f80:	187b      	adds	r3, r7, r1
 8000f82:	1c02      	adds	r2, r0, #0
 8000f84:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	187b      	adds	r3, r7, r1
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	b25b      	sxtb	r3, r3
 8000f8e:	0011      	movs	r1, r2
 8000f90:	0018      	movs	r0, r3
 8000f92:	f7ff ff5d 	bl	8000e50 <__NVIC_SetPriority>
}
 8000f96:	46c0      	nop			@ (mov r8, r8)
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	b004      	add	sp, #16
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f7ff ffbf 	bl	8000f2c <SysTick_Config>
 8000fae:	0003      	movs	r3, r0
}
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b002      	add	sp, #8
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc6:	e14d      	b.n	8001264 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2101      	movs	r1, #1
 8000fce:	697a      	ldr	r2, [r7, #20]
 8000fd0:	4091      	lsls	r1, r2
 8000fd2:	000a      	movs	r2, r1
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d100      	bne.n	8000fe0 <HAL_GPIO_Init+0x28>
 8000fde:	e13e      	b.n	800125e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d005      	beq.n	8000ff8 <HAL_GPIO_Init+0x40>
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d130      	bne.n	800105a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	2203      	movs	r2, #3
 8001004:	409a      	lsls	r2, r3
 8001006:	0013      	movs	r3, r2
 8001008:	43da      	mvns	r2, r3
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	68da      	ldr	r2, [r3, #12]
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	409a      	lsls	r2, r3
 800101a:	0013      	movs	r3, r2
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4313      	orrs	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800102e:	2201      	movs	r2, #1
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	409a      	lsls	r2, r3
 8001034:	0013      	movs	r3, r2
 8001036:	43da      	mvns	r2, r3
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	091b      	lsrs	r3, r3, #4
 8001044:	2201      	movs	r2, #1
 8001046:	401a      	ands	r2, r3
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	409a      	lsls	r2, r3
 800104c:	0013      	movs	r3, r2
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	2203      	movs	r2, #3
 8001060:	4013      	ands	r3, r2
 8001062:	2b03      	cmp	r3, #3
 8001064:	d017      	beq.n	8001096 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	2203      	movs	r2, #3
 8001072:	409a      	lsls	r2, r3
 8001074:	0013      	movs	r3, r2
 8001076:	43da      	mvns	r2, r3
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	4013      	ands	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	689a      	ldr	r2, [r3, #8]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	409a      	lsls	r2, r3
 8001088:	0013      	movs	r3, r2
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	2203      	movs	r2, #3
 800109c:	4013      	ands	r3, r2
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d123      	bne.n	80010ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	08da      	lsrs	r2, r3, #3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3208      	adds	r2, #8
 80010aa:	0092      	lsls	r2, r2, #2
 80010ac:	58d3      	ldr	r3, [r2, r3]
 80010ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	2207      	movs	r2, #7
 80010b4:	4013      	ands	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	220f      	movs	r2, #15
 80010ba:	409a      	lsls	r2, r3
 80010bc:	0013      	movs	r3, r2
 80010be:	43da      	mvns	r2, r3
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	691a      	ldr	r2, [r3, #16]
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	2107      	movs	r1, #7
 80010ce:	400b      	ands	r3, r1
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	409a      	lsls	r2, r3
 80010d4:	0013      	movs	r3, r2
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	08da      	lsrs	r2, r3, #3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3208      	adds	r2, #8
 80010e4:	0092      	lsls	r2, r2, #2
 80010e6:	6939      	ldr	r1, [r7, #16]
 80010e8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	2203      	movs	r2, #3
 80010f6:	409a      	lsls	r2, r3
 80010f8:	0013      	movs	r3, r2
 80010fa:	43da      	mvns	r2, r3
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2203      	movs	r2, #3
 8001108:	401a      	ands	r2, r3
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	409a      	lsls	r2, r3
 8001110:	0013      	movs	r3, r2
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	23c0      	movs	r3, #192	@ 0xc0
 8001124:	029b      	lsls	r3, r3, #10
 8001126:	4013      	ands	r3, r2
 8001128:	d100      	bne.n	800112c <HAL_GPIO_Init+0x174>
 800112a:	e098      	b.n	800125e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800112c:	4a53      	ldr	r2, [pc, #332]	@ (800127c <HAL_GPIO_Init+0x2c4>)
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	089b      	lsrs	r3, r3, #2
 8001132:	3318      	adds	r3, #24
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	589b      	ldr	r3, [r3, r2]
 8001138:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	2203      	movs	r2, #3
 800113e:	4013      	ands	r3, r2
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	220f      	movs	r2, #15
 8001144:	409a      	lsls	r2, r3
 8001146:	0013      	movs	r3, r2
 8001148:	43da      	mvns	r2, r3
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	23a0      	movs	r3, #160	@ 0xa0
 8001154:	05db      	lsls	r3, r3, #23
 8001156:	429a      	cmp	r2, r3
 8001158:	d019      	beq.n	800118e <HAL_GPIO_Init+0x1d6>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a48      	ldr	r2, [pc, #288]	@ (8001280 <HAL_GPIO_Init+0x2c8>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d013      	beq.n	800118a <HAL_GPIO_Init+0x1d2>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a47      	ldr	r2, [pc, #284]	@ (8001284 <HAL_GPIO_Init+0x2cc>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d00d      	beq.n	8001186 <HAL_GPIO_Init+0x1ce>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a46      	ldr	r2, [pc, #280]	@ (8001288 <HAL_GPIO_Init+0x2d0>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d007      	beq.n	8001182 <HAL_GPIO_Init+0x1ca>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a45      	ldr	r2, [pc, #276]	@ (800128c <HAL_GPIO_Init+0x2d4>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d101      	bne.n	800117e <HAL_GPIO_Init+0x1c6>
 800117a:	2304      	movs	r3, #4
 800117c:	e008      	b.n	8001190 <HAL_GPIO_Init+0x1d8>
 800117e:	2305      	movs	r3, #5
 8001180:	e006      	b.n	8001190 <HAL_GPIO_Init+0x1d8>
 8001182:	2303      	movs	r3, #3
 8001184:	e004      	b.n	8001190 <HAL_GPIO_Init+0x1d8>
 8001186:	2302      	movs	r3, #2
 8001188:	e002      	b.n	8001190 <HAL_GPIO_Init+0x1d8>
 800118a:	2301      	movs	r3, #1
 800118c:	e000      	b.n	8001190 <HAL_GPIO_Init+0x1d8>
 800118e:	2300      	movs	r3, #0
 8001190:	697a      	ldr	r2, [r7, #20]
 8001192:	2103      	movs	r1, #3
 8001194:	400a      	ands	r2, r1
 8001196:	00d2      	lsls	r2, r2, #3
 8001198:	4093      	lsls	r3, r2
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80011a0:	4936      	ldr	r1, [pc, #216]	@ (800127c <HAL_GPIO_Init+0x2c4>)
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	089b      	lsrs	r3, r3, #2
 80011a6:	3318      	adds	r3, #24
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011ae:	4b33      	ldr	r3, [pc, #204]	@ (800127c <HAL_GPIO_Init+0x2c4>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	43da      	mvns	r2, r3
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	4013      	ands	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	2380      	movs	r3, #128	@ 0x80
 80011c4:	035b      	lsls	r3, r3, #13
 80011c6:	4013      	ands	r3, r2
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011d2:	4b2a      	ldr	r3, [pc, #168]	@ (800127c <HAL_GPIO_Init+0x2c4>)
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80011d8:	4b28      	ldr	r3, [pc, #160]	@ (800127c <HAL_GPIO_Init+0x2c4>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	43da      	mvns	r2, r3
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	2380      	movs	r3, #128	@ 0x80
 80011ee:	039b      	lsls	r3, r3, #14
 80011f0:	4013      	ands	r3, r2
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011fc:	4b1f      	ldr	r3, [pc, #124]	@ (800127c <HAL_GPIO_Init+0x2c4>)
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001202:	4a1e      	ldr	r2, [pc, #120]	@ (800127c <HAL_GPIO_Init+0x2c4>)
 8001204:	2384      	movs	r3, #132	@ 0x84
 8001206:	58d3      	ldr	r3, [r2, r3]
 8001208:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	43da      	mvns	r2, r3
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	2380      	movs	r3, #128	@ 0x80
 800121a:	029b      	lsls	r3, r3, #10
 800121c:	4013      	ands	r3, r2
 800121e:	d003      	beq.n	8001228 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	4313      	orrs	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001228:	4914      	ldr	r1, [pc, #80]	@ (800127c <HAL_GPIO_Init+0x2c4>)
 800122a:	2284      	movs	r2, #132	@ 0x84
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001230:	4a12      	ldr	r2, [pc, #72]	@ (800127c <HAL_GPIO_Init+0x2c4>)
 8001232:	2380      	movs	r3, #128	@ 0x80
 8001234:	58d3      	ldr	r3, [r2, r3]
 8001236:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	43da      	mvns	r2, r3
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	4013      	ands	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685a      	ldr	r2, [r3, #4]
 8001246:	2380      	movs	r3, #128	@ 0x80
 8001248:	025b      	lsls	r3, r3, #9
 800124a:	4013      	ands	r3, r2
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4313      	orrs	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001256:	4909      	ldr	r1, [pc, #36]	@ (800127c <HAL_GPIO_Init+0x2c4>)
 8001258:	2280      	movs	r2, #128	@ 0x80
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	3301      	adds	r3, #1
 8001262:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	40da      	lsrs	r2, r3
 800126c:	1e13      	subs	r3, r2, #0
 800126e:	d000      	beq.n	8001272 <HAL_GPIO_Init+0x2ba>
 8001270:	e6aa      	b.n	8000fc8 <HAL_GPIO_Init+0x10>
  }
}
 8001272:	46c0      	nop			@ (mov r8, r8)
 8001274:	46c0      	nop			@ (mov r8, r8)
 8001276:	46bd      	mov	sp, r7
 8001278:	b006      	add	sp, #24
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40021800 	.word	0x40021800
 8001280:	50000400 	.word	0x50000400
 8001284:	50000800 	.word	0x50000800
 8001288:	50000c00 	.word	0x50000c00
 800128c:	50001000 	.word	0x50001000

08001290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	0008      	movs	r0, r1
 800129a:	0011      	movs	r1, r2
 800129c:	1cbb      	adds	r3, r7, #2
 800129e:	1c02      	adds	r2, r0, #0
 80012a0:	801a      	strh	r2, [r3, #0]
 80012a2:	1c7b      	adds	r3, r7, #1
 80012a4:	1c0a      	adds	r2, r1, #0
 80012a6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012a8:	1c7b      	adds	r3, r7, #1
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d004      	beq.n	80012ba <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012b0:	1cbb      	adds	r3, r7, #2
 80012b2:	881a      	ldrh	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012b8:	e003      	b.n	80012c2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012ba:	1cbb      	adds	r3, r7, #2
 80012bc:	881a      	ldrh	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012c2:	46c0      	nop			@ (mov r8, r8)
 80012c4:	46bd      	mov	sp, r7
 80012c6:	b002      	add	sp, #8
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e08f      	b.n	80013fe <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2241      	movs	r2, #65	@ 0x41
 80012e2:	5c9b      	ldrb	r3, [r3, r2]
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d107      	bne.n	80012fa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2240      	movs	r2, #64	@ 0x40
 80012ee:	2100      	movs	r1, #0
 80012f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	0018      	movs	r0, r3
 80012f6:	f7ff fa93 	bl	8000820 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2241      	movs	r2, #65	@ 0x41
 80012fe:	2124      	movs	r1, #36	@ 0x24
 8001300:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2101      	movs	r1, #1
 800130e:	438a      	bics	r2, r1
 8001310:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	493b      	ldr	r1, [pc, #236]	@ (8001408 <HAL_I2C_Init+0x13c>)
 800131c:	400a      	ands	r2, r1
 800131e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4938      	ldr	r1, [pc, #224]	@ (800140c <HAL_I2C_Init+0x140>)
 800132c:	400a      	ands	r2, r1
 800132e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d108      	bne.n	800134a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2180      	movs	r1, #128	@ 0x80
 8001342:	0209      	lsls	r1, r1, #8
 8001344:	430a      	orrs	r2, r1
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	e007      	b.n	800135a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2184      	movs	r1, #132	@ 0x84
 8001354:	0209      	lsls	r1, r1, #8
 8001356:	430a      	orrs	r2, r1
 8001358:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	2b02      	cmp	r3, #2
 8001360:	d109      	bne.n	8001376 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2180      	movs	r1, #128	@ 0x80
 800136e:	0109      	lsls	r1, r1, #4
 8001370:	430a      	orrs	r2, r1
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	e007      	b.n	8001386 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4923      	ldr	r1, [pc, #140]	@ (8001410 <HAL_I2C_Init+0x144>)
 8001382:	400a      	ands	r2, r1
 8001384:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	685a      	ldr	r2, [r3, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4920      	ldr	r1, [pc, #128]	@ (8001414 <HAL_I2C_Init+0x148>)
 8001392:	430a      	orrs	r2, r1
 8001394:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68da      	ldr	r2, [r3, #12]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	491a      	ldr	r1, [pc, #104]	@ (800140c <HAL_I2C_Init+0x140>)
 80013a2:	400a      	ands	r2, r1
 80013a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	691a      	ldr	r2, [r3, #16]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	431a      	orrs	r2, r3
 80013b0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	430a      	orrs	r2, r1
 80013be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	69d9      	ldr	r1, [r3, #28]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a1a      	ldr	r2, [r3, #32]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	430a      	orrs	r2, r1
 80013ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2101      	movs	r1, #1
 80013dc:	430a      	orrs	r2, r1
 80013de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2241      	movs	r2, #65	@ 0x41
 80013ea:	2120      	movs	r1, #32
 80013ec:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2242      	movs	r2, #66	@ 0x42
 80013f8:	2100      	movs	r1, #0
 80013fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	0018      	movs	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	b002      	add	sp, #8
 8001404:	bd80      	pop	{r7, pc}
 8001406:	46c0      	nop			@ (mov r8, r8)
 8001408:	f0ffffff 	.word	0xf0ffffff
 800140c:	ffff7fff 	.word	0xffff7fff
 8001410:	fffff7ff 	.word	0xfffff7ff
 8001414:	02008000 	.word	0x02008000

08001418 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2241      	movs	r2, #65	@ 0x41
 8001426:	5c9b      	ldrb	r3, [r3, r2]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b20      	cmp	r3, #32
 800142c:	d138      	bne.n	80014a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2240      	movs	r2, #64	@ 0x40
 8001432:	5c9b      	ldrb	r3, [r3, r2]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d101      	bne.n	800143c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001438:	2302      	movs	r3, #2
 800143a:	e032      	b.n	80014a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2240      	movs	r2, #64	@ 0x40
 8001440:	2101      	movs	r1, #1
 8001442:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2241      	movs	r2, #65	@ 0x41
 8001448:	2124      	movs	r1, #36	@ 0x24
 800144a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2101      	movs	r1, #1
 8001458:	438a      	bics	r2, r1
 800145a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4911      	ldr	r1, [pc, #68]	@ (80014ac <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001468:	400a      	ands	r2, r1
 800146a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6819      	ldr	r1, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	430a      	orrs	r2, r1
 800147a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2101      	movs	r1, #1
 8001488:	430a      	orrs	r2, r1
 800148a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2241      	movs	r2, #65	@ 0x41
 8001490:	2120      	movs	r1, #32
 8001492:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2240      	movs	r2, #64	@ 0x40
 8001498:	2100      	movs	r1, #0
 800149a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800149c:	2300      	movs	r3, #0
 800149e:	e000      	b.n	80014a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80014a0:	2302      	movs	r3, #2
  }
}
 80014a2:	0018      	movs	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	b002      	add	sp, #8
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	46c0      	nop			@ (mov r8, r8)
 80014ac:	ffffefff 	.word	0xffffefff

080014b0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2241      	movs	r2, #65	@ 0x41
 80014be:	5c9b      	ldrb	r3, [r3, r2]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b20      	cmp	r3, #32
 80014c4:	d139      	bne.n	800153a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2240      	movs	r2, #64	@ 0x40
 80014ca:	5c9b      	ldrb	r3, [r3, r2]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d101      	bne.n	80014d4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80014d0:	2302      	movs	r3, #2
 80014d2:	e033      	b.n	800153c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2240      	movs	r2, #64	@ 0x40
 80014d8:	2101      	movs	r1, #1
 80014da:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2241      	movs	r2, #65	@ 0x41
 80014e0:	2124      	movs	r1, #36	@ 0x24
 80014e2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2101      	movs	r1, #1
 80014f0:	438a      	bics	r2, r1
 80014f2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4a11      	ldr	r2, [pc, #68]	@ (8001544 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001500:	4013      	ands	r3, r2
 8001502:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	021b      	lsls	r3, r3, #8
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	4313      	orrs	r3, r2
 800150c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2101      	movs	r1, #1
 8001522:	430a      	orrs	r2, r1
 8001524:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2241      	movs	r2, #65	@ 0x41
 800152a:	2120      	movs	r1, #32
 800152c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2240      	movs	r2, #64	@ 0x40
 8001532:	2100      	movs	r1, #0
 8001534:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	e000      	b.n	800153c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800153a:	2302      	movs	r3, #2
  }
}
 800153c:	0018      	movs	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	b004      	add	sp, #16
 8001542:	bd80      	pop	{r7, pc}
 8001544:	fffff0ff 	.word	0xfffff0ff

08001548 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001550:	4b19      	ldr	r3, [pc, #100]	@ (80015b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a19      	ldr	r2, [pc, #100]	@ (80015bc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001556:	4013      	ands	r3, r2
 8001558:	0019      	movs	r1, r3
 800155a:	4b17      	ldr	r3, [pc, #92]	@ (80015b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	430a      	orrs	r2, r1
 8001560:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	2380      	movs	r3, #128	@ 0x80
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	429a      	cmp	r2, r3
 800156a:	d11f      	bne.n	80015ac <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800156c:	4b14      	ldr	r3, [pc, #80]	@ (80015c0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	0013      	movs	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	189b      	adds	r3, r3, r2
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	4912      	ldr	r1, [pc, #72]	@ (80015c4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800157a:	0018      	movs	r0, r3
 800157c:	f7fe fdc2 	bl	8000104 <__udivsi3>
 8001580:	0003      	movs	r3, r0
 8001582:	3301      	adds	r3, #1
 8001584:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001586:	e008      	b.n	800159a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	3b01      	subs	r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	e001      	b.n	800159a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e009      	b.n	80015ae <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800159a:	4b07      	ldr	r3, [pc, #28]	@ (80015b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800159c:	695a      	ldr	r2, [r3, #20]
 800159e:	2380      	movs	r3, #128	@ 0x80
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	401a      	ands	r2, r3
 80015a4:	2380      	movs	r3, #128	@ 0x80
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d0ed      	beq.n	8001588 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	0018      	movs	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	b004      	add	sp, #16
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	46c0      	nop			@ (mov r8, r8)
 80015b8:	40007000 	.word	0x40007000
 80015bc:	fffff9ff 	.word	0xfffff9ff
 80015c0:	20000000 	.word	0x20000000
 80015c4:	000f4240 	.word	0x000f4240

080015c8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80015cc:	4b03      	ldr	r3, [pc, #12]	@ (80015dc <LL_RCC_GetAPB1Prescaler+0x14>)
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	23e0      	movs	r3, #224	@ 0xe0
 80015d2:	01db      	lsls	r3, r3, #7
 80015d4:	4013      	ands	r3, r2
}
 80015d6:	0018      	movs	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40021000 	.word	0x40021000

080015e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d102      	bne.n	80015f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	f000 fb50 	bl	8001c94 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2201      	movs	r2, #1
 80015fa:	4013      	ands	r3, r2
 80015fc:	d100      	bne.n	8001600 <HAL_RCC_OscConfig+0x20>
 80015fe:	e07c      	b.n	80016fa <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001600:	4bc3      	ldr	r3, [pc, #780]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	2238      	movs	r2, #56	@ 0x38
 8001606:	4013      	ands	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800160a:	4bc1      	ldr	r3, [pc, #772]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	2203      	movs	r2, #3
 8001610:	4013      	ands	r3, r2
 8001612:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	2b10      	cmp	r3, #16
 8001618:	d102      	bne.n	8001620 <HAL_RCC_OscConfig+0x40>
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	2b03      	cmp	r3, #3
 800161e:	d002      	beq.n	8001626 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	2b08      	cmp	r3, #8
 8001624:	d10b      	bne.n	800163e <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001626:	4bba      	ldr	r3, [pc, #744]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	2380      	movs	r3, #128	@ 0x80
 800162c:	029b      	lsls	r3, r3, #10
 800162e:	4013      	ands	r3, r2
 8001630:	d062      	beq.n	80016f8 <HAL_RCC_OscConfig+0x118>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d15e      	bne.n	80016f8 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e32a      	b.n	8001c94 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	2380      	movs	r3, #128	@ 0x80
 8001644:	025b      	lsls	r3, r3, #9
 8001646:	429a      	cmp	r2, r3
 8001648:	d107      	bne.n	800165a <HAL_RCC_OscConfig+0x7a>
 800164a:	4bb1      	ldr	r3, [pc, #708]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	4bb0      	ldr	r3, [pc, #704]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 8001650:	2180      	movs	r1, #128	@ 0x80
 8001652:	0249      	lsls	r1, r1, #9
 8001654:	430a      	orrs	r2, r1
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	e020      	b.n	800169c <HAL_RCC_OscConfig+0xbc>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	23a0      	movs	r3, #160	@ 0xa0
 8001660:	02db      	lsls	r3, r3, #11
 8001662:	429a      	cmp	r2, r3
 8001664:	d10e      	bne.n	8001684 <HAL_RCC_OscConfig+0xa4>
 8001666:	4baa      	ldr	r3, [pc, #680]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	4ba9      	ldr	r3, [pc, #676]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 800166c:	2180      	movs	r1, #128	@ 0x80
 800166e:	02c9      	lsls	r1, r1, #11
 8001670:	430a      	orrs	r2, r1
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	4ba6      	ldr	r3, [pc, #664]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4ba5      	ldr	r3, [pc, #660]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 800167a:	2180      	movs	r1, #128	@ 0x80
 800167c:	0249      	lsls	r1, r1, #9
 800167e:	430a      	orrs	r2, r1
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	e00b      	b.n	800169c <HAL_RCC_OscConfig+0xbc>
 8001684:	4ba2      	ldr	r3, [pc, #648]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4ba1      	ldr	r3, [pc, #644]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 800168a:	49a2      	ldr	r1, [pc, #648]	@ (8001914 <HAL_RCC_OscConfig+0x334>)
 800168c:	400a      	ands	r2, r1
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	4b9f      	ldr	r3, [pc, #636]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b9e      	ldr	r3, [pc, #632]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 8001696:	49a0      	ldr	r1, [pc, #640]	@ (8001918 <HAL_RCC_OscConfig+0x338>)
 8001698:	400a      	ands	r2, r1
 800169a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d014      	beq.n	80016ce <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a4:	f7ff fbb4 	bl	8000e10 <HAL_GetTick>
 80016a8:	0003      	movs	r3, r0
 80016aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ae:	f7ff fbaf 	bl	8000e10 <HAL_GetTick>
 80016b2:	0002      	movs	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b64      	cmp	r3, #100	@ 0x64
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e2e9      	b.n	8001c94 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016c0:	4b93      	ldr	r3, [pc, #588]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	2380      	movs	r3, #128	@ 0x80
 80016c6:	029b      	lsls	r3, r3, #10
 80016c8:	4013      	ands	r3, r2
 80016ca:	d0f0      	beq.n	80016ae <HAL_RCC_OscConfig+0xce>
 80016cc:	e015      	b.n	80016fa <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ce:	f7ff fb9f 	bl	8000e10 <HAL_GetTick>
 80016d2:	0003      	movs	r3, r0
 80016d4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d8:	f7ff fb9a 	bl	8000e10 <HAL_GetTick>
 80016dc:	0002      	movs	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b64      	cmp	r3, #100	@ 0x64
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e2d4      	b.n	8001c94 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016ea:	4b89      	ldr	r3, [pc, #548]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	2380      	movs	r3, #128	@ 0x80
 80016f0:	029b      	lsls	r3, r3, #10
 80016f2:	4013      	ands	r3, r2
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0xf8>
 80016f6:	e000      	b.n	80016fa <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2202      	movs	r2, #2
 8001700:	4013      	ands	r3, r2
 8001702:	d100      	bne.n	8001706 <HAL_RCC_OscConfig+0x126>
 8001704:	e099      	b.n	800183a <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001706:	4b82      	ldr	r3, [pc, #520]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	2238      	movs	r2, #56	@ 0x38
 800170c:	4013      	ands	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001710:	4b7f      	ldr	r3, [pc, #508]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	2203      	movs	r2, #3
 8001716:	4013      	ands	r3, r2
 8001718:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	2b10      	cmp	r3, #16
 800171e:	d102      	bne.n	8001726 <HAL_RCC_OscConfig+0x146>
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	2b02      	cmp	r3, #2
 8001724:	d002      	beq.n	800172c <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d135      	bne.n	8001798 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800172c:	4b78      	ldr	r3, [pc, #480]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	2380      	movs	r3, #128	@ 0x80
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	4013      	ands	r3, r2
 8001736:	d005      	beq.n	8001744 <HAL_RCC_OscConfig+0x164>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d101      	bne.n	8001744 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e2a7      	b.n	8001c94 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001744:	4b72      	ldr	r3, [pc, #456]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	4a74      	ldr	r2, [pc, #464]	@ (800191c <HAL_RCC_OscConfig+0x33c>)
 800174a:	4013      	ands	r3, r2
 800174c:	0019      	movs	r1, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	021a      	lsls	r2, r3, #8
 8001754:	4b6e      	ldr	r3, [pc, #440]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 8001756:	430a      	orrs	r2, r1
 8001758:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d112      	bne.n	8001786 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001760:	4b6b      	ldr	r3, [pc, #428]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a6e      	ldr	r2, [pc, #440]	@ (8001920 <HAL_RCC_OscConfig+0x340>)
 8001766:	4013      	ands	r3, r2
 8001768:	0019      	movs	r1, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	691a      	ldr	r2, [r3, #16]
 800176e:	4b68      	ldr	r3, [pc, #416]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 8001770:	430a      	orrs	r2, r1
 8001772:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001774:	4b66      	ldr	r3, [pc, #408]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	0adb      	lsrs	r3, r3, #11
 800177a:	2207      	movs	r2, #7
 800177c:	4013      	ands	r3, r2
 800177e:	4a69      	ldr	r2, [pc, #420]	@ (8001924 <HAL_RCC_OscConfig+0x344>)
 8001780:	40da      	lsrs	r2, r3
 8001782:	4b69      	ldr	r3, [pc, #420]	@ (8001928 <HAL_RCC_OscConfig+0x348>)
 8001784:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001786:	4b69      	ldr	r3, [pc, #420]	@ (800192c <HAL_RCC_OscConfig+0x34c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	0018      	movs	r0, r3
 800178c:	f7ff fae4 	bl	8000d58 <HAL_InitTick>
 8001790:	1e03      	subs	r3, r0, #0
 8001792:	d051      	beq.n	8001838 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e27d      	b.n	8001c94 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d030      	beq.n	8001802 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80017a0:	4b5b      	ldr	r3, [pc, #364]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a5e      	ldr	r2, [pc, #376]	@ (8001920 <HAL_RCC_OscConfig+0x340>)
 80017a6:	4013      	ands	r3, r2
 80017a8:	0019      	movs	r1, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	691a      	ldr	r2, [r3, #16]
 80017ae:	4b58      	ldr	r3, [pc, #352]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 80017b0:	430a      	orrs	r2, r1
 80017b2:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80017b4:	4b56      	ldr	r3, [pc, #344]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4b55      	ldr	r3, [pc, #340]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 80017ba:	2180      	movs	r1, #128	@ 0x80
 80017bc:	0049      	lsls	r1, r1, #1
 80017be:	430a      	orrs	r2, r1
 80017c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c2:	f7ff fb25 	bl	8000e10 <HAL_GetTick>
 80017c6:	0003      	movs	r3, r0
 80017c8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017cc:	f7ff fb20 	bl	8000e10 <HAL_GetTick>
 80017d0:	0002      	movs	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e25a      	b.n	8001c94 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017de:	4b4c      	ldr	r3, [pc, #304]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	2380      	movs	r3, #128	@ 0x80
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	4013      	ands	r3, r2
 80017e8:	d0f0      	beq.n	80017cc <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ea:	4b49      	ldr	r3, [pc, #292]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	4a4b      	ldr	r2, [pc, #300]	@ (800191c <HAL_RCC_OscConfig+0x33c>)
 80017f0:	4013      	ands	r3, r2
 80017f2:	0019      	movs	r1, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	695b      	ldr	r3, [r3, #20]
 80017f8:	021a      	lsls	r2, r3, #8
 80017fa:	4b45      	ldr	r3, [pc, #276]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 80017fc:	430a      	orrs	r2, r1
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	e01b      	b.n	800183a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001802:	4b43      	ldr	r3, [pc, #268]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	4b42      	ldr	r3, [pc, #264]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 8001808:	4949      	ldr	r1, [pc, #292]	@ (8001930 <HAL_RCC_OscConfig+0x350>)
 800180a:	400a      	ands	r2, r1
 800180c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180e:	f7ff faff 	bl	8000e10 <HAL_GetTick>
 8001812:	0003      	movs	r3, r0
 8001814:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001818:	f7ff fafa 	bl	8000e10 <HAL_GetTick>
 800181c:	0002      	movs	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e234      	b.n	8001c94 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800182a:	4b39      	ldr	r3, [pc, #228]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	2380      	movs	r3, #128	@ 0x80
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	4013      	ands	r3, r2
 8001834:	d1f0      	bne.n	8001818 <HAL_RCC_OscConfig+0x238>
 8001836:	e000      	b.n	800183a <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001838:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2208      	movs	r2, #8
 8001840:	4013      	ands	r3, r2
 8001842:	d047      	beq.n	80018d4 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001844:	4b32      	ldr	r3, [pc, #200]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	2238      	movs	r2, #56	@ 0x38
 800184a:	4013      	ands	r3, r2
 800184c:	2b18      	cmp	r3, #24
 800184e:	d10a      	bne.n	8001866 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001850:	4b2f      	ldr	r3, [pc, #188]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 8001852:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001854:	2202      	movs	r2, #2
 8001856:	4013      	ands	r3, r2
 8001858:	d03c      	beq.n	80018d4 <HAL_RCC_OscConfig+0x2f4>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d138      	bne.n	80018d4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e216      	b.n	8001c94 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d019      	beq.n	80018a2 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800186e:	4b28      	ldr	r3, [pc, #160]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 8001870:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001872:	4b27      	ldr	r3, [pc, #156]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 8001874:	2101      	movs	r1, #1
 8001876:	430a      	orrs	r2, r1
 8001878:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187a:	f7ff fac9 	bl	8000e10 <HAL_GetTick>
 800187e:	0003      	movs	r3, r0
 8001880:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001884:	f7ff fac4 	bl	8000e10 <HAL_GetTick>
 8001888:	0002      	movs	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e1fe      	b.n	8001c94 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001896:	4b1e      	ldr	r3, [pc, #120]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 8001898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800189a:	2202      	movs	r2, #2
 800189c:	4013      	ands	r3, r2
 800189e:	d0f1      	beq.n	8001884 <HAL_RCC_OscConfig+0x2a4>
 80018a0:	e018      	b.n	80018d4 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80018a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 80018a4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80018a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 80018a8:	2101      	movs	r1, #1
 80018aa:	438a      	bics	r2, r1
 80018ac:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ae:	f7ff faaf 	bl	8000e10 <HAL_GetTick>
 80018b2:	0003      	movs	r3, r0
 80018b4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b8:	f7ff faaa 	bl	8000e10 <HAL_GetTick>
 80018bc:	0002      	movs	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e1e4      	b.n	8001c94 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018ca:	4b11      	ldr	r3, [pc, #68]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 80018cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ce:	2202      	movs	r2, #2
 80018d0:	4013      	ands	r3, r2
 80018d2:	d1f1      	bne.n	80018b8 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2204      	movs	r2, #4
 80018da:	4013      	ands	r3, r2
 80018dc:	d100      	bne.n	80018e0 <HAL_RCC_OscConfig+0x300>
 80018de:	e0c7      	b.n	8001a70 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018e0:	231f      	movs	r3, #31
 80018e2:	18fb      	adds	r3, r7, r3
 80018e4:	2200      	movs	r2, #0
 80018e6:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80018e8:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2238      	movs	r2, #56	@ 0x38
 80018ee:	4013      	ands	r3, r2
 80018f0:	2b20      	cmp	r3, #32
 80018f2:	d11f      	bne.n	8001934 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80018f4:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <HAL_RCC_OscConfig+0x330>)
 80018f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018f8:	2202      	movs	r2, #2
 80018fa:	4013      	ands	r3, r2
 80018fc:	d100      	bne.n	8001900 <HAL_RCC_OscConfig+0x320>
 80018fe:	e0b7      	b.n	8001a70 <HAL_RCC_OscConfig+0x490>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d000      	beq.n	800190a <HAL_RCC_OscConfig+0x32a>
 8001908:	e0b2      	b.n	8001a70 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e1c2      	b.n	8001c94 <HAL_RCC_OscConfig+0x6b4>
 800190e:	46c0      	nop			@ (mov r8, r8)
 8001910:	40021000 	.word	0x40021000
 8001914:	fffeffff 	.word	0xfffeffff
 8001918:	fffbffff 	.word	0xfffbffff
 800191c:	ffff80ff 	.word	0xffff80ff
 8001920:	ffffc7ff 	.word	0xffffc7ff
 8001924:	00f42400 	.word	0x00f42400
 8001928:	20000000 	.word	0x20000000
 800192c:	20000004 	.word	0x20000004
 8001930:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001934:	4bb5      	ldr	r3, [pc, #724]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 8001936:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001938:	2380      	movs	r3, #128	@ 0x80
 800193a:	055b      	lsls	r3, r3, #21
 800193c:	4013      	ands	r3, r2
 800193e:	d101      	bne.n	8001944 <HAL_RCC_OscConfig+0x364>
 8001940:	2301      	movs	r3, #1
 8001942:	e000      	b.n	8001946 <HAL_RCC_OscConfig+0x366>
 8001944:	2300      	movs	r3, #0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d011      	beq.n	800196e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800194a:	4bb0      	ldr	r3, [pc, #704]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 800194c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800194e:	4baf      	ldr	r3, [pc, #700]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 8001950:	2180      	movs	r1, #128	@ 0x80
 8001952:	0549      	lsls	r1, r1, #21
 8001954:	430a      	orrs	r2, r1
 8001956:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001958:	4bac      	ldr	r3, [pc, #688]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 800195a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800195c:	2380      	movs	r3, #128	@ 0x80
 800195e:	055b      	lsls	r3, r3, #21
 8001960:	4013      	ands	r3, r2
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001966:	231f      	movs	r3, #31
 8001968:	18fb      	adds	r3, r7, r3
 800196a:	2201      	movs	r2, #1
 800196c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800196e:	4ba8      	ldr	r3, [pc, #672]	@ (8001c10 <HAL_RCC_OscConfig+0x630>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	2380      	movs	r3, #128	@ 0x80
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	4013      	ands	r3, r2
 8001978:	d11a      	bne.n	80019b0 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800197a:	4ba5      	ldr	r3, [pc, #660]	@ (8001c10 <HAL_RCC_OscConfig+0x630>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	4ba4      	ldr	r3, [pc, #656]	@ (8001c10 <HAL_RCC_OscConfig+0x630>)
 8001980:	2180      	movs	r1, #128	@ 0x80
 8001982:	0049      	lsls	r1, r1, #1
 8001984:	430a      	orrs	r2, r1
 8001986:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001988:	f7ff fa42 	bl	8000e10 <HAL_GetTick>
 800198c:	0003      	movs	r3, r0
 800198e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001992:	f7ff fa3d 	bl	8000e10 <HAL_GetTick>
 8001996:	0002      	movs	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e177      	b.n	8001c94 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019a4:	4b9a      	ldr	r3, [pc, #616]	@ (8001c10 <HAL_RCC_OscConfig+0x630>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	2380      	movs	r3, #128	@ 0x80
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	4013      	ands	r3, r2
 80019ae:	d0f0      	beq.n	8001992 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d106      	bne.n	80019c6 <HAL_RCC_OscConfig+0x3e6>
 80019b8:	4b94      	ldr	r3, [pc, #592]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 80019ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80019bc:	4b93      	ldr	r3, [pc, #588]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 80019be:	2101      	movs	r1, #1
 80019c0:	430a      	orrs	r2, r1
 80019c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80019c4:	e01c      	b.n	8001a00 <HAL_RCC_OscConfig+0x420>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	2b05      	cmp	r3, #5
 80019cc:	d10c      	bne.n	80019e8 <HAL_RCC_OscConfig+0x408>
 80019ce:	4b8f      	ldr	r3, [pc, #572]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 80019d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80019d2:	4b8e      	ldr	r3, [pc, #568]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 80019d4:	2104      	movs	r1, #4
 80019d6:	430a      	orrs	r2, r1
 80019d8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80019da:	4b8c      	ldr	r3, [pc, #560]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 80019dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80019de:	4b8b      	ldr	r3, [pc, #556]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 80019e0:	2101      	movs	r1, #1
 80019e2:	430a      	orrs	r2, r1
 80019e4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80019e6:	e00b      	b.n	8001a00 <HAL_RCC_OscConfig+0x420>
 80019e8:	4b88      	ldr	r3, [pc, #544]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 80019ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80019ec:	4b87      	ldr	r3, [pc, #540]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 80019ee:	2101      	movs	r1, #1
 80019f0:	438a      	bics	r2, r1
 80019f2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80019f4:	4b85      	ldr	r3, [pc, #532]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 80019f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80019f8:	4b84      	ldr	r3, [pc, #528]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 80019fa:	2104      	movs	r1, #4
 80019fc:	438a      	bics	r2, r1
 80019fe:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d014      	beq.n	8001a32 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a08:	f7ff fa02 	bl	8000e10 <HAL_GetTick>
 8001a0c:	0003      	movs	r3, r0
 8001a0e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a10:	e009      	b.n	8001a26 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a12:	f7ff f9fd 	bl	8000e10 <HAL_GetTick>
 8001a16:	0002      	movs	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	4a7d      	ldr	r2, [pc, #500]	@ (8001c14 <HAL_RCC_OscConfig+0x634>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e136      	b.n	8001c94 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a26:	4b79      	ldr	r3, [pc, #484]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 8001a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d0f0      	beq.n	8001a12 <HAL_RCC_OscConfig+0x432>
 8001a30:	e013      	b.n	8001a5a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a32:	f7ff f9ed 	bl	8000e10 <HAL_GetTick>
 8001a36:	0003      	movs	r3, r0
 8001a38:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a3a:	e009      	b.n	8001a50 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a3c:	f7ff f9e8 	bl	8000e10 <HAL_GetTick>
 8001a40:	0002      	movs	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	4a73      	ldr	r2, [pc, #460]	@ (8001c14 <HAL_RCC_OscConfig+0x634>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e121      	b.n	8001c94 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a50:	4b6e      	ldr	r3, [pc, #440]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 8001a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a54:	2202      	movs	r2, #2
 8001a56:	4013      	ands	r3, r2
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001a5a:	231f      	movs	r3, #31
 8001a5c:	18fb      	adds	r3, r7, r3
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d105      	bne.n	8001a70 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001a64:	4b69      	ldr	r3, [pc, #420]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 8001a66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a68:	4b68      	ldr	r3, [pc, #416]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 8001a6a:	496b      	ldr	r1, [pc, #428]	@ (8001c18 <HAL_RCC_OscConfig+0x638>)
 8001a6c:	400a      	ands	r2, r1
 8001a6e:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2220      	movs	r2, #32
 8001a76:	4013      	ands	r3, r2
 8001a78:	d039      	beq.n	8001aee <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d01b      	beq.n	8001aba <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a82:	4b62      	ldr	r3, [pc, #392]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	4b61      	ldr	r3, [pc, #388]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 8001a88:	2180      	movs	r1, #128	@ 0x80
 8001a8a:	03c9      	lsls	r1, r1, #15
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a90:	f7ff f9be 	bl	8000e10 <HAL_GetTick>
 8001a94:	0003      	movs	r3, r0
 8001a96:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a9a:	f7ff f9b9 	bl	8000e10 <HAL_GetTick>
 8001a9e:	0002      	movs	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e0f3      	b.n	8001c94 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001aac:	4b57      	ldr	r3, [pc, #348]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	2380      	movs	r3, #128	@ 0x80
 8001ab2:	041b      	lsls	r3, r3, #16
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d0f0      	beq.n	8001a9a <HAL_RCC_OscConfig+0x4ba>
 8001ab8:	e019      	b.n	8001aee <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001aba:	4b54      	ldr	r3, [pc, #336]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	4b53      	ldr	r3, [pc, #332]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 8001ac0:	4956      	ldr	r1, [pc, #344]	@ (8001c1c <HAL_RCC_OscConfig+0x63c>)
 8001ac2:	400a      	ands	r2, r1
 8001ac4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac6:	f7ff f9a3 	bl	8000e10 <HAL_GetTick>
 8001aca:	0003      	movs	r3, r0
 8001acc:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ad0:	f7ff f99e 	bl	8000e10 <HAL_GetTick>
 8001ad4:	0002      	movs	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e0d8      	b.n	8001c94 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001ae2:	4b4a      	ldr	r3, [pc, #296]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	2380      	movs	r3, #128	@ 0x80
 8001ae8:	041b      	lsls	r3, r3, #16
 8001aea:	4013      	ands	r3, r2
 8001aec:	d1f0      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d100      	bne.n	8001af8 <HAL_RCC_OscConfig+0x518>
 8001af6:	e0cc      	b.n	8001c92 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001af8:	4b44      	ldr	r3, [pc, #272]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	2238      	movs	r2, #56	@ 0x38
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b10      	cmp	r3, #16
 8001b02:	d100      	bne.n	8001b06 <HAL_RCC_OscConfig+0x526>
 8001b04:	e07b      	b.n	8001bfe <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d156      	bne.n	8001bbc <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0e:	4b3f      	ldr	r3, [pc, #252]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	4b3e      	ldr	r3, [pc, #248]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 8001b14:	4942      	ldr	r1, [pc, #264]	@ (8001c20 <HAL_RCC_OscConfig+0x640>)
 8001b16:	400a      	ands	r2, r1
 8001b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1a:	f7ff f979 	bl	8000e10 <HAL_GetTick>
 8001b1e:	0003      	movs	r3, r0
 8001b20:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b24:	f7ff f974 	bl	8000e10 <HAL_GetTick>
 8001b28:	0002      	movs	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e0ae      	b.n	8001c94 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b36:	4b35      	ldr	r3, [pc, #212]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	2380      	movs	r3, #128	@ 0x80
 8001b3c:	049b      	lsls	r3, r3, #18
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b42:	4b32      	ldr	r3, [pc, #200]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	4a37      	ldr	r2, [pc, #220]	@ (8001c24 <HAL_RCC_OscConfig+0x644>)
 8001b48:	4013      	ands	r3, r2
 8001b4a:	0019      	movs	r1, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b54:	431a      	orrs	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b5a:	021b      	lsls	r3, r3, #8
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	4b26      	ldr	r3, [pc, #152]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 8001b72:	430a      	orrs	r2, r1
 8001b74:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b76:	4b25      	ldr	r3, [pc, #148]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	4b24      	ldr	r3, [pc, #144]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 8001b7c:	2180      	movs	r1, #128	@ 0x80
 8001b7e:	0449      	lsls	r1, r1, #17
 8001b80:	430a      	orrs	r2, r1
 8001b82:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001b84:	4b21      	ldr	r3, [pc, #132]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 8001b86:	68da      	ldr	r2, [r3, #12]
 8001b88:	4b20      	ldr	r3, [pc, #128]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 8001b8a:	2180      	movs	r1, #128	@ 0x80
 8001b8c:	0549      	lsls	r1, r1, #21
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b92:	f7ff f93d 	bl	8000e10 <HAL_GetTick>
 8001b96:	0003      	movs	r3, r0
 8001b98:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9c:	f7ff f938 	bl	8000e10 <HAL_GetTick>
 8001ba0:	0002      	movs	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e072      	b.n	8001c94 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bae:	4b17      	ldr	r3, [pc, #92]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	2380      	movs	r3, #128	@ 0x80
 8001bb4:	049b      	lsls	r3, r3, #18
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d0f0      	beq.n	8001b9c <HAL_RCC_OscConfig+0x5bc>
 8001bba:	e06a      	b.n	8001c92 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bbc:	4b13      	ldr	r3, [pc, #76]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4b12      	ldr	r3, [pc, #72]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 8001bc2:	4917      	ldr	r1, [pc, #92]	@ (8001c20 <HAL_RCC_OscConfig+0x640>)
 8001bc4:	400a      	ands	r2, r1
 8001bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc8:	f7ff f922 	bl	8000e10 <HAL_GetTick>
 8001bcc:	0003      	movs	r3, r0
 8001bce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd2:	f7ff f91d 	bl	8000e10 <HAL_GetTick>
 8001bd6:	0002      	movs	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e057      	b.n	8001c94 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001be4:	4b09      	ldr	r3, [pc, #36]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	2380      	movs	r3, #128	@ 0x80
 8001bea:	049b      	lsls	r3, r3, #18
 8001bec:	4013      	ands	r3, r2
 8001bee:	d1f0      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001bf0:	4b06      	ldr	r3, [pc, #24]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 8001bf2:	68da      	ldr	r2, [r3, #12]
 8001bf4:	4b05      	ldr	r3, [pc, #20]	@ (8001c0c <HAL_RCC_OscConfig+0x62c>)
 8001bf6:	490c      	ldr	r1, [pc, #48]	@ (8001c28 <HAL_RCC_OscConfig+0x648>)
 8001bf8:	400a      	ands	r2, r1
 8001bfa:	60da      	str	r2, [r3, #12]
 8001bfc:	e049      	b.n	8001c92 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d112      	bne.n	8001c2c <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e044      	b.n	8001c94 <HAL_RCC_OscConfig+0x6b4>
 8001c0a:	46c0      	nop			@ (mov r8, r8)
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40007000 	.word	0x40007000
 8001c14:	00001388 	.word	0x00001388
 8001c18:	efffffff 	.word	0xefffffff
 8001c1c:	ffbfffff 	.word	0xffbfffff
 8001c20:	feffffff 	.word	0xfeffffff
 8001c24:	11c1808c 	.word	0x11c1808c
 8001c28:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c9c <HAL_RCC_OscConfig+0x6bc>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	2203      	movs	r2, #3
 8001c36:	401a      	ands	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d126      	bne.n	8001c8e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	2270      	movs	r2, #112	@ 0x70
 8001c44:	401a      	ands	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d11f      	bne.n	8001c8e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	23fe      	movs	r3, #254	@ 0xfe
 8001c52:	01db      	lsls	r3, r3, #7
 8001c54:	401a      	ands	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c5a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d116      	bne.n	8001c8e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	23f8      	movs	r3, #248	@ 0xf8
 8001c64:	039b      	lsls	r3, r3, #14
 8001c66:	401a      	ands	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d10e      	bne.n	8001c8e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	23e0      	movs	r3, #224	@ 0xe0
 8001c74:	051b      	lsls	r3, r3, #20
 8001c76:	401a      	ands	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d106      	bne.n	8001c8e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	0f5b      	lsrs	r3, r3, #29
 8001c84:	075a      	lsls	r2, r3, #29
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d001      	beq.n	8001c92 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e000      	b.n	8001c94 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	0018      	movs	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	b008      	add	sp, #32
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40021000 	.word	0x40021000

08001ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e0e9      	b.n	8001e88 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb4:	4b76      	ldr	r3, [pc, #472]	@ (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2207      	movs	r2, #7
 8001cba:	4013      	ands	r3, r2
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d91e      	bls.n	8001d00 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc2:	4b73      	ldr	r3, [pc, #460]	@ (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2207      	movs	r2, #7
 8001cc8:	4393      	bics	r3, r2
 8001cca:	0019      	movs	r1, r3
 8001ccc:	4b70      	ldr	r3, [pc, #448]	@ (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cd4:	f7ff f89c 	bl	8000e10 <HAL_GetTick>
 8001cd8:	0003      	movs	r3, r0
 8001cda:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cdc:	e009      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cde:	f7ff f897 	bl	8000e10 <HAL_GetTick>
 8001ce2:	0002      	movs	r2, r0
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	4a6a      	ldr	r2, [pc, #424]	@ (8001e94 <HAL_RCC_ClockConfig+0x1f4>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e0ca      	b.n	8001e88 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cf2:	4b67      	ldr	r3, [pc, #412]	@ (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2207      	movs	r2, #7
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d1ee      	bne.n	8001cde <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2202      	movs	r2, #2
 8001d06:	4013      	ands	r3, r2
 8001d08:	d015      	beq.n	8001d36 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2204      	movs	r2, #4
 8001d10:	4013      	ands	r3, r2
 8001d12:	d006      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d14:	4b60      	ldr	r3, [pc, #384]	@ (8001e98 <HAL_RCC_ClockConfig+0x1f8>)
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	4b5f      	ldr	r3, [pc, #380]	@ (8001e98 <HAL_RCC_ClockConfig+0x1f8>)
 8001d1a:	21e0      	movs	r1, #224	@ 0xe0
 8001d1c:	01c9      	lsls	r1, r1, #7
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d22:	4b5d      	ldr	r3, [pc, #372]	@ (8001e98 <HAL_RCC_ClockConfig+0x1f8>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	4a5d      	ldr	r2, [pc, #372]	@ (8001e9c <HAL_RCC_ClockConfig+0x1fc>)
 8001d28:	4013      	ands	r3, r2
 8001d2a:	0019      	movs	r1, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	4b59      	ldr	r3, [pc, #356]	@ (8001e98 <HAL_RCC_ClockConfig+0x1f8>)
 8001d32:	430a      	orrs	r2, r1
 8001d34:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d057      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d107      	bne.n	8001d58 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d48:	4b53      	ldr	r3, [pc, #332]	@ (8001e98 <HAL_RCC_ClockConfig+0x1f8>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	2380      	movs	r3, #128	@ 0x80
 8001d4e:	029b      	lsls	r3, r3, #10
 8001d50:	4013      	ands	r3, r2
 8001d52:	d12b      	bne.n	8001dac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e097      	b.n	8001e88 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d107      	bne.n	8001d70 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d60:	4b4d      	ldr	r3, [pc, #308]	@ (8001e98 <HAL_RCC_ClockConfig+0x1f8>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	2380      	movs	r3, #128	@ 0x80
 8001d66:	049b      	lsls	r3, r3, #18
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d11f      	bne.n	8001dac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e08b      	b.n	8001e88 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d107      	bne.n	8001d88 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d78:	4b47      	ldr	r3, [pc, #284]	@ (8001e98 <HAL_RCC_ClockConfig+0x1f8>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	2380      	movs	r3, #128	@ 0x80
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	4013      	ands	r3, r2
 8001d82:	d113      	bne.n	8001dac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e07f      	b.n	8001e88 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b03      	cmp	r3, #3
 8001d8e:	d106      	bne.n	8001d9e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d90:	4b41      	ldr	r3, [pc, #260]	@ (8001e98 <HAL_RCC_ClockConfig+0x1f8>)
 8001d92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d94:	2202      	movs	r2, #2
 8001d96:	4013      	ands	r3, r2
 8001d98:	d108      	bne.n	8001dac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e074      	b.n	8001e88 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d9e:	4b3e      	ldr	r3, [pc, #248]	@ (8001e98 <HAL_RCC_ClockConfig+0x1f8>)
 8001da0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001da2:	2202      	movs	r2, #2
 8001da4:	4013      	ands	r3, r2
 8001da6:	d101      	bne.n	8001dac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e06d      	b.n	8001e88 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dac:	4b3a      	ldr	r3, [pc, #232]	@ (8001e98 <HAL_RCC_ClockConfig+0x1f8>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	2207      	movs	r2, #7
 8001db2:	4393      	bics	r3, r2
 8001db4:	0019      	movs	r1, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	4b37      	ldr	r3, [pc, #220]	@ (8001e98 <HAL_RCC_ClockConfig+0x1f8>)
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dc0:	f7ff f826 	bl	8000e10 <HAL_GetTick>
 8001dc4:	0003      	movs	r3, r0
 8001dc6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc8:	e009      	b.n	8001dde <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dca:	f7ff f821 	bl	8000e10 <HAL_GetTick>
 8001dce:	0002      	movs	r2, r0
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	4a2f      	ldr	r2, [pc, #188]	@ (8001e94 <HAL_RCC_ClockConfig+0x1f4>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e054      	b.n	8001e88 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dde:	4b2e      	ldr	r3, [pc, #184]	@ (8001e98 <HAL_RCC_ClockConfig+0x1f8>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	2238      	movs	r2, #56	@ 0x38
 8001de4:	401a      	ands	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d1ec      	bne.n	8001dca <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001df0:	4b27      	ldr	r3, [pc, #156]	@ (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2207      	movs	r2, #7
 8001df6:	4013      	ands	r3, r2
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d21e      	bcs.n	8001e3c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfe:	4b24      	ldr	r3, [pc, #144]	@ (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2207      	movs	r2, #7
 8001e04:	4393      	bics	r3, r2
 8001e06:	0019      	movs	r1, r3
 8001e08:	4b21      	ldr	r3, [pc, #132]	@ (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e10:	f7fe fffe 	bl	8000e10 <HAL_GetTick>
 8001e14:	0003      	movs	r3, r0
 8001e16:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e18:	e009      	b.n	8001e2e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e1a:	f7fe fff9 	bl	8000e10 <HAL_GetTick>
 8001e1e:	0002      	movs	r2, r0
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	4a1b      	ldr	r2, [pc, #108]	@ (8001e94 <HAL_RCC_ClockConfig+0x1f4>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e02c      	b.n	8001e88 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e2e:	4b18      	ldr	r3, [pc, #96]	@ (8001e90 <HAL_RCC_ClockConfig+0x1f0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2207      	movs	r2, #7
 8001e34:	4013      	ands	r3, r2
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d1ee      	bne.n	8001e1a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2204      	movs	r2, #4
 8001e42:	4013      	ands	r3, r2
 8001e44:	d009      	beq.n	8001e5a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e46:	4b14      	ldr	r3, [pc, #80]	@ (8001e98 <HAL_RCC_ClockConfig+0x1f8>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	4a15      	ldr	r2, [pc, #84]	@ (8001ea0 <HAL_RCC_ClockConfig+0x200>)
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	0019      	movs	r1, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68da      	ldr	r2, [r3, #12]
 8001e54:	4b10      	ldr	r3, [pc, #64]	@ (8001e98 <HAL_RCC_ClockConfig+0x1f8>)
 8001e56:	430a      	orrs	r2, r1
 8001e58:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001e5a:	f000 f829 	bl	8001eb0 <HAL_RCC_GetSysClockFreq>
 8001e5e:	0001      	movs	r1, r0
 8001e60:	4b0d      	ldr	r3, [pc, #52]	@ (8001e98 <HAL_RCC_ClockConfig+0x1f8>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	0a1b      	lsrs	r3, r3, #8
 8001e66:	220f      	movs	r2, #15
 8001e68:	401a      	ands	r2, r3
 8001e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea4 <HAL_RCC_ClockConfig+0x204>)
 8001e6c:	0092      	lsls	r2, r2, #2
 8001e6e:	58d3      	ldr	r3, [r2, r3]
 8001e70:	221f      	movs	r2, #31
 8001e72:	4013      	ands	r3, r2
 8001e74:	000a      	movs	r2, r1
 8001e76:	40da      	lsrs	r2, r3
 8001e78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea8 <HAL_RCC_ClockConfig+0x208>)
 8001e7a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001eac <HAL_RCC_ClockConfig+0x20c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	0018      	movs	r0, r3
 8001e82:	f7fe ff69 	bl	8000d58 <HAL_InitTick>
 8001e86:	0003      	movs	r3, r0
}
 8001e88:	0018      	movs	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	b004      	add	sp, #16
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40022000 	.word	0x40022000
 8001e94:	00001388 	.word	0x00001388
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	fffff0ff 	.word	0xfffff0ff
 8001ea0:	ffff8fff 	.word	0xffff8fff
 8001ea4:	08003440 	.word	0x08003440
 8001ea8:	20000000 	.word	0x20000000
 8001eac:	20000004 	.word	0x20000004

08001eb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eb6:	4b3c      	ldr	r3, [pc, #240]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2238      	movs	r2, #56	@ 0x38
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d10f      	bne.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001ec0:	4b39      	ldr	r3, [pc, #228]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	0adb      	lsrs	r3, r3, #11
 8001ec6:	2207      	movs	r2, #7
 8001ec8:	4013      	ands	r3, r2
 8001eca:	2201      	movs	r2, #1
 8001ecc:	409a      	lsls	r2, r3
 8001ece:	0013      	movs	r3, r2
 8001ed0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001ed2:	6839      	ldr	r1, [r7, #0]
 8001ed4:	4835      	ldr	r0, [pc, #212]	@ (8001fac <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ed6:	f7fe f915 	bl	8000104 <__udivsi3>
 8001eda:	0003      	movs	r3, r0
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	e05d      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ee0:	4b31      	ldr	r3, [pc, #196]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	2238      	movs	r2, #56	@ 0x38
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	2b08      	cmp	r3, #8
 8001eea:	d102      	bne.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001eec:	4b30      	ldr	r3, [pc, #192]	@ (8001fb0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001eee:	613b      	str	r3, [r7, #16]
 8001ef0:	e054      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ef2:	4b2d      	ldr	r3, [pc, #180]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	2238      	movs	r2, #56	@ 0x38
 8001ef8:	4013      	ands	r3, r2
 8001efa:	2b10      	cmp	r3, #16
 8001efc:	d138      	bne.n	8001f70 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001efe:	4b2a      	ldr	r3, [pc, #168]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	2203      	movs	r2, #3
 8001f04:	4013      	ands	r3, r2
 8001f06:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f08:	4b27      	ldr	r3, [pc, #156]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	091b      	lsrs	r3, r3, #4
 8001f0e:	2207      	movs	r2, #7
 8001f10:	4013      	ands	r3, r2
 8001f12:	3301      	adds	r3, #1
 8001f14:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2b03      	cmp	r3, #3
 8001f1a:	d10d      	bne.n	8001f38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f1c:	68b9      	ldr	r1, [r7, #8]
 8001f1e:	4824      	ldr	r0, [pc, #144]	@ (8001fb0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f20:	f7fe f8f0 	bl	8000104 <__udivsi3>
 8001f24:	0003      	movs	r3, r0
 8001f26:	0019      	movs	r1, r3
 8001f28:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	0a1b      	lsrs	r3, r3, #8
 8001f2e:	227f      	movs	r2, #127	@ 0x7f
 8001f30:	4013      	ands	r3, r2
 8001f32:	434b      	muls	r3, r1
 8001f34:	617b      	str	r3, [r7, #20]
        break;
 8001f36:	e00d      	b.n	8001f54 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001f38:	68b9      	ldr	r1, [r7, #8]
 8001f3a:	481c      	ldr	r0, [pc, #112]	@ (8001fac <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f3c:	f7fe f8e2 	bl	8000104 <__udivsi3>
 8001f40:	0003      	movs	r3, r0
 8001f42:	0019      	movs	r1, r3
 8001f44:	4b18      	ldr	r3, [pc, #96]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	227f      	movs	r2, #127	@ 0x7f
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	434b      	muls	r3, r1
 8001f50:	617b      	str	r3, [r7, #20]
        break;
 8001f52:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001f54:	4b14      	ldr	r3, [pc, #80]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	0f5b      	lsrs	r3, r3, #29
 8001f5a:	2207      	movs	r2, #7
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	3301      	adds	r3, #1
 8001f60:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	6978      	ldr	r0, [r7, #20]
 8001f66:	f7fe f8cd 	bl	8000104 <__udivsi3>
 8001f6a:	0003      	movs	r3, r0
 8001f6c:	613b      	str	r3, [r7, #16]
 8001f6e:	e015      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001f70:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	2238      	movs	r2, #56	@ 0x38
 8001f76:	4013      	ands	r3, r2
 8001f78:	2b20      	cmp	r3, #32
 8001f7a:	d103      	bne.n	8001f84 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001f7c:	2380      	movs	r3, #128	@ 0x80
 8001f7e:	021b      	lsls	r3, r3, #8
 8001f80:	613b      	str	r3, [r7, #16]
 8001f82:	e00b      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f84:	4b08      	ldr	r3, [pc, #32]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2238      	movs	r2, #56	@ 0x38
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	2b18      	cmp	r3, #24
 8001f8e:	d103      	bne.n	8001f98 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001f90:	23fa      	movs	r3, #250	@ 0xfa
 8001f92:	01db      	lsls	r3, r3, #7
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	e001      	b.n	8001f9c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f9c:	693b      	ldr	r3, [r7, #16]
}
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	b006      	add	sp, #24
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	46c0      	nop			@ (mov r8, r8)
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	00f42400 	.word	0x00f42400
 8001fb0:	007a1200 	.word	0x007a1200

08001fb4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fb8:	4b02      	ldr	r3, [pc, #8]	@ (8001fc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fba:	681b      	ldr	r3, [r3, #0]
}
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	46c0      	nop			@ (mov r8, r8)
 8001fc4:	20000000 	.word	0x20000000

08001fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fc8:	b5b0      	push	{r4, r5, r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001fcc:	f7ff fff2 	bl	8001fb4 <HAL_RCC_GetHCLKFreq>
 8001fd0:	0004      	movs	r4, r0
 8001fd2:	f7ff faf9 	bl	80015c8 <LL_RCC_GetAPB1Prescaler>
 8001fd6:	0003      	movs	r3, r0
 8001fd8:	0b1a      	lsrs	r2, r3, #12
 8001fda:	4b05      	ldr	r3, [pc, #20]	@ (8001ff0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fdc:	0092      	lsls	r2, r2, #2
 8001fde:	58d3      	ldr	r3, [r2, r3]
 8001fe0:	221f      	movs	r2, #31
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	40dc      	lsrs	r4, r3
 8001fe6:	0023      	movs	r3, r4
}
 8001fe8:	0018      	movs	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bdb0      	pop	{r4, r5, r7, pc}
 8001fee:	46c0      	nop			@ (mov r8, r8)
 8001ff0:	08003480 	.word	0x08003480

08001ff4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001ffc:	2313      	movs	r3, #19
 8001ffe:	18fb      	adds	r3, r7, r3
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002004:	2312      	movs	r3, #18
 8002006:	18fb      	adds	r3, r7, r3
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	2380      	movs	r3, #128	@ 0x80
 8002012:	029b      	lsls	r3, r3, #10
 8002014:	4013      	ands	r3, r2
 8002016:	d100      	bne.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002018:	e0ad      	b.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800201a:	2011      	movs	r0, #17
 800201c:	183b      	adds	r3, r7, r0
 800201e:	2200      	movs	r2, #0
 8002020:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002022:	4b47      	ldr	r3, [pc, #284]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002024:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002026:	2380      	movs	r3, #128	@ 0x80
 8002028:	055b      	lsls	r3, r3, #21
 800202a:	4013      	ands	r3, r2
 800202c:	d110      	bne.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800202e:	4b44      	ldr	r3, [pc, #272]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002030:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002032:	4b43      	ldr	r3, [pc, #268]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002034:	2180      	movs	r1, #128	@ 0x80
 8002036:	0549      	lsls	r1, r1, #21
 8002038:	430a      	orrs	r2, r1
 800203a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800203c:	4b40      	ldr	r3, [pc, #256]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800203e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002040:	2380      	movs	r3, #128	@ 0x80
 8002042:	055b      	lsls	r3, r3, #21
 8002044:	4013      	ands	r3, r2
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800204a:	183b      	adds	r3, r7, r0
 800204c:	2201      	movs	r2, #1
 800204e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002050:	4b3c      	ldr	r3, [pc, #240]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	4b3b      	ldr	r3, [pc, #236]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002056:	2180      	movs	r1, #128	@ 0x80
 8002058:	0049      	lsls	r1, r1, #1
 800205a:	430a      	orrs	r2, r1
 800205c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800205e:	f7fe fed7 	bl	8000e10 <HAL_GetTick>
 8002062:	0003      	movs	r3, r0
 8002064:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002066:	e00b      	b.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002068:	f7fe fed2 	bl	8000e10 <HAL_GetTick>
 800206c:	0002      	movs	r2, r0
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d904      	bls.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002076:	2313      	movs	r3, #19
 8002078:	18fb      	adds	r3, r7, r3
 800207a:	2203      	movs	r2, #3
 800207c:	701a      	strb	r2, [r3, #0]
        break;
 800207e:	e005      	b.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002080:	4b30      	ldr	r3, [pc, #192]	@ (8002144 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	2380      	movs	r3, #128	@ 0x80
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	4013      	ands	r3, r2
 800208a:	d0ed      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800208c:	2313      	movs	r3, #19
 800208e:	18fb      	adds	r3, r7, r3
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d15e      	bne.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002096:	4b2a      	ldr	r3, [pc, #168]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002098:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800209a:	23c0      	movs	r3, #192	@ 0xc0
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4013      	ands	r3, r2
 80020a0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d019      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ac:	697a      	ldr	r2, [r7, #20]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d014      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020b2:	4b23      	ldr	r3, [pc, #140]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80020b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b6:	4a24      	ldr	r2, [pc, #144]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020bc:	4b20      	ldr	r3, [pc, #128]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80020be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80020c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80020c2:	2180      	movs	r1, #128	@ 0x80
 80020c4:	0249      	lsls	r1, r1, #9
 80020c6:	430a      	orrs	r2, r1
 80020c8:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80020cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80020ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80020d0:	491e      	ldr	r1, [pc, #120]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80020d2:	400a      	ands	r2, r1
 80020d4:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	2201      	movs	r2, #1
 80020e0:	4013      	ands	r3, r2
 80020e2:	d016      	beq.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e4:	f7fe fe94 	bl	8000e10 <HAL_GetTick>
 80020e8:	0003      	movs	r3, r0
 80020ea:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ec:	e00c      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ee:	f7fe fe8f 	bl	8000e10 <HAL_GetTick>
 80020f2:	0002      	movs	r2, r0
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	4a15      	ldr	r2, [pc, #84]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d904      	bls.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80020fe:	2313      	movs	r3, #19
 8002100:	18fb      	adds	r3, r7, r3
 8002102:	2203      	movs	r2, #3
 8002104:	701a      	strb	r2, [r3, #0]
            break;
 8002106:	e004      	b.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002108:	4b0d      	ldr	r3, [pc, #52]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800210a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800210c:	2202      	movs	r2, #2
 800210e:	4013      	ands	r3, r2
 8002110:	d0ed      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002112:	2313      	movs	r3, #19
 8002114:	18fb      	adds	r3, r7, r3
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10a      	bne.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800211c:	4b08      	ldr	r3, [pc, #32]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800211e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002120:	4a09      	ldr	r2, [pc, #36]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002122:	4013      	ands	r3, r2
 8002124:	0019      	movs	r1, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800212a:	4b05      	ldr	r3, [pc, #20]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800212c:	430a      	orrs	r2, r1
 800212e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002130:	e016      	b.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002132:	2312      	movs	r3, #18
 8002134:	18fb      	adds	r3, r7, r3
 8002136:	2213      	movs	r2, #19
 8002138:	18ba      	adds	r2, r7, r2
 800213a:	7812      	ldrb	r2, [r2, #0]
 800213c:	701a      	strb	r2, [r3, #0]
 800213e:	e00f      	b.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002140:	40021000 	.word	0x40021000
 8002144:	40007000 	.word	0x40007000
 8002148:	fffffcff 	.word	0xfffffcff
 800214c:	fffeffff 	.word	0xfffeffff
 8002150:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002154:	2312      	movs	r3, #18
 8002156:	18fb      	adds	r3, r7, r3
 8002158:	2213      	movs	r2, #19
 800215a:	18ba      	adds	r2, r7, r2
 800215c:	7812      	ldrb	r2, [r2, #0]
 800215e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002160:	2311      	movs	r3, #17
 8002162:	18fb      	adds	r3, r7, r3
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d105      	bne.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800216a:	4bb6      	ldr	r3, [pc, #728]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800216c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800216e:	4bb5      	ldr	r3, [pc, #724]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002170:	49b5      	ldr	r1, [pc, #724]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002172:	400a      	ands	r2, r1
 8002174:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2201      	movs	r2, #1
 800217c:	4013      	ands	r3, r2
 800217e:	d009      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002180:	4bb0      	ldr	r3, [pc, #704]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002184:	2203      	movs	r2, #3
 8002186:	4393      	bics	r3, r2
 8002188:	0019      	movs	r1, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	4bad      	ldr	r3, [pc, #692]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002190:	430a      	orrs	r2, r1
 8002192:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2202      	movs	r2, #2
 800219a:	4013      	ands	r3, r2
 800219c:	d009      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800219e:	4ba9      	ldr	r3, [pc, #676]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021a2:	220c      	movs	r2, #12
 80021a4:	4393      	bics	r3, r2
 80021a6:	0019      	movs	r1, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	4ba5      	ldr	r3, [pc, #660]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021ae:	430a      	orrs	r2, r1
 80021b0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2204      	movs	r2, #4
 80021b8:	4013      	ands	r3, r2
 80021ba:	d009      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021bc:	4ba1      	ldr	r3, [pc, #644]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c0:	2230      	movs	r2, #48	@ 0x30
 80021c2:	4393      	bics	r3, r2
 80021c4:	0019      	movs	r1, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	4b9e      	ldr	r3, [pc, #632]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021cc:	430a      	orrs	r2, r1
 80021ce:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2210      	movs	r2, #16
 80021d6:	4013      	ands	r3, r2
 80021d8:	d009      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021da:	4b9a      	ldr	r3, [pc, #616]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021de:	4a9b      	ldr	r2, [pc, #620]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80021e0:	4013      	ands	r3, r2
 80021e2:	0019      	movs	r1, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691a      	ldr	r2, [r3, #16]
 80021e8:	4b96      	ldr	r3, [pc, #600]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021ea:	430a      	orrs	r2, r1
 80021ec:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	2380      	movs	r3, #128	@ 0x80
 80021f4:	015b      	lsls	r3, r3, #5
 80021f6:	4013      	ands	r3, r2
 80021f8:	d009      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80021fa:	4b92      	ldr	r3, [pc, #584]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80021fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021fe:	4a94      	ldr	r2, [pc, #592]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002200:	4013      	ands	r3, r2
 8002202:	0019      	movs	r1, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	695a      	ldr	r2, [r3, #20]
 8002208:	4b8e      	ldr	r3, [pc, #568]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800220a:	430a      	orrs	r2, r1
 800220c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	2380      	movs	r3, #128	@ 0x80
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4013      	ands	r3, r2
 8002218:	d009      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800221a:	4b8a      	ldr	r3, [pc, #552]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800221c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800221e:	4a8d      	ldr	r2, [pc, #564]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002220:	4013      	ands	r3, r2
 8002222:	0019      	movs	r1, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002228:	4b86      	ldr	r3, [pc, #536]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800222a:	430a      	orrs	r2, r1
 800222c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	2380      	movs	r3, #128	@ 0x80
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	4013      	ands	r3, r2
 8002238:	d009      	beq.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800223a:	4b82      	ldr	r3, [pc, #520]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800223c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800223e:	4a86      	ldr	r2, [pc, #536]	@ (8002458 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002240:	4013      	ands	r3, r2
 8002242:	0019      	movs	r1, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002248:	4b7e      	ldr	r3, [pc, #504]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800224a:	430a      	orrs	r2, r1
 800224c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2220      	movs	r2, #32
 8002254:	4013      	ands	r3, r2
 8002256:	d009      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002258:	4b7a      	ldr	r3, [pc, #488]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800225a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800225c:	4a7f      	ldr	r2, [pc, #508]	@ (800245c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800225e:	4013      	ands	r3, r2
 8002260:	0019      	movs	r1, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	699a      	ldr	r2, [r3, #24]
 8002266:	4b77      	ldr	r3, [pc, #476]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002268:	430a      	orrs	r2, r1
 800226a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2240      	movs	r2, #64	@ 0x40
 8002272:	4013      	ands	r3, r2
 8002274:	d009      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002276:	4b73      	ldr	r3, [pc, #460]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800227a:	4a79      	ldr	r2, [pc, #484]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800227c:	4013      	ands	r3, r2
 800227e:	0019      	movs	r1, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	69da      	ldr	r2, [r3, #28]
 8002284:	4b6f      	ldr	r3, [pc, #444]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002286:	430a      	orrs	r2, r1
 8002288:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	2380      	movs	r3, #128	@ 0x80
 8002290:	01db      	lsls	r3, r3, #7
 8002292:	4013      	ands	r3, r2
 8002294:	d015      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002296:	4b6b      	ldr	r3, [pc, #428]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	0899      	lsrs	r1, r3, #2
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022a2:	4b68      	ldr	r3, [pc, #416]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022a4:	430a      	orrs	r2, r1
 80022a6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022ac:	2380      	movs	r3, #128	@ 0x80
 80022ae:	05db      	lsls	r3, r3, #23
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d106      	bne.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80022b4:	4b63      	ldr	r3, [pc, #396]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022b6:	68da      	ldr	r2, [r3, #12]
 80022b8:	4b62      	ldr	r3, [pc, #392]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022ba:	2180      	movs	r1, #128	@ 0x80
 80022bc:	0249      	lsls	r1, r1, #9
 80022be:	430a      	orrs	r2, r1
 80022c0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	2380      	movs	r3, #128	@ 0x80
 80022c8:	031b      	lsls	r3, r3, #12
 80022ca:	4013      	ands	r3, r2
 80022cc:	d009      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80022ce:	4b5d      	ldr	r3, [pc, #372]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022d2:	2240      	movs	r2, #64	@ 0x40
 80022d4:	4393      	bics	r3, r2
 80022d6:	0019      	movs	r1, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022dc:	4b59      	ldr	r3, [pc, #356]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022de:	430a      	orrs	r2, r1
 80022e0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	2380      	movs	r3, #128	@ 0x80
 80022e8:	039b      	lsls	r3, r3, #14
 80022ea:	4013      	ands	r3, r2
 80022ec:	d016      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80022ee:	4b55      	ldr	r3, [pc, #340]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f2:	4a5c      	ldr	r2, [pc, #368]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80022f4:	4013      	ands	r3, r2
 80022f6:	0019      	movs	r1, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022fc:	4b51      	ldr	r3, [pc, #324]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80022fe:	430a      	orrs	r2, r1
 8002300:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002306:	2380      	movs	r3, #128	@ 0x80
 8002308:	03db      	lsls	r3, r3, #15
 800230a:	429a      	cmp	r2, r3
 800230c:	d106      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800230e:	4b4d      	ldr	r3, [pc, #308]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002310:	68da      	ldr	r2, [r3, #12]
 8002312:	4b4c      	ldr	r3, [pc, #304]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002314:	2180      	movs	r1, #128	@ 0x80
 8002316:	0449      	lsls	r1, r1, #17
 8002318:	430a      	orrs	r2, r1
 800231a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	2380      	movs	r3, #128	@ 0x80
 8002322:	03db      	lsls	r3, r3, #15
 8002324:	4013      	ands	r3, r2
 8002326:	d016      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002328:	4b46      	ldr	r3, [pc, #280]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800232a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800232c:	4a4e      	ldr	r2, [pc, #312]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800232e:	4013      	ands	r3, r2
 8002330:	0019      	movs	r1, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002336:	4b43      	ldr	r3, [pc, #268]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002338:	430a      	orrs	r2, r1
 800233a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002340:	2380      	movs	r3, #128	@ 0x80
 8002342:	045b      	lsls	r3, r3, #17
 8002344:	429a      	cmp	r2, r3
 8002346:	d106      	bne.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002348:	4b3e      	ldr	r3, [pc, #248]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800234a:	68da      	ldr	r2, [r3, #12]
 800234c:	4b3d      	ldr	r3, [pc, #244]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800234e:	2180      	movs	r1, #128	@ 0x80
 8002350:	0449      	lsls	r1, r1, #17
 8002352:	430a      	orrs	r2, r1
 8002354:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	2380      	movs	r3, #128	@ 0x80
 800235c:	011b      	lsls	r3, r3, #4
 800235e:	4013      	ands	r3, r2
 8002360:	d014      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002362:	4b38      	ldr	r3, [pc, #224]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002366:	2203      	movs	r2, #3
 8002368:	4393      	bics	r3, r2
 800236a:	0019      	movs	r1, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a1a      	ldr	r2, [r3, #32]
 8002370:	4b34      	ldr	r3, [pc, #208]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002372:	430a      	orrs	r2, r1
 8002374:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d106      	bne.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800237e:	4b31      	ldr	r3, [pc, #196]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	4b30      	ldr	r3, [pc, #192]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002384:	2180      	movs	r1, #128	@ 0x80
 8002386:	0249      	lsls	r1, r1, #9
 8002388:	430a      	orrs	r2, r1
 800238a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	2380      	movs	r3, #128	@ 0x80
 8002392:	019b      	lsls	r3, r3, #6
 8002394:	4013      	ands	r3, r2
 8002396:	d014      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002398:	4b2a      	ldr	r3, [pc, #168]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800239a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800239c:	220c      	movs	r2, #12
 800239e:	4393      	bics	r3, r2
 80023a0:	0019      	movs	r1, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023a6:	4b27      	ldr	r3, [pc, #156]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023a8:	430a      	orrs	r2, r1
 80023aa:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d106      	bne.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80023b4:	4b23      	ldr	r3, [pc, #140]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	4b22      	ldr	r3, [pc, #136]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023ba:	2180      	movs	r1, #128	@ 0x80
 80023bc:	0249      	lsls	r1, r1, #9
 80023be:	430a      	orrs	r2, r1
 80023c0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	2380      	movs	r3, #128	@ 0x80
 80023c8:	045b      	lsls	r3, r3, #17
 80023ca:	4013      	ands	r3, r2
 80023cc:	d016      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d2:	4a22      	ldr	r2, [pc, #136]	@ (800245c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	0019      	movs	r1, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80023dc:	4b19      	ldr	r3, [pc, #100]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023de:	430a      	orrs	r2, r1
 80023e0:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80023e6:	2380      	movs	r3, #128	@ 0x80
 80023e8:	019b      	lsls	r3, r3, #6
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d106      	bne.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80023ee:	4b15      	ldr	r3, [pc, #84]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	4b14      	ldr	r3, [pc, #80]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80023f4:	2180      	movs	r1, #128	@ 0x80
 80023f6:	0449      	lsls	r1, r1, #17
 80023f8:	430a      	orrs	r2, r1
 80023fa:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	2380      	movs	r3, #128	@ 0x80
 8002402:	049b      	lsls	r3, r3, #18
 8002404:	4013      	ands	r3, r2
 8002406:	d016      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002408:	4b0e      	ldr	r3, [pc, #56]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800240a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800240c:	4a10      	ldr	r2, [pc, #64]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800240e:	4013      	ands	r3, r2
 8002410:	0019      	movs	r1, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002416:	4b0b      	ldr	r3, [pc, #44]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002418:	430a      	orrs	r2, r1
 800241a:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002420:	2380      	movs	r3, #128	@ 0x80
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	429a      	cmp	r2, r3
 8002426:	d106      	bne.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002428:	4b06      	ldr	r3, [pc, #24]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800242a:	68da      	ldr	r2, [r3, #12]
 800242c:	4b05      	ldr	r3, [pc, #20]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800242e:	2180      	movs	r1, #128	@ 0x80
 8002430:	0449      	lsls	r1, r1, #17
 8002432:	430a      	orrs	r2, r1
 8002434:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002436:	2312      	movs	r3, #18
 8002438:	18fb      	adds	r3, r7, r3
 800243a:	781b      	ldrb	r3, [r3, #0]
}
 800243c:	0018      	movs	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	b006      	add	sp, #24
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40021000 	.word	0x40021000
 8002448:	efffffff 	.word	0xefffffff
 800244c:	fffff3ff 	.word	0xfffff3ff
 8002450:	fffffcff 	.word	0xfffffcff
 8002454:	fff3ffff 	.word	0xfff3ffff
 8002458:	ffcfffff 	.word	0xffcfffff
 800245c:	ffffcfff 	.word	0xffffcfff
 8002460:	ffff3fff 	.word	0xffff3fff
 8002464:	ffbfffff 	.word	0xffbfffff
 8002468:	feffffff 	.word	0xfeffffff

0800246c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e0a8      	b.n	80025d0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002482:	2b00      	cmp	r3, #0
 8002484:	d109      	bne.n	800249a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	2382      	movs	r3, #130	@ 0x82
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	429a      	cmp	r2, r3
 8002490:	d009      	beq.n	80024a6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	61da      	str	r2, [r3, #28]
 8002498:	e005      	b.n	80024a6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	225d      	movs	r2, #93	@ 0x5d
 80024b0:	5c9b      	ldrb	r3, [r3, r2]
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d107      	bne.n	80024c8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	225c      	movs	r2, #92	@ 0x5c
 80024bc:	2100      	movs	r1, #0
 80024be:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	0018      	movs	r0, r3
 80024c4:	f7fe fac0 	bl	8000a48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	225d      	movs	r2, #93	@ 0x5d
 80024cc:	2102      	movs	r1, #2
 80024ce:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2140      	movs	r1, #64	@ 0x40
 80024dc:	438a      	bics	r2, r1
 80024de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68da      	ldr	r2, [r3, #12]
 80024e4:	23e0      	movs	r3, #224	@ 0xe0
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d902      	bls.n	80024f2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80024ec:	2300      	movs	r3, #0
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	e002      	b.n	80024f8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80024f2:	2380      	movs	r3, #128	@ 0x80
 80024f4:	015b      	lsls	r3, r3, #5
 80024f6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68da      	ldr	r2, [r3, #12]
 80024fc:	23f0      	movs	r3, #240	@ 0xf0
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	429a      	cmp	r2, r3
 8002502:	d008      	beq.n	8002516 <HAL_SPI_Init+0xaa>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	23e0      	movs	r3, #224	@ 0xe0
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	429a      	cmp	r2, r3
 800250e:	d002      	beq.n	8002516 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	2382      	movs	r3, #130	@ 0x82
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	401a      	ands	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6899      	ldr	r1, [r3, #8]
 8002524:	2384      	movs	r3, #132	@ 0x84
 8002526:	021b      	lsls	r3, r3, #8
 8002528:	400b      	ands	r3, r1
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	2102      	movs	r1, #2
 8002532:	400b      	ands	r3, r1
 8002534:	431a      	orrs	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	2101      	movs	r1, #1
 800253c:	400b      	ands	r3, r1
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6999      	ldr	r1, [r3, #24]
 8002544:	2380      	movs	r3, #128	@ 0x80
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	400b      	ands	r3, r1
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	2138      	movs	r1, #56	@ 0x38
 8002552:	400b      	ands	r3, r1
 8002554:	431a      	orrs	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	2180      	movs	r1, #128	@ 0x80
 800255c:	400b      	ands	r3, r1
 800255e:	431a      	orrs	r2, r3
 8002560:	0011      	movs	r1, r2
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002566:	2380      	movs	r3, #128	@ 0x80
 8002568:	019b      	lsls	r3, r3, #6
 800256a:	401a      	ands	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	0c1b      	lsrs	r3, r3, #16
 800257a:	2204      	movs	r2, #4
 800257c:	401a      	ands	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002582:	2110      	movs	r1, #16
 8002584:	400b      	ands	r3, r1
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800258c:	2108      	movs	r1, #8
 800258e:	400b      	ands	r3, r1
 8002590:	431a      	orrs	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68d9      	ldr	r1, [r3, #12]
 8002596:	23f0      	movs	r3, #240	@ 0xf0
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	400b      	ands	r3, r1
 800259c:	431a      	orrs	r2, r3
 800259e:	0011      	movs	r1, r2
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	2380      	movs	r3, #128	@ 0x80
 80025a4:	015b      	lsls	r3, r3, #5
 80025a6:	401a      	ands	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	69da      	ldr	r2, [r3, #28]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4907      	ldr	r1, [pc, #28]	@ (80025d8 <HAL_SPI_Init+0x16c>)
 80025bc:	400a      	ands	r2, r1
 80025be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	225d      	movs	r2, #93	@ 0x5d
 80025ca:	2101      	movs	r1, #1
 80025cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	0018      	movs	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	b004      	add	sp, #16
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	fffff7ff 	.word	0xfffff7ff

080025dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e046      	b.n	800267c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2288      	movs	r2, #136	@ 0x88
 80025f2:	589b      	ldr	r3, [r3, r2]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d107      	bne.n	8002608 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2284      	movs	r2, #132	@ 0x84
 80025fc:	2100      	movs	r1, #0
 80025fe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	0018      	movs	r0, r3
 8002604:	f7fe fafe 	bl	8000c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2288      	movs	r2, #136	@ 0x88
 800260c:	2124      	movs	r1, #36	@ 0x24
 800260e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2101      	movs	r1, #1
 800261c:	438a      	bics	r2, r1
 800261e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002624:	2b00      	cmp	r3, #0
 8002626:	d003      	beq.n	8002630 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	0018      	movs	r0, r3
 800262c:	f000 fb82 	bl	8002d34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	0018      	movs	r0, r3
 8002634:	f000 f828 	bl	8002688 <UART_SetConfig>
 8002638:	0003      	movs	r3, r0
 800263a:	2b01      	cmp	r3, #1
 800263c:	d101      	bne.n	8002642 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e01c      	b.n	800267c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	490d      	ldr	r1, [pc, #52]	@ (8002684 <HAL_UART_Init+0xa8>)
 800264e:	400a      	ands	r2, r1
 8002650:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	212a      	movs	r1, #42	@ 0x2a
 800265e:	438a      	bics	r2, r1
 8002660:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2101      	movs	r1, #1
 800266e:	430a      	orrs	r2, r1
 8002670:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	0018      	movs	r0, r3
 8002676:	f000 fc11 	bl	8002e9c <UART_CheckIdleState>
 800267a:	0003      	movs	r3, r0
}
 800267c:	0018      	movs	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	b002      	add	sp, #8
 8002682:	bd80      	pop	{r7, pc}
 8002684:	ffffb7ff 	.word	0xffffb7ff

08002688 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002688:	b5b0      	push	{r4, r5, r7, lr}
 800268a:	b090      	sub	sp, #64	@ 0x40
 800268c:	af00      	add	r7, sp, #0
 800268e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002690:	231a      	movs	r3, #26
 8002692:	2220      	movs	r2, #32
 8002694:	189b      	adds	r3, r3, r2
 8002696:	19db      	adds	r3, r3, r7
 8002698:	2200      	movs	r2, #0
 800269a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800269c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	431a      	orrs	r2, r3
 80026a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	431a      	orrs	r2, r3
 80026ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4ac1      	ldr	r2, [pc, #772]	@ (80029c0 <UART_SetConfig+0x338>)
 80026bc:	4013      	ands	r3, r2
 80026be:	0019      	movs	r1, r3
 80026c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026c6:	430b      	orrs	r3, r1
 80026c8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	4abc      	ldr	r2, [pc, #752]	@ (80029c4 <UART_SetConfig+0x33c>)
 80026d2:	4013      	ands	r3, r2
 80026d4:	0018      	movs	r0, r3
 80026d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d8:	68d9      	ldr	r1, [r3, #12]
 80026da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	0003      	movs	r3, r0
 80026e0:	430b      	orrs	r3, r1
 80026e2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80026ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4ab6      	ldr	r2, [pc, #728]	@ (80029c8 <UART_SetConfig+0x340>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d009      	beq.n	8002708 <UART_SetConfig+0x80>
 80026f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4ab4      	ldr	r2, [pc, #720]	@ (80029cc <UART_SetConfig+0x344>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d004      	beq.n	8002708 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80026fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002704:	4313      	orrs	r3, r2
 8002706:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	4ab0      	ldr	r2, [pc, #704]	@ (80029d0 <UART_SetConfig+0x348>)
 8002710:	4013      	ands	r3, r2
 8002712:	0019      	movs	r1, r3
 8002714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800271a:	430b      	orrs	r3, r1
 800271c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800271e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002724:	220f      	movs	r2, #15
 8002726:	4393      	bics	r3, r2
 8002728:	0018      	movs	r0, r3
 800272a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800272e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	0003      	movs	r3, r0
 8002734:	430b      	orrs	r3, r1
 8002736:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4aa5      	ldr	r2, [pc, #660]	@ (80029d4 <UART_SetConfig+0x34c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d131      	bne.n	80027a6 <UART_SetConfig+0x11e>
 8002742:	4ba5      	ldr	r3, [pc, #660]	@ (80029d8 <UART_SetConfig+0x350>)
 8002744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002746:	2203      	movs	r2, #3
 8002748:	4013      	ands	r3, r2
 800274a:	2b03      	cmp	r3, #3
 800274c:	d01d      	beq.n	800278a <UART_SetConfig+0x102>
 800274e:	d823      	bhi.n	8002798 <UART_SetConfig+0x110>
 8002750:	2b02      	cmp	r3, #2
 8002752:	d00c      	beq.n	800276e <UART_SetConfig+0xe6>
 8002754:	d820      	bhi.n	8002798 <UART_SetConfig+0x110>
 8002756:	2b00      	cmp	r3, #0
 8002758:	d002      	beq.n	8002760 <UART_SetConfig+0xd8>
 800275a:	2b01      	cmp	r3, #1
 800275c:	d00e      	beq.n	800277c <UART_SetConfig+0xf4>
 800275e:	e01b      	b.n	8002798 <UART_SetConfig+0x110>
 8002760:	231b      	movs	r3, #27
 8002762:	2220      	movs	r2, #32
 8002764:	189b      	adds	r3, r3, r2
 8002766:	19db      	adds	r3, r3, r7
 8002768:	2200      	movs	r2, #0
 800276a:	701a      	strb	r2, [r3, #0]
 800276c:	e154      	b.n	8002a18 <UART_SetConfig+0x390>
 800276e:	231b      	movs	r3, #27
 8002770:	2220      	movs	r2, #32
 8002772:	189b      	adds	r3, r3, r2
 8002774:	19db      	adds	r3, r3, r7
 8002776:	2202      	movs	r2, #2
 8002778:	701a      	strb	r2, [r3, #0]
 800277a:	e14d      	b.n	8002a18 <UART_SetConfig+0x390>
 800277c:	231b      	movs	r3, #27
 800277e:	2220      	movs	r2, #32
 8002780:	189b      	adds	r3, r3, r2
 8002782:	19db      	adds	r3, r3, r7
 8002784:	2204      	movs	r2, #4
 8002786:	701a      	strb	r2, [r3, #0]
 8002788:	e146      	b.n	8002a18 <UART_SetConfig+0x390>
 800278a:	231b      	movs	r3, #27
 800278c:	2220      	movs	r2, #32
 800278e:	189b      	adds	r3, r3, r2
 8002790:	19db      	adds	r3, r3, r7
 8002792:	2208      	movs	r2, #8
 8002794:	701a      	strb	r2, [r3, #0]
 8002796:	e13f      	b.n	8002a18 <UART_SetConfig+0x390>
 8002798:	231b      	movs	r3, #27
 800279a:	2220      	movs	r2, #32
 800279c:	189b      	adds	r3, r3, r2
 800279e:	19db      	adds	r3, r3, r7
 80027a0:	2210      	movs	r2, #16
 80027a2:	701a      	strb	r2, [r3, #0]
 80027a4:	e138      	b.n	8002a18 <UART_SetConfig+0x390>
 80027a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a8c      	ldr	r2, [pc, #560]	@ (80029dc <UART_SetConfig+0x354>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d131      	bne.n	8002814 <UART_SetConfig+0x18c>
 80027b0:	4b89      	ldr	r3, [pc, #548]	@ (80029d8 <UART_SetConfig+0x350>)
 80027b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b4:	220c      	movs	r2, #12
 80027b6:	4013      	ands	r3, r2
 80027b8:	2b0c      	cmp	r3, #12
 80027ba:	d01d      	beq.n	80027f8 <UART_SetConfig+0x170>
 80027bc:	d823      	bhi.n	8002806 <UART_SetConfig+0x17e>
 80027be:	2b08      	cmp	r3, #8
 80027c0:	d00c      	beq.n	80027dc <UART_SetConfig+0x154>
 80027c2:	d820      	bhi.n	8002806 <UART_SetConfig+0x17e>
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d002      	beq.n	80027ce <UART_SetConfig+0x146>
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	d00e      	beq.n	80027ea <UART_SetConfig+0x162>
 80027cc:	e01b      	b.n	8002806 <UART_SetConfig+0x17e>
 80027ce:	231b      	movs	r3, #27
 80027d0:	2220      	movs	r2, #32
 80027d2:	189b      	adds	r3, r3, r2
 80027d4:	19db      	adds	r3, r3, r7
 80027d6:	2200      	movs	r2, #0
 80027d8:	701a      	strb	r2, [r3, #0]
 80027da:	e11d      	b.n	8002a18 <UART_SetConfig+0x390>
 80027dc:	231b      	movs	r3, #27
 80027de:	2220      	movs	r2, #32
 80027e0:	189b      	adds	r3, r3, r2
 80027e2:	19db      	adds	r3, r3, r7
 80027e4:	2202      	movs	r2, #2
 80027e6:	701a      	strb	r2, [r3, #0]
 80027e8:	e116      	b.n	8002a18 <UART_SetConfig+0x390>
 80027ea:	231b      	movs	r3, #27
 80027ec:	2220      	movs	r2, #32
 80027ee:	189b      	adds	r3, r3, r2
 80027f0:	19db      	adds	r3, r3, r7
 80027f2:	2204      	movs	r2, #4
 80027f4:	701a      	strb	r2, [r3, #0]
 80027f6:	e10f      	b.n	8002a18 <UART_SetConfig+0x390>
 80027f8:	231b      	movs	r3, #27
 80027fa:	2220      	movs	r2, #32
 80027fc:	189b      	adds	r3, r3, r2
 80027fe:	19db      	adds	r3, r3, r7
 8002800:	2208      	movs	r2, #8
 8002802:	701a      	strb	r2, [r3, #0]
 8002804:	e108      	b.n	8002a18 <UART_SetConfig+0x390>
 8002806:	231b      	movs	r3, #27
 8002808:	2220      	movs	r2, #32
 800280a:	189b      	adds	r3, r3, r2
 800280c:	19db      	adds	r3, r3, r7
 800280e:	2210      	movs	r2, #16
 8002810:	701a      	strb	r2, [r3, #0]
 8002812:	e101      	b.n	8002a18 <UART_SetConfig+0x390>
 8002814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a71      	ldr	r2, [pc, #452]	@ (80029e0 <UART_SetConfig+0x358>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d131      	bne.n	8002882 <UART_SetConfig+0x1fa>
 800281e:	4b6e      	ldr	r3, [pc, #440]	@ (80029d8 <UART_SetConfig+0x350>)
 8002820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002822:	2230      	movs	r2, #48	@ 0x30
 8002824:	4013      	ands	r3, r2
 8002826:	2b30      	cmp	r3, #48	@ 0x30
 8002828:	d01d      	beq.n	8002866 <UART_SetConfig+0x1de>
 800282a:	d823      	bhi.n	8002874 <UART_SetConfig+0x1ec>
 800282c:	2b20      	cmp	r3, #32
 800282e:	d00c      	beq.n	800284a <UART_SetConfig+0x1c2>
 8002830:	d820      	bhi.n	8002874 <UART_SetConfig+0x1ec>
 8002832:	2b00      	cmp	r3, #0
 8002834:	d002      	beq.n	800283c <UART_SetConfig+0x1b4>
 8002836:	2b10      	cmp	r3, #16
 8002838:	d00e      	beq.n	8002858 <UART_SetConfig+0x1d0>
 800283a:	e01b      	b.n	8002874 <UART_SetConfig+0x1ec>
 800283c:	231b      	movs	r3, #27
 800283e:	2220      	movs	r2, #32
 8002840:	189b      	adds	r3, r3, r2
 8002842:	19db      	adds	r3, r3, r7
 8002844:	2200      	movs	r2, #0
 8002846:	701a      	strb	r2, [r3, #0]
 8002848:	e0e6      	b.n	8002a18 <UART_SetConfig+0x390>
 800284a:	231b      	movs	r3, #27
 800284c:	2220      	movs	r2, #32
 800284e:	189b      	adds	r3, r3, r2
 8002850:	19db      	adds	r3, r3, r7
 8002852:	2202      	movs	r2, #2
 8002854:	701a      	strb	r2, [r3, #0]
 8002856:	e0df      	b.n	8002a18 <UART_SetConfig+0x390>
 8002858:	231b      	movs	r3, #27
 800285a:	2220      	movs	r2, #32
 800285c:	189b      	adds	r3, r3, r2
 800285e:	19db      	adds	r3, r3, r7
 8002860:	2204      	movs	r2, #4
 8002862:	701a      	strb	r2, [r3, #0]
 8002864:	e0d8      	b.n	8002a18 <UART_SetConfig+0x390>
 8002866:	231b      	movs	r3, #27
 8002868:	2220      	movs	r2, #32
 800286a:	189b      	adds	r3, r3, r2
 800286c:	19db      	adds	r3, r3, r7
 800286e:	2208      	movs	r2, #8
 8002870:	701a      	strb	r2, [r3, #0]
 8002872:	e0d1      	b.n	8002a18 <UART_SetConfig+0x390>
 8002874:	231b      	movs	r3, #27
 8002876:	2220      	movs	r2, #32
 8002878:	189b      	adds	r3, r3, r2
 800287a:	19db      	adds	r3, r3, r7
 800287c:	2210      	movs	r2, #16
 800287e:	701a      	strb	r2, [r3, #0]
 8002880:	e0ca      	b.n	8002a18 <UART_SetConfig+0x390>
 8002882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a57      	ldr	r2, [pc, #348]	@ (80029e4 <UART_SetConfig+0x35c>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d106      	bne.n	800289a <UART_SetConfig+0x212>
 800288c:	231b      	movs	r3, #27
 800288e:	2220      	movs	r2, #32
 8002890:	189b      	adds	r3, r3, r2
 8002892:	19db      	adds	r3, r3, r7
 8002894:	2200      	movs	r2, #0
 8002896:	701a      	strb	r2, [r3, #0]
 8002898:	e0be      	b.n	8002a18 <UART_SetConfig+0x390>
 800289a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a52      	ldr	r2, [pc, #328]	@ (80029e8 <UART_SetConfig+0x360>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d106      	bne.n	80028b2 <UART_SetConfig+0x22a>
 80028a4:	231b      	movs	r3, #27
 80028a6:	2220      	movs	r2, #32
 80028a8:	189b      	adds	r3, r3, r2
 80028aa:	19db      	adds	r3, r3, r7
 80028ac:	2200      	movs	r2, #0
 80028ae:	701a      	strb	r2, [r3, #0]
 80028b0:	e0b2      	b.n	8002a18 <UART_SetConfig+0x390>
 80028b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a4d      	ldr	r2, [pc, #308]	@ (80029ec <UART_SetConfig+0x364>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d106      	bne.n	80028ca <UART_SetConfig+0x242>
 80028bc:	231b      	movs	r3, #27
 80028be:	2220      	movs	r2, #32
 80028c0:	189b      	adds	r3, r3, r2
 80028c2:	19db      	adds	r3, r3, r7
 80028c4:	2200      	movs	r2, #0
 80028c6:	701a      	strb	r2, [r3, #0]
 80028c8:	e0a6      	b.n	8002a18 <UART_SetConfig+0x390>
 80028ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a3e      	ldr	r2, [pc, #248]	@ (80029c8 <UART_SetConfig+0x340>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d13e      	bne.n	8002952 <UART_SetConfig+0x2ca>
 80028d4:	4b40      	ldr	r3, [pc, #256]	@ (80029d8 <UART_SetConfig+0x350>)
 80028d6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80028d8:	23c0      	movs	r3, #192	@ 0xc0
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	4013      	ands	r3, r2
 80028de:	22c0      	movs	r2, #192	@ 0xc0
 80028e0:	0112      	lsls	r2, r2, #4
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d027      	beq.n	8002936 <UART_SetConfig+0x2ae>
 80028e6:	22c0      	movs	r2, #192	@ 0xc0
 80028e8:	0112      	lsls	r2, r2, #4
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d82a      	bhi.n	8002944 <UART_SetConfig+0x2bc>
 80028ee:	2280      	movs	r2, #128	@ 0x80
 80028f0:	0112      	lsls	r2, r2, #4
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d011      	beq.n	800291a <UART_SetConfig+0x292>
 80028f6:	2280      	movs	r2, #128	@ 0x80
 80028f8:	0112      	lsls	r2, r2, #4
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d822      	bhi.n	8002944 <UART_SetConfig+0x2bc>
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d004      	beq.n	800290c <UART_SetConfig+0x284>
 8002902:	2280      	movs	r2, #128	@ 0x80
 8002904:	00d2      	lsls	r2, r2, #3
 8002906:	4293      	cmp	r3, r2
 8002908:	d00e      	beq.n	8002928 <UART_SetConfig+0x2a0>
 800290a:	e01b      	b.n	8002944 <UART_SetConfig+0x2bc>
 800290c:	231b      	movs	r3, #27
 800290e:	2220      	movs	r2, #32
 8002910:	189b      	adds	r3, r3, r2
 8002912:	19db      	adds	r3, r3, r7
 8002914:	2200      	movs	r2, #0
 8002916:	701a      	strb	r2, [r3, #0]
 8002918:	e07e      	b.n	8002a18 <UART_SetConfig+0x390>
 800291a:	231b      	movs	r3, #27
 800291c:	2220      	movs	r2, #32
 800291e:	189b      	adds	r3, r3, r2
 8002920:	19db      	adds	r3, r3, r7
 8002922:	2202      	movs	r2, #2
 8002924:	701a      	strb	r2, [r3, #0]
 8002926:	e077      	b.n	8002a18 <UART_SetConfig+0x390>
 8002928:	231b      	movs	r3, #27
 800292a:	2220      	movs	r2, #32
 800292c:	189b      	adds	r3, r3, r2
 800292e:	19db      	adds	r3, r3, r7
 8002930:	2204      	movs	r2, #4
 8002932:	701a      	strb	r2, [r3, #0]
 8002934:	e070      	b.n	8002a18 <UART_SetConfig+0x390>
 8002936:	231b      	movs	r3, #27
 8002938:	2220      	movs	r2, #32
 800293a:	189b      	adds	r3, r3, r2
 800293c:	19db      	adds	r3, r3, r7
 800293e:	2208      	movs	r2, #8
 8002940:	701a      	strb	r2, [r3, #0]
 8002942:	e069      	b.n	8002a18 <UART_SetConfig+0x390>
 8002944:	231b      	movs	r3, #27
 8002946:	2220      	movs	r2, #32
 8002948:	189b      	adds	r3, r3, r2
 800294a:	19db      	adds	r3, r3, r7
 800294c:	2210      	movs	r2, #16
 800294e:	701a      	strb	r2, [r3, #0]
 8002950:	e062      	b.n	8002a18 <UART_SetConfig+0x390>
 8002952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a1d      	ldr	r2, [pc, #116]	@ (80029cc <UART_SetConfig+0x344>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d157      	bne.n	8002a0c <UART_SetConfig+0x384>
 800295c:	4b1e      	ldr	r3, [pc, #120]	@ (80029d8 <UART_SetConfig+0x350>)
 800295e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002960:	23c0      	movs	r3, #192	@ 0xc0
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4013      	ands	r3, r2
 8002966:	22c0      	movs	r2, #192	@ 0xc0
 8002968:	0092      	lsls	r2, r2, #2
 800296a:	4293      	cmp	r3, r2
 800296c:	d040      	beq.n	80029f0 <UART_SetConfig+0x368>
 800296e:	22c0      	movs	r2, #192	@ 0xc0
 8002970:	0092      	lsls	r2, r2, #2
 8002972:	4293      	cmp	r3, r2
 8002974:	d843      	bhi.n	80029fe <UART_SetConfig+0x376>
 8002976:	2280      	movs	r2, #128	@ 0x80
 8002978:	0092      	lsls	r2, r2, #2
 800297a:	4293      	cmp	r3, r2
 800297c:	d011      	beq.n	80029a2 <UART_SetConfig+0x31a>
 800297e:	2280      	movs	r2, #128	@ 0x80
 8002980:	0092      	lsls	r2, r2, #2
 8002982:	4293      	cmp	r3, r2
 8002984:	d83b      	bhi.n	80029fe <UART_SetConfig+0x376>
 8002986:	2b00      	cmp	r3, #0
 8002988:	d004      	beq.n	8002994 <UART_SetConfig+0x30c>
 800298a:	2280      	movs	r2, #128	@ 0x80
 800298c:	0052      	lsls	r2, r2, #1
 800298e:	4293      	cmp	r3, r2
 8002990:	d00e      	beq.n	80029b0 <UART_SetConfig+0x328>
 8002992:	e034      	b.n	80029fe <UART_SetConfig+0x376>
 8002994:	231b      	movs	r3, #27
 8002996:	2220      	movs	r2, #32
 8002998:	189b      	adds	r3, r3, r2
 800299a:	19db      	adds	r3, r3, r7
 800299c:	2200      	movs	r2, #0
 800299e:	701a      	strb	r2, [r3, #0]
 80029a0:	e03a      	b.n	8002a18 <UART_SetConfig+0x390>
 80029a2:	231b      	movs	r3, #27
 80029a4:	2220      	movs	r2, #32
 80029a6:	189b      	adds	r3, r3, r2
 80029a8:	19db      	adds	r3, r3, r7
 80029aa:	2202      	movs	r2, #2
 80029ac:	701a      	strb	r2, [r3, #0]
 80029ae:	e033      	b.n	8002a18 <UART_SetConfig+0x390>
 80029b0:	231b      	movs	r3, #27
 80029b2:	2220      	movs	r2, #32
 80029b4:	189b      	adds	r3, r3, r2
 80029b6:	19db      	adds	r3, r3, r7
 80029b8:	2204      	movs	r2, #4
 80029ba:	701a      	strb	r2, [r3, #0]
 80029bc:	e02c      	b.n	8002a18 <UART_SetConfig+0x390>
 80029be:	46c0      	nop			@ (mov r8, r8)
 80029c0:	cfff69f3 	.word	0xcfff69f3
 80029c4:	ffffcfff 	.word	0xffffcfff
 80029c8:	40008000 	.word	0x40008000
 80029cc:	40008400 	.word	0x40008400
 80029d0:	11fff4ff 	.word	0x11fff4ff
 80029d4:	40013800 	.word	0x40013800
 80029d8:	40021000 	.word	0x40021000
 80029dc:	40004400 	.word	0x40004400
 80029e0:	40004800 	.word	0x40004800
 80029e4:	40004c00 	.word	0x40004c00
 80029e8:	40005000 	.word	0x40005000
 80029ec:	40013c00 	.word	0x40013c00
 80029f0:	231b      	movs	r3, #27
 80029f2:	2220      	movs	r2, #32
 80029f4:	189b      	adds	r3, r3, r2
 80029f6:	19db      	adds	r3, r3, r7
 80029f8:	2208      	movs	r2, #8
 80029fa:	701a      	strb	r2, [r3, #0]
 80029fc:	e00c      	b.n	8002a18 <UART_SetConfig+0x390>
 80029fe:	231b      	movs	r3, #27
 8002a00:	2220      	movs	r2, #32
 8002a02:	189b      	adds	r3, r3, r2
 8002a04:	19db      	adds	r3, r3, r7
 8002a06:	2210      	movs	r2, #16
 8002a08:	701a      	strb	r2, [r3, #0]
 8002a0a:	e005      	b.n	8002a18 <UART_SetConfig+0x390>
 8002a0c:	231b      	movs	r3, #27
 8002a0e:	2220      	movs	r2, #32
 8002a10:	189b      	adds	r3, r3, r2
 8002a12:	19db      	adds	r3, r3, r7
 8002a14:	2210      	movs	r2, #16
 8002a16:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4ac1      	ldr	r2, [pc, #772]	@ (8002d24 <UART_SetConfig+0x69c>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d005      	beq.n	8002a2e <UART_SetConfig+0x3a6>
 8002a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4ac0      	ldr	r2, [pc, #768]	@ (8002d28 <UART_SetConfig+0x6a0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d000      	beq.n	8002a2e <UART_SetConfig+0x3a6>
 8002a2c:	e093      	b.n	8002b56 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a2e:	231b      	movs	r3, #27
 8002a30:	2220      	movs	r2, #32
 8002a32:	189b      	adds	r3, r3, r2
 8002a34:	19db      	adds	r3, r3, r7
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b08      	cmp	r3, #8
 8002a3a:	d015      	beq.n	8002a68 <UART_SetConfig+0x3e0>
 8002a3c:	dc18      	bgt.n	8002a70 <UART_SetConfig+0x3e8>
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d00d      	beq.n	8002a5e <UART_SetConfig+0x3d6>
 8002a42:	dc15      	bgt.n	8002a70 <UART_SetConfig+0x3e8>
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <UART_SetConfig+0x3c6>
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d005      	beq.n	8002a58 <UART_SetConfig+0x3d0>
 8002a4c:	e010      	b.n	8002a70 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a4e:	f7ff fabb 	bl	8001fc8 <HAL_RCC_GetPCLK1Freq>
 8002a52:	0003      	movs	r3, r0
 8002a54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002a56:	e014      	b.n	8002a82 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a58:	4bb4      	ldr	r3, [pc, #720]	@ (8002d2c <UART_SetConfig+0x6a4>)
 8002a5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002a5c:	e011      	b.n	8002a82 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a5e:	f7ff fa27 	bl	8001eb0 <HAL_RCC_GetSysClockFreq>
 8002a62:	0003      	movs	r3, r0
 8002a64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002a66:	e00c      	b.n	8002a82 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a68:	2380      	movs	r3, #128	@ 0x80
 8002a6a:	021b      	lsls	r3, r3, #8
 8002a6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002a6e:	e008      	b.n	8002a82 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002a74:	231a      	movs	r3, #26
 8002a76:	2220      	movs	r2, #32
 8002a78:	189b      	adds	r3, r3, r2
 8002a7a:	19db      	adds	r3, r3, r7
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	701a      	strb	r2, [r3, #0]
        break;
 8002a80:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d100      	bne.n	8002a8a <UART_SetConfig+0x402>
 8002a88:	e135      	b.n	8002cf6 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a8e:	4ba8      	ldr	r3, [pc, #672]	@ (8002d30 <UART_SetConfig+0x6a8>)
 8002a90:	0052      	lsls	r2, r2, #1
 8002a92:	5ad3      	ldrh	r3, [r2, r3]
 8002a94:	0019      	movs	r1, r3
 8002a96:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002a98:	f7fd fb34 	bl	8000104 <__udivsi3>
 8002a9c:	0003      	movs	r3, r0
 8002a9e:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	0013      	movs	r3, r2
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	189b      	adds	r3, r3, r2
 8002aaa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d305      	bcc.n	8002abc <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002ab6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d906      	bls.n	8002aca <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8002abc:	231a      	movs	r3, #26
 8002abe:	2220      	movs	r2, #32
 8002ac0:	189b      	adds	r3, r3, r2
 8002ac2:	19db      	adds	r3, r3, r7
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	701a      	strb	r2, [r3, #0]
 8002ac8:	e044      	b.n	8002b54 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002acc:	61bb      	str	r3, [r7, #24]
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61fb      	str	r3, [r7, #28]
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ad6:	4b96      	ldr	r3, [pc, #600]	@ (8002d30 <UART_SetConfig+0x6a8>)
 8002ad8:	0052      	lsls	r2, r2, #1
 8002ada:	5ad3      	ldrh	r3, [r2, r3]
 8002adc:	613b      	str	r3, [r7, #16]
 8002ade:	2300      	movs	r3, #0
 8002ae0:	617b      	str	r3, [r7, #20]
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	69b8      	ldr	r0, [r7, #24]
 8002ae8:	69f9      	ldr	r1, [r7, #28]
 8002aea:	f7fd fc81 	bl	80003f0 <__aeabi_uldivmod>
 8002aee:	0002      	movs	r2, r0
 8002af0:	000b      	movs	r3, r1
 8002af2:	0e11      	lsrs	r1, r2, #24
 8002af4:	021d      	lsls	r5, r3, #8
 8002af6:	430d      	orrs	r5, r1
 8002af8:	0214      	lsls	r4, r2, #8
 8002afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	085b      	lsrs	r3, r3, #1
 8002b00:	60bb      	str	r3, [r7, #8]
 8002b02:	2300      	movs	r3, #0
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	68b8      	ldr	r0, [r7, #8]
 8002b08:	68f9      	ldr	r1, [r7, #12]
 8002b0a:	1900      	adds	r0, r0, r4
 8002b0c:	4169      	adcs	r1, r5
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	603b      	str	r3, [r7, #0]
 8002b14:	2300      	movs	r3, #0
 8002b16:	607b      	str	r3, [r7, #4]
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f7fd fc68 	bl	80003f0 <__aeabi_uldivmod>
 8002b20:	0002      	movs	r2, r0
 8002b22:	000b      	movs	r3, r1
 8002b24:	0013      	movs	r3, r2
 8002b26:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b2a:	23c0      	movs	r3, #192	@ 0xc0
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d309      	bcc.n	8002b46 <UART_SetConfig+0x4be>
 8002b32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b34:	2380      	movs	r3, #128	@ 0x80
 8002b36:	035b      	lsls	r3, r3, #13
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d204      	bcs.n	8002b46 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b42:	60da      	str	r2, [r3, #12]
 8002b44:	e006      	b.n	8002b54 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8002b46:	231a      	movs	r3, #26
 8002b48:	2220      	movs	r2, #32
 8002b4a:	189b      	adds	r3, r3, r2
 8002b4c:	19db      	adds	r3, r3, r7
 8002b4e:	2201      	movs	r2, #1
 8002b50:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8002b52:	e0d0      	b.n	8002cf6 <UART_SetConfig+0x66e>
 8002b54:	e0cf      	b.n	8002cf6 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b58:	69da      	ldr	r2, [r3, #28]
 8002b5a:	2380      	movs	r3, #128	@ 0x80
 8002b5c:	021b      	lsls	r3, r3, #8
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d000      	beq.n	8002b64 <UART_SetConfig+0x4dc>
 8002b62:	e070      	b.n	8002c46 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8002b64:	231b      	movs	r3, #27
 8002b66:	2220      	movs	r2, #32
 8002b68:	189b      	adds	r3, r3, r2
 8002b6a:	19db      	adds	r3, r3, r7
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d015      	beq.n	8002b9e <UART_SetConfig+0x516>
 8002b72:	dc18      	bgt.n	8002ba6 <UART_SetConfig+0x51e>
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d00d      	beq.n	8002b94 <UART_SetConfig+0x50c>
 8002b78:	dc15      	bgt.n	8002ba6 <UART_SetConfig+0x51e>
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d002      	beq.n	8002b84 <UART_SetConfig+0x4fc>
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d005      	beq.n	8002b8e <UART_SetConfig+0x506>
 8002b82:	e010      	b.n	8002ba6 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b84:	f7ff fa20 	bl	8001fc8 <HAL_RCC_GetPCLK1Freq>
 8002b88:	0003      	movs	r3, r0
 8002b8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002b8c:	e014      	b.n	8002bb8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b8e:	4b67      	ldr	r3, [pc, #412]	@ (8002d2c <UART_SetConfig+0x6a4>)
 8002b90:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002b92:	e011      	b.n	8002bb8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b94:	f7ff f98c 	bl	8001eb0 <HAL_RCC_GetSysClockFreq>
 8002b98:	0003      	movs	r3, r0
 8002b9a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002b9c:	e00c      	b.n	8002bb8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	021b      	lsls	r3, r3, #8
 8002ba2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002ba4:	e008      	b.n	8002bb8 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002baa:	231a      	movs	r3, #26
 8002bac:	2220      	movs	r2, #32
 8002bae:	189b      	adds	r3, r3, r2
 8002bb0:	19db      	adds	r3, r3, r7
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	701a      	strb	r2, [r3, #0]
        break;
 8002bb6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d100      	bne.n	8002bc0 <UART_SetConfig+0x538>
 8002bbe:	e09a      	b.n	8002cf6 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bc4:	4b5a      	ldr	r3, [pc, #360]	@ (8002d30 <UART_SetConfig+0x6a8>)
 8002bc6:	0052      	lsls	r2, r2, #1
 8002bc8:	5ad3      	ldrh	r3, [r2, r3]
 8002bca:	0019      	movs	r1, r3
 8002bcc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002bce:	f7fd fa99 	bl	8000104 <__udivsi3>
 8002bd2:	0003      	movs	r3, r0
 8002bd4:	005a      	lsls	r2, r3, #1
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	085b      	lsrs	r3, r3, #1
 8002bdc:	18d2      	adds	r2, r2, r3
 8002bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	0019      	movs	r1, r3
 8002be4:	0010      	movs	r0, r2
 8002be6:	f7fd fa8d 	bl	8000104 <__udivsi3>
 8002bea:	0003      	movs	r3, r0
 8002bec:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf0:	2b0f      	cmp	r3, #15
 8002bf2:	d921      	bls.n	8002c38 <UART_SetConfig+0x5b0>
 8002bf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bf6:	2380      	movs	r3, #128	@ 0x80
 8002bf8:	025b      	lsls	r3, r3, #9
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d21c      	bcs.n	8002c38 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	200e      	movs	r0, #14
 8002c04:	2420      	movs	r4, #32
 8002c06:	1903      	adds	r3, r0, r4
 8002c08:	19db      	adds	r3, r3, r7
 8002c0a:	210f      	movs	r1, #15
 8002c0c:	438a      	bics	r2, r1
 8002c0e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c12:	085b      	lsrs	r3, r3, #1
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	2207      	movs	r2, #7
 8002c18:	4013      	ands	r3, r2
 8002c1a:	b299      	uxth	r1, r3
 8002c1c:	1903      	adds	r3, r0, r4
 8002c1e:	19db      	adds	r3, r3, r7
 8002c20:	1902      	adds	r2, r0, r4
 8002c22:	19d2      	adds	r2, r2, r7
 8002c24:	8812      	ldrh	r2, [r2, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	1902      	adds	r2, r0, r4
 8002c30:	19d2      	adds	r2, r2, r7
 8002c32:	8812      	ldrh	r2, [r2, #0]
 8002c34:	60da      	str	r2, [r3, #12]
 8002c36:	e05e      	b.n	8002cf6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8002c38:	231a      	movs	r3, #26
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	189b      	adds	r3, r3, r2
 8002c3e:	19db      	adds	r3, r3, r7
 8002c40:	2201      	movs	r2, #1
 8002c42:	701a      	strb	r2, [r3, #0]
 8002c44:	e057      	b.n	8002cf6 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c46:	231b      	movs	r3, #27
 8002c48:	2220      	movs	r2, #32
 8002c4a:	189b      	adds	r3, r3, r2
 8002c4c:	19db      	adds	r3, r3, r7
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d015      	beq.n	8002c80 <UART_SetConfig+0x5f8>
 8002c54:	dc18      	bgt.n	8002c88 <UART_SetConfig+0x600>
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d00d      	beq.n	8002c76 <UART_SetConfig+0x5ee>
 8002c5a:	dc15      	bgt.n	8002c88 <UART_SetConfig+0x600>
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <UART_SetConfig+0x5de>
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d005      	beq.n	8002c70 <UART_SetConfig+0x5e8>
 8002c64:	e010      	b.n	8002c88 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c66:	f7ff f9af 	bl	8001fc8 <HAL_RCC_GetPCLK1Freq>
 8002c6a:	0003      	movs	r3, r0
 8002c6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002c6e:	e014      	b.n	8002c9a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c70:	4b2e      	ldr	r3, [pc, #184]	@ (8002d2c <UART_SetConfig+0x6a4>)
 8002c72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002c74:	e011      	b.n	8002c9a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c76:	f7ff f91b 	bl	8001eb0 <HAL_RCC_GetSysClockFreq>
 8002c7a:	0003      	movs	r3, r0
 8002c7c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002c7e:	e00c      	b.n	8002c9a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c80:	2380      	movs	r3, #128	@ 0x80
 8002c82:	021b      	lsls	r3, r3, #8
 8002c84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002c86:	e008      	b.n	8002c9a <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002c8c:	231a      	movs	r3, #26
 8002c8e:	2220      	movs	r2, #32
 8002c90:	189b      	adds	r3, r3, r2
 8002c92:	19db      	adds	r3, r3, r7
 8002c94:	2201      	movs	r2, #1
 8002c96:	701a      	strb	r2, [r3, #0]
        break;
 8002c98:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d02a      	beq.n	8002cf6 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ca4:	4b22      	ldr	r3, [pc, #136]	@ (8002d30 <UART_SetConfig+0x6a8>)
 8002ca6:	0052      	lsls	r2, r2, #1
 8002ca8:	5ad3      	ldrh	r3, [r2, r3]
 8002caa:	0019      	movs	r1, r3
 8002cac:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002cae:	f7fd fa29 	bl	8000104 <__udivsi3>
 8002cb2:	0003      	movs	r3, r0
 8002cb4:	001a      	movs	r2, r3
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	085b      	lsrs	r3, r3, #1
 8002cbc:	18d2      	adds	r2, r2, r3
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	0019      	movs	r1, r3
 8002cc4:	0010      	movs	r0, r2
 8002cc6:	f7fd fa1d 	bl	8000104 <__udivsi3>
 8002cca:	0003      	movs	r3, r0
 8002ccc:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd0:	2b0f      	cmp	r3, #15
 8002cd2:	d90a      	bls.n	8002cea <UART_SetConfig+0x662>
 8002cd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cd6:	2380      	movs	r3, #128	@ 0x80
 8002cd8:	025b      	lsls	r3, r3, #9
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d205      	bcs.n	8002cea <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	60da      	str	r2, [r3, #12]
 8002ce8:	e005      	b.n	8002cf6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8002cea:	231a      	movs	r3, #26
 8002cec:	2220      	movs	r2, #32
 8002cee:	189b      	adds	r3, r3, r2
 8002cf0:	19db      	adds	r3, r3, r7
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf8:	226a      	movs	r2, #106	@ 0x6a
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d00:	2268      	movs	r2, #104	@ 0x68
 8002d02:	2101      	movs	r1, #1
 8002d04:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d08:	2200      	movs	r2, #0
 8002d0a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0e:	2200      	movs	r2, #0
 8002d10:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002d12:	231a      	movs	r3, #26
 8002d14:	2220      	movs	r2, #32
 8002d16:	189b      	adds	r3, r3, r2
 8002d18:	19db      	adds	r3, r3, r7
 8002d1a:	781b      	ldrb	r3, [r3, #0]
}
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	b010      	add	sp, #64	@ 0x40
 8002d22:	bdb0      	pop	{r4, r5, r7, pc}
 8002d24:	40008000 	.word	0x40008000
 8002d28:	40008400 	.word	0x40008400
 8002d2c:	00f42400 	.word	0x00f42400
 8002d30:	080034a0 	.word	0x080034a0

08002d34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d40:	2208      	movs	r2, #8
 8002d42:	4013      	ands	r3, r2
 8002d44:	d00b      	beq.n	8002d5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	4a4a      	ldr	r2, [pc, #296]	@ (8002e78 <UART_AdvFeatureConfig+0x144>)
 8002d4e:	4013      	ands	r3, r2
 8002d50:	0019      	movs	r1, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d62:	2201      	movs	r2, #1
 8002d64:	4013      	ands	r3, r2
 8002d66:	d00b      	beq.n	8002d80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	4a43      	ldr	r2, [pc, #268]	@ (8002e7c <UART_AdvFeatureConfig+0x148>)
 8002d70:	4013      	ands	r3, r2
 8002d72:	0019      	movs	r1, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d84:	2202      	movs	r2, #2
 8002d86:	4013      	ands	r3, r2
 8002d88:	d00b      	beq.n	8002da2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	4a3b      	ldr	r2, [pc, #236]	@ (8002e80 <UART_AdvFeatureConfig+0x14c>)
 8002d92:	4013      	ands	r3, r2
 8002d94:	0019      	movs	r1, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da6:	2204      	movs	r2, #4
 8002da8:	4013      	ands	r3, r2
 8002daa:	d00b      	beq.n	8002dc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	4a34      	ldr	r2, [pc, #208]	@ (8002e84 <UART_AdvFeatureConfig+0x150>)
 8002db4:	4013      	ands	r3, r2
 8002db6:	0019      	movs	r1, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc8:	2210      	movs	r2, #16
 8002dca:	4013      	ands	r3, r2
 8002dcc:	d00b      	beq.n	8002de6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	4a2c      	ldr	r2, [pc, #176]	@ (8002e88 <UART_AdvFeatureConfig+0x154>)
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	0019      	movs	r1, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dea:	2220      	movs	r2, #32
 8002dec:	4013      	ands	r3, r2
 8002dee:	d00b      	beq.n	8002e08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	4a25      	ldr	r2, [pc, #148]	@ (8002e8c <UART_AdvFeatureConfig+0x158>)
 8002df8:	4013      	ands	r3, r2
 8002dfa:	0019      	movs	r1, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e0c:	2240      	movs	r2, #64	@ 0x40
 8002e0e:	4013      	ands	r3, r2
 8002e10:	d01d      	beq.n	8002e4e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	4a1d      	ldr	r2, [pc, #116]	@ (8002e90 <UART_AdvFeatureConfig+0x15c>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	0019      	movs	r1, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e2e:	2380      	movs	r3, #128	@ 0x80
 8002e30:	035b      	lsls	r3, r3, #13
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d10b      	bne.n	8002e4e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	4a15      	ldr	r2, [pc, #84]	@ (8002e94 <UART_AdvFeatureConfig+0x160>)
 8002e3e:	4013      	ands	r3, r2
 8002e40:	0019      	movs	r1, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e52:	2280      	movs	r2, #128	@ 0x80
 8002e54:	4013      	ands	r3, r2
 8002e56:	d00b      	beq.n	8002e70 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	4a0e      	ldr	r2, [pc, #56]	@ (8002e98 <UART_AdvFeatureConfig+0x164>)
 8002e60:	4013      	ands	r3, r2
 8002e62:	0019      	movs	r1, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	605a      	str	r2, [r3, #4]
  }
}
 8002e70:	46c0      	nop			@ (mov r8, r8)
 8002e72:	46bd      	mov	sp, r7
 8002e74:	b002      	add	sp, #8
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	ffff7fff 	.word	0xffff7fff
 8002e7c:	fffdffff 	.word	0xfffdffff
 8002e80:	fffeffff 	.word	0xfffeffff
 8002e84:	fffbffff 	.word	0xfffbffff
 8002e88:	ffffefff 	.word	0xffffefff
 8002e8c:	ffffdfff 	.word	0xffffdfff
 8002e90:	ffefffff 	.word	0xffefffff
 8002e94:	ff9fffff 	.word	0xff9fffff
 8002e98:	fff7ffff 	.word	0xfff7ffff

08002e9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b092      	sub	sp, #72	@ 0x48
 8002ea0:	af02      	add	r7, sp, #8
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2290      	movs	r2, #144	@ 0x90
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002eac:	f7fd ffb0 	bl	8000e10 <HAL_GetTick>
 8002eb0:	0003      	movs	r3, r0
 8002eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2208      	movs	r2, #8
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d12d      	bne.n	8002f1e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ec4:	2280      	movs	r2, #128	@ 0x80
 8002ec6:	0391      	lsls	r1, r2, #14
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	4a47      	ldr	r2, [pc, #284]	@ (8002fe8 <UART_CheckIdleState+0x14c>)
 8002ecc:	9200      	str	r2, [sp, #0]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f000 f88e 	bl	8002ff0 <UART_WaitOnFlagUntilTimeout>
 8002ed4:	1e03      	subs	r3, r0, #0
 8002ed6:	d022      	beq.n	8002f1e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ed8:	f3ef 8310 	mrs	r3, PRIMASK
 8002edc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002ee0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ee8:	f383 8810 	msr	PRIMASK, r3
}
 8002eec:	46c0      	nop			@ (mov r8, r8)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2180      	movs	r1, #128	@ 0x80
 8002efa:	438a      	bics	r2, r1
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f04:	f383 8810 	msr	PRIMASK, r3
}
 8002f08:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2288      	movs	r2, #136	@ 0x88
 8002f0e:	2120      	movs	r1, #32
 8002f10:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2284      	movs	r2, #132	@ 0x84
 8002f16:	2100      	movs	r1, #0
 8002f18:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e060      	b.n	8002fe0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2204      	movs	r2, #4
 8002f26:	4013      	ands	r3, r2
 8002f28:	2b04      	cmp	r3, #4
 8002f2a:	d146      	bne.n	8002fba <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f2e:	2280      	movs	r2, #128	@ 0x80
 8002f30:	03d1      	lsls	r1, r2, #15
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	4a2c      	ldr	r2, [pc, #176]	@ (8002fe8 <UART_CheckIdleState+0x14c>)
 8002f36:	9200      	str	r2, [sp, #0]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f000 f859 	bl	8002ff0 <UART_WaitOnFlagUntilTimeout>
 8002f3e:	1e03      	subs	r3, r0, #0
 8002f40:	d03b      	beq.n	8002fba <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f42:	f3ef 8310 	mrs	r3, PRIMASK
 8002f46:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f48:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002f4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	f383 8810 	msr	PRIMASK, r3
}
 8002f56:	46c0      	nop			@ (mov r8, r8)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4922      	ldr	r1, [pc, #136]	@ (8002fec <UART_CheckIdleState+0x150>)
 8002f64:	400a      	ands	r2, r1
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f6a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f383 8810 	msr	PRIMASK, r3
}
 8002f72:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f74:	f3ef 8310 	mrs	r3, PRIMASK
 8002f78:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f7a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f7e:	2301      	movs	r3, #1
 8002f80:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	f383 8810 	msr	PRIMASK, r3
}
 8002f88:	46c0      	nop			@ (mov r8, r8)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2101      	movs	r1, #1
 8002f96:	438a      	bics	r2, r1
 8002f98:	609a      	str	r2, [r3, #8]
 8002f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f9c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	f383 8810 	msr	PRIMASK, r3
}
 8002fa4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	228c      	movs	r2, #140	@ 0x8c
 8002faa:	2120      	movs	r1, #32
 8002fac:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2284      	movs	r2, #132	@ 0x84
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e012      	b.n	8002fe0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2288      	movs	r2, #136	@ 0x88
 8002fbe:	2120      	movs	r1, #32
 8002fc0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	228c      	movs	r2, #140	@ 0x8c
 8002fc6:	2120      	movs	r1, #32
 8002fc8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2284      	movs	r2, #132	@ 0x84
 8002fda:	2100      	movs	r1, #0
 8002fdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	b010      	add	sp, #64	@ 0x40
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	01ffffff 	.word	0x01ffffff
 8002fec:	fffffedf 	.word	0xfffffedf

08002ff0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	603b      	str	r3, [r7, #0]
 8002ffc:	1dfb      	adds	r3, r7, #7
 8002ffe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003000:	e051      	b.n	80030a6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	3301      	adds	r3, #1
 8003006:	d04e      	beq.n	80030a6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003008:	f7fd ff02 	bl	8000e10 <HAL_GetTick>
 800300c:	0002      	movs	r2, r0
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	429a      	cmp	r2, r3
 8003016:	d302      	bcc.n	800301e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e051      	b.n	80030c6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2204      	movs	r2, #4
 800302a:	4013      	ands	r3, r2
 800302c:	d03b      	beq.n	80030a6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2b80      	cmp	r3, #128	@ 0x80
 8003032:	d038      	beq.n	80030a6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	2b40      	cmp	r3, #64	@ 0x40
 8003038:	d035      	beq.n	80030a6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	2208      	movs	r2, #8
 8003042:	4013      	ands	r3, r2
 8003044:	2b08      	cmp	r3, #8
 8003046:	d111      	bne.n	800306c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2208      	movs	r2, #8
 800304e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	0018      	movs	r0, r3
 8003054:	f000 f83c 	bl	80030d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2290      	movs	r2, #144	@ 0x90
 800305c:	2108      	movs	r1, #8
 800305e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2284      	movs	r2, #132	@ 0x84
 8003064:	2100      	movs	r1, #0
 8003066:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e02c      	b.n	80030c6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	69da      	ldr	r2, [r3, #28]
 8003072:	2380      	movs	r3, #128	@ 0x80
 8003074:	011b      	lsls	r3, r3, #4
 8003076:	401a      	ands	r2, r3
 8003078:	2380      	movs	r3, #128	@ 0x80
 800307a:	011b      	lsls	r3, r3, #4
 800307c:	429a      	cmp	r2, r3
 800307e:	d112      	bne.n	80030a6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2280      	movs	r2, #128	@ 0x80
 8003086:	0112      	lsls	r2, r2, #4
 8003088:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	0018      	movs	r0, r3
 800308e:	f000 f81f 	bl	80030d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2290      	movs	r2, #144	@ 0x90
 8003096:	2120      	movs	r1, #32
 8003098:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2284      	movs	r2, #132	@ 0x84
 800309e:	2100      	movs	r1, #0
 80030a0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e00f      	b.n	80030c6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	4013      	ands	r3, r2
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	425a      	negs	r2, r3
 80030b6:	4153      	adcs	r3, r2
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	001a      	movs	r2, r3
 80030bc:	1dfb      	adds	r3, r7, #7
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d09e      	beq.n	8003002 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	0018      	movs	r0, r3
 80030c8:	46bd      	mov	sp, r7
 80030ca:	b004      	add	sp, #16
 80030cc:	bd80      	pop	{r7, pc}
	...

080030d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b08e      	sub	sp, #56	@ 0x38
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030d8:	f3ef 8310 	mrs	r3, PRIMASK
 80030dc:	617b      	str	r3, [r7, #20]
  return(result);
 80030de:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80030e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80030e2:	2301      	movs	r3, #1
 80030e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	f383 8810 	msr	PRIMASK, r3
}
 80030ec:	46c0      	nop			@ (mov r8, r8)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4926      	ldr	r1, [pc, #152]	@ (8003194 <UART_EndRxTransfer+0xc4>)
 80030fa:	400a      	ands	r2, r1
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003100:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	f383 8810 	msr	PRIMASK, r3
}
 8003108:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800310a:	f3ef 8310 	mrs	r3, PRIMASK
 800310e:	623b      	str	r3, [r7, #32]
  return(result);
 8003110:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003112:	633b      	str	r3, [r7, #48]	@ 0x30
 8003114:	2301      	movs	r3, #1
 8003116:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311a:	f383 8810 	msr	PRIMASK, r3
}
 800311e:	46c0      	nop			@ (mov r8, r8)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	491b      	ldr	r1, [pc, #108]	@ (8003198 <UART_EndRxTransfer+0xc8>)
 800312c:	400a      	ands	r2, r1
 800312e:	609a      	str	r2, [r3, #8]
 8003130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003132:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003136:	f383 8810 	msr	PRIMASK, r3
}
 800313a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003140:	2b01      	cmp	r3, #1
 8003142:	d118      	bne.n	8003176 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003144:	f3ef 8310 	mrs	r3, PRIMASK
 8003148:	60bb      	str	r3, [r7, #8]
  return(result);
 800314a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800314c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800314e:	2301      	movs	r3, #1
 8003150:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f383 8810 	msr	PRIMASK, r3
}
 8003158:	46c0      	nop			@ (mov r8, r8)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2110      	movs	r1, #16
 8003166:	438a      	bics	r2, r1
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800316c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	f383 8810 	msr	PRIMASK, r3
}
 8003174:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	228c      	movs	r2, #140	@ 0x8c
 800317a:	2120      	movs	r1, #32
 800317c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800318a:	46c0      	nop			@ (mov r8, r8)
 800318c:	46bd      	mov	sp, r7
 800318e:	b00e      	add	sp, #56	@ 0x38
 8003190:	bd80      	pop	{r7, pc}
 8003192:	46c0      	nop			@ (mov r8, r8)
 8003194:	fffffedf 	.word	0xfffffedf
 8003198:	effffffe 	.word	0xeffffffe

0800319c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2284      	movs	r2, #132	@ 0x84
 80031a8:	5c9b      	ldrb	r3, [r3, r2]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <HAL_UARTEx_DisableFifoMode+0x16>
 80031ae:	2302      	movs	r3, #2
 80031b0:	e027      	b.n	8003202 <HAL_UARTEx_DisableFifoMode+0x66>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2284      	movs	r2, #132	@ 0x84
 80031b6:	2101      	movs	r1, #1
 80031b8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2288      	movs	r2, #136	@ 0x88
 80031be:	2124      	movs	r1, #36	@ 0x24
 80031c0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2101      	movs	r1, #1
 80031d6:	438a      	bics	r2, r1
 80031d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	4a0b      	ldr	r2, [pc, #44]	@ (800320c <HAL_UARTEx_DisableFifoMode+0x70>)
 80031de:	4013      	ands	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2288      	movs	r2, #136	@ 0x88
 80031f4:	2120      	movs	r1, #32
 80031f6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2284      	movs	r2, #132	@ 0x84
 80031fc:	2100      	movs	r1, #0
 80031fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	0018      	movs	r0, r3
 8003204:	46bd      	mov	sp, r7
 8003206:	b004      	add	sp, #16
 8003208:	bd80      	pop	{r7, pc}
 800320a:	46c0      	nop			@ (mov r8, r8)
 800320c:	dfffffff 	.word	0xdfffffff

08003210 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2284      	movs	r2, #132	@ 0x84
 800321e:	5c9b      	ldrb	r3, [r3, r2]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d101      	bne.n	8003228 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003224:	2302      	movs	r3, #2
 8003226:	e02e      	b.n	8003286 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2284      	movs	r2, #132	@ 0x84
 800322c:	2101      	movs	r1, #1
 800322e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2288      	movs	r2, #136	@ 0x88
 8003234:	2124      	movs	r1, #36	@ 0x24
 8003236:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2101      	movs	r1, #1
 800324c:	438a      	bics	r2, r1
 800324e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	08d9      	lsrs	r1, r3, #3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	0018      	movs	r0, r3
 8003268:	f000 f854 	bl	8003314 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2288      	movs	r2, #136	@ 0x88
 8003278:	2120      	movs	r1, #32
 800327a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2284      	movs	r2, #132	@ 0x84
 8003280:	2100      	movs	r1, #0
 8003282:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	0018      	movs	r0, r3
 8003288:	46bd      	mov	sp, r7
 800328a:	b004      	add	sp, #16
 800328c:	bd80      	pop	{r7, pc}
	...

08003290 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2284      	movs	r2, #132	@ 0x84
 800329e:	5c9b      	ldrb	r3, [r3, r2]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d101      	bne.n	80032a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80032a4:	2302      	movs	r3, #2
 80032a6:	e02f      	b.n	8003308 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2284      	movs	r2, #132	@ 0x84
 80032ac:	2101      	movs	r1, #1
 80032ae:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2288      	movs	r2, #136	@ 0x88
 80032b4:	2124      	movs	r1, #36	@ 0x24
 80032b6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2101      	movs	r1, #1
 80032cc:	438a      	bics	r2, r1
 80032ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	4a0e      	ldr	r2, [pc, #56]	@ (8003310 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80032d8:	4013      	ands	r3, r2
 80032da:	0019      	movs	r1, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	0018      	movs	r0, r3
 80032ea:	f000 f813 	bl	8003314 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2288      	movs	r2, #136	@ 0x88
 80032fa:	2120      	movs	r1, #32
 80032fc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2284      	movs	r2, #132	@ 0x84
 8003302:	2100      	movs	r1, #0
 8003304:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	0018      	movs	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	b004      	add	sp, #16
 800330e:	bd80      	pop	{r7, pc}
 8003310:	f1ffffff 	.word	0xf1ffffff

08003314 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003320:	2b00      	cmp	r3, #0
 8003322:	d108      	bne.n	8003336 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	226a      	movs	r2, #106	@ 0x6a
 8003328:	2101      	movs	r1, #1
 800332a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2268      	movs	r2, #104	@ 0x68
 8003330:	2101      	movs	r1, #1
 8003332:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003334:	e043      	b.n	80033be <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003336:	260f      	movs	r6, #15
 8003338:	19bb      	adds	r3, r7, r6
 800333a:	2208      	movs	r2, #8
 800333c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800333e:	200e      	movs	r0, #14
 8003340:	183b      	adds	r3, r7, r0
 8003342:	2208      	movs	r2, #8
 8003344:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	0e5b      	lsrs	r3, r3, #25
 800334e:	b2da      	uxtb	r2, r3
 8003350:	240d      	movs	r4, #13
 8003352:	193b      	adds	r3, r7, r4
 8003354:	2107      	movs	r1, #7
 8003356:	400a      	ands	r2, r1
 8003358:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	0f5b      	lsrs	r3, r3, #29
 8003362:	b2da      	uxtb	r2, r3
 8003364:	250c      	movs	r5, #12
 8003366:	197b      	adds	r3, r7, r5
 8003368:	2107      	movs	r1, #7
 800336a:	400a      	ands	r2, r1
 800336c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800336e:	183b      	adds	r3, r7, r0
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	197a      	adds	r2, r7, r5
 8003374:	7812      	ldrb	r2, [r2, #0]
 8003376:	4914      	ldr	r1, [pc, #80]	@ (80033c8 <UARTEx_SetNbDataToProcess+0xb4>)
 8003378:	5c8a      	ldrb	r2, [r1, r2]
 800337a:	435a      	muls	r2, r3
 800337c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800337e:	197b      	adds	r3, r7, r5
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	4a12      	ldr	r2, [pc, #72]	@ (80033cc <UARTEx_SetNbDataToProcess+0xb8>)
 8003384:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003386:	0019      	movs	r1, r3
 8003388:	f7fc ff46 	bl	8000218 <__divsi3>
 800338c:	0003      	movs	r3, r0
 800338e:	b299      	uxth	r1, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	226a      	movs	r2, #106	@ 0x6a
 8003394:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003396:	19bb      	adds	r3, r7, r6
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	193a      	adds	r2, r7, r4
 800339c:	7812      	ldrb	r2, [r2, #0]
 800339e:	490a      	ldr	r1, [pc, #40]	@ (80033c8 <UARTEx_SetNbDataToProcess+0xb4>)
 80033a0:	5c8a      	ldrb	r2, [r1, r2]
 80033a2:	435a      	muls	r2, r3
 80033a4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80033a6:	193b      	adds	r3, r7, r4
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	4a08      	ldr	r2, [pc, #32]	@ (80033cc <UARTEx_SetNbDataToProcess+0xb8>)
 80033ac:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80033ae:	0019      	movs	r1, r3
 80033b0:	f7fc ff32 	bl	8000218 <__divsi3>
 80033b4:	0003      	movs	r3, r0
 80033b6:	b299      	uxth	r1, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2268      	movs	r2, #104	@ 0x68
 80033bc:	5299      	strh	r1, [r3, r2]
}
 80033be:	46c0      	nop			@ (mov r8, r8)
 80033c0:	46bd      	mov	sp, r7
 80033c2:	b005      	add	sp, #20
 80033c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033c6:	46c0      	nop			@ (mov r8, r8)
 80033c8:	080034b8 	.word	0x080034b8
 80033cc:	080034c0 	.word	0x080034c0

080033d0 <memset>:
 80033d0:	0003      	movs	r3, r0
 80033d2:	1882      	adds	r2, r0, r2
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d100      	bne.n	80033da <memset+0xa>
 80033d8:	4770      	bx	lr
 80033da:	7019      	strb	r1, [r3, #0]
 80033dc:	3301      	adds	r3, #1
 80033de:	e7f9      	b.n	80033d4 <memset+0x4>

080033e0 <__libc_init_array>:
 80033e0:	b570      	push	{r4, r5, r6, lr}
 80033e2:	2600      	movs	r6, #0
 80033e4:	4c0c      	ldr	r4, [pc, #48]	@ (8003418 <__libc_init_array+0x38>)
 80033e6:	4d0d      	ldr	r5, [pc, #52]	@ (800341c <__libc_init_array+0x3c>)
 80033e8:	1b64      	subs	r4, r4, r5
 80033ea:	10a4      	asrs	r4, r4, #2
 80033ec:	42a6      	cmp	r6, r4
 80033ee:	d109      	bne.n	8003404 <__libc_init_array+0x24>
 80033f0:	2600      	movs	r6, #0
 80033f2:	f000 f819 	bl	8003428 <_init>
 80033f6:	4c0a      	ldr	r4, [pc, #40]	@ (8003420 <__libc_init_array+0x40>)
 80033f8:	4d0a      	ldr	r5, [pc, #40]	@ (8003424 <__libc_init_array+0x44>)
 80033fa:	1b64      	subs	r4, r4, r5
 80033fc:	10a4      	asrs	r4, r4, #2
 80033fe:	42a6      	cmp	r6, r4
 8003400:	d105      	bne.n	800340e <__libc_init_array+0x2e>
 8003402:	bd70      	pop	{r4, r5, r6, pc}
 8003404:	00b3      	lsls	r3, r6, #2
 8003406:	58eb      	ldr	r3, [r5, r3]
 8003408:	4798      	blx	r3
 800340a:	3601      	adds	r6, #1
 800340c:	e7ee      	b.n	80033ec <__libc_init_array+0xc>
 800340e:	00b3      	lsls	r3, r6, #2
 8003410:	58eb      	ldr	r3, [r5, r3]
 8003412:	4798      	blx	r3
 8003414:	3601      	adds	r6, #1
 8003416:	e7f2      	b.n	80033fe <__libc_init_array+0x1e>
 8003418:	080034d0 	.word	0x080034d0
 800341c:	080034d0 	.word	0x080034d0
 8003420:	080034d4 	.word	0x080034d4
 8003424:	080034d0 	.word	0x080034d0

08003428 <_init>:
 8003428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800342a:	46c0      	nop			@ (mov r8, r8)
 800342c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800342e:	bc08      	pop	{r3}
 8003430:	469e      	mov	lr, r3
 8003432:	4770      	bx	lr

08003434 <_fini>:
 8003434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003436:	46c0      	nop			@ (mov r8, r8)
 8003438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800343a:	bc08      	pop	{r3}
 800343c:	469e      	mov	lr, r3
 800343e:	4770      	bx	lr
