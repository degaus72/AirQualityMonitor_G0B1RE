
AirQualityMonitor_G0B1RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007edc  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  08007f98  08007f98  00008f98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083d4  080083d4  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080083d4  080083d4  000093d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083dc  080083dc  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083dc  080083dc  000093dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080083e0  080083e0  000093e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080083e4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  200001d4  080085b8  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  080085b8  0000a490  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010dd9  00000000  00000000  0000a1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000293c  00000000  00000000  0001afd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  0001d918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b79  00000000  00000000  0001e7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c172  00000000  00000000  0001f361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014244  00000000  00000000  0003b4d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9b40  00000000  00000000  0004f717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00109257  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043f8  00000000  00000000  0010929c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0010d694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001d4 	.word	0x200001d4
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08007f80 	.word	0x08007f80

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001d8 	.word	0x200001d8
 8000100:	08007f80 	.word	0x08007f80

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			@ (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	@ 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			@ (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	@ 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	@ 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			@ (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			@ (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8b1 	bl	80015a0 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 fff5 	bl	8001438 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8a3 	bl	80015a0 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f899 	bl	80015a0 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f81f 	bl	80014c0 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f815 	bl	80014c0 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	@ (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	@ (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			@ (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f806 	bl	80004e4 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__udivmoddi4>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	4657      	mov	r7, sl
 80004e8:	464e      	mov	r6, r9
 80004ea:	4645      	mov	r5, r8
 80004ec:	46de      	mov	lr, fp
 80004ee:	b5e0      	push	{r5, r6, r7, lr}
 80004f0:	0004      	movs	r4, r0
 80004f2:	000d      	movs	r5, r1
 80004f4:	4692      	mov	sl, r2
 80004f6:	4699      	mov	r9, r3
 80004f8:	b083      	sub	sp, #12
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d830      	bhi.n	8000560 <__udivmoddi4+0x7c>
 80004fe:	d02d      	beq.n	800055c <__udivmoddi4+0x78>
 8000500:	4649      	mov	r1, r9
 8000502:	4650      	mov	r0, sl
 8000504:	f002 f878 	bl	80025f8 <__clzdi2>
 8000508:	0029      	movs	r1, r5
 800050a:	0006      	movs	r6, r0
 800050c:	0020      	movs	r0, r4
 800050e:	f002 f873 	bl	80025f8 <__clzdi2>
 8000512:	1a33      	subs	r3, r6, r0
 8000514:	4698      	mov	r8, r3
 8000516:	3b20      	subs	r3, #32
 8000518:	d434      	bmi.n	8000584 <__udivmoddi4+0xa0>
 800051a:	469b      	mov	fp, r3
 800051c:	4653      	mov	r3, sl
 800051e:	465a      	mov	r2, fp
 8000520:	4093      	lsls	r3, r2
 8000522:	4642      	mov	r2, r8
 8000524:	001f      	movs	r7, r3
 8000526:	4653      	mov	r3, sl
 8000528:	4093      	lsls	r3, r2
 800052a:	001e      	movs	r6, r3
 800052c:	42af      	cmp	r7, r5
 800052e:	d83b      	bhi.n	80005a8 <__udivmoddi4+0xc4>
 8000530:	42af      	cmp	r7, r5
 8000532:	d100      	bne.n	8000536 <__udivmoddi4+0x52>
 8000534:	e079      	b.n	800062a <__udivmoddi4+0x146>
 8000536:	465b      	mov	r3, fp
 8000538:	1ba4      	subs	r4, r4, r6
 800053a:	41bd      	sbcs	r5, r7
 800053c:	2b00      	cmp	r3, #0
 800053e:	da00      	bge.n	8000542 <__udivmoddi4+0x5e>
 8000540:	e076      	b.n	8000630 <__udivmoddi4+0x14c>
 8000542:	2200      	movs	r2, #0
 8000544:	2300      	movs	r3, #0
 8000546:	9200      	str	r2, [sp, #0]
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	2301      	movs	r3, #1
 800054c:	465a      	mov	r2, fp
 800054e:	4093      	lsls	r3, r2
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	2301      	movs	r3, #1
 8000554:	4642      	mov	r2, r8
 8000556:	4093      	lsls	r3, r2
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	e029      	b.n	80005b0 <__udivmoddi4+0xcc>
 800055c:	4282      	cmp	r2, r0
 800055e:	d9cf      	bls.n	8000500 <__udivmoddi4+0x1c>
 8000560:	2200      	movs	r2, #0
 8000562:	2300      	movs	r3, #0
 8000564:	9200      	str	r2, [sp, #0]
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <__udivmoddi4+0x8e>
 800056e:	601c      	str	r4, [r3, #0]
 8000570:	605d      	str	r5, [r3, #4]
 8000572:	9800      	ldr	r0, [sp, #0]
 8000574:	9901      	ldr	r1, [sp, #4]
 8000576:	b003      	add	sp, #12
 8000578:	bcf0      	pop	{r4, r5, r6, r7}
 800057a:	46bb      	mov	fp, r7
 800057c:	46b2      	mov	sl, r6
 800057e:	46a9      	mov	r9, r5
 8000580:	46a0      	mov	r8, r4
 8000582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000584:	4642      	mov	r2, r8
 8000586:	469b      	mov	fp, r3
 8000588:	2320      	movs	r3, #32
 800058a:	1a9b      	subs	r3, r3, r2
 800058c:	4652      	mov	r2, sl
 800058e:	40da      	lsrs	r2, r3
 8000590:	4641      	mov	r1, r8
 8000592:	0013      	movs	r3, r2
 8000594:	464a      	mov	r2, r9
 8000596:	408a      	lsls	r2, r1
 8000598:	0017      	movs	r7, r2
 800059a:	4642      	mov	r2, r8
 800059c:	431f      	orrs	r7, r3
 800059e:	4653      	mov	r3, sl
 80005a0:	4093      	lsls	r3, r2
 80005a2:	001e      	movs	r6, r3
 80005a4:	42af      	cmp	r7, r5
 80005a6:	d9c3      	bls.n	8000530 <__udivmoddi4+0x4c>
 80005a8:	2200      	movs	r2, #0
 80005aa:	2300      	movs	r3, #0
 80005ac:	9200      	str	r2, [sp, #0]
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	4643      	mov	r3, r8
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d0d8      	beq.n	8000568 <__udivmoddi4+0x84>
 80005b6:	07fb      	lsls	r3, r7, #31
 80005b8:	0872      	lsrs	r2, r6, #1
 80005ba:	431a      	orrs	r2, r3
 80005bc:	4646      	mov	r6, r8
 80005be:	087b      	lsrs	r3, r7, #1
 80005c0:	e00e      	b.n	80005e0 <__udivmoddi4+0xfc>
 80005c2:	42ab      	cmp	r3, r5
 80005c4:	d101      	bne.n	80005ca <__udivmoddi4+0xe6>
 80005c6:	42a2      	cmp	r2, r4
 80005c8:	d80c      	bhi.n	80005e4 <__udivmoddi4+0x100>
 80005ca:	1aa4      	subs	r4, r4, r2
 80005cc:	419d      	sbcs	r5, r3
 80005ce:	2001      	movs	r0, #1
 80005d0:	1924      	adds	r4, r4, r4
 80005d2:	416d      	adcs	r5, r5
 80005d4:	2100      	movs	r1, #0
 80005d6:	3e01      	subs	r6, #1
 80005d8:	1824      	adds	r4, r4, r0
 80005da:	414d      	adcs	r5, r1
 80005dc:	2e00      	cmp	r6, #0
 80005de:	d006      	beq.n	80005ee <__udivmoddi4+0x10a>
 80005e0:	42ab      	cmp	r3, r5
 80005e2:	d9ee      	bls.n	80005c2 <__udivmoddi4+0xde>
 80005e4:	3e01      	subs	r6, #1
 80005e6:	1924      	adds	r4, r4, r4
 80005e8:	416d      	adcs	r5, r5
 80005ea:	2e00      	cmp	r6, #0
 80005ec:	d1f8      	bne.n	80005e0 <__udivmoddi4+0xfc>
 80005ee:	9800      	ldr	r0, [sp, #0]
 80005f0:	9901      	ldr	r1, [sp, #4]
 80005f2:	465b      	mov	r3, fp
 80005f4:	1900      	adds	r0, r0, r4
 80005f6:	4169      	adcs	r1, r5
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	db24      	blt.n	8000646 <__udivmoddi4+0x162>
 80005fc:	002b      	movs	r3, r5
 80005fe:	465a      	mov	r2, fp
 8000600:	4644      	mov	r4, r8
 8000602:	40d3      	lsrs	r3, r2
 8000604:	002a      	movs	r2, r5
 8000606:	40e2      	lsrs	r2, r4
 8000608:	001c      	movs	r4, r3
 800060a:	465b      	mov	r3, fp
 800060c:	0015      	movs	r5, r2
 800060e:	2b00      	cmp	r3, #0
 8000610:	db2a      	blt.n	8000668 <__udivmoddi4+0x184>
 8000612:	0026      	movs	r6, r4
 8000614:	409e      	lsls	r6, r3
 8000616:	0033      	movs	r3, r6
 8000618:	0026      	movs	r6, r4
 800061a:	4647      	mov	r7, r8
 800061c:	40be      	lsls	r6, r7
 800061e:	0032      	movs	r2, r6
 8000620:	1a80      	subs	r0, r0, r2
 8000622:	4199      	sbcs	r1, r3
 8000624:	9000      	str	r0, [sp, #0]
 8000626:	9101      	str	r1, [sp, #4]
 8000628:	e79e      	b.n	8000568 <__udivmoddi4+0x84>
 800062a:	42a3      	cmp	r3, r4
 800062c:	d8bc      	bhi.n	80005a8 <__udivmoddi4+0xc4>
 800062e:	e782      	b.n	8000536 <__udivmoddi4+0x52>
 8000630:	4642      	mov	r2, r8
 8000632:	2320      	movs	r3, #32
 8000634:	2100      	movs	r1, #0
 8000636:	1a9b      	subs	r3, r3, r2
 8000638:	2200      	movs	r2, #0
 800063a:	9100      	str	r1, [sp, #0]
 800063c:	9201      	str	r2, [sp, #4]
 800063e:	2201      	movs	r2, #1
 8000640:	40da      	lsrs	r2, r3
 8000642:	9201      	str	r2, [sp, #4]
 8000644:	e785      	b.n	8000552 <__udivmoddi4+0x6e>
 8000646:	4642      	mov	r2, r8
 8000648:	2320      	movs	r3, #32
 800064a:	1a9b      	subs	r3, r3, r2
 800064c:	002a      	movs	r2, r5
 800064e:	4646      	mov	r6, r8
 8000650:	409a      	lsls	r2, r3
 8000652:	0023      	movs	r3, r4
 8000654:	40f3      	lsrs	r3, r6
 8000656:	4644      	mov	r4, r8
 8000658:	4313      	orrs	r3, r2
 800065a:	002a      	movs	r2, r5
 800065c:	40e2      	lsrs	r2, r4
 800065e:	001c      	movs	r4, r3
 8000660:	465b      	mov	r3, fp
 8000662:	0015      	movs	r5, r2
 8000664:	2b00      	cmp	r3, #0
 8000666:	dad4      	bge.n	8000612 <__udivmoddi4+0x12e>
 8000668:	4642      	mov	r2, r8
 800066a:	002f      	movs	r7, r5
 800066c:	2320      	movs	r3, #32
 800066e:	0026      	movs	r6, r4
 8000670:	4097      	lsls	r7, r2
 8000672:	1a9b      	subs	r3, r3, r2
 8000674:	40de      	lsrs	r6, r3
 8000676:	003b      	movs	r3, r7
 8000678:	4333      	orrs	r3, r6
 800067a:	e7cd      	b.n	8000618 <__udivmoddi4+0x134>

0800067c <__aeabi_dadd>:
 800067c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067e:	464f      	mov	r7, r9
 8000680:	4646      	mov	r6, r8
 8000682:	46d6      	mov	lr, sl
 8000684:	b5c0      	push	{r6, r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	9000      	str	r0, [sp, #0]
 800068a:	9101      	str	r1, [sp, #4]
 800068c:	030e      	lsls	r6, r1, #12
 800068e:	004c      	lsls	r4, r1, #1
 8000690:	0fcd      	lsrs	r5, r1, #31
 8000692:	0a71      	lsrs	r1, r6, #9
 8000694:	9e00      	ldr	r6, [sp, #0]
 8000696:	005f      	lsls	r7, r3, #1
 8000698:	0f76      	lsrs	r6, r6, #29
 800069a:	430e      	orrs	r6, r1
 800069c:	9900      	ldr	r1, [sp, #0]
 800069e:	9200      	str	r2, [sp, #0]
 80006a0:	9301      	str	r3, [sp, #4]
 80006a2:	00c9      	lsls	r1, r1, #3
 80006a4:	4689      	mov	r9, r1
 80006a6:	0319      	lsls	r1, r3, #12
 80006a8:	0d7b      	lsrs	r3, r7, #21
 80006aa:	4698      	mov	r8, r3
 80006ac:	9b01      	ldr	r3, [sp, #4]
 80006ae:	0a49      	lsrs	r1, r1, #9
 80006b0:	0fdb      	lsrs	r3, r3, #31
 80006b2:	469c      	mov	ip, r3
 80006b4:	9b00      	ldr	r3, [sp, #0]
 80006b6:	9a00      	ldr	r2, [sp, #0]
 80006b8:	0f5b      	lsrs	r3, r3, #29
 80006ba:	430b      	orrs	r3, r1
 80006bc:	4641      	mov	r1, r8
 80006be:	0d64      	lsrs	r4, r4, #21
 80006c0:	00d2      	lsls	r2, r2, #3
 80006c2:	1a61      	subs	r1, r4, r1
 80006c4:	4565      	cmp	r5, ip
 80006c6:	d100      	bne.n	80006ca <__aeabi_dadd+0x4e>
 80006c8:	e0a6      	b.n	8000818 <__aeabi_dadd+0x19c>
 80006ca:	2900      	cmp	r1, #0
 80006cc:	dd72      	ble.n	80007b4 <__aeabi_dadd+0x138>
 80006ce:	4647      	mov	r7, r8
 80006d0:	2f00      	cmp	r7, #0
 80006d2:	d100      	bne.n	80006d6 <__aeabi_dadd+0x5a>
 80006d4:	e0dd      	b.n	8000892 <__aeabi_dadd+0x216>
 80006d6:	4fcc      	ldr	r7, [pc, #816]	@ (8000a08 <__aeabi_dadd+0x38c>)
 80006d8:	42bc      	cmp	r4, r7
 80006da:	d100      	bne.n	80006de <__aeabi_dadd+0x62>
 80006dc:	e19a      	b.n	8000a14 <__aeabi_dadd+0x398>
 80006de:	2701      	movs	r7, #1
 80006e0:	2938      	cmp	r1, #56	@ 0x38
 80006e2:	dc17      	bgt.n	8000714 <__aeabi_dadd+0x98>
 80006e4:	2780      	movs	r7, #128	@ 0x80
 80006e6:	043f      	lsls	r7, r7, #16
 80006e8:	433b      	orrs	r3, r7
 80006ea:	291f      	cmp	r1, #31
 80006ec:	dd00      	ble.n	80006f0 <__aeabi_dadd+0x74>
 80006ee:	e1dd      	b.n	8000aac <__aeabi_dadd+0x430>
 80006f0:	2720      	movs	r7, #32
 80006f2:	1a78      	subs	r0, r7, r1
 80006f4:	001f      	movs	r7, r3
 80006f6:	4087      	lsls	r7, r0
 80006f8:	46ba      	mov	sl, r7
 80006fa:	0017      	movs	r7, r2
 80006fc:	40cf      	lsrs	r7, r1
 80006fe:	4684      	mov	ip, r0
 8000700:	0038      	movs	r0, r7
 8000702:	4657      	mov	r7, sl
 8000704:	4307      	orrs	r7, r0
 8000706:	4660      	mov	r0, ip
 8000708:	4082      	lsls	r2, r0
 800070a:	40cb      	lsrs	r3, r1
 800070c:	1e50      	subs	r0, r2, #1
 800070e:	4182      	sbcs	r2, r0
 8000710:	1af6      	subs	r6, r6, r3
 8000712:	4317      	orrs	r7, r2
 8000714:	464b      	mov	r3, r9
 8000716:	1bdf      	subs	r7, r3, r7
 8000718:	45b9      	cmp	r9, r7
 800071a:	4180      	sbcs	r0, r0
 800071c:	4240      	negs	r0, r0
 800071e:	1a36      	subs	r6, r6, r0
 8000720:	0233      	lsls	r3, r6, #8
 8000722:	d400      	bmi.n	8000726 <__aeabi_dadd+0xaa>
 8000724:	e0ff      	b.n	8000926 <__aeabi_dadd+0x2aa>
 8000726:	0276      	lsls	r6, r6, #9
 8000728:	0a76      	lsrs	r6, r6, #9
 800072a:	2e00      	cmp	r6, #0
 800072c:	d100      	bne.n	8000730 <__aeabi_dadd+0xb4>
 800072e:	e13c      	b.n	80009aa <__aeabi_dadd+0x32e>
 8000730:	0030      	movs	r0, r6
 8000732:	f001 ff43 	bl	80025bc <__clzsi2>
 8000736:	0003      	movs	r3, r0
 8000738:	3b08      	subs	r3, #8
 800073a:	2120      	movs	r1, #32
 800073c:	0038      	movs	r0, r7
 800073e:	1aca      	subs	r2, r1, r3
 8000740:	40d0      	lsrs	r0, r2
 8000742:	409e      	lsls	r6, r3
 8000744:	0002      	movs	r2, r0
 8000746:	409f      	lsls	r7, r3
 8000748:	4332      	orrs	r2, r6
 800074a:	429c      	cmp	r4, r3
 800074c:	dd00      	ble.n	8000750 <__aeabi_dadd+0xd4>
 800074e:	e1a6      	b.n	8000a9e <__aeabi_dadd+0x422>
 8000750:	1b18      	subs	r0, r3, r4
 8000752:	3001      	adds	r0, #1
 8000754:	1a09      	subs	r1, r1, r0
 8000756:	003e      	movs	r6, r7
 8000758:	408f      	lsls	r7, r1
 800075a:	40c6      	lsrs	r6, r0
 800075c:	1e7b      	subs	r3, r7, #1
 800075e:	419f      	sbcs	r7, r3
 8000760:	0013      	movs	r3, r2
 8000762:	408b      	lsls	r3, r1
 8000764:	4337      	orrs	r7, r6
 8000766:	431f      	orrs	r7, r3
 8000768:	40c2      	lsrs	r2, r0
 800076a:	003b      	movs	r3, r7
 800076c:	0016      	movs	r6, r2
 800076e:	2400      	movs	r4, #0
 8000770:	4313      	orrs	r3, r2
 8000772:	d100      	bne.n	8000776 <__aeabi_dadd+0xfa>
 8000774:	e1df      	b.n	8000b36 <__aeabi_dadd+0x4ba>
 8000776:	077b      	lsls	r3, r7, #29
 8000778:	d100      	bne.n	800077c <__aeabi_dadd+0x100>
 800077a:	e332      	b.n	8000de2 <__aeabi_dadd+0x766>
 800077c:	230f      	movs	r3, #15
 800077e:	003a      	movs	r2, r7
 8000780:	403b      	ands	r3, r7
 8000782:	2b04      	cmp	r3, #4
 8000784:	d004      	beq.n	8000790 <__aeabi_dadd+0x114>
 8000786:	1d3a      	adds	r2, r7, #4
 8000788:	42ba      	cmp	r2, r7
 800078a:	41bf      	sbcs	r7, r7
 800078c:	427f      	negs	r7, r7
 800078e:	19f6      	adds	r6, r6, r7
 8000790:	0233      	lsls	r3, r6, #8
 8000792:	d400      	bmi.n	8000796 <__aeabi_dadd+0x11a>
 8000794:	e323      	b.n	8000dde <__aeabi_dadd+0x762>
 8000796:	4b9c      	ldr	r3, [pc, #624]	@ (8000a08 <__aeabi_dadd+0x38c>)
 8000798:	3401      	adds	r4, #1
 800079a:	429c      	cmp	r4, r3
 800079c:	d100      	bne.n	80007a0 <__aeabi_dadd+0x124>
 800079e:	e0b4      	b.n	800090a <__aeabi_dadd+0x28e>
 80007a0:	4b9a      	ldr	r3, [pc, #616]	@ (8000a0c <__aeabi_dadd+0x390>)
 80007a2:	0564      	lsls	r4, r4, #21
 80007a4:	401e      	ands	r6, r3
 80007a6:	0d64      	lsrs	r4, r4, #21
 80007a8:	0777      	lsls	r7, r6, #29
 80007aa:	08d2      	lsrs	r2, r2, #3
 80007ac:	0276      	lsls	r6, r6, #9
 80007ae:	4317      	orrs	r7, r2
 80007b0:	0b36      	lsrs	r6, r6, #12
 80007b2:	e0ac      	b.n	800090e <__aeabi_dadd+0x292>
 80007b4:	2900      	cmp	r1, #0
 80007b6:	d100      	bne.n	80007ba <__aeabi_dadd+0x13e>
 80007b8:	e07e      	b.n	80008b8 <__aeabi_dadd+0x23c>
 80007ba:	4641      	mov	r1, r8
 80007bc:	1b09      	subs	r1, r1, r4
 80007be:	2c00      	cmp	r4, #0
 80007c0:	d000      	beq.n	80007c4 <__aeabi_dadd+0x148>
 80007c2:	e160      	b.n	8000a86 <__aeabi_dadd+0x40a>
 80007c4:	0034      	movs	r4, r6
 80007c6:	4648      	mov	r0, r9
 80007c8:	4304      	orrs	r4, r0
 80007ca:	d100      	bne.n	80007ce <__aeabi_dadd+0x152>
 80007cc:	e1c9      	b.n	8000b62 <__aeabi_dadd+0x4e6>
 80007ce:	1e4c      	subs	r4, r1, #1
 80007d0:	2901      	cmp	r1, #1
 80007d2:	d100      	bne.n	80007d6 <__aeabi_dadd+0x15a>
 80007d4:	e22e      	b.n	8000c34 <__aeabi_dadd+0x5b8>
 80007d6:	4d8c      	ldr	r5, [pc, #560]	@ (8000a08 <__aeabi_dadd+0x38c>)
 80007d8:	42a9      	cmp	r1, r5
 80007da:	d100      	bne.n	80007de <__aeabi_dadd+0x162>
 80007dc:	e224      	b.n	8000c28 <__aeabi_dadd+0x5ac>
 80007de:	2701      	movs	r7, #1
 80007e0:	2c38      	cmp	r4, #56	@ 0x38
 80007e2:	dc11      	bgt.n	8000808 <__aeabi_dadd+0x18c>
 80007e4:	0021      	movs	r1, r4
 80007e6:	291f      	cmp	r1, #31
 80007e8:	dd00      	ble.n	80007ec <__aeabi_dadd+0x170>
 80007ea:	e20b      	b.n	8000c04 <__aeabi_dadd+0x588>
 80007ec:	2420      	movs	r4, #32
 80007ee:	0037      	movs	r7, r6
 80007f0:	4648      	mov	r0, r9
 80007f2:	1a64      	subs	r4, r4, r1
 80007f4:	40a7      	lsls	r7, r4
 80007f6:	40c8      	lsrs	r0, r1
 80007f8:	4307      	orrs	r7, r0
 80007fa:	4648      	mov	r0, r9
 80007fc:	40a0      	lsls	r0, r4
 80007fe:	40ce      	lsrs	r6, r1
 8000800:	1e44      	subs	r4, r0, #1
 8000802:	41a0      	sbcs	r0, r4
 8000804:	1b9b      	subs	r3, r3, r6
 8000806:	4307      	orrs	r7, r0
 8000808:	1bd7      	subs	r7, r2, r7
 800080a:	42ba      	cmp	r2, r7
 800080c:	4192      	sbcs	r2, r2
 800080e:	4252      	negs	r2, r2
 8000810:	4665      	mov	r5, ip
 8000812:	4644      	mov	r4, r8
 8000814:	1a9e      	subs	r6, r3, r2
 8000816:	e783      	b.n	8000720 <__aeabi_dadd+0xa4>
 8000818:	2900      	cmp	r1, #0
 800081a:	dc00      	bgt.n	800081e <__aeabi_dadd+0x1a2>
 800081c:	e09c      	b.n	8000958 <__aeabi_dadd+0x2dc>
 800081e:	4647      	mov	r7, r8
 8000820:	2f00      	cmp	r7, #0
 8000822:	d167      	bne.n	80008f4 <__aeabi_dadd+0x278>
 8000824:	001f      	movs	r7, r3
 8000826:	4317      	orrs	r7, r2
 8000828:	d100      	bne.n	800082c <__aeabi_dadd+0x1b0>
 800082a:	e0e4      	b.n	80009f6 <__aeabi_dadd+0x37a>
 800082c:	1e48      	subs	r0, r1, #1
 800082e:	2901      	cmp	r1, #1
 8000830:	d100      	bne.n	8000834 <__aeabi_dadd+0x1b8>
 8000832:	e19b      	b.n	8000b6c <__aeabi_dadd+0x4f0>
 8000834:	4f74      	ldr	r7, [pc, #464]	@ (8000a08 <__aeabi_dadd+0x38c>)
 8000836:	42b9      	cmp	r1, r7
 8000838:	d100      	bne.n	800083c <__aeabi_dadd+0x1c0>
 800083a:	e0eb      	b.n	8000a14 <__aeabi_dadd+0x398>
 800083c:	2701      	movs	r7, #1
 800083e:	0001      	movs	r1, r0
 8000840:	2838      	cmp	r0, #56	@ 0x38
 8000842:	dc11      	bgt.n	8000868 <__aeabi_dadd+0x1ec>
 8000844:	291f      	cmp	r1, #31
 8000846:	dd00      	ble.n	800084a <__aeabi_dadd+0x1ce>
 8000848:	e1c7      	b.n	8000bda <__aeabi_dadd+0x55e>
 800084a:	2720      	movs	r7, #32
 800084c:	1a78      	subs	r0, r7, r1
 800084e:	001f      	movs	r7, r3
 8000850:	4684      	mov	ip, r0
 8000852:	4087      	lsls	r7, r0
 8000854:	0010      	movs	r0, r2
 8000856:	40c8      	lsrs	r0, r1
 8000858:	4307      	orrs	r7, r0
 800085a:	4660      	mov	r0, ip
 800085c:	4082      	lsls	r2, r0
 800085e:	40cb      	lsrs	r3, r1
 8000860:	1e50      	subs	r0, r2, #1
 8000862:	4182      	sbcs	r2, r0
 8000864:	18f6      	adds	r6, r6, r3
 8000866:	4317      	orrs	r7, r2
 8000868:	444f      	add	r7, r9
 800086a:	454f      	cmp	r7, r9
 800086c:	4180      	sbcs	r0, r0
 800086e:	4240      	negs	r0, r0
 8000870:	1836      	adds	r6, r6, r0
 8000872:	0233      	lsls	r3, r6, #8
 8000874:	d557      	bpl.n	8000926 <__aeabi_dadd+0x2aa>
 8000876:	4b64      	ldr	r3, [pc, #400]	@ (8000a08 <__aeabi_dadd+0x38c>)
 8000878:	3401      	adds	r4, #1
 800087a:	429c      	cmp	r4, r3
 800087c:	d045      	beq.n	800090a <__aeabi_dadd+0x28e>
 800087e:	2101      	movs	r1, #1
 8000880:	4b62      	ldr	r3, [pc, #392]	@ (8000a0c <__aeabi_dadd+0x390>)
 8000882:	087a      	lsrs	r2, r7, #1
 8000884:	401e      	ands	r6, r3
 8000886:	4039      	ands	r1, r7
 8000888:	430a      	orrs	r2, r1
 800088a:	07f7      	lsls	r7, r6, #31
 800088c:	4317      	orrs	r7, r2
 800088e:	0876      	lsrs	r6, r6, #1
 8000890:	e771      	b.n	8000776 <__aeabi_dadd+0xfa>
 8000892:	001f      	movs	r7, r3
 8000894:	4317      	orrs	r7, r2
 8000896:	d100      	bne.n	800089a <__aeabi_dadd+0x21e>
 8000898:	e0ad      	b.n	80009f6 <__aeabi_dadd+0x37a>
 800089a:	1e4f      	subs	r7, r1, #1
 800089c:	46bc      	mov	ip, r7
 800089e:	2901      	cmp	r1, #1
 80008a0:	d100      	bne.n	80008a4 <__aeabi_dadd+0x228>
 80008a2:	e182      	b.n	8000baa <__aeabi_dadd+0x52e>
 80008a4:	4f58      	ldr	r7, [pc, #352]	@ (8000a08 <__aeabi_dadd+0x38c>)
 80008a6:	42b9      	cmp	r1, r7
 80008a8:	d100      	bne.n	80008ac <__aeabi_dadd+0x230>
 80008aa:	e190      	b.n	8000bce <__aeabi_dadd+0x552>
 80008ac:	4661      	mov	r1, ip
 80008ae:	2701      	movs	r7, #1
 80008b0:	2938      	cmp	r1, #56	@ 0x38
 80008b2:	dd00      	ble.n	80008b6 <__aeabi_dadd+0x23a>
 80008b4:	e72e      	b.n	8000714 <__aeabi_dadd+0x98>
 80008b6:	e718      	b.n	80006ea <__aeabi_dadd+0x6e>
 80008b8:	4f55      	ldr	r7, [pc, #340]	@ (8000a10 <__aeabi_dadd+0x394>)
 80008ba:	1c61      	adds	r1, r4, #1
 80008bc:	4239      	tst	r1, r7
 80008be:	d000      	beq.n	80008c2 <__aeabi_dadd+0x246>
 80008c0:	e0d0      	b.n	8000a64 <__aeabi_dadd+0x3e8>
 80008c2:	0031      	movs	r1, r6
 80008c4:	4648      	mov	r0, r9
 80008c6:	001f      	movs	r7, r3
 80008c8:	4301      	orrs	r1, r0
 80008ca:	4317      	orrs	r7, r2
 80008cc:	2c00      	cmp	r4, #0
 80008ce:	d000      	beq.n	80008d2 <__aeabi_dadd+0x256>
 80008d0:	e13d      	b.n	8000b4e <__aeabi_dadd+0x4d2>
 80008d2:	2900      	cmp	r1, #0
 80008d4:	d100      	bne.n	80008d8 <__aeabi_dadd+0x25c>
 80008d6:	e1bc      	b.n	8000c52 <__aeabi_dadd+0x5d6>
 80008d8:	2f00      	cmp	r7, #0
 80008da:	d000      	beq.n	80008de <__aeabi_dadd+0x262>
 80008dc:	e1bf      	b.n	8000c5e <__aeabi_dadd+0x5e2>
 80008de:	464b      	mov	r3, r9
 80008e0:	2100      	movs	r1, #0
 80008e2:	08d8      	lsrs	r0, r3, #3
 80008e4:	0777      	lsls	r7, r6, #29
 80008e6:	4307      	orrs	r7, r0
 80008e8:	08f0      	lsrs	r0, r6, #3
 80008ea:	0306      	lsls	r6, r0, #12
 80008ec:	054c      	lsls	r4, r1, #21
 80008ee:	0b36      	lsrs	r6, r6, #12
 80008f0:	0d64      	lsrs	r4, r4, #21
 80008f2:	e00c      	b.n	800090e <__aeabi_dadd+0x292>
 80008f4:	4f44      	ldr	r7, [pc, #272]	@ (8000a08 <__aeabi_dadd+0x38c>)
 80008f6:	42bc      	cmp	r4, r7
 80008f8:	d100      	bne.n	80008fc <__aeabi_dadd+0x280>
 80008fa:	e08b      	b.n	8000a14 <__aeabi_dadd+0x398>
 80008fc:	2701      	movs	r7, #1
 80008fe:	2938      	cmp	r1, #56	@ 0x38
 8000900:	dcb2      	bgt.n	8000868 <__aeabi_dadd+0x1ec>
 8000902:	2780      	movs	r7, #128	@ 0x80
 8000904:	043f      	lsls	r7, r7, #16
 8000906:	433b      	orrs	r3, r7
 8000908:	e79c      	b.n	8000844 <__aeabi_dadd+0x1c8>
 800090a:	2600      	movs	r6, #0
 800090c:	2700      	movs	r7, #0
 800090e:	0524      	lsls	r4, r4, #20
 8000910:	4334      	orrs	r4, r6
 8000912:	07ed      	lsls	r5, r5, #31
 8000914:	432c      	orrs	r4, r5
 8000916:	0038      	movs	r0, r7
 8000918:	0021      	movs	r1, r4
 800091a:	b002      	add	sp, #8
 800091c:	bce0      	pop	{r5, r6, r7}
 800091e:	46ba      	mov	sl, r7
 8000920:	46b1      	mov	r9, r6
 8000922:	46a8      	mov	r8, r5
 8000924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000926:	077b      	lsls	r3, r7, #29
 8000928:	d004      	beq.n	8000934 <__aeabi_dadd+0x2b8>
 800092a:	230f      	movs	r3, #15
 800092c:	403b      	ands	r3, r7
 800092e:	2b04      	cmp	r3, #4
 8000930:	d000      	beq.n	8000934 <__aeabi_dadd+0x2b8>
 8000932:	e728      	b.n	8000786 <__aeabi_dadd+0x10a>
 8000934:	08f8      	lsrs	r0, r7, #3
 8000936:	4b34      	ldr	r3, [pc, #208]	@ (8000a08 <__aeabi_dadd+0x38c>)
 8000938:	0777      	lsls	r7, r6, #29
 800093a:	4307      	orrs	r7, r0
 800093c:	08f0      	lsrs	r0, r6, #3
 800093e:	429c      	cmp	r4, r3
 8000940:	d000      	beq.n	8000944 <__aeabi_dadd+0x2c8>
 8000942:	e24a      	b.n	8000dda <__aeabi_dadd+0x75e>
 8000944:	003b      	movs	r3, r7
 8000946:	4303      	orrs	r3, r0
 8000948:	d059      	beq.n	80009fe <__aeabi_dadd+0x382>
 800094a:	2680      	movs	r6, #128	@ 0x80
 800094c:	0336      	lsls	r6, r6, #12
 800094e:	4306      	orrs	r6, r0
 8000950:	0336      	lsls	r6, r6, #12
 8000952:	4c2d      	ldr	r4, [pc, #180]	@ (8000a08 <__aeabi_dadd+0x38c>)
 8000954:	0b36      	lsrs	r6, r6, #12
 8000956:	e7da      	b.n	800090e <__aeabi_dadd+0x292>
 8000958:	2900      	cmp	r1, #0
 800095a:	d061      	beq.n	8000a20 <__aeabi_dadd+0x3a4>
 800095c:	4641      	mov	r1, r8
 800095e:	1b09      	subs	r1, r1, r4
 8000960:	2c00      	cmp	r4, #0
 8000962:	d100      	bne.n	8000966 <__aeabi_dadd+0x2ea>
 8000964:	e0b9      	b.n	8000ada <__aeabi_dadd+0x45e>
 8000966:	4c28      	ldr	r4, [pc, #160]	@ (8000a08 <__aeabi_dadd+0x38c>)
 8000968:	45a0      	cmp	r8, r4
 800096a:	d100      	bne.n	800096e <__aeabi_dadd+0x2f2>
 800096c:	e1a5      	b.n	8000cba <__aeabi_dadd+0x63e>
 800096e:	2701      	movs	r7, #1
 8000970:	2938      	cmp	r1, #56	@ 0x38
 8000972:	dc13      	bgt.n	800099c <__aeabi_dadd+0x320>
 8000974:	2480      	movs	r4, #128	@ 0x80
 8000976:	0424      	lsls	r4, r4, #16
 8000978:	4326      	orrs	r6, r4
 800097a:	291f      	cmp	r1, #31
 800097c:	dd00      	ble.n	8000980 <__aeabi_dadd+0x304>
 800097e:	e1c8      	b.n	8000d12 <__aeabi_dadd+0x696>
 8000980:	2420      	movs	r4, #32
 8000982:	0037      	movs	r7, r6
 8000984:	4648      	mov	r0, r9
 8000986:	1a64      	subs	r4, r4, r1
 8000988:	40a7      	lsls	r7, r4
 800098a:	40c8      	lsrs	r0, r1
 800098c:	4307      	orrs	r7, r0
 800098e:	4648      	mov	r0, r9
 8000990:	40a0      	lsls	r0, r4
 8000992:	40ce      	lsrs	r6, r1
 8000994:	1e44      	subs	r4, r0, #1
 8000996:	41a0      	sbcs	r0, r4
 8000998:	199b      	adds	r3, r3, r6
 800099a:	4307      	orrs	r7, r0
 800099c:	18bf      	adds	r7, r7, r2
 800099e:	4297      	cmp	r7, r2
 80009a0:	4192      	sbcs	r2, r2
 80009a2:	4252      	negs	r2, r2
 80009a4:	4644      	mov	r4, r8
 80009a6:	18d6      	adds	r6, r2, r3
 80009a8:	e763      	b.n	8000872 <__aeabi_dadd+0x1f6>
 80009aa:	0038      	movs	r0, r7
 80009ac:	f001 fe06 	bl	80025bc <__clzsi2>
 80009b0:	0003      	movs	r3, r0
 80009b2:	3318      	adds	r3, #24
 80009b4:	2b1f      	cmp	r3, #31
 80009b6:	dc00      	bgt.n	80009ba <__aeabi_dadd+0x33e>
 80009b8:	e6bf      	b.n	800073a <__aeabi_dadd+0xbe>
 80009ba:	003a      	movs	r2, r7
 80009bc:	3808      	subs	r0, #8
 80009be:	4082      	lsls	r2, r0
 80009c0:	429c      	cmp	r4, r3
 80009c2:	dd00      	ble.n	80009c6 <__aeabi_dadd+0x34a>
 80009c4:	e083      	b.n	8000ace <__aeabi_dadd+0x452>
 80009c6:	1b1b      	subs	r3, r3, r4
 80009c8:	1c58      	adds	r0, r3, #1
 80009ca:	281f      	cmp	r0, #31
 80009cc:	dc00      	bgt.n	80009d0 <__aeabi_dadd+0x354>
 80009ce:	e1b4      	b.n	8000d3a <__aeabi_dadd+0x6be>
 80009d0:	0017      	movs	r7, r2
 80009d2:	3b1f      	subs	r3, #31
 80009d4:	40df      	lsrs	r7, r3
 80009d6:	2820      	cmp	r0, #32
 80009d8:	d005      	beq.n	80009e6 <__aeabi_dadd+0x36a>
 80009da:	2340      	movs	r3, #64	@ 0x40
 80009dc:	1a1b      	subs	r3, r3, r0
 80009de:	409a      	lsls	r2, r3
 80009e0:	1e53      	subs	r3, r2, #1
 80009e2:	419a      	sbcs	r2, r3
 80009e4:	4317      	orrs	r7, r2
 80009e6:	2400      	movs	r4, #0
 80009e8:	2f00      	cmp	r7, #0
 80009ea:	d00a      	beq.n	8000a02 <__aeabi_dadd+0x386>
 80009ec:	077b      	lsls	r3, r7, #29
 80009ee:	d000      	beq.n	80009f2 <__aeabi_dadd+0x376>
 80009f0:	e6c4      	b.n	800077c <__aeabi_dadd+0x100>
 80009f2:	0026      	movs	r6, r4
 80009f4:	e79e      	b.n	8000934 <__aeabi_dadd+0x2b8>
 80009f6:	464b      	mov	r3, r9
 80009f8:	000c      	movs	r4, r1
 80009fa:	08d8      	lsrs	r0, r3, #3
 80009fc:	e79b      	b.n	8000936 <__aeabi_dadd+0x2ba>
 80009fe:	2700      	movs	r7, #0
 8000a00:	4c01      	ldr	r4, [pc, #4]	@ (8000a08 <__aeabi_dadd+0x38c>)
 8000a02:	2600      	movs	r6, #0
 8000a04:	e783      	b.n	800090e <__aeabi_dadd+0x292>
 8000a06:	46c0      	nop			@ (mov r8, r8)
 8000a08:	000007ff 	.word	0x000007ff
 8000a0c:	ff7fffff 	.word	0xff7fffff
 8000a10:	000007fe 	.word	0x000007fe
 8000a14:	464b      	mov	r3, r9
 8000a16:	0777      	lsls	r7, r6, #29
 8000a18:	08d8      	lsrs	r0, r3, #3
 8000a1a:	4307      	orrs	r7, r0
 8000a1c:	08f0      	lsrs	r0, r6, #3
 8000a1e:	e791      	b.n	8000944 <__aeabi_dadd+0x2c8>
 8000a20:	4fcd      	ldr	r7, [pc, #820]	@ (8000d58 <__aeabi_dadd+0x6dc>)
 8000a22:	1c61      	adds	r1, r4, #1
 8000a24:	4239      	tst	r1, r7
 8000a26:	d16b      	bne.n	8000b00 <__aeabi_dadd+0x484>
 8000a28:	0031      	movs	r1, r6
 8000a2a:	4648      	mov	r0, r9
 8000a2c:	4301      	orrs	r1, r0
 8000a2e:	2c00      	cmp	r4, #0
 8000a30:	d000      	beq.n	8000a34 <__aeabi_dadd+0x3b8>
 8000a32:	e14b      	b.n	8000ccc <__aeabi_dadd+0x650>
 8000a34:	001f      	movs	r7, r3
 8000a36:	4317      	orrs	r7, r2
 8000a38:	2900      	cmp	r1, #0
 8000a3a:	d100      	bne.n	8000a3e <__aeabi_dadd+0x3c2>
 8000a3c:	e181      	b.n	8000d42 <__aeabi_dadd+0x6c6>
 8000a3e:	2f00      	cmp	r7, #0
 8000a40:	d100      	bne.n	8000a44 <__aeabi_dadd+0x3c8>
 8000a42:	e74c      	b.n	80008de <__aeabi_dadd+0x262>
 8000a44:	444a      	add	r2, r9
 8000a46:	454a      	cmp	r2, r9
 8000a48:	4180      	sbcs	r0, r0
 8000a4a:	18f6      	adds	r6, r6, r3
 8000a4c:	4240      	negs	r0, r0
 8000a4e:	1836      	adds	r6, r6, r0
 8000a50:	0233      	lsls	r3, r6, #8
 8000a52:	d500      	bpl.n	8000a56 <__aeabi_dadd+0x3da>
 8000a54:	e1b0      	b.n	8000db8 <__aeabi_dadd+0x73c>
 8000a56:	0017      	movs	r7, r2
 8000a58:	4691      	mov	r9, r2
 8000a5a:	4337      	orrs	r7, r6
 8000a5c:	d000      	beq.n	8000a60 <__aeabi_dadd+0x3e4>
 8000a5e:	e73e      	b.n	80008de <__aeabi_dadd+0x262>
 8000a60:	2600      	movs	r6, #0
 8000a62:	e754      	b.n	800090e <__aeabi_dadd+0x292>
 8000a64:	4649      	mov	r1, r9
 8000a66:	1a89      	subs	r1, r1, r2
 8000a68:	4688      	mov	r8, r1
 8000a6a:	45c1      	cmp	r9, r8
 8000a6c:	41bf      	sbcs	r7, r7
 8000a6e:	1af1      	subs	r1, r6, r3
 8000a70:	427f      	negs	r7, r7
 8000a72:	1bc9      	subs	r1, r1, r7
 8000a74:	020f      	lsls	r7, r1, #8
 8000a76:	d461      	bmi.n	8000b3c <__aeabi_dadd+0x4c0>
 8000a78:	4647      	mov	r7, r8
 8000a7a:	430f      	orrs	r7, r1
 8000a7c:	d100      	bne.n	8000a80 <__aeabi_dadd+0x404>
 8000a7e:	e0bd      	b.n	8000bfc <__aeabi_dadd+0x580>
 8000a80:	000e      	movs	r6, r1
 8000a82:	4647      	mov	r7, r8
 8000a84:	e651      	b.n	800072a <__aeabi_dadd+0xae>
 8000a86:	4cb5      	ldr	r4, [pc, #724]	@ (8000d5c <__aeabi_dadd+0x6e0>)
 8000a88:	45a0      	cmp	r8, r4
 8000a8a:	d100      	bne.n	8000a8e <__aeabi_dadd+0x412>
 8000a8c:	e100      	b.n	8000c90 <__aeabi_dadd+0x614>
 8000a8e:	2701      	movs	r7, #1
 8000a90:	2938      	cmp	r1, #56	@ 0x38
 8000a92:	dd00      	ble.n	8000a96 <__aeabi_dadd+0x41a>
 8000a94:	e6b8      	b.n	8000808 <__aeabi_dadd+0x18c>
 8000a96:	2480      	movs	r4, #128	@ 0x80
 8000a98:	0424      	lsls	r4, r4, #16
 8000a9a:	4326      	orrs	r6, r4
 8000a9c:	e6a3      	b.n	80007e6 <__aeabi_dadd+0x16a>
 8000a9e:	4eb0      	ldr	r6, [pc, #704]	@ (8000d60 <__aeabi_dadd+0x6e4>)
 8000aa0:	1ae4      	subs	r4, r4, r3
 8000aa2:	4016      	ands	r6, r2
 8000aa4:	077b      	lsls	r3, r7, #29
 8000aa6:	d000      	beq.n	8000aaa <__aeabi_dadd+0x42e>
 8000aa8:	e73f      	b.n	800092a <__aeabi_dadd+0x2ae>
 8000aaa:	e743      	b.n	8000934 <__aeabi_dadd+0x2b8>
 8000aac:	000f      	movs	r7, r1
 8000aae:	0018      	movs	r0, r3
 8000ab0:	3f20      	subs	r7, #32
 8000ab2:	40f8      	lsrs	r0, r7
 8000ab4:	4684      	mov	ip, r0
 8000ab6:	2920      	cmp	r1, #32
 8000ab8:	d003      	beq.n	8000ac2 <__aeabi_dadd+0x446>
 8000aba:	2740      	movs	r7, #64	@ 0x40
 8000abc:	1a79      	subs	r1, r7, r1
 8000abe:	408b      	lsls	r3, r1
 8000ac0:	431a      	orrs	r2, r3
 8000ac2:	1e53      	subs	r3, r2, #1
 8000ac4:	419a      	sbcs	r2, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	0017      	movs	r7, r2
 8000aca:	431f      	orrs	r7, r3
 8000acc:	e622      	b.n	8000714 <__aeabi_dadd+0x98>
 8000ace:	48a4      	ldr	r0, [pc, #656]	@ (8000d60 <__aeabi_dadd+0x6e4>)
 8000ad0:	1ae1      	subs	r1, r4, r3
 8000ad2:	4010      	ands	r0, r2
 8000ad4:	0747      	lsls	r7, r0, #29
 8000ad6:	08c0      	lsrs	r0, r0, #3
 8000ad8:	e707      	b.n	80008ea <__aeabi_dadd+0x26e>
 8000ada:	0034      	movs	r4, r6
 8000adc:	4648      	mov	r0, r9
 8000ade:	4304      	orrs	r4, r0
 8000ae0:	d100      	bne.n	8000ae4 <__aeabi_dadd+0x468>
 8000ae2:	e0fa      	b.n	8000cda <__aeabi_dadd+0x65e>
 8000ae4:	1e4c      	subs	r4, r1, #1
 8000ae6:	2901      	cmp	r1, #1
 8000ae8:	d100      	bne.n	8000aec <__aeabi_dadd+0x470>
 8000aea:	e0d7      	b.n	8000c9c <__aeabi_dadd+0x620>
 8000aec:	4f9b      	ldr	r7, [pc, #620]	@ (8000d5c <__aeabi_dadd+0x6e0>)
 8000aee:	42b9      	cmp	r1, r7
 8000af0:	d100      	bne.n	8000af4 <__aeabi_dadd+0x478>
 8000af2:	e0e2      	b.n	8000cba <__aeabi_dadd+0x63e>
 8000af4:	2701      	movs	r7, #1
 8000af6:	2c38      	cmp	r4, #56	@ 0x38
 8000af8:	dd00      	ble.n	8000afc <__aeabi_dadd+0x480>
 8000afa:	e74f      	b.n	800099c <__aeabi_dadd+0x320>
 8000afc:	0021      	movs	r1, r4
 8000afe:	e73c      	b.n	800097a <__aeabi_dadd+0x2fe>
 8000b00:	4c96      	ldr	r4, [pc, #600]	@ (8000d5c <__aeabi_dadd+0x6e0>)
 8000b02:	42a1      	cmp	r1, r4
 8000b04:	d100      	bne.n	8000b08 <__aeabi_dadd+0x48c>
 8000b06:	e0dd      	b.n	8000cc4 <__aeabi_dadd+0x648>
 8000b08:	444a      	add	r2, r9
 8000b0a:	454a      	cmp	r2, r9
 8000b0c:	4180      	sbcs	r0, r0
 8000b0e:	18f3      	adds	r3, r6, r3
 8000b10:	4240      	negs	r0, r0
 8000b12:	1818      	adds	r0, r3, r0
 8000b14:	07c7      	lsls	r7, r0, #31
 8000b16:	0852      	lsrs	r2, r2, #1
 8000b18:	4317      	orrs	r7, r2
 8000b1a:	0846      	lsrs	r6, r0, #1
 8000b1c:	0752      	lsls	r2, r2, #29
 8000b1e:	d005      	beq.n	8000b2c <__aeabi_dadd+0x4b0>
 8000b20:	220f      	movs	r2, #15
 8000b22:	000c      	movs	r4, r1
 8000b24:	403a      	ands	r2, r7
 8000b26:	2a04      	cmp	r2, #4
 8000b28:	d000      	beq.n	8000b2c <__aeabi_dadd+0x4b0>
 8000b2a:	e62c      	b.n	8000786 <__aeabi_dadd+0x10a>
 8000b2c:	0776      	lsls	r6, r6, #29
 8000b2e:	08ff      	lsrs	r7, r7, #3
 8000b30:	4337      	orrs	r7, r6
 8000b32:	0900      	lsrs	r0, r0, #4
 8000b34:	e6d9      	b.n	80008ea <__aeabi_dadd+0x26e>
 8000b36:	2700      	movs	r7, #0
 8000b38:	2600      	movs	r6, #0
 8000b3a:	e6e8      	b.n	800090e <__aeabi_dadd+0x292>
 8000b3c:	4649      	mov	r1, r9
 8000b3e:	1a57      	subs	r7, r2, r1
 8000b40:	42ba      	cmp	r2, r7
 8000b42:	4192      	sbcs	r2, r2
 8000b44:	1b9e      	subs	r6, r3, r6
 8000b46:	4252      	negs	r2, r2
 8000b48:	4665      	mov	r5, ip
 8000b4a:	1ab6      	subs	r6, r6, r2
 8000b4c:	e5ed      	b.n	800072a <__aeabi_dadd+0xae>
 8000b4e:	2900      	cmp	r1, #0
 8000b50:	d000      	beq.n	8000b54 <__aeabi_dadd+0x4d8>
 8000b52:	e0c6      	b.n	8000ce2 <__aeabi_dadd+0x666>
 8000b54:	2f00      	cmp	r7, #0
 8000b56:	d167      	bne.n	8000c28 <__aeabi_dadd+0x5ac>
 8000b58:	2680      	movs	r6, #128	@ 0x80
 8000b5a:	2500      	movs	r5, #0
 8000b5c:	4c7f      	ldr	r4, [pc, #508]	@ (8000d5c <__aeabi_dadd+0x6e0>)
 8000b5e:	0336      	lsls	r6, r6, #12
 8000b60:	e6d5      	b.n	800090e <__aeabi_dadd+0x292>
 8000b62:	4665      	mov	r5, ip
 8000b64:	000c      	movs	r4, r1
 8000b66:	001e      	movs	r6, r3
 8000b68:	08d0      	lsrs	r0, r2, #3
 8000b6a:	e6e4      	b.n	8000936 <__aeabi_dadd+0x2ba>
 8000b6c:	444a      	add	r2, r9
 8000b6e:	454a      	cmp	r2, r9
 8000b70:	4180      	sbcs	r0, r0
 8000b72:	18f3      	adds	r3, r6, r3
 8000b74:	4240      	negs	r0, r0
 8000b76:	1818      	adds	r0, r3, r0
 8000b78:	0011      	movs	r1, r2
 8000b7a:	0203      	lsls	r3, r0, #8
 8000b7c:	d400      	bmi.n	8000b80 <__aeabi_dadd+0x504>
 8000b7e:	e096      	b.n	8000cae <__aeabi_dadd+0x632>
 8000b80:	4b77      	ldr	r3, [pc, #476]	@ (8000d60 <__aeabi_dadd+0x6e4>)
 8000b82:	0849      	lsrs	r1, r1, #1
 8000b84:	4018      	ands	r0, r3
 8000b86:	07c3      	lsls	r3, r0, #31
 8000b88:	430b      	orrs	r3, r1
 8000b8a:	0844      	lsrs	r4, r0, #1
 8000b8c:	0749      	lsls	r1, r1, #29
 8000b8e:	d100      	bne.n	8000b92 <__aeabi_dadd+0x516>
 8000b90:	e129      	b.n	8000de6 <__aeabi_dadd+0x76a>
 8000b92:	220f      	movs	r2, #15
 8000b94:	401a      	ands	r2, r3
 8000b96:	2a04      	cmp	r2, #4
 8000b98:	d100      	bne.n	8000b9c <__aeabi_dadd+0x520>
 8000b9a:	e0ea      	b.n	8000d72 <__aeabi_dadd+0x6f6>
 8000b9c:	1d1f      	adds	r7, r3, #4
 8000b9e:	429f      	cmp	r7, r3
 8000ba0:	41b6      	sbcs	r6, r6
 8000ba2:	4276      	negs	r6, r6
 8000ba4:	1936      	adds	r6, r6, r4
 8000ba6:	2402      	movs	r4, #2
 8000ba8:	e6c4      	b.n	8000934 <__aeabi_dadd+0x2b8>
 8000baa:	4649      	mov	r1, r9
 8000bac:	1a8f      	subs	r7, r1, r2
 8000bae:	45b9      	cmp	r9, r7
 8000bb0:	4180      	sbcs	r0, r0
 8000bb2:	1af6      	subs	r6, r6, r3
 8000bb4:	4240      	negs	r0, r0
 8000bb6:	1a36      	subs	r6, r6, r0
 8000bb8:	0233      	lsls	r3, r6, #8
 8000bba:	d406      	bmi.n	8000bca <__aeabi_dadd+0x54e>
 8000bbc:	0773      	lsls	r3, r6, #29
 8000bbe:	08ff      	lsrs	r7, r7, #3
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	431f      	orrs	r7, r3
 8000bc4:	08f0      	lsrs	r0, r6, #3
 8000bc6:	e690      	b.n	80008ea <__aeabi_dadd+0x26e>
 8000bc8:	4665      	mov	r5, ip
 8000bca:	2401      	movs	r4, #1
 8000bcc:	e5ab      	b.n	8000726 <__aeabi_dadd+0xaa>
 8000bce:	464b      	mov	r3, r9
 8000bd0:	0777      	lsls	r7, r6, #29
 8000bd2:	08d8      	lsrs	r0, r3, #3
 8000bd4:	4307      	orrs	r7, r0
 8000bd6:	08f0      	lsrs	r0, r6, #3
 8000bd8:	e6b4      	b.n	8000944 <__aeabi_dadd+0x2c8>
 8000bda:	000f      	movs	r7, r1
 8000bdc:	0018      	movs	r0, r3
 8000bde:	3f20      	subs	r7, #32
 8000be0:	40f8      	lsrs	r0, r7
 8000be2:	4684      	mov	ip, r0
 8000be4:	2920      	cmp	r1, #32
 8000be6:	d003      	beq.n	8000bf0 <__aeabi_dadd+0x574>
 8000be8:	2740      	movs	r7, #64	@ 0x40
 8000bea:	1a79      	subs	r1, r7, r1
 8000bec:	408b      	lsls	r3, r1
 8000bee:	431a      	orrs	r2, r3
 8000bf0:	1e53      	subs	r3, r2, #1
 8000bf2:	419a      	sbcs	r2, r3
 8000bf4:	4663      	mov	r3, ip
 8000bf6:	0017      	movs	r7, r2
 8000bf8:	431f      	orrs	r7, r3
 8000bfa:	e635      	b.n	8000868 <__aeabi_dadd+0x1ec>
 8000bfc:	2500      	movs	r5, #0
 8000bfe:	2400      	movs	r4, #0
 8000c00:	2600      	movs	r6, #0
 8000c02:	e684      	b.n	800090e <__aeabi_dadd+0x292>
 8000c04:	000c      	movs	r4, r1
 8000c06:	0035      	movs	r5, r6
 8000c08:	3c20      	subs	r4, #32
 8000c0a:	40e5      	lsrs	r5, r4
 8000c0c:	2920      	cmp	r1, #32
 8000c0e:	d005      	beq.n	8000c1c <__aeabi_dadd+0x5a0>
 8000c10:	2440      	movs	r4, #64	@ 0x40
 8000c12:	1a61      	subs	r1, r4, r1
 8000c14:	408e      	lsls	r6, r1
 8000c16:	4649      	mov	r1, r9
 8000c18:	4331      	orrs	r1, r6
 8000c1a:	4689      	mov	r9, r1
 8000c1c:	4648      	mov	r0, r9
 8000c1e:	1e41      	subs	r1, r0, #1
 8000c20:	4188      	sbcs	r0, r1
 8000c22:	0007      	movs	r7, r0
 8000c24:	432f      	orrs	r7, r5
 8000c26:	e5ef      	b.n	8000808 <__aeabi_dadd+0x18c>
 8000c28:	08d2      	lsrs	r2, r2, #3
 8000c2a:	075f      	lsls	r7, r3, #29
 8000c2c:	4665      	mov	r5, ip
 8000c2e:	4317      	orrs	r7, r2
 8000c30:	08d8      	lsrs	r0, r3, #3
 8000c32:	e687      	b.n	8000944 <__aeabi_dadd+0x2c8>
 8000c34:	1a17      	subs	r7, r2, r0
 8000c36:	42ba      	cmp	r2, r7
 8000c38:	4192      	sbcs	r2, r2
 8000c3a:	1b9e      	subs	r6, r3, r6
 8000c3c:	4252      	negs	r2, r2
 8000c3e:	1ab6      	subs	r6, r6, r2
 8000c40:	0233      	lsls	r3, r6, #8
 8000c42:	d4c1      	bmi.n	8000bc8 <__aeabi_dadd+0x54c>
 8000c44:	0773      	lsls	r3, r6, #29
 8000c46:	08ff      	lsrs	r7, r7, #3
 8000c48:	4665      	mov	r5, ip
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	431f      	orrs	r7, r3
 8000c4e:	08f0      	lsrs	r0, r6, #3
 8000c50:	e64b      	b.n	80008ea <__aeabi_dadd+0x26e>
 8000c52:	2f00      	cmp	r7, #0
 8000c54:	d07b      	beq.n	8000d4e <__aeabi_dadd+0x6d2>
 8000c56:	4665      	mov	r5, ip
 8000c58:	001e      	movs	r6, r3
 8000c5a:	4691      	mov	r9, r2
 8000c5c:	e63f      	b.n	80008de <__aeabi_dadd+0x262>
 8000c5e:	1a81      	subs	r1, r0, r2
 8000c60:	4688      	mov	r8, r1
 8000c62:	45c1      	cmp	r9, r8
 8000c64:	41a4      	sbcs	r4, r4
 8000c66:	1af1      	subs	r1, r6, r3
 8000c68:	4264      	negs	r4, r4
 8000c6a:	1b09      	subs	r1, r1, r4
 8000c6c:	2480      	movs	r4, #128	@ 0x80
 8000c6e:	0424      	lsls	r4, r4, #16
 8000c70:	4221      	tst	r1, r4
 8000c72:	d077      	beq.n	8000d64 <__aeabi_dadd+0x6e8>
 8000c74:	1a10      	subs	r0, r2, r0
 8000c76:	4282      	cmp	r2, r0
 8000c78:	4192      	sbcs	r2, r2
 8000c7a:	0007      	movs	r7, r0
 8000c7c:	1b9e      	subs	r6, r3, r6
 8000c7e:	4252      	negs	r2, r2
 8000c80:	1ab6      	subs	r6, r6, r2
 8000c82:	4337      	orrs	r7, r6
 8000c84:	d000      	beq.n	8000c88 <__aeabi_dadd+0x60c>
 8000c86:	e0a0      	b.n	8000dca <__aeabi_dadd+0x74e>
 8000c88:	4665      	mov	r5, ip
 8000c8a:	2400      	movs	r4, #0
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e63e      	b.n	800090e <__aeabi_dadd+0x292>
 8000c90:	075f      	lsls	r7, r3, #29
 8000c92:	08d2      	lsrs	r2, r2, #3
 8000c94:	4665      	mov	r5, ip
 8000c96:	4317      	orrs	r7, r2
 8000c98:	08d8      	lsrs	r0, r3, #3
 8000c9a:	e653      	b.n	8000944 <__aeabi_dadd+0x2c8>
 8000c9c:	1881      	adds	r1, r0, r2
 8000c9e:	4291      	cmp	r1, r2
 8000ca0:	4192      	sbcs	r2, r2
 8000ca2:	18f0      	adds	r0, r6, r3
 8000ca4:	4252      	negs	r2, r2
 8000ca6:	1880      	adds	r0, r0, r2
 8000ca8:	0203      	lsls	r3, r0, #8
 8000caa:	d500      	bpl.n	8000cae <__aeabi_dadd+0x632>
 8000cac:	e768      	b.n	8000b80 <__aeabi_dadd+0x504>
 8000cae:	0747      	lsls	r7, r0, #29
 8000cb0:	08c9      	lsrs	r1, r1, #3
 8000cb2:	430f      	orrs	r7, r1
 8000cb4:	08c0      	lsrs	r0, r0, #3
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	e617      	b.n	80008ea <__aeabi_dadd+0x26e>
 8000cba:	08d2      	lsrs	r2, r2, #3
 8000cbc:	075f      	lsls	r7, r3, #29
 8000cbe:	4317      	orrs	r7, r2
 8000cc0:	08d8      	lsrs	r0, r3, #3
 8000cc2:	e63f      	b.n	8000944 <__aeabi_dadd+0x2c8>
 8000cc4:	000c      	movs	r4, r1
 8000cc6:	2600      	movs	r6, #0
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e620      	b.n	800090e <__aeabi_dadd+0x292>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	d156      	bne.n	8000d7e <__aeabi_dadd+0x702>
 8000cd0:	075f      	lsls	r7, r3, #29
 8000cd2:	08d2      	lsrs	r2, r2, #3
 8000cd4:	4317      	orrs	r7, r2
 8000cd6:	08d8      	lsrs	r0, r3, #3
 8000cd8:	e634      	b.n	8000944 <__aeabi_dadd+0x2c8>
 8000cda:	000c      	movs	r4, r1
 8000cdc:	001e      	movs	r6, r3
 8000cde:	08d0      	lsrs	r0, r2, #3
 8000ce0:	e629      	b.n	8000936 <__aeabi_dadd+0x2ba>
 8000ce2:	08c1      	lsrs	r1, r0, #3
 8000ce4:	0770      	lsls	r0, r6, #29
 8000ce6:	4301      	orrs	r1, r0
 8000ce8:	08f0      	lsrs	r0, r6, #3
 8000cea:	2f00      	cmp	r7, #0
 8000cec:	d062      	beq.n	8000db4 <__aeabi_dadd+0x738>
 8000cee:	2480      	movs	r4, #128	@ 0x80
 8000cf0:	0324      	lsls	r4, r4, #12
 8000cf2:	4220      	tst	r0, r4
 8000cf4:	d007      	beq.n	8000d06 <__aeabi_dadd+0x68a>
 8000cf6:	08de      	lsrs	r6, r3, #3
 8000cf8:	4226      	tst	r6, r4
 8000cfa:	d104      	bne.n	8000d06 <__aeabi_dadd+0x68a>
 8000cfc:	4665      	mov	r5, ip
 8000cfe:	0030      	movs	r0, r6
 8000d00:	08d1      	lsrs	r1, r2, #3
 8000d02:	075b      	lsls	r3, r3, #29
 8000d04:	4319      	orrs	r1, r3
 8000d06:	0f4f      	lsrs	r7, r1, #29
 8000d08:	00c9      	lsls	r1, r1, #3
 8000d0a:	08c9      	lsrs	r1, r1, #3
 8000d0c:	077f      	lsls	r7, r7, #29
 8000d0e:	430f      	orrs	r7, r1
 8000d10:	e618      	b.n	8000944 <__aeabi_dadd+0x2c8>
 8000d12:	000c      	movs	r4, r1
 8000d14:	0030      	movs	r0, r6
 8000d16:	3c20      	subs	r4, #32
 8000d18:	40e0      	lsrs	r0, r4
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	2920      	cmp	r1, #32
 8000d1e:	d005      	beq.n	8000d2c <__aeabi_dadd+0x6b0>
 8000d20:	2440      	movs	r4, #64	@ 0x40
 8000d22:	1a61      	subs	r1, r4, r1
 8000d24:	408e      	lsls	r6, r1
 8000d26:	4649      	mov	r1, r9
 8000d28:	4331      	orrs	r1, r6
 8000d2a:	4689      	mov	r9, r1
 8000d2c:	4648      	mov	r0, r9
 8000d2e:	1e41      	subs	r1, r0, #1
 8000d30:	4188      	sbcs	r0, r1
 8000d32:	4661      	mov	r1, ip
 8000d34:	0007      	movs	r7, r0
 8000d36:	430f      	orrs	r7, r1
 8000d38:	e630      	b.n	800099c <__aeabi_dadd+0x320>
 8000d3a:	2120      	movs	r1, #32
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	1a09      	subs	r1, r1, r0
 8000d40:	e50e      	b.n	8000760 <__aeabi_dadd+0xe4>
 8000d42:	001e      	movs	r6, r3
 8000d44:	2f00      	cmp	r7, #0
 8000d46:	d000      	beq.n	8000d4a <__aeabi_dadd+0x6ce>
 8000d48:	e522      	b.n	8000790 <__aeabi_dadd+0x114>
 8000d4a:	2400      	movs	r4, #0
 8000d4c:	e758      	b.n	8000c00 <__aeabi_dadd+0x584>
 8000d4e:	2500      	movs	r5, #0
 8000d50:	2400      	movs	r4, #0
 8000d52:	2600      	movs	r6, #0
 8000d54:	e5db      	b.n	800090e <__aeabi_dadd+0x292>
 8000d56:	46c0      	nop			@ (mov r8, r8)
 8000d58:	000007fe 	.word	0x000007fe
 8000d5c:	000007ff 	.word	0x000007ff
 8000d60:	ff7fffff 	.word	0xff7fffff
 8000d64:	4647      	mov	r7, r8
 8000d66:	430f      	orrs	r7, r1
 8000d68:	d100      	bne.n	8000d6c <__aeabi_dadd+0x6f0>
 8000d6a:	e747      	b.n	8000bfc <__aeabi_dadd+0x580>
 8000d6c:	000e      	movs	r6, r1
 8000d6e:	46c1      	mov	r9, r8
 8000d70:	e5b5      	b.n	80008de <__aeabi_dadd+0x262>
 8000d72:	08df      	lsrs	r7, r3, #3
 8000d74:	0764      	lsls	r4, r4, #29
 8000d76:	2102      	movs	r1, #2
 8000d78:	4327      	orrs	r7, r4
 8000d7a:	0900      	lsrs	r0, r0, #4
 8000d7c:	e5b5      	b.n	80008ea <__aeabi_dadd+0x26e>
 8000d7e:	0019      	movs	r1, r3
 8000d80:	08c0      	lsrs	r0, r0, #3
 8000d82:	0777      	lsls	r7, r6, #29
 8000d84:	4307      	orrs	r7, r0
 8000d86:	4311      	orrs	r1, r2
 8000d88:	08f0      	lsrs	r0, r6, #3
 8000d8a:	2900      	cmp	r1, #0
 8000d8c:	d100      	bne.n	8000d90 <__aeabi_dadd+0x714>
 8000d8e:	e5d9      	b.n	8000944 <__aeabi_dadd+0x2c8>
 8000d90:	2180      	movs	r1, #128	@ 0x80
 8000d92:	0309      	lsls	r1, r1, #12
 8000d94:	4208      	tst	r0, r1
 8000d96:	d007      	beq.n	8000da8 <__aeabi_dadd+0x72c>
 8000d98:	08dc      	lsrs	r4, r3, #3
 8000d9a:	420c      	tst	r4, r1
 8000d9c:	d104      	bne.n	8000da8 <__aeabi_dadd+0x72c>
 8000d9e:	08d2      	lsrs	r2, r2, #3
 8000da0:	075b      	lsls	r3, r3, #29
 8000da2:	431a      	orrs	r2, r3
 8000da4:	0017      	movs	r7, r2
 8000da6:	0020      	movs	r0, r4
 8000da8:	0f7b      	lsrs	r3, r7, #29
 8000daa:	00ff      	lsls	r7, r7, #3
 8000dac:	08ff      	lsrs	r7, r7, #3
 8000dae:	075b      	lsls	r3, r3, #29
 8000db0:	431f      	orrs	r7, r3
 8000db2:	e5c7      	b.n	8000944 <__aeabi_dadd+0x2c8>
 8000db4:	000f      	movs	r7, r1
 8000db6:	e5c5      	b.n	8000944 <__aeabi_dadd+0x2c8>
 8000db8:	4b12      	ldr	r3, [pc, #72]	@ (8000e04 <__aeabi_dadd+0x788>)
 8000dba:	08d2      	lsrs	r2, r2, #3
 8000dbc:	4033      	ands	r3, r6
 8000dbe:	075f      	lsls	r7, r3, #29
 8000dc0:	025b      	lsls	r3, r3, #9
 8000dc2:	2401      	movs	r4, #1
 8000dc4:	4317      	orrs	r7, r2
 8000dc6:	0b1e      	lsrs	r6, r3, #12
 8000dc8:	e5a1      	b.n	800090e <__aeabi_dadd+0x292>
 8000dca:	4226      	tst	r6, r4
 8000dcc:	d012      	beq.n	8000df4 <__aeabi_dadd+0x778>
 8000dce:	4b0d      	ldr	r3, [pc, #52]	@ (8000e04 <__aeabi_dadd+0x788>)
 8000dd0:	4665      	mov	r5, ip
 8000dd2:	0002      	movs	r2, r0
 8000dd4:	2401      	movs	r4, #1
 8000dd6:	401e      	ands	r6, r3
 8000dd8:	e4e6      	b.n	80007a8 <__aeabi_dadd+0x12c>
 8000dda:	0021      	movs	r1, r4
 8000ddc:	e585      	b.n	80008ea <__aeabi_dadd+0x26e>
 8000dde:	0017      	movs	r7, r2
 8000de0:	e5a8      	b.n	8000934 <__aeabi_dadd+0x2b8>
 8000de2:	003a      	movs	r2, r7
 8000de4:	e4d4      	b.n	8000790 <__aeabi_dadd+0x114>
 8000de6:	08db      	lsrs	r3, r3, #3
 8000de8:	0764      	lsls	r4, r4, #29
 8000dea:	431c      	orrs	r4, r3
 8000dec:	0027      	movs	r7, r4
 8000dee:	2102      	movs	r1, #2
 8000df0:	0900      	lsrs	r0, r0, #4
 8000df2:	e57a      	b.n	80008ea <__aeabi_dadd+0x26e>
 8000df4:	08c0      	lsrs	r0, r0, #3
 8000df6:	0777      	lsls	r7, r6, #29
 8000df8:	4307      	orrs	r7, r0
 8000dfa:	4665      	mov	r5, ip
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	08f0      	lsrs	r0, r6, #3
 8000e00:	e573      	b.n	80008ea <__aeabi_dadd+0x26e>
 8000e02:	46c0      	nop			@ (mov r8, r8)
 8000e04:	ff7fffff 	.word	0xff7fffff

08000e08 <__aeabi_ddiv>:
 8000e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e0a:	46de      	mov	lr, fp
 8000e0c:	4645      	mov	r5, r8
 8000e0e:	4657      	mov	r7, sl
 8000e10:	464e      	mov	r6, r9
 8000e12:	b5e0      	push	{r5, r6, r7, lr}
 8000e14:	b087      	sub	sp, #28
 8000e16:	9200      	str	r2, [sp, #0]
 8000e18:	9301      	str	r3, [sp, #4]
 8000e1a:	030b      	lsls	r3, r1, #12
 8000e1c:	0b1b      	lsrs	r3, r3, #12
 8000e1e:	469b      	mov	fp, r3
 8000e20:	0fca      	lsrs	r2, r1, #31
 8000e22:	004b      	lsls	r3, r1, #1
 8000e24:	0004      	movs	r4, r0
 8000e26:	4680      	mov	r8, r0
 8000e28:	0d5b      	lsrs	r3, r3, #21
 8000e2a:	9202      	str	r2, [sp, #8]
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_ddiv+0x28>
 8000e2e:	e098      	b.n	8000f62 <__aeabi_ddiv+0x15a>
 8000e30:	4a7c      	ldr	r2, [pc, #496]	@ (8001024 <__aeabi_ddiv+0x21c>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d037      	beq.n	8000ea6 <__aeabi_ddiv+0x9e>
 8000e36:	4659      	mov	r1, fp
 8000e38:	0f42      	lsrs	r2, r0, #29
 8000e3a:	00c9      	lsls	r1, r1, #3
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	2180      	movs	r1, #128	@ 0x80
 8000e40:	0409      	lsls	r1, r1, #16
 8000e42:	4311      	orrs	r1, r2
 8000e44:	00c2      	lsls	r2, r0, #3
 8000e46:	4690      	mov	r8, r2
 8000e48:	4a77      	ldr	r2, [pc, #476]	@ (8001028 <__aeabi_ddiv+0x220>)
 8000e4a:	4689      	mov	r9, r1
 8000e4c:	4692      	mov	sl, r2
 8000e4e:	449a      	add	sl, r3
 8000e50:	2300      	movs	r3, #0
 8000e52:	2400      	movs	r4, #0
 8000e54:	9303      	str	r3, [sp, #12]
 8000e56:	9e00      	ldr	r6, [sp, #0]
 8000e58:	9f01      	ldr	r7, [sp, #4]
 8000e5a:	033b      	lsls	r3, r7, #12
 8000e5c:	0b1b      	lsrs	r3, r3, #12
 8000e5e:	469b      	mov	fp, r3
 8000e60:	007b      	lsls	r3, r7, #1
 8000e62:	0030      	movs	r0, r6
 8000e64:	0d5b      	lsrs	r3, r3, #21
 8000e66:	0ffd      	lsrs	r5, r7, #31
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d059      	beq.n	8000f20 <__aeabi_ddiv+0x118>
 8000e6c:	4a6d      	ldr	r2, [pc, #436]	@ (8001024 <__aeabi_ddiv+0x21c>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d048      	beq.n	8000f04 <__aeabi_ddiv+0xfc>
 8000e72:	4659      	mov	r1, fp
 8000e74:	0f72      	lsrs	r2, r6, #29
 8000e76:	00c9      	lsls	r1, r1, #3
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	2180      	movs	r1, #128	@ 0x80
 8000e7c:	0409      	lsls	r1, r1, #16
 8000e7e:	4311      	orrs	r1, r2
 8000e80:	468b      	mov	fp, r1
 8000e82:	4969      	ldr	r1, [pc, #420]	@ (8001028 <__aeabi_ddiv+0x220>)
 8000e84:	00f2      	lsls	r2, r6, #3
 8000e86:	468c      	mov	ip, r1
 8000e88:	4651      	mov	r1, sl
 8000e8a:	4463      	add	r3, ip
 8000e8c:	1acb      	subs	r3, r1, r3
 8000e8e:	469a      	mov	sl, r3
 8000e90:	2100      	movs	r1, #0
 8000e92:	9e02      	ldr	r6, [sp, #8]
 8000e94:	406e      	eors	r6, r5
 8000e96:	b2f6      	uxtb	r6, r6
 8000e98:	2c0f      	cmp	r4, #15
 8000e9a:	d900      	bls.n	8000e9e <__aeabi_ddiv+0x96>
 8000e9c:	e0ce      	b.n	800103c <__aeabi_ddiv+0x234>
 8000e9e:	4b63      	ldr	r3, [pc, #396]	@ (800102c <__aeabi_ddiv+0x224>)
 8000ea0:	00a4      	lsls	r4, r4, #2
 8000ea2:	591b      	ldr	r3, [r3, r4]
 8000ea4:	469f      	mov	pc, r3
 8000ea6:	465a      	mov	r2, fp
 8000ea8:	4302      	orrs	r2, r0
 8000eaa:	4691      	mov	r9, r2
 8000eac:	d000      	beq.n	8000eb0 <__aeabi_ddiv+0xa8>
 8000eae:	e090      	b.n	8000fd2 <__aeabi_ddiv+0x1ca>
 8000eb0:	469a      	mov	sl, r3
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	4690      	mov	r8, r2
 8000eb6:	2408      	movs	r4, #8
 8000eb8:	9303      	str	r3, [sp, #12]
 8000eba:	e7cc      	b.n	8000e56 <__aeabi_ddiv+0x4e>
 8000ebc:	46cb      	mov	fp, r9
 8000ebe:	4642      	mov	r2, r8
 8000ec0:	9d02      	ldr	r5, [sp, #8]
 8000ec2:	9903      	ldr	r1, [sp, #12]
 8000ec4:	2902      	cmp	r1, #2
 8000ec6:	d100      	bne.n	8000eca <__aeabi_ddiv+0xc2>
 8000ec8:	e1de      	b.n	8001288 <__aeabi_ddiv+0x480>
 8000eca:	2903      	cmp	r1, #3
 8000ecc:	d100      	bne.n	8000ed0 <__aeabi_ddiv+0xc8>
 8000ece:	e08d      	b.n	8000fec <__aeabi_ddiv+0x1e4>
 8000ed0:	2901      	cmp	r1, #1
 8000ed2:	d000      	beq.n	8000ed6 <__aeabi_ddiv+0xce>
 8000ed4:	e179      	b.n	80011ca <__aeabi_ddiv+0x3c2>
 8000ed6:	002e      	movs	r6, r5
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2300      	movs	r3, #0
 8000edc:	2400      	movs	r4, #0
 8000ede:	4690      	mov	r8, r2
 8000ee0:	051b      	lsls	r3, r3, #20
 8000ee2:	4323      	orrs	r3, r4
 8000ee4:	07f6      	lsls	r6, r6, #31
 8000ee6:	4333      	orrs	r3, r6
 8000ee8:	4640      	mov	r0, r8
 8000eea:	0019      	movs	r1, r3
 8000eec:	b007      	add	sp, #28
 8000eee:	bcf0      	pop	{r4, r5, r6, r7}
 8000ef0:	46bb      	mov	fp, r7
 8000ef2:	46b2      	mov	sl, r6
 8000ef4:	46a9      	mov	r9, r5
 8000ef6:	46a0      	mov	r8, r4
 8000ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000efa:	2200      	movs	r2, #0
 8000efc:	2400      	movs	r4, #0
 8000efe:	4690      	mov	r8, r2
 8000f00:	4b48      	ldr	r3, [pc, #288]	@ (8001024 <__aeabi_ddiv+0x21c>)
 8000f02:	e7ed      	b.n	8000ee0 <__aeabi_ddiv+0xd8>
 8000f04:	465a      	mov	r2, fp
 8000f06:	9b00      	ldr	r3, [sp, #0]
 8000f08:	431a      	orrs	r2, r3
 8000f0a:	4b49      	ldr	r3, [pc, #292]	@ (8001030 <__aeabi_ddiv+0x228>)
 8000f0c:	469c      	mov	ip, r3
 8000f0e:	44e2      	add	sl, ip
 8000f10:	2a00      	cmp	r2, #0
 8000f12:	d159      	bne.n	8000fc8 <__aeabi_ddiv+0x1c0>
 8000f14:	2302      	movs	r3, #2
 8000f16:	431c      	orrs	r4, r3
 8000f18:	2300      	movs	r3, #0
 8000f1a:	2102      	movs	r1, #2
 8000f1c:	469b      	mov	fp, r3
 8000f1e:	e7b8      	b.n	8000e92 <__aeabi_ddiv+0x8a>
 8000f20:	465a      	mov	r2, fp
 8000f22:	9b00      	ldr	r3, [sp, #0]
 8000f24:	431a      	orrs	r2, r3
 8000f26:	d049      	beq.n	8000fbc <__aeabi_ddiv+0x1b4>
 8000f28:	465b      	mov	r3, fp
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_ddiv+0x128>
 8000f2e:	e19c      	b.n	800126a <__aeabi_ddiv+0x462>
 8000f30:	4658      	mov	r0, fp
 8000f32:	f001 fb43 	bl	80025bc <__clzsi2>
 8000f36:	0002      	movs	r2, r0
 8000f38:	0003      	movs	r3, r0
 8000f3a:	3a0b      	subs	r2, #11
 8000f3c:	271d      	movs	r7, #29
 8000f3e:	9e00      	ldr	r6, [sp, #0]
 8000f40:	1aba      	subs	r2, r7, r2
 8000f42:	0019      	movs	r1, r3
 8000f44:	4658      	mov	r0, fp
 8000f46:	40d6      	lsrs	r6, r2
 8000f48:	3908      	subs	r1, #8
 8000f4a:	4088      	lsls	r0, r1
 8000f4c:	0032      	movs	r2, r6
 8000f4e:	4302      	orrs	r2, r0
 8000f50:	4693      	mov	fp, r2
 8000f52:	9a00      	ldr	r2, [sp, #0]
 8000f54:	408a      	lsls	r2, r1
 8000f56:	4937      	ldr	r1, [pc, #220]	@ (8001034 <__aeabi_ddiv+0x22c>)
 8000f58:	4453      	add	r3, sl
 8000f5a:	468a      	mov	sl, r1
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	449a      	add	sl, r3
 8000f60:	e797      	b.n	8000e92 <__aeabi_ddiv+0x8a>
 8000f62:	465b      	mov	r3, fp
 8000f64:	4303      	orrs	r3, r0
 8000f66:	4699      	mov	r9, r3
 8000f68:	d021      	beq.n	8000fae <__aeabi_ddiv+0x1a6>
 8000f6a:	465b      	mov	r3, fp
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d100      	bne.n	8000f72 <__aeabi_ddiv+0x16a>
 8000f70:	e169      	b.n	8001246 <__aeabi_ddiv+0x43e>
 8000f72:	4658      	mov	r0, fp
 8000f74:	f001 fb22 	bl	80025bc <__clzsi2>
 8000f78:	230b      	movs	r3, #11
 8000f7a:	425b      	negs	r3, r3
 8000f7c:	469c      	mov	ip, r3
 8000f7e:	0002      	movs	r2, r0
 8000f80:	4484      	add	ip, r0
 8000f82:	4666      	mov	r6, ip
 8000f84:	231d      	movs	r3, #29
 8000f86:	1b9b      	subs	r3, r3, r6
 8000f88:	0026      	movs	r6, r4
 8000f8a:	0011      	movs	r1, r2
 8000f8c:	4658      	mov	r0, fp
 8000f8e:	40de      	lsrs	r6, r3
 8000f90:	3908      	subs	r1, #8
 8000f92:	4088      	lsls	r0, r1
 8000f94:	0033      	movs	r3, r6
 8000f96:	4303      	orrs	r3, r0
 8000f98:	4699      	mov	r9, r3
 8000f9a:	0023      	movs	r3, r4
 8000f9c:	408b      	lsls	r3, r1
 8000f9e:	4698      	mov	r8, r3
 8000fa0:	4b25      	ldr	r3, [pc, #148]	@ (8001038 <__aeabi_ddiv+0x230>)
 8000fa2:	2400      	movs	r4, #0
 8000fa4:	1a9b      	subs	r3, r3, r2
 8000fa6:	469a      	mov	sl, r3
 8000fa8:	2300      	movs	r3, #0
 8000faa:	9303      	str	r3, [sp, #12]
 8000fac:	e753      	b.n	8000e56 <__aeabi_ddiv+0x4e>
 8000fae:	2300      	movs	r3, #0
 8000fb0:	4698      	mov	r8, r3
 8000fb2:	469a      	mov	sl, r3
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	2404      	movs	r4, #4
 8000fb8:	9303      	str	r3, [sp, #12]
 8000fba:	e74c      	b.n	8000e56 <__aeabi_ddiv+0x4e>
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	431c      	orrs	r4, r3
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	469b      	mov	fp, r3
 8000fc6:	e764      	b.n	8000e92 <__aeabi_ddiv+0x8a>
 8000fc8:	2303      	movs	r3, #3
 8000fca:	0032      	movs	r2, r6
 8000fcc:	2103      	movs	r1, #3
 8000fce:	431c      	orrs	r4, r3
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_ddiv+0x8a>
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	46d9      	mov	r9, fp
 8000fd8:	240c      	movs	r4, #12
 8000fda:	9303      	str	r3, [sp, #12]
 8000fdc:	e73b      	b.n	8000e56 <__aeabi_ddiv+0x4e>
 8000fde:	2300      	movs	r3, #0
 8000fe0:	2480      	movs	r4, #128	@ 0x80
 8000fe2:	4698      	mov	r8, r3
 8000fe4:	2600      	movs	r6, #0
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8001024 <__aeabi_ddiv+0x21c>)
 8000fe8:	0324      	lsls	r4, r4, #12
 8000fea:	e779      	b.n	8000ee0 <__aeabi_ddiv+0xd8>
 8000fec:	2480      	movs	r4, #128	@ 0x80
 8000fee:	465b      	mov	r3, fp
 8000ff0:	0324      	lsls	r4, r4, #12
 8000ff2:	431c      	orrs	r4, r3
 8000ff4:	0324      	lsls	r4, r4, #12
 8000ff6:	002e      	movs	r6, r5
 8000ff8:	4690      	mov	r8, r2
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8001024 <__aeabi_ddiv+0x21c>)
 8000ffc:	0b24      	lsrs	r4, r4, #12
 8000ffe:	e76f      	b.n	8000ee0 <__aeabi_ddiv+0xd8>
 8001000:	2480      	movs	r4, #128	@ 0x80
 8001002:	464b      	mov	r3, r9
 8001004:	0324      	lsls	r4, r4, #12
 8001006:	4223      	tst	r3, r4
 8001008:	d002      	beq.n	8001010 <__aeabi_ddiv+0x208>
 800100a:	465b      	mov	r3, fp
 800100c:	4223      	tst	r3, r4
 800100e:	d0f0      	beq.n	8000ff2 <__aeabi_ddiv+0x1ea>
 8001010:	2480      	movs	r4, #128	@ 0x80
 8001012:	464b      	mov	r3, r9
 8001014:	0324      	lsls	r4, r4, #12
 8001016:	431c      	orrs	r4, r3
 8001018:	0324      	lsls	r4, r4, #12
 800101a:	9e02      	ldr	r6, [sp, #8]
 800101c:	4b01      	ldr	r3, [pc, #4]	@ (8001024 <__aeabi_ddiv+0x21c>)
 800101e:	0b24      	lsrs	r4, r4, #12
 8001020:	e75e      	b.n	8000ee0 <__aeabi_ddiv+0xd8>
 8001022:	46c0      	nop			@ (mov r8, r8)
 8001024:	000007ff 	.word	0x000007ff
 8001028:	fffffc01 	.word	0xfffffc01
 800102c:	08007f98 	.word	0x08007f98
 8001030:	fffff801 	.word	0xfffff801
 8001034:	000003f3 	.word	0x000003f3
 8001038:	fffffc0d 	.word	0xfffffc0d
 800103c:	45cb      	cmp	fp, r9
 800103e:	d200      	bcs.n	8001042 <__aeabi_ddiv+0x23a>
 8001040:	e0f8      	b.n	8001234 <__aeabi_ddiv+0x42c>
 8001042:	d100      	bne.n	8001046 <__aeabi_ddiv+0x23e>
 8001044:	e0f3      	b.n	800122e <__aeabi_ddiv+0x426>
 8001046:	2301      	movs	r3, #1
 8001048:	425b      	negs	r3, r3
 800104a:	469c      	mov	ip, r3
 800104c:	4644      	mov	r4, r8
 800104e:	4648      	mov	r0, r9
 8001050:	2500      	movs	r5, #0
 8001052:	44e2      	add	sl, ip
 8001054:	465b      	mov	r3, fp
 8001056:	0e17      	lsrs	r7, r2, #24
 8001058:	021b      	lsls	r3, r3, #8
 800105a:	431f      	orrs	r7, r3
 800105c:	0c19      	lsrs	r1, r3, #16
 800105e:	043b      	lsls	r3, r7, #16
 8001060:	0212      	lsls	r2, r2, #8
 8001062:	9700      	str	r7, [sp, #0]
 8001064:	0c1f      	lsrs	r7, r3, #16
 8001066:	4691      	mov	r9, r2
 8001068:	9102      	str	r1, [sp, #8]
 800106a:	9703      	str	r7, [sp, #12]
 800106c:	f7ff f8ec 	bl	8000248 <__aeabi_uidivmod>
 8001070:	0002      	movs	r2, r0
 8001072:	437a      	muls	r2, r7
 8001074:	040b      	lsls	r3, r1, #16
 8001076:	0c21      	lsrs	r1, r4, #16
 8001078:	4680      	mov	r8, r0
 800107a:	4319      	orrs	r1, r3
 800107c:	428a      	cmp	r2, r1
 800107e:	d909      	bls.n	8001094 <__aeabi_ddiv+0x28c>
 8001080:	9f00      	ldr	r7, [sp, #0]
 8001082:	2301      	movs	r3, #1
 8001084:	46bc      	mov	ip, r7
 8001086:	425b      	negs	r3, r3
 8001088:	4461      	add	r1, ip
 800108a:	469c      	mov	ip, r3
 800108c:	44e0      	add	r8, ip
 800108e:	428f      	cmp	r7, r1
 8001090:	d800      	bhi.n	8001094 <__aeabi_ddiv+0x28c>
 8001092:	e15c      	b.n	800134e <__aeabi_ddiv+0x546>
 8001094:	1a88      	subs	r0, r1, r2
 8001096:	9902      	ldr	r1, [sp, #8]
 8001098:	f7ff f8d6 	bl	8000248 <__aeabi_uidivmod>
 800109c:	9a03      	ldr	r2, [sp, #12]
 800109e:	0424      	lsls	r4, r4, #16
 80010a0:	4342      	muls	r2, r0
 80010a2:	0409      	lsls	r1, r1, #16
 80010a4:	0c24      	lsrs	r4, r4, #16
 80010a6:	0003      	movs	r3, r0
 80010a8:	430c      	orrs	r4, r1
 80010aa:	42a2      	cmp	r2, r4
 80010ac:	d906      	bls.n	80010bc <__aeabi_ddiv+0x2b4>
 80010ae:	9900      	ldr	r1, [sp, #0]
 80010b0:	3b01      	subs	r3, #1
 80010b2:	468c      	mov	ip, r1
 80010b4:	4464      	add	r4, ip
 80010b6:	42a1      	cmp	r1, r4
 80010b8:	d800      	bhi.n	80010bc <__aeabi_ddiv+0x2b4>
 80010ba:	e142      	b.n	8001342 <__aeabi_ddiv+0x53a>
 80010bc:	1aa0      	subs	r0, r4, r2
 80010be:	4642      	mov	r2, r8
 80010c0:	0412      	lsls	r2, r2, #16
 80010c2:	431a      	orrs	r2, r3
 80010c4:	4693      	mov	fp, r2
 80010c6:	464b      	mov	r3, r9
 80010c8:	4659      	mov	r1, fp
 80010ca:	0c1b      	lsrs	r3, r3, #16
 80010cc:	001f      	movs	r7, r3
 80010ce:	9304      	str	r3, [sp, #16]
 80010d0:	040b      	lsls	r3, r1, #16
 80010d2:	4649      	mov	r1, r9
 80010d4:	0409      	lsls	r1, r1, #16
 80010d6:	0c09      	lsrs	r1, r1, #16
 80010d8:	000c      	movs	r4, r1
 80010da:	0c1b      	lsrs	r3, r3, #16
 80010dc:	435c      	muls	r4, r3
 80010de:	0c12      	lsrs	r2, r2, #16
 80010e0:	437b      	muls	r3, r7
 80010e2:	4688      	mov	r8, r1
 80010e4:	4351      	muls	r1, r2
 80010e6:	437a      	muls	r2, r7
 80010e8:	0c27      	lsrs	r7, r4, #16
 80010ea:	46bc      	mov	ip, r7
 80010ec:	185b      	adds	r3, r3, r1
 80010ee:	4463      	add	r3, ip
 80010f0:	4299      	cmp	r1, r3
 80010f2:	d903      	bls.n	80010fc <__aeabi_ddiv+0x2f4>
 80010f4:	2180      	movs	r1, #128	@ 0x80
 80010f6:	0249      	lsls	r1, r1, #9
 80010f8:	468c      	mov	ip, r1
 80010fa:	4462      	add	r2, ip
 80010fc:	0c19      	lsrs	r1, r3, #16
 80010fe:	0424      	lsls	r4, r4, #16
 8001100:	041b      	lsls	r3, r3, #16
 8001102:	0c24      	lsrs	r4, r4, #16
 8001104:	188a      	adds	r2, r1, r2
 8001106:	191c      	adds	r4, r3, r4
 8001108:	4290      	cmp	r0, r2
 800110a:	d302      	bcc.n	8001112 <__aeabi_ddiv+0x30a>
 800110c:	d116      	bne.n	800113c <__aeabi_ddiv+0x334>
 800110e:	42a5      	cmp	r5, r4
 8001110:	d214      	bcs.n	800113c <__aeabi_ddiv+0x334>
 8001112:	465b      	mov	r3, fp
 8001114:	9f00      	ldr	r7, [sp, #0]
 8001116:	3b01      	subs	r3, #1
 8001118:	444d      	add	r5, r9
 800111a:	9305      	str	r3, [sp, #20]
 800111c:	454d      	cmp	r5, r9
 800111e:	419b      	sbcs	r3, r3
 8001120:	46bc      	mov	ip, r7
 8001122:	425b      	negs	r3, r3
 8001124:	4463      	add	r3, ip
 8001126:	18c0      	adds	r0, r0, r3
 8001128:	4287      	cmp	r7, r0
 800112a:	d300      	bcc.n	800112e <__aeabi_ddiv+0x326>
 800112c:	e102      	b.n	8001334 <__aeabi_ddiv+0x52c>
 800112e:	4282      	cmp	r2, r0
 8001130:	d900      	bls.n	8001134 <__aeabi_ddiv+0x32c>
 8001132:	e129      	b.n	8001388 <__aeabi_ddiv+0x580>
 8001134:	d100      	bne.n	8001138 <__aeabi_ddiv+0x330>
 8001136:	e124      	b.n	8001382 <__aeabi_ddiv+0x57a>
 8001138:	9b05      	ldr	r3, [sp, #20]
 800113a:	469b      	mov	fp, r3
 800113c:	1b2c      	subs	r4, r5, r4
 800113e:	42a5      	cmp	r5, r4
 8001140:	41ad      	sbcs	r5, r5
 8001142:	9b00      	ldr	r3, [sp, #0]
 8001144:	1a80      	subs	r0, r0, r2
 8001146:	426d      	negs	r5, r5
 8001148:	1b40      	subs	r0, r0, r5
 800114a:	4283      	cmp	r3, r0
 800114c:	d100      	bne.n	8001150 <__aeabi_ddiv+0x348>
 800114e:	e10f      	b.n	8001370 <__aeabi_ddiv+0x568>
 8001150:	9902      	ldr	r1, [sp, #8]
 8001152:	f7ff f879 	bl	8000248 <__aeabi_uidivmod>
 8001156:	9a03      	ldr	r2, [sp, #12]
 8001158:	040b      	lsls	r3, r1, #16
 800115a:	4342      	muls	r2, r0
 800115c:	0c21      	lsrs	r1, r4, #16
 800115e:	0005      	movs	r5, r0
 8001160:	4319      	orrs	r1, r3
 8001162:	428a      	cmp	r2, r1
 8001164:	d900      	bls.n	8001168 <__aeabi_ddiv+0x360>
 8001166:	e0cb      	b.n	8001300 <__aeabi_ddiv+0x4f8>
 8001168:	1a88      	subs	r0, r1, r2
 800116a:	9902      	ldr	r1, [sp, #8]
 800116c:	f7ff f86c 	bl	8000248 <__aeabi_uidivmod>
 8001170:	9a03      	ldr	r2, [sp, #12]
 8001172:	0424      	lsls	r4, r4, #16
 8001174:	4342      	muls	r2, r0
 8001176:	0409      	lsls	r1, r1, #16
 8001178:	0c24      	lsrs	r4, r4, #16
 800117a:	0003      	movs	r3, r0
 800117c:	430c      	orrs	r4, r1
 800117e:	42a2      	cmp	r2, r4
 8001180:	d900      	bls.n	8001184 <__aeabi_ddiv+0x37c>
 8001182:	e0ca      	b.n	800131a <__aeabi_ddiv+0x512>
 8001184:	4641      	mov	r1, r8
 8001186:	1aa4      	subs	r4, r4, r2
 8001188:	042a      	lsls	r2, r5, #16
 800118a:	431a      	orrs	r2, r3
 800118c:	9f04      	ldr	r7, [sp, #16]
 800118e:	0413      	lsls	r3, r2, #16
 8001190:	0c1b      	lsrs	r3, r3, #16
 8001192:	4359      	muls	r1, r3
 8001194:	4640      	mov	r0, r8
 8001196:	437b      	muls	r3, r7
 8001198:	469c      	mov	ip, r3
 800119a:	0c15      	lsrs	r5, r2, #16
 800119c:	4368      	muls	r0, r5
 800119e:	0c0b      	lsrs	r3, r1, #16
 80011a0:	4484      	add	ip, r0
 80011a2:	4463      	add	r3, ip
 80011a4:	437d      	muls	r5, r7
 80011a6:	4298      	cmp	r0, r3
 80011a8:	d903      	bls.n	80011b2 <__aeabi_ddiv+0x3aa>
 80011aa:	2080      	movs	r0, #128	@ 0x80
 80011ac:	0240      	lsls	r0, r0, #9
 80011ae:	4684      	mov	ip, r0
 80011b0:	4465      	add	r5, ip
 80011b2:	0c18      	lsrs	r0, r3, #16
 80011b4:	0409      	lsls	r1, r1, #16
 80011b6:	041b      	lsls	r3, r3, #16
 80011b8:	0c09      	lsrs	r1, r1, #16
 80011ba:	1940      	adds	r0, r0, r5
 80011bc:	185b      	adds	r3, r3, r1
 80011be:	4284      	cmp	r4, r0
 80011c0:	d327      	bcc.n	8001212 <__aeabi_ddiv+0x40a>
 80011c2:	d023      	beq.n	800120c <__aeabi_ddiv+0x404>
 80011c4:	2301      	movs	r3, #1
 80011c6:	0035      	movs	r5, r6
 80011c8:	431a      	orrs	r2, r3
 80011ca:	4b94      	ldr	r3, [pc, #592]	@ (800141c <__aeabi_ddiv+0x614>)
 80011cc:	4453      	add	r3, sl
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	dd60      	ble.n	8001294 <__aeabi_ddiv+0x48c>
 80011d2:	0751      	lsls	r1, r2, #29
 80011d4:	d000      	beq.n	80011d8 <__aeabi_ddiv+0x3d0>
 80011d6:	e086      	b.n	80012e6 <__aeabi_ddiv+0x4de>
 80011d8:	002e      	movs	r6, r5
 80011da:	08d1      	lsrs	r1, r2, #3
 80011dc:	465a      	mov	r2, fp
 80011de:	01d2      	lsls	r2, r2, #7
 80011e0:	d506      	bpl.n	80011f0 <__aeabi_ddiv+0x3e8>
 80011e2:	465a      	mov	r2, fp
 80011e4:	4b8e      	ldr	r3, [pc, #568]	@ (8001420 <__aeabi_ddiv+0x618>)
 80011e6:	401a      	ands	r2, r3
 80011e8:	2380      	movs	r3, #128	@ 0x80
 80011ea:	4693      	mov	fp, r2
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	4453      	add	r3, sl
 80011f0:	4a8c      	ldr	r2, [pc, #560]	@ (8001424 <__aeabi_ddiv+0x61c>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	dd00      	ble.n	80011f8 <__aeabi_ddiv+0x3f0>
 80011f6:	e680      	b.n	8000efa <__aeabi_ddiv+0xf2>
 80011f8:	465a      	mov	r2, fp
 80011fa:	0752      	lsls	r2, r2, #29
 80011fc:	430a      	orrs	r2, r1
 80011fe:	4690      	mov	r8, r2
 8001200:	465a      	mov	r2, fp
 8001202:	055b      	lsls	r3, r3, #21
 8001204:	0254      	lsls	r4, r2, #9
 8001206:	0b24      	lsrs	r4, r4, #12
 8001208:	0d5b      	lsrs	r3, r3, #21
 800120a:	e669      	b.n	8000ee0 <__aeabi_ddiv+0xd8>
 800120c:	0035      	movs	r5, r6
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0db      	beq.n	80011ca <__aeabi_ddiv+0x3c2>
 8001212:	9d00      	ldr	r5, [sp, #0]
 8001214:	1e51      	subs	r1, r2, #1
 8001216:	46ac      	mov	ip, r5
 8001218:	4464      	add	r4, ip
 800121a:	42ac      	cmp	r4, r5
 800121c:	d200      	bcs.n	8001220 <__aeabi_ddiv+0x418>
 800121e:	e09e      	b.n	800135e <__aeabi_ddiv+0x556>
 8001220:	4284      	cmp	r4, r0
 8001222:	d200      	bcs.n	8001226 <__aeabi_ddiv+0x41e>
 8001224:	e0e1      	b.n	80013ea <__aeabi_ddiv+0x5e2>
 8001226:	d100      	bne.n	800122a <__aeabi_ddiv+0x422>
 8001228:	e0ee      	b.n	8001408 <__aeabi_ddiv+0x600>
 800122a:	000a      	movs	r2, r1
 800122c:	e7ca      	b.n	80011c4 <__aeabi_ddiv+0x3bc>
 800122e:	4542      	cmp	r2, r8
 8001230:	d900      	bls.n	8001234 <__aeabi_ddiv+0x42c>
 8001232:	e708      	b.n	8001046 <__aeabi_ddiv+0x23e>
 8001234:	464b      	mov	r3, r9
 8001236:	07dc      	lsls	r4, r3, #31
 8001238:	0858      	lsrs	r0, r3, #1
 800123a:	4643      	mov	r3, r8
 800123c:	085b      	lsrs	r3, r3, #1
 800123e:	431c      	orrs	r4, r3
 8001240:	4643      	mov	r3, r8
 8001242:	07dd      	lsls	r5, r3, #31
 8001244:	e706      	b.n	8001054 <__aeabi_ddiv+0x24c>
 8001246:	f001 f9b9 	bl	80025bc <__clzsi2>
 800124a:	2315      	movs	r3, #21
 800124c:	469c      	mov	ip, r3
 800124e:	4484      	add	ip, r0
 8001250:	0002      	movs	r2, r0
 8001252:	4663      	mov	r3, ip
 8001254:	3220      	adds	r2, #32
 8001256:	2b1c      	cmp	r3, #28
 8001258:	dc00      	bgt.n	800125c <__aeabi_ddiv+0x454>
 800125a:	e692      	b.n	8000f82 <__aeabi_ddiv+0x17a>
 800125c:	0023      	movs	r3, r4
 800125e:	3808      	subs	r0, #8
 8001260:	4083      	lsls	r3, r0
 8001262:	4699      	mov	r9, r3
 8001264:	2300      	movs	r3, #0
 8001266:	4698      	mov	r8, r3
 8001268:	e69a      	b.n	8000fa0 <__aeabi_ddiv+0x198>
 800126a:	f001 f9a7 	bl	80025bc <__clzsi2>
 800126e:	0002      	movs	r2, r0
 8001270:	0003      	movs	r3, r0
 8001272:	3215      	adds	r2, #21
 8001274:	3320      	adds	r3, #32
 8001276:	2a1c      	cmp	r2, #28
 8001278:	dc00      	bgt.n	800127c <__aeabi_ddiv+0x474>
 800127a:	e65f      	b.n	8000f3c <__aeabi_ddiv+0x134>
 800127c:	9900      	ldr	r1, [sp, #0]
 800127e:	3808      	subs	r0, #8
 8001280:	4081      	lsls	r1, r0
 8001282:	2200      	movs	r2, #0
 8001284:	468b      	mov	fp, r1
 8001286:	e666      	b.n	8000f56 <__aeabi_ddiv+0x14e>
 8001288:	2200      	movs	r2, #0
 800128a:	002e      	movs	r6, r5
 800128c:	2400      	movs	r4, #0
 800128e:	4690      	mov	r8, r2
 8001290:	4b65      	ldr	r3, [pc, #404]	@ (8001428 <__aeabi_ddiv+0x620>)
 8001292:	e625      	b.n	8000ee0 <__aeabi_ddiv+0xd8>
 8001294:	002e      	movs	r6, r5
 8001296:	2101      	movs	r1, #1
 8001298:	1ac9      	subs	r1, r1, r3
 800129a:	2938      	cmp	r1, #56	@ 0x38
 800129c:	dd00      	ble.n	80012a0 <__aeabi_ddiv+0x498>
 800129e:	e61b      	b.n	8000ed8 <__aeabi_ddiv+0xd0>
 80012a0:	291f      	cmp	r1, #31
 80012a2:	dc7e      	bgt.n	80013a2 <__aeabi_ddiv+0x59a>
 80012a4:	4861      	ldr	r0, [pc, #388]	@ (800142c <__aeabi_ddiv+0x624>)
 80012a6:	0014      	movs	r4, r2
 80012a8:	4450      	add	r0, sl
 80012aa:	465b      	mov	r3, fp
 80012ac:	4082      	lsls	r2, r0
 80012ae:	4083      	lsls	r3, r0
 80012b0:	40cc      	lsrs	r4, r1
 80012b2:	1e50      	subs	r0, r2, #1
 80012b4:	4182      	sbcs	r2, r0
 80012b6:	4323      	orrs	r3, r4
 80012b8:	431a      	orrs	r2, r3
 80012ba:	465b      	mov	r3, fp
 80012bc:	40cb      	lsrs	r3, r1
 80012be:	0751      	lsls	r1, r2, #29
 80012c0:	d009      	beq.n	80012d6 <__aeabi_ddiv+0x4ce>
 80012c2:	210f      	movs	r1, #15
 80012c4:	4011      	ands	r1, r2
 80012c6:	2904      	cmp	r1, #4
 80012c8:	d005      	beq.n	80012d6 <__aeabi_ddiv+0x4ce>
 80012ca:	1d11      	adds	r1, r2, #4
 80012cc:	4291      	cmp	r1, r2
 80012ce:	4192      	sbcs	r2, r2
 80012d0:	4252      	negs	r2, r2
 80012d2:	189b      	adds	r3, r3, r2
 80012d4:	000a      	movs	r2, r1
 80012d6:	0219      	lsls	r1, r3, #8
 80012d8:	d400      	bmi.n	80012dc <__aeabi_ddiv+0x4d4>
 80012da:	e09b      	b.n	8001414 <__aeabi_ddiv+0x60c>
 80012dc:	2200      	movs	r2, #0
 80012de:	2301      	movs	r3, #1
 80012e0:	2400      	movs	r4, #0
 80012e2:	4690      	mov	r8, r2
 80012e4:	e5fc      	b.n	8000ee0 <__aeabi_ddiv+0xd8>
 80012e6:	210f      	movs	r1, #15
 80012e8:	4011      	ands	r1, r2
 80012ea:	2904      	cmp	r1, #4
 80012ec:	d100      	bne.n	80012f0 <__aeabi_ddiv+0x4e8>
 80012ee:	e773      	b.n	80011d8 <__aeabi_ddiv+0x3d0>
 80012f0:	1d11      	adds	r1, r2, #4
 80012f2:	4291      	cmp	r1, r2
 80012f4:	4192      	sbcs	r2, r2
 80012f6:	4252      	negs	r2, r2
 80012f8:	002e      	movs	r6, r5
 80012fa:	08c9      	lsrs	r1, r1, #3
 80012fc:	4493      	add	fp, r2
 80012fe:	e76d      	b.n	80011dc <__aeabi_ddiv+0x3d4>
 8001300:	9b00      	ldr	r3, [sp, #0]
 8001302:	3d01      	subs	r5, #1
 8001304:	469c      	mov	ip, r3
 8001306:	4461      	add	r1, ip
 8001308:	428b      	cmp	r3, r1
 800130a:	d900      	bls.n	800130e <__aeabi_ddiv+0x506>
 800130c:	e72c      	b.n	8001168 <__aeabi_ddiv+0x360>
 800130e:	428a      	cmp	r2, r1
 8001310:	d800      	bhi.n	8001314 <__aeabi_ddiv+0x50c>
 8001312:	e729      	b.n	8001168 <__aeabi_ddiv+0x360>
 8001314:	1e85      	subs	r5, r0, #2
 8001316:	4461      	add	r1, ip
 8001318:	e726      	b.n	8001168 <__aeabi_ddiv+0x360>
 800131a:	9900      	ldr	r1, [sp, #0]
 800131c:	3b01      	subs	r3, #1
 800131e:	468c      	mov	ip, r1
 8001320:	4464      	add	r4, ip
 8001322:	42a1      	cmp	r1, r4
 8001324:	d900      	bls.n	8001328 <__aeabi_ddiv+0x520>
 8001326:	e72d      	b.n	8001184 <__aeabi_ddiv+0x37c>
 8001328:	42a2      	cmp	r2, r4
 800132a:	d800      	bhi.n	800132e <__aeabi_ddiv+0x526>
 800132c:	e72a      	b.n	8001184 <__aeabi_ddiv+0x37c>
 800132e:	1e83      	subs	r3, r0, #2
 8001330:	4464      	add	r4, ip
 8001332:	e727      	b.n	8001184 <__aeabi_ddiv+0x37c>
 8001334:	4287      	cmp	r7, r0
 8001336:	d000      	beq.n	800133a <__aeabi_ddiv+0x532>
 8001338:	e6fe      	b.n	8001138 <__aeabi_ddiv+0x330>
 800133a:	45a9      	cmp	r9, r5
 800133c:	d900      	bls.n	8001340 <__aeabi_ddiv+0x538>
 800133e:	e6fb      	b.n	8001138 <__aeabi_ddiv+0x330>
 8001340:	e6f5      	b.n	800112e <__aeabi_ddiv+0x326>
 8001342:	42a2      	cmp	r2, r4
 8001344:	d800      	bhi.n	8001348 <__aeabi_ddiv+0x540>
 8001346:	e6b9      	b.n	80010bc <__aeabi_ddiv+0x2b4>
 8001348:	1e83      	subs	r3, r0, #2
 800134a:	4464      	add	r4, ip
 800134c:	e6b6      	b.n	80010bc <__aeabi_ddiv+0x2b4>
 800134e:	428a      	cmp	r2, r1
 8001350:	d800      	bhi.n	8001354 <__aeabi_ddiv+0x54c>
 8001352:	e69f      	b.n	8001094 <__aeabi_ddiv+0x28c>
 8001354:	46bc      	mov	ip, r7
 8001356:	1e83      	subs	r3, r0, #2
 8001358:	4698      	mov	r8, r3
 800135a:	4461      	add	r1, ip
 800135c:	e69a      	b.n	8001094 <__aeabi_ddiv+0x28c>
 800135e:	000a      	movs	r2, r1
 8001360:	4284      	cmp	r4, r0
 8001362:	d000      	beq.n	8001366 <__aeabi_ddiv+0x55e>
 8001364:	e72e      	b.n	80011c4 <__aeabi_ddiv+0x3bc>
 8001366:	454b      	cmp	r3, r9
 8001368:	d000      	beq.n	800136c <__aeabi_ddiv+0x564>
 800136a:	e72b      	b.n	80011c4 <__aeabi_ddiv+0x3bc>
 800136c:	0035      	movs	r5, r6
 800136e:	e72c      	b.n	80011ca <__aeabi_ddiv+0x3c2>
 8001370:	4b2a      	ldr	r3, [pc, #168]	@ (800141c <__aeabi_ddiv+0x614>)
 8001372:	4a2f      	ldr	r2, [pc, #188]	@ (8001430 <__aeabi_ddiv+0x628>)
 8001374:	4453      	add	r3, sl
 8001376:	4592      	cmp	sl, r2
 8001378:	db43      	blt.n	8001402 <__aeabi_ddiv+0x5fa>
 800137a:	2201      	movs	r2, #1
 800137c:	2100      	movs	r1, #0
 800137e:	4493      	add	fp, r2
 8001380:	e72c      	b.n	80011dc <__aeabi_ddiv+0x3d4>
 8001382:	42ac      	cmp	r4, r5
 8001384:	d800      	bhi.n	8001388 <__aeabi_ddiv+0x580>
 8001386:	e6d7      	b.n	8001138 <__aeabi_ddiv+0x330>
 8001388:	2302      	movs	r3, #2
 800138a:	425b      	negs	r3, r3
 800138c:	469c      	mov	ip, r3
 800138e:	9900      	ldr	r1, [sp, #0]
 8001390:	444d      	add	r5, r9
 8001392:	454d      	cmp	r5, r9
 8001394:	419b      	sbcs	r3, r3
 8001396:	44e3      	add	fp, ip
 8001398:	468c      	mov	ip, r1
 800139a:	425b      	negs	r3, r3
 800139c:	4463      	add	r3, ip
 800139e:	18c0      	adds	r0, r0, r3
 80013a0:	e6cc      	b.n	800113c <__aeabi_ddiv+0x334>
 80013a2:	201f      	movs	r0, #31
 80013a4:	4240      	negs	r0, r0
 80013a6:	1ac3      	subs	r3, r0, r3
 80013a8:	4658      	mov	r0, fp
 80013aa:	40d8      	lsrs	r0, r3
 80013ac:	2920      	cmp	r1, #32
 80013ae:	d004      	beq.n	80013ba <__aeabi_ddiv+0x5b2>
 80013b0:	4659      	mov	r1, fp
 80013b2:	4b20      	ldr	r3, [pc, #128]	@ (8001434 <__aeabi_ddiv+0x62c>)
 80013b4:	4453      	add	r3, sl
 80013b6:	4099      	lsls	r1, r3
 80013b8:	430a      	orrs	r2, r1
 80013ba:	1e53      	subs	r3, r2, #1
 80013bc:	419a      	sbcs	r2, r3
 80013be:	2307      	movs	r3, #7
 80013c0:	0019      	movs	r1, r3
 80013c2:	4302      	orrs	r2, r0
 80013c4:	2400      	movs	r4, #0
 80013c6:	4011      	ands	r1, r2
 80013c8:	4213      	tst	r3, r2
 80013ca:	d009      	beq.n	80013e0 <__aeabi_ddiv+0x5d8>
 80013cc:	3308      	adds	r3, #8
 80013ce:	4013      	ands	r3, r2
 80013d0:	2b04      	cmp	r3, #4
 80013d2:	d01d      	beq.n	8001410 <__aeabi_ddiv+0x608>
 80013d4:	1d13      	adds	r3, r2, #4
 80013d6:	4293      	cmp	r3, r2
 80013d8:	4189      	sbcs	r1, r1
 80013da:	001a      	movs	r2, r3
 80013dc:	4249      	negs	r1, r1
 80013de:	0749      	lsls	r1, r1, #29
 80013e0:	08d2      	lsrs	r2, r2, #3
 80013e2:	430a      	orrs	r2, r1
 80013e4:	4690      	mov	r8, r2
 80013e6:	2300      	movs	r3, #0
 80013e8:	e57a      	b.n	8000ee0 <__aeabi_ddiv+0xd8>
 80013ea:	4649      	mov	r1, r9
 80013ec:	9f00      	ldr	r7, [sp, #0]
 80013ee:	004d      	lsls	r5, r1, #1
 80013f0:	454d      	cmp	r5, r9
 80013f2:	4189      	sbcs	r1, r1
 80013f4:	46bc      	mov	ip, r7
 80013f6:	4249      	negs	r1, r1
 80013f8:	4461      	add	r1, ip
 80013fa:	46a9      	mov	r9, r5
 80013fc:	3a02      	subs	r2, #2
 80013fe:	1864      	adds	r4, r4, r1
 8001400:	e7ae      	b.n	8001360 <__aeabi_ddiv+0x558>
 8001402:	2201      	movs	r2, #1
 8001404:	4252      	negs	r2, r2
 8001406:	e746      	b.n	8001296 <__aeabi_ddiv+0x48e>
 8001408:	4599      	cmp	r9, r3
 800140a:	d3ee      	bcc.n	80013ea <__aeabi_ddiv+0x5e2>
 800140c:	000a      	movs	r2, r1
 800140e:	e7aa      	b.n	8001366 <__aeabi_ddiv+0x55e>
 8001410:	2100      	movs	r1, #0
 8001412:	e7e5      	b.n	80013e0 <__aeabi_ddiv+0x5d8>
 8001414:	0759      	lsls	r1, r3, #29
 8001416:	025b      	lsls	r3, r3, #9
 8001418:	0b1c      	lsrs	r4, r3, #12
 800141a:	e7e1      	b.n	80013e0 <__aeabi_ddiv+0x5d8>
 800141c:	000003ff 	.word	0x000003ff
 8001420:	feffffff 	.word	0xfeffffff
 8001424:	000007fe 	.word	0x000007fe
 8001428:	000007ff 	.word	0x000007ff
 800142c:	0000041e 	.word	0x0000041e
 8001430:	fffffc02 	.word	0xfffffc02
 8001434:	0000043e 	.word	0x0000043e

08001438 <__eqdf2>:
 8001438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800143a:	4657      	mov	r7, sl
 800143c:	46de      	mov	lr, fp
 800143e:	464e      	mov	r6, r9
 8001440:	4645      	mov	r5, r8
 8001442:	b5e0      	push	{r5, r6, r7, lr}
 8001444:	000d      	movs	r5, r1
 8001446:	0004      	movs	r4, r0
 8001448:	0fe8      	lsrs	r0, r5, #31
 800144a:	4683      	mov	fp, r0
 800144c:	0309      	lsls	r1, r1, #12
 800144e:	0fd8      	lsrs	r0, r3, #31
 8001450:	0b09      	lsrs	r1, r1, #12
 8001452:	4682      	mov	sl, r0
 8001454:	4819      	ldr	r0, [pc, #100]	@ (80014bc <__eqdf2+0x84>)
 8001456:	468c      	mov	ip, r1
 8001458:	031f      	lsls	r7, r3, #12
 800145a:	0069      	lsls	r1, r5, #1
 800145c:	005e      	lsls	r6, r3, #1
 800145e:	0d49      	lsrs	r1, r1, #21
 8001460:	0b3f      	lsrs	r7, r7, #12
 8001462:	0d76      	lsrs	r6, r6, #21
 8001464:	4281      	cmp	r1, r0
 8001466:	d018      	beq.n	800149a <__eqdf2+0x62>
 8001468:	4286      	cmp	r6, r0
 800146a:	d00f      	beq.n	800148c <__eqdf2+0x54>
 800146c:	2001      	movs	r0, #1
 800146e:	42b1      	cmp	r1, r6
 8001470:	d10d      	bne.n	800148e <__eqdf2+0x56>
 8001472:	45bc      	cmp	ip, r7
 8001474:	d10b      	bne.n	800148e <__eqdf2+0x56>
 8001476:	4294      	cmp	r4, r2
 8001478:	d109      	bne.n	800148e <__eqdf2+0x56>
 800147a:	45d3      	cmp	fp, sl
 800147c:	d01c      	beq.n	80014b8 <__eqdf2+0x80>
 800147e:	2900      	cmp	r1, #0
 8001480:	d105      	bne.n	800148e <__eqdf2+0x56>
 8001482:	4660      	mov	r0, ip
 8001484:	4320      	orrs	r0, r4
 8001486:	1e43      	subs	r3, r0, #1
 8001488:	4198      	sbcs	r0, r3
 800148a:	e000      	b.n	800148e <__eqdf2+0x56>
 800148c:	2001      	movs	r0, #1
 800148e:	bcf0      	pop	{r4, r5, r6, r7}
 8001490:	46bb      	mov	fp, r7
 8001492:	46b2      	mov	sl, r6
 8001494:	46a9      	mov	r9, r5
 8001496:	46a0      	mov	r8, r4
 8001498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800149a:	2001      	movs	r0, #1
 800149c:	428e      	cmp	r6, r1
 800149e:	d1f6      	bne.n	800148e <__eqdf2+0x56>
 80014a0:	4661      	mov	r1, ip
 80014a2:	4339      	orrs	r1, r7
 80014a4:	000f      	movs	r7, r1
 80014a6:	4317      	orrs	r7, r2
 80014a8:	4327      	orrs	r7, r4
 80014aa:	d1f0      	bne.n	800148e <__eqdf2+0x56>
 80014ac:	465b      	mov	r3, fp
 80014ae:	4652      	mov	r2, sl
 80014b0:	1a98      	subs	r0, r3, r2
 80014b2:	1e43      	subs	r3, r0, #1
 80014b4:	4198      	sbcs	r0, r3
 80014b6:	e7ea      	b.n	800148e <__eqdf2+0x56>
 80014b8:	2000      	movs	r0, #0
 80014ba:	e7e8      	b.n	800148e <__eqdf2+0x56>
 80014bc:	000007ff 	.word	0x000007ff

080014c0 <__gedf2>:
 80014c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014c2:	4657      	mov	r7, sl
 80014c4:	464e      	mov	r6, r9
 80014c6:	4645      	mov	r5, r8
 80014c8:	46de      	mov	lr, fp
 80014ca:	b5e0      	push	{r5, r6, r7, lr}
 80014cc:	000d      	movs	r5, r1
 80014ce:	030e      	lsls	r6, r1, #12
 80014d0:	0049      	lsls	r1, r1, #1
 80014d2:	0d49      	lsrs	r1, r1, #21
 80014d4:	468a      	mov	sl, r1
 80014d6:	0fdf      	lsrs	r7, r3, #31
 80014d8:	0fe9      	lsrs	r1, r5, #31
 80014da:	46bc      	mov	ip, r7
 80014dc:	b083      	sub	sp, #12
 80014de:	4f2f      	ldr	r7, [pc, #188]	@ (800159c <__gedf2+0xdc>)
 80014e0:	0004      	movs	r4, r0
 80014e2:	4680      	mov	r8, r0
 80014e4:	9101      	str	r1, [sp, #4]
 80014e6:	0058      	lsls	r0, r3, #1
 80014e8:	0319      	lsls	r1, r3, #12
 80014ea:	4691      	mov	r9, r2
 80014ec:	0b36      	lsrs	r6, r6, #12
 80014ee:	0b09      	lsrs	r1, r1, #12
 80014f0:	0d40      	lsrs	r0, r0, #21
 80014f2:	45ba      	cmp	sl, r7
 80014f4:	d01d      	beq.n	8001532 <__gedf2+0x72>
 80014f6:	42b8      	cmp	r0, r7
 80014f8:	d00d      	beq.n	8001516 <__gedf2+0x56>
 80014fa:	4657      	mov	r7, sl
 80014fc:	2f00      	cmp	r7, #0
 80014fe:	d12a      	bne.n	8001556 <__gedf2+0x96>
 8001500:	4334      	orrs	r4, r6
 8001502:	2800      	cmp	r0, #0
 8001504:	d124      	bne.n	8001550 <__gedf2+0x90>
 8001506:	430a      	orrs	r2, r1
 8001508:	d036      	beq.n	8001578 <__gedf2+0xb8>
 800150a:	2c00      	cmp	r4, #0
 800150c:	d141      	bne.n	8001592 <__gedf2+0xd2>
 800150e:	4663      	mov	r3, ip
 8001510:	0058      	lsls	r0, r3, #1
 8001512:	3801      	subs	r0, #1
 8001514:	e015      	b.n	8001542 <__gedf2+0x82>
 8001516:	4311      	orrs	r1, r2
 8001518:	d138      	bne.n	800158c <__gedf2+0xcc>
 800151a:	4653      	mov	r3, sl
 800151c:	2b00      	cmp	r3, #0
 800151e:	d101      	bne.n	8001524 <__gedf2+0x64>
 8001520:	4326      	orrs	r6, r4
 8001522:	d0f4      	beq.n	800150e <__gedf2+0x4e>
 8001524:	9b01      	ldr	r3, [sp, #4]
 8001526:	4563      	cmp	r3, ip
 8001528:	d107      	bne.n	800153a <__gedf2+0x7a>
 800152a:	9b01      	ldr	r3, [sp, #4]
 800152c:	0058      	lsls	r0, r3, #1
 800152e:	3801      	subs	r0, #1
 8001530:	e007      	b.n	8001542 <__gedf2+0x82>
 8001532:	4326      	orrs	r6, r4
 8001534:	d12a      	bne.n	800158c <__gedf2+0xcc>
 8001536:	4550      	cmp	r0, sl
 8001538:	d021      	beq.n	800157e <__gedf2+0xbe>
 800153a:	2001      	movs	r0, #1
 800153c:	9b01      	ldr	r3, [sp, #4]
 800153e:	425f      	negs	r7, r3
 8001540:	4338      	orrs	r0, r7
 8001542:	b003      	add	sp, #12
 8001544:	bcf0      	pop	{r4, r5, r6, r7}
 8001546:	46bb      	mov	fp, r7
 8001548:	46b2      	mov	sl, r6
 800154a:	46a9      	mov	r9, r5
 800154c:	46a0      	mov	r8, r4
 800154e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001550:	2c00      	cmp	r4, #0
 8001552:	d0dc      	beq.n	800150e <__gedf2+0x4e>
 8001554:	e7e6      	b.n	8001524 <__gedf2+0x64>
 8001556:	2800      	cmp	r0, #0
 8001558:	d0ef      	beq.n	800153a <__gedf2+0x7a>
 800155a:	9b01      	ldr	r3, [sp, #4]
 800155c:	4563      	cmp	r3, ip
 800155e:	d1ec      	bne.n	800153a <__gedf2+0x7a>
 8001560:	4582      	cmp	sl, r0
 8001562:	dcea      	bgt.n	800153a <__gedf2+0x7a>
 8001564:	dbe1      	blt.n	800152a <__gedf2+0x6a>
 8001566:	428e      	cmp	r6, r1
 8001568:	d8e7      	bhi.n	800153a <__gedf2+0x7a>
 800156a:	d1de      	bne.n	800152a <__gedf2+0x6a>
 800156c:	45c8      	cmp	r8, r9
 800156e:	d8e4      	bhi.n	800153a <__gedf2+0x7a>
 8001570:	2000      	movs	r0, #0
 8001572:	45c8      	cmp	r8, r9
 8001574:	d2e5      	bcs.n	8001542 <__gedf2+0x82>
 8001576:	e7d8      	b.n	800152a <__gedf2+0x6a>
 8001578:	2c00      	cmp	r4, #0
 800157a:	d0e2      	beq.n	8001542 <__gedf2+0x82>
 800157c:	e7dd      	b.n	800153a <__gedf2+0x7a>
 800157e:	4311      	orrs	r1, r2
 8001580:	d104      	bne.n	800158c <__gedf2+0xcc>
 8001582:	9b01      	ldr	r3, [sp, #4]
 8001584:	4563      	cmp	r3, ip
 8001586:	d1d8      	bne.n	800153a <__gedf2+0x7a>
 8001588:	2000      	movs	r0, #0
 800158a:	e7da      	b.n	8001542 <__gedf2+0x82>
 800158c:	2002      	movs	r0, #2
 800158e:	4240      	negs	r0, r0
 8001590:	e7d7      	b.n	8001542 <__gedf2+0x82>
 8001592:	9b01      	ldr	r3, [sp, #4]
 8001594:	4563      	cmp	r3, ip
 8001596:	d0e6      	beq.n	8001566 <__gedf2+0xa6>
 8001598:	e7cf      	b.n	800153a <__gedf2+0x7a>
 800159a:	46c0      	nop			@ (mov r8, r8)
 800159c:	000007ff 	.word	0x000007ff

080015a0 <__ledf2>:
 80015a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a2:	4657      	mov	r7, sl
 80015a4:	464e      	mov	r6, r9
 80015a6:	4645      	mov	r5, r8
 80015a8:	46de      	mov	lr, fp
 80015aa:	b5e0      	push	{r5, r6, r7, lr}
 80015ac:	000d      	movs	r5, r1
 80015ae:	030e      	lsls	r6, r1, #12
 80015b0:	0049      	lsls	r1, r1, #1
 80015b2:	0d49      	lsrs	r1, r1, #21
 80015b4:	468a      	mov	sl, r1
 80015b6:	0fdf      	lsrs	r7, r3, #31
 80015b8:	0fe9      	lsrs	r1, r5, #31
 80015ba:	46bc      	mov	ip, r7
 80015bc:	b083      	sub	sp, #12
 80015be:	4f2e      	ldr	r7, [pc, #184]	@ (8001678 <__ledf2+0xd8>)
 80015c0:	0004      	movs	r4, r0
 80015c2:	4680      	mov	r8, r0
 80015c4:	9101      	str	r1, [sp, #4]
 80015c6:	0058      	lsls	r0, r3, #1
 80015c8:	0319      	lsls	r1, r3, #12
 80015ca:	4691      	mov	r9, r2
 80015cc:	0b36      	lsrs	r6, r6, #12
 80015ce:	0b09      	lsrs	r1, r1, #12
 80015d0:	0d40      	lsrs	r0, r0, #21
 80015d2:	45ba      	cmp	sl, r7
 80015d4:	d01e      	beq.n	8001614 <__ledf2+0x74>
 80015d6:	42b8      	cmp	r0, r7
 80015d8:	d00d      	beq.n	80015f6 <__ledf2+0x56>
 80015da:	4657      	mov	r7, sl
 80015dc:	2f00      	cmp	r7, #0
 80015de:	d127      	bne.n	8001630 <__ledf2+0x90>
 80015e0:	4334      	orrs	r4, r6
 80015e2:	2800      	cmp	r0, #0
 80015e4:	d133      	bne.n	800164e <__ledf2+0xae>
 80015e6:	430a      	orrs	r2, r1
 80015e8:	d034      	beq.n	8001654 <__ledf2+0xb4>
 80015ea:	2c00      	cmp	r4, #0
 80015ec:	d140      	bne.n	8001670 <__ledf2+0xd0>
 80015ee:	4663      	mov	r3, ip
 80015f0:	0058      	lsls	r0, r3, #1
 80015f2:	3801      	subs	r0, #1
 80015f4:	e015      	b.n	8001622 <__ledf2+0x82>
 80015f6:	4311      	orrs	r1, r2
 80015f8:	d112      	bne.n	8001620 <__ledf2+0x80>
 80015fa:	4653      	mov	r3, sl
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <__ledf2+0x64>
 8001600:	4326      	orrs	r6, r4
 8001602:	d0f4      	beq.n	80015ee <__ledf2+0x4e>
 8001604:	9b01      	ldr	r3, [sp, #4]
 8001606:	4563      	cmp	r3, ip
 8001608:	d01d      	beq.n	8001646 <__ledf2+0xa6>
 800160a:	2001      	movs	r0, #1
 800160c:	9b01      	ldr	r3, [sp, #4]
 800160e:	425f      	negs	r7, r3
 8001610:	4338      	orrs	r0, r7
 8001612:	e006      	b.n	8001622 <__ledf2+0x82>
 8001614:	4326      	orrs	r6, r4
 8001616:	d103      	bne.n	8001620 <__ledf2+0x80>
 8001618:	4550      	cmp	r0, sl
 800161a:	d1f6      	bne.n	800160a <__ledf2+0x6a>
 800161c:	4311      	orrs	r1, r2
 800161e:	d01c      	beq.n	800165a <__ledf2+0xba>
 8001620:	2002      	movs	r0, #2
 8001622:	b003      	add	sp, #12
 8001624:	bcf0      	pop	{r4, r5, r6, r7}
 8001626:	46bb      	mov	fp, r7
 8001628:	46b2      	mov	sl, r6
 800162a:	46a9      	mov	r9, r5
 800162c:	46a0      	mov	r8, r4
 800162e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001630:	2800      	cmp	r0, #0
 8001632:	d0ea      	beq.n	800160a <__ledf2+0x6a>
 8001634:	9b01      	ldr	r3, [sp, #4]
 8001636:	4563      	cmp	r3, ip
 8001638:	d1e7      	bne.n	800160a <__ledf2+0x6a>
 800163a:	4582      	cmp	sl, r0
 800163c:	dce5      	bgt.n	800160a <__ledf2+0x6a>
 800163e:	db02      	blt.n	8001646 <__ledf2+0xa6>
 8001640:	428e      	cmp	r6, r1
 8001642:	d8e2      	bhi.n	800160a <__ledf2+0x6a>
 8001644:	d00e      	beq.n	8001664 <__ledf2+0xc4>
 8001646:	9b01      	ldr	r3, [sp, #4]
 8001648:	0058      	lsls	r0, r3, #1
 800164a:	3801      	subs	r0, #1
 800164c:	e7e9      	b.n	8001622 <__ledf2+0x82>
 800164e:	2c00      	cmp	r4, #0
 8001650:	d0cd      	beq.n	80015ee <__ledf2+0x4e>
 8001652:	e7d7      	b.n	8001604 <__ledf2+0x64>
 8001654:	2c00      	cmp	r4, #0
 8001656:	d0e4      	beq.n	8001622 <__ledf2+0x82>
 8001658:	e7d7      	b.n	800160a <__ledf2+0x6a>
 800165a:	9b01      	ldr	r3, [sp, #4]
 800165c:	2000      	movs	r0, #0
 800165e:	4563      	cmp	r3, ip
 8001660:	d0df      	beq.n	8001622 <__ledf2+0x82>
 8001662:	e7d2      	b.n	800160a <__ledf2+0x6a>
 8001664:	45c8      	cmp	r8, r9
 8001666:	d8d0      	bhi.n	800160a <__ledf2+0x6a>
 8001668:	2000      	movs	r0, #0
 800166a:	45c8      	cmp	r8, r9
 800166c:	d2d9      	bcs.n	8001622 <__ledf2+0x82>
 800166e:	e7ea      	b.n	8001646 <__ledf2+0xa6>
 8001670:	9b01      	ldr	r3, [sp, #4]
 8001672:	4563      	cmp	r3, ip
 8001674:	d0e4      	beq.n	8001640 <__ledf2+0xa0>
 8001676:	e7c8      	b.n	800160a <__ledf2+0x6a>
 8001678:	000007ff 	.word	0x000007ff

0800167c <__aeabi_dmul>:
 800167c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800167e:	4657      	mov	r7, sl
 8001680:	464e      	mov	r6, r9
 8001682:	46de      	mov	lr, fp
 8001684:	4645      	mov	r5, r8
 8001686:	b5e0      	push	{r5, r6, r7, lr}
 8001688:	001f      	movs	r7, r3
 800168a:	030b      	lsls	r3, r1, #12
 800168c:	0b1b      	lsrs	r3, r3, #12
 800168e:	0016      	movs	r6, r2
 8001690:	469a      	mov	sl, r3
 8001692:	0fca      	lsrs	r2, r1, #31
 8001694:	004b      	lsls	r3, r1, #1
 8001696:	0004      	movs	r4, r0
 8001698:	4691      	mov	r9, r2
 800169a:	b085      	sub	sp, #20
 800169c:	0d5b      	lsrs	r3, r3, #21
 800169e:	d100      	bne.n	80016a2 <__aeabi_dmul+0x26>
 80016a0:	e1cf      	b.n	8001a42 <__aeabi_dmul+0x3c6>
 80016a2:	4acd      	ldr	r2, [pc, #820]	@ (80019d8 <__aeabi_dmul+0x35c>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d055      	beq.n	8001754 <__aeabi_dmul+0xd8>
 80016a8:	4651      	mov	r1, sl
 80016aa:	0f42      	lsrs	r2, r0, #29
 80016ac:	00c9      	lsls	r1, r1, #3
 80016ae:	430a      	orrs	r2, r1
 80016b0:	2180      	movs	r1, #128	@ 0x80
 80016b2:	0409      	lsls	r1, r1, #16
 80016b4:	4311      	orrs	r1, r2
 80016b6:	00c2      	lsls	r2, r0, #3
 80016b8:	4690      	mov	r8, r2
 80016ba:	4ac8      	ldr	r2, [pc, #800]	@ (80019dc <__aeabi_dmul+0x360>)
 80016bc:	468a      	mov	sl, r1
 80016be:	4693      	mov	fp, r2
 80016c0:	449b      	add	fp, r3
 80016c2:	2300      	movs	r3, #0
 80016c4:	2500      	movs	r5, #0
 80016c6:	9302      	str	r3, [sp, #8]
 80016c8:	033c      	lsls	r4, r7, #12
 80016ca:	007b      	lsls	r3, r7, #1
 80016cc:	0ffa      	lsrs	r2, r7, #31
 80016ce:	9601      	str	r6, [sp, #4]
 80016d0:	0b24      	lsrs	r4, r4, #12
 80016d2:	0d5b      	lsrs	r3, r3, #21
 80016d4:	9200      	str	r2, [sp, #0]
 80016d6:	d100      	bne.n	80016da <__aeabi_dmul+0x5e>
 80016d8:	e188      	b.n	80019ec <__aeabi_dmul+0x370>
 80016da:	4abf      	ldr	r2, [pc, #764]	@ (80019d8 <__aeabi_dmul+0x35c>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d100      	bne.n	80016e2 <__aeabi_dmul+0x66>
 80016e0:	e092      	b.n	8001808 <__aeabi_dmul+0x18c>
 80016e2:	4abe      	ldr	r2, [pc, #760]	@ (80019dc <__aeabi_dmul+0x360>)
 80016e4:	4694      	mov	ip, r2
 80016e6:	4463      	add	r3, ip
 80016e8:	449b      	add	fp, r3
 80016ea:	2d0a      	cmp	r5, #10
 80016ec:	dc42      	bgt.n	8001774 <__aeabi_dmul+0xf8>
 80016ee:	00e4      	lsls	r4, r4, #3
 80016f0:	0f73      	lsrs	r3, r6, #29
 80016f2:	4323      	orrs	r3, r4
 80016f4:	2480      	movs	r4, #128	@ 0x80
 80016f6:	4649      	mov	r1, r9
 80016f8:	0424      	lsls	r4, r4, #16
 80016fa:	431c      	orrs	r4, r3
 80016fc:	00f3      	lsls	r3, r6, #3
 80016fe:	9301      	str	r3, [sp, #4]
 8001700:	9b00      	ldr	r3, [sp, #0]
 8001702:	2000      	movs	r0, #0
 8001704:	4059      	eors	r1, r3
 8001706:	b2cb      	uxtb	r3, r1
 8001708:	9303      	str	r3, [sp, #12]
 800170a:	2d02      	cmp	r5, #2
 800170c:	dc00      	bgt.n	8001710 <__aeabi_dmul+0x94>
 800170e:	e094      	b.n	800183a <__aeabi_dmul+0x1be>
 8001710:	2301      	movs	r3, #1
 8001712:	40ab      	lsls	r3, r5
 8001714:	001d      	movs	r5, r3
 8001716:	23a6      	movs	r3, #166	@ 0xa6
 8001718:	002a      	movs	r2, r5
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	401a      	ands	r2, r3
 800171e:	421d      	tst	r5, r3
 8001720:	d000      	beq.n	8001724 <__aeabi_dmul+0xa8>
 8001722:	e229      	b.n	8001b78 <__aeabi_dmul+0x4fc>
 8001724:	2390      	movs	r3, #144	@ 0x90
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	421d      	tst	r5, r3
 800172a:	d100      	bne.n	800172e <__aeabi_dmul+0xb2>
 800172c:	e24d      	b.n	8001bca <__aeabi_dmul+0x54e>
 800172e:	2300      	movs	r3, #0
 8001730:	2480      	movs	r4, #128	@ 0x80
 8001732:	4699      	mov	r9, r3
 8001734:	0324      	lsls	r4, r4, #12
 8001736:	4ba8      	ldr	r3, [pc, #672]	@ (80019d8 <__aeabi_dmul+0x35c>)
 8001738:	0010      	movs	r0, r2
 800173a:	464a      	mov	r2, r9
 800173c:	051b      	lsls	r3, r3, #20
 800173e:	4323      	orrs	r3, r4
 8001740:	07d2      	lsls	r2, r2, #31
 8001742:	4313      	orrs	r3, r2
 8001744:	0019      	movs	r1, r3
 8001746:	b005      	add	sp, #20
 8001748:	bcf0      	pop	{r4, r5, r6, r7}
 800174a:	46bb      	mov	fp, r7
 800174c:	46b2      	mov	sl, r6
 800174e:	46a9      	mov	r9, r5
 8001750:	46a0      	mov	r8, r4
 8001752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001754:	4652      	mov	r2, sl
 8001756:	4302      	orrs	r2, r0
 8001758:	4690      	mov	r8, r2
 800175a:	d000      	beq.n	800175e <__aeabi_dmul+0xe2>
 800175c:	e1ac      	b.n	8001ab8 <__aeabi_dmul+0x43c>
 800175e:	469b      	mov	fp, r3
 8001760:	2302      	movs	r3, #2
 8001762:	4692      	mov	sl, r2
 8001764:	2508      	movs	r5, #8
 8001766:	9302      	str	r3, [sp, #8]
 8001768:	e7ae      	b.n	80016c8 <__aeabi_dmul+0x4c>
 800176a:	9b00      	ldr	r3, [sp, #0]
 800176c:	46a2      	mov	sl, r4
 800176e:	4699      	mov	r9, r3
 8001770:	9b01      	ldr	r3, [sp, #4]
 8001772:	4698      	mov	r8, r3
 8001774:	9b02      	ldr	r3, [sp, #8]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d100      	bne.n	800177c <__aeabi_dmul+0x100>
 800177a:	e1ca      	b.n	8001b12 <__aeabi_dmul+0x496>
 800177c:	2b03      	cmp	r3, #3
 800177e:	d100      	bne.n	8001782 <__aeabi_dmul+0x106>
 8001780:	e192      	b.n	8001aa8 <__aeabi_dmul+0x42c>
 8001782:	2b01      	cmp	r3, #1
 8001784:	d110      	bne.n	80017a8 <__aeabi_dmul+0x12c>
 8001786:	2300      	movs	r3, #0
 8001788:	2400      	movs	r4, #0
 800178a:	2200      	movs	r2, #0
 800178c:	e7d4      	b.n	8001738 <__aeabi_dmul+0xbc>
 800178e:	2201      	movs	r2, #1
 8001790:	087b      	lsrs	r3, r7, #1
 8001792:	403a      	ands	r2, r7
 8001794:	4313      	orrs	r3, r2
 8001796:	4652      	mov	r2, sl
 8001798:	07d2      	lsls	r2, r2, #31
 800179a:	4313      	orrs	r3, r2
 800179c:	4698      	mov	r8, r3
 800179e:	4653      	mov	r3, sl
 80017a0:	085b      	lsrs	r3, r3, #1
 80017a2:	469a      	mov	sl, r3
 80017a4:	9b03      	ldr	r3, [sp, #12]
 80017a6:	4699      	mov	r9, r3
 80017a8:	465b      	mov	r3, fp
 80017aa:	1c58      	adds	r0, r3, #1
 80017ac:	2380      	movs	r3, #128	@ 0x80
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	445b      	add	r3, fp
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	dc00      	bgt.n	80017b8 <__aeabi_dmul+0x13c>
 80017b6:	e1b1      	b.n	8001b1c <__aeabi_dmul+0x4a0>
 80017b8:	4642      	mov	r2, r8
 80017ba:	0752      	lsls	r2, r2, #29
 80017bc:	d00b      	beq.n	80017d6 <__aeabi_dmul+0x15a>
 80017be:	220f      	movs	r2, #15
 80017c0:	4641      	mov	r1, r8
 80017c2:	400a      	ands	r2, r1
 80017c4:	2a04      	cmp	r2, #4
 80017c6:	d006      	beq.n	80017d6 <__aeabi_dmul+0x15a>
 80017c8:	4642      	mov	r2, r8
 80017ca:	1d11      	adds	r1, r2, #4
 80017cc:	4541      	cmp	r1, r8
 80017ce:	4192      	sbcs	r2, r2
 80017d0:	4688      	mov	r8, r1
 80017d2:	4252      	negs	r2, r2
 80017d4:	4492      	add	sl, r2
 80017d6:	4652      	mov	r2, sl
 80017d8:	01d2      	lsls	r2, r2, #7
 80017da:	d506      	bpl.n	80017ea <__aeabi_dmul+0x16e>
 80017dc:	4652      	mov	r2, sl
 80017de:	4b80      	ldr	r3, [pc, #512]	@ (80019e0 <__aeabi_dmul+0x364>)
 80017e0:	401a      	ands	r2, r3
 80017e2:	2380      	movs	r3, #128	@ 0x80
 80017e4:	4692      	mov	sl, r2
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	18c3      	adds	r3, r0, r3
 80017ea:	4a7e      	ldr	r2, [pc, #504]	@ (80019e4 <__aeabi_dmul+0x368>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	dd00      	ble.n	80017f2 <__aeabi_dmul+0x176>
 80017f0:	e18f      	b.n	8001b12 <__aeabi_dmul+0x496>
 80017f2:	4642      	mov	r2, r8
 80017f4:	08d1      	lsrs	r1, r2, #3
 80017f6:	4652      	mov	r2, sl
 80017f8:	0752      	lsls	r2, r2, #29
 80017fa:	430a      	orrs	r2, r1
 80017fc:	4651      	mov	r1, sl
 80017fe:	055b      	lsls	r3, r3, #21
 8001800:	024c      	lsls	r4, r1, #9
 8001802:	0b24      	lsrs	r4, r4, #12
 8001804:	0d5b      	lsrs	r3, r3, #21
 8001806:	e797      	b.n	8001738 <__aeabi_dmul+0xbc>
 8001808:	4b73      	ldr	r3, [pc, #460]	@ (80019d8 <__aeabi_dmul+0x35c>)
 800180a:	4326      	orrs	r6, r4
 800180c:	469c      	mov	ip, r3
 800180e:	44e3      	add	fp, ip
 8001810:	2e00      	cmp	r6, #0
 8001812:	d100      	bne.n	8001816 <__aeabi_dmul+0x19a>
 8001814:	e16f      	b.n	8001af6 <__aeabi_dmul+0x47a>
 8001816:	2303      	movs	r3, #3
 8001818:	4649      	mov	r1, r9
 800181a:	431d      	orrs	r5, r3
 800181c:	9b00      	ldr	r3, [sp, #0]
 800181e:	4059      	eors	r1, r3
 8001820:	b2cb      	uxtb	r3, r1
 8001822:	9303      	str	r3, [sp, #12]
 8001824:	2d0a      	cmp	r5, #10
 8001826:	dd00      	ble.n	800182a <__aeabi_dmul+0x1ae>
 8001828:	e133      	b.n	8001a92 <__aeabi_dmul+0x416>
 800182a:	2301      	movs	r3, #1
 800182c:	40ab      	lsls	r3, r5
 800182e:	001d      	movs	r5, r3
 8001830:	2303      	movs	r3, #3
 8001832:	9302      	str	r3, [sp, #8]
 8001834:	2288      	movs	r2, #136	@ 0x88
 8001836:	422a      	tst	r2, r5
 8001838:	d197      	bne.n	800176a <__aeabi_dmul+0xee>
 800183a:	4642      	mov	r2, r8
 800183c:	4643      	mov	r3, r8
 800183e:	0412      	lsls	r2, r2, #16
 8001840:	0c12      	lsrs	r2, r2, #16
 8001842:	0016      	movs	r6, r2
 8001844:	9801      	ldr	r0, [sp, #4]
 8001846:	0c1d      	lsrs	r5, r3, #16
 8001848:	0c03      	lsrs	r3, r0, #16
 800184a:	0400      	lsls	r0, r0, #16
 800184c:	0c00      	lsrs	r0, r0, #16
 800184e:	4346      	muls	r6, r0
 8001850:	46b4      	mov	ip, r6
 8001852:	001e      	movs	r6, r3
 8001854:	436e      	muls	r6, r5
 8001856:	9600      	str	r6, [sp, #0]
 8001858:	0016      	movs	r6, r2
 800185a:	0007      	movs	r7, r0
 800185c:	435e      	muls	r6, r3
 800185e:	4661      	mov	r1, ip
 8001860:	46b0      	mov	r8, r6
 8001862:	436f      	muls	r7, r5
 8001864:	0c0e      	lsrs	r6, r1, #16
 8001866:	44b8      	add	r8, r7
 8001868:	4446      	add	r6, r8
 800186a:	42b7      	cmp	r7, r6
 800186c:	d905      	bls.n	800187a <__aeabi_dmul+0x1fe>
 800186e:	2180      	movs	r1, #128	@ 0x80
 8001870:	0249      	lsls	r1, r1, #9
 8001872:	4688      	mov	r8, r1
 8001874:	9f00      	ldr	r7, [sp, #0]
 8001876:	4447      	add	r7, r8
 8001878:	9700      	str	r7, [sp, #0]
 800187a:	4661      	mov	r1, ip
 800187c:	0409      	lsls	r1, r1, #16
 800187e:	0c09      	lsrs	r1, r1, #16
 8001880:	0c37      	lsrs	r7, r6, #16
 8001882:	0436      	lsls	r6, r6, #16
 8001884:	468c      	mov	ip, r1
 8001886:	0031      	movs	r1, r6
 8001888:	4461      	add	r1, ip
 800188a:	9101      	str	r1, [sp, #4]
 800188c:	0011      	movs	r1, r2
 800188e:	0c26      	lsrs	r6, r4, #16
 8001890:	0424      	lsls	r4, r4, #16
 8001892:	0c24      	lsrs	r4, r4, #16
 8001894:	4361      	muls	r1, r4
 8001896:	468c      	mov	ip, r1
 8001898:	0021      	movs	r1, r4
 800189a:	4369      	muls	r1, r5
 800189c:	4689      	mov	r9, r1
 800189e:	4661      	mov	r1, ip
 80018a0:	0c09      	lsrs	r1, r1, #16
 80018a2:	4688      	mov	r8, r1
 80018a4:	4372      	muls	r2, r6
 80018a6:	444a      	add	r2, r9
 80018a8:	4442      	add	r2, r8
 80018aa:	4375      	muls	r5, r6
 80018ac:	4591      	cmp	r9, r2
 80018ae:	d903      	bls.n	80018b8 <__aeabi_dmul+0x23c>
 80018b0:	2180      	movs	r1, #128	@ 0x80
 80018b2:	0249      	lsls	r1, r1, #9
 80018b4:	4688      	mov	r8, r1
 80018b6:	4445      	add	r5, r8
 80018b8:	0c11      	lsrs	r1, r2, #16
 80018ba:	4688      	mov	r8, r1
 80018bc:	4661      	mov	r1, ip
 80018be:	0409      	lsls	r1, r1, #16
 80018c0:	0c09      	lsrs	r1, r1, #16
 80018c2:	468c      	mov	ip, r1
 80018c4:	0412      	lsls	r2, r2, #16
 80018c6:	4462      	add	r2, ip
 80018c8:	18b9      	adds	r1, r7, r2
 80018ca:	9102      	str	r1, [sp, #8]
 80018cc:	4651      	mov	r1, sl
 80018ce:	0c09      	lsrs	r1, r1, #16
 80018d0:	468c      	mov	ip, r1
 80018d2:	4651      	mov	r1, sl
 80018d4:	040f      	lsls	r7, r1, #16
 80018d6:	0c3f      	lsrs	r7, r7, #16
 80018d8:	0039      	movs	r1, r7
 80018da:	4341      	muls	r1, r0
 80018dc:	4445      	add	r5, r8
 80018de:	4688      	mov	r8, r1
 80018e0:	4661      	mov	r1, ip
 80018e2:	4341      	muls	r1, r0
 80018e4:	468a      	mov	sl, r1
 80018e6:	4641      	mov	r1, r8
 80018e8:	4660      	mov	r0, ip
 80018ea:	0c09      	lsrs	r1, r1, #16
 80018ec:	4689      	mov	r9, r1
 80018ee:	4358      	muls	r0, r3
 80018f0:	437b      	muls	r3, r7
 80018f2:	4453      	add	r3, sl
 80018f4:	444b      	add	r3, r9
 80018f6:	459a      	cmp	sl, r3
 80018f8:	d903      	bls.n	8001902 <__aeabi_dmul+0x286>
 80018fa:	2180      	movs	r1, #128	@ 0x80
 80018fc:	0249      	lsls	r1, r1, #9
 80018fe:	4689      	mov	r9, r1
 8001900:	4448      	add	r0, r9
 8001902:	0c19      	lsrs	r1, r3, #16
 8001904:	4689      	mov	r9, r1
 8001906:	4641      	mov	r1, r8
 8001908:	0409      	lsls	r1, r1, #16
 800190a:	0c09      	lsrs	r1, r1, #16
 800190c:	4688      	mov	r8, r1
 800190e:	0039      	movs	r1, r7
 8001910:	4361      	muls	r1, r4
 8001912:	041b      	lsls	r3, r3, #16
 8001914:	4443      	add	r3, r8
 8001916:	4688      	mov	r8, r1
 8001918:	4661      	mov	r1, ip
 800191a:	434c      	muls	r4, r1
 800191c:	4371      	muls	r1, r6
 800191e:	468c      	mov	ip, r1
 8001920:	4641      	mov	r1, r8
 8001922:	4377      	muls	r7, r6
 8001924:	0c0e      	lsrs	r6, r1, #16
 8001926:	193f      	adds	r7, r7, r4
 8001928:	19f6      	adds	r6, r6, r7
 800192a:	4448      	add	r0, r9
 800192c:	42b4      	cmp	r4, r6
 800192e:	d903      	bls.n	8001938 <__aeabi_dmul+0x2bc>
 8001930:	2180      	movs	r1, #128	@ 0x80
 8001932:	0249      	lsls	r1, r1, #9
 8001934:	4689      	mov	r9, r1
 8001936:	44cc      	add	ip, r9
 8001938:	9902      	ldr	r1, [sp, #8]
 800193a:	9f00      	ldr	r7, [sp, #0]
 800193c:	4689      	mov	r9, r1
 800193e:	0431      	lsls	r1, r6, #16
 8001940:	444f      	add	r7, r9
 8001942:	4689      	mov	r9, r1
 8001944:	4641      	mov	r1, r8
 8001946:	4297      	cmp	r7, r2
 8001948:	4192      	sbcs	r2, r2
 800194a:	040c      	lsls	r4, r1, #16
 800194c:	0c24      	lsrs	r4, r4, #16
 800194e:	444c      	add	r4, r9
 8001950:	18ff      	adds	r7, r7, r3
 8001952:	4252      	negs	r2, r2
 8001954:	1964      	adds	r4, r4, r5
 8001956:	18a1      	adds	r1, r4, r2
 8001958:	429f      	cmp	r7, r3
 800195a:	419b      	sbcs	r3, r3
 800195c:	4688      	mov	r8, r1
 800195e:	4682      	mov	sl, r0
 8001960:	425b      	negs	r3, r3
 8001962:	4699      	mov	r9, r3
 8001964:	4590      	cmp	r8, r2
 8001966:	4192      	sbcs	r2, r2
 8001968:	42ac      	cmp	r4, r5
 800196a:	41a4      	sbcs	r4, r4
 800196c:	44c2      	add	sl, r8
 800196e:	44d1      	add	r9, sl
 8001970:	4252      	negs	r2, r2
 8001972:	4264      	negs	r4, r4
 8001974:	4314      	orrs	r4, r2
 8001976:	4599      	cmp	r9, r3
 8001978:	419b      	sbcs	r3, r3
 800197a:	4582      	cmp	sl, r0
 800197c:	4192      	sbcs	r2, r2
 800197e:	425b      	negs	r3, r3
 8001980:	4252      	negs	r2, r2
 8001982:	4313      	orrs	r3, r2
 8001984:	464a      	mov	r2, r9
 8001986:	0c36      	lsrs	r6, r6, #16
 8001988:	19a4      	adds	r4, r4, r6
 800198a:	18e3      	adds	r3, r4, r3
 800198c:	4463      	add	r3, ip
 800198e:	025b      	lsls	r3, r3, #9
 8001990:	0dd2      	lsrs	r2, r2, #23
 8001992:	431a      	orrs	r2, r3
 8001994:	9901      	ldr	r1, [sp, #4]
 8001996:	4692      	mov	sl, r2
 8001998:	027a      	lsls	r2, r7, #9
 800199a:	430a      	orrs	r2, r1
 800199c:	1e50      	subs	r0, r2, #1
 800199e:	4182      	sbcs	r2, r0
 80019a0:	0dff      	lsrs	r7, r7, #23
 80019a2:	4317      	orrs	r7, r2
 80019a4:	464a      	mov	r2, r9
 80019a6:	0252      	lsls	r2, r2, #9
 80019a8:	4317      	orrs	r7, r2
 80019aa:	46b8      	mov	r8, r7
 80019ac:	01db      	lsls	r3, r3, #7
 80019ae:	d500      	bpl.n	80019b2 <__aeabi_dmul+0x336>
 80019b0:	e6ed      	b.n	800178e <__aeabi_dmul+0x112>
 80019b2:	4b0d      	ldr	r3, [pc, #52]	@ (80019e8 <__aeabi_dmul+0x36c>)
 80019b4:	9a03      	ldr	r2, [sp, #12]
 80019b6:	445b      	add	r3, fp
 80019b8:	4691      	mov	r9, r2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	dc00      	bgt.n	80019c0 <__aeabi_dmul+0x344>
 80019be:	e0ac      	b.n	8001b1a <__aeabi_dmul+0x49e>
 80019c0:	003a      	movs	r2, r7
 80019c2:	0752      	lsls	r2, r2, #29
 80019c4:	d100      	bne.n	80019c8 <__aeabi_dmul+0x34c>
 80019c6:	e710      	b.n	80017ea <__aeabi_dmul+0x16e>
 80019c8:	220f      	movs	r2, #15
 80019ca:	4658      	mov	r0, fp
 80019cc:	403a      	ands	r2, r7
 80019ce:	2a04      	cmp	r2, #4
 80019d0:	d000      	beq.n	80019d4 <__aeabi_dmul+0x358>
 80019d2:	e6f9      	b.n	80017c8 <__aeabi_dmul+0x14c>
 80019d4:	e709      	b.n	80017ea <__aeabi_dmul+0x16e>
 80019d6:	46c0      	nop			@ (mov r8, r8)
 80019d8:	000007ff 	.word	0x000007ff
 80019dc:	fffffc01 	.word	0xfffffc01
 80019e0:	feffffff 	.word	0xfeffffff
 80019e4:	000007fe 	.word	0x000007fe
 80019e8:	000003ff 	.word	0x000003ff
 80019ec:	0022      	movs	r2, r4
 80019ee:	4332      	orrs	r2, r6
 80019f0:	d06f      	beq.n	8001ad2 <__aeabi_dmul+0x456>
 80019f2:	2c00      	cmp	r4, #0
 80019f4:	d100      	bne.n	80019f8 <__aeabi_dmul+0x37c>
 80019f6:	e0c2      	b.n	8001b7e <__aeabi_dmul+0x502>
 80019f8:	0020      	movs	r0, r4
 80019fa:	f000 fddf 	bl	80025bc <__clzsi2>
 80019fe:	0002      	movs	r2, r0
 8001a00:	0003      	movs	r3, r0
 8001a02:	3a0b      	subs	r2, #11
 8001a04:	201d      	movs	r0, #29
 8001a06:	1a82      	subs	r2, r0, r2
 8001a08:	0030      	movs	r0, r6
 8001a0a:	0019      	movs	r1, r3
 8001a0c:	40d0      	lsrs	r0, r2
 8001a0e:	3908      	subs	r1, #8
 8001a10:	408c      	lsls	r4, r1
 8001a12:	0002      	movs	r2, r0
 8001a14:	4322      	orrs	r2, r4
 8001a16:	0034      	movs	r4, r6
 8001a18:	408c      	lsls	r4, r1
 8001a1a:	4659      	mov	r1, fp
 8001a1c:	1acb      	subs	r3, r1, r3
 8001a1e:	4986      	ldr	r1, [pc, #536]	@ (8001c38 <__aeabi_dmul+0x5bc>)
 8001a20:	468b      	mov	fp, r1
 8001a22:	449b      	add	fp, r3
 8001a24:	2d0a      	cmp	r5, #10
 8001a26:	dd00      	ble.n	8001a2a <__aeabi_dmul+0x3ae>
 8001a28:	e6a4      	b.n	8001774 <__aeabi_dmul+0xf8>
 8001a2a:	4649      	mov	r1, r9
 8001a2c:	9b00      	ldr	r3, [sp, #0]
 8001a2e:	9401      	str	r4, [sp, #4]
 8001a30:	4059      	eors	r1, r3
 8001a32:	b2cb      	uxtb	r3, r1
 8001a34:	0014      	movs	r4, r2
 8001a36:	2000      	movs	r0, #0
 8001a38:	9303      	str	r3, [sp, #12]
 8001a3a:	2d02      	cmp	r5, #2
 8001a3c:	dd00      	ble.n	8001a40 <__aeabi_dmul+0x3c4>
 8001a3e:	e667      	b.n	8001710 <__aeabi_dmul+0x94>
 8001a40:	e6fb      	b.n	800183a <__aeabi_dmul+0x1be>
 8001a42:	4653      	mov	r3, sl
 8001a44:	4303      	orrs	r3, r0
 8001a46:	4698      	mov	r8, r3
 8001a48:	d03c      	beq.n	8001ac4 <__aeabi_dmul+0x448>
 8001a4a:	4653      	mov	r3, sl
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d100      	bne.n	8001a52 <__aeabi_dmul+0x3d6>
 8001a50:	e0a3      	b.n	8001b9a <__aeabi_dmul+0x51e>
 8001a52:	4650      	mov	r0, sl
 8001a54:	f000 fdb2 	bl	80025bc <__clzsi2>
 8001a58:	230b      	movs	r3, #11
 8001a5a:	425b      	negs	r3, r3
 8001a5c:	469c      	mov	ip, r3
 8001a5e:	0002      	movs	r2, r0
 8001a60:	4484      	add	ip, r0
 8001a62:	0011      	movs	r1, r2
 8001a64:	4650      	mov	r0, sl
 8001a66:	3908      	subs	r1, #8
 8001a68:	4088      	lsls	r0, r1
 8001a6a:	231d      	movs	r3, #29
 8001a6c:	4680      	mov	r8, r0
 8001a6e:	4660      	mov	r0, ip
 8001a70:	1a1b      	subs	r3, r3, r0
 8001a72:	0020      	movs	r0, r4
 8001a74:	40d8      	lsrs	r0, r3
 8001a76:	0003      	movs	r3, r0
 8001a78:	4640      	mov	r0, r8
 8001a7a:	4303      	orrs	r3, r0
 8001a7c:	469a      	mov	sl, r3
 8001a7e:	0023      	movs	r3, r4
 8001a80:	408b      	lsls	r3, r1
 8001a82:	4698      	mov	r8, r3
 8001a84:	4b6c      	ldr	r3, [pc, #432]	@ (8001c38 <__aeabi_dmul+0x5bc>)
 8001a86:	2500      	movs	r5, #0
 8001a88:	1a9b      	subs	r3, r3, r2
 8001a8a:	469b      	mov	fp, r3
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	9302      	str	r3, [sp, #8]
 8001a90:	e61a      	b.n	80016c8 <__aeabi_dmul+0x4c>
 8001a92:	2d0f      	cmp	r5, #15
 8001a94:	d000      	beq.n	8001a98 <__aeabi_dmul+0x41c>
 8001a96:	e0c9      	b.n	8001c2c <__aeabi_dmul+0x5b0>
 8001a98:	2380      	movs	r3, #128	@ 0x80
 8001a9a:	4652      	mov	r2, sl
 8001a9c:	031b      	lsls	r3, r3, #12
 8001a9e:	421a      	tst	r2, r3
 8001aa0:	d002      	beq.n	8001aa8 <__aeabi_dmul+0x42c>
 8001aa2:	421c      	tst	r4, r3
 8001aa4:	d100      	bne.n	8001aa8 <__aeabi_dmul+0x42c>
 8001aa6:	e092      	b.n	8001bce <__aeabi_dmul+0x552>
 8001aa8:	2480      	movs	r4, #128	@ 0x80
 8001aaa:	4653      	mov	r3, sl
 8001aac:	0324      	lsls	r4, r4, #12
 8001aae:	431c      	orrs	r4, r3
 8001ab0:	0324      	lsls	r4, r4, #12
 8001ab2:	4642      	mov	r2, r8
 8001ab4:	0b24      	lsrs	r4, r4, #12
 8001ab6:	e63e      	b.n	8001736 <__aeabi_dmul+0xba>
 8001ab8:	469b      	mov	fp, r3
 8001aba:	2303      	movs	r3, #3
 8001abc:	4680      	mov	r8, r0
 8001abe:	250c      	movs	r5, #12
 8001ac0:	9302      	str	r3, [sp, #8]
 8001ac2:	e601      	b.n	80016c8 <__aeabi_dmul+0x4c>
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	469a      	mov	sl, r3
 8001ac8:	469b      	mov	fp, r3
 8001aca:	3301      	adds	r3, #1
 8001acc:	2504      	movs	r5, #4
 8001ace:	9302      	str	r3, [sp, #8]
 8001ad0:	e5fa      	b.n	80016c8 <__aeabi_dmul+0x4c>
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	430d      	orrs	r5, r1
 8001ad6:	2d0a      	cmp	r5, #10
 8001ad8:	dd00      	ble.n	8001adc <__aeabi_dmul+0x460>
 8001ada:	e64b      	b.n	8001774 <__aeabi_dmul+0xf8>
 8001adc:	4649      	mov	r1, r9
 8001ade:	9800      	ldr	r0, [sp, #0]
 8001ae0:	4041      	eors	r1, r0
 8001ae2:	b2c9      	uxtb	r1, r1
 8001ae4:	9103      	str	r1, [sp, #12]
 8001ae6:	2d02      	cmp	r5, #2
 8001ae8:	dc00      	bgt.n	8001aec <__aeabi_dmul+0x470>
 8001aea:	e096      	b.n	8001c1a <__aeabi_dmul+0x59e>
 8001aec:	2300      	movs	r3, #0
 8001aee:	2400      	movs	r4, #0
 8001af0:	2001      	movs	r0, #1
 8001af2:	9301      	str	r3, [sp, #4]
 8001af4:	e60c      	b.n	8001710 <__aeabi_dmul+0x94>
 8001af6:	4649      	mov	r1, r9
 8001af8:	2302      	movs	r3, #2
 8001afa:	9a00      	ldr	r2, [sp, #0]
 8001afc:	432b      	orrs	r3, r5
 8001afe:	4051      	eors	r1, r2
 8001b00:	b2ca      	uxtb	r2, r1
 8001b02:	9203      	str	r2, [sp, #12]
 8001b04:	2b0a      	cmp	r3, #10
 8001b06:	dd00      	ble.n	8001b0a <__aeabi_dmul+0x48e>
 8001b08:	e634      	b.n	8001774 <__aeabi_dmul+0xf8>
 8001b0a:	2d00      	cmp	r5, #0
 8001b0c:	d157      	bne.n	8001bbe <__aeabi_dmul+0x542>
 8001b0e:	9b03      	ldr	r3, [sp, #12]
 8001b10:	4699      	mov	r9, r3
 8001b12:	2400      	movs	r4, #0
 8001b14:	2200      	movs	r2, #0
 8001b16:	4b49      	ldr	r3, [pc, #292]	@ (8001c3c <__aeabi_dmul+0x5c0>)
 8001b18:	e60e      	b.n	8001738 <__aeabi_dmul+0xbc>
 8001b1a:	4658      	mov	r0, fp
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	1ac9      	subs	r1, r1, r3
 8001b20:	2938      	cmp	r1, #56	@ 0x38
 8001b22:	dd00      	ble.n	8001b26 <__aeabi_dmul+0x4aa>
 8001b24:	e62f      	b.n	8001786 <__aeabi_dmul+0x10a>
 8001b26:	291f      	cmp	r1, #31
 8001b28:	dd56      	ble.n	8001bd8 <__aeabi_dmul+0x55c>
 8001b2a:	221f      	movs	r2, #31
 8001b2c:	4654      	mov	r4, sl
 8001b2e:	4252      	negs	r2, r2
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	40dc      	lsrs	r4, r3
 8001b34:	2920      	cmp	r1, #32
 8001b36:	d007      	beq.n	8001b48 <__aeabi_dmul+0x4cc>
 8001b38:	4b41      	ldr	r3, [pc, #260]	@ (8001c40 <__aeabi_dmul+0x5c4>)
 8001b3a:	4642      	mov	r2, r8
 8001b3c:	469c      	mov	ip, r3
 8001b3e:	4653      	mov	r3, sl
 8001b40:	4460      	add	r0, ip
 8001b42:	4083      	lsls	r3, r0
 8001b44:	431a      	orrs	r2, r3
 8001b46:	4690      	mov	r8, r2
 8001b48:	4642      	mov	r2, r8
 8001b4a:	2107      	movs	r1, #7
 8001b4c:	1e53      	subs	r3, r2, #1
 8001b4e:	419a      	sbcs	r2, r3
 8001b50:	000b      	movs	r3, r1
 8001b52:	4322      	orrs	r2, r4
 8001b54:	4013      	ands	r3, r2
 8001b56:	2400      	movs	r4, #0
 8001b58:	4211      	tst	r1, r2
 8001b5a:	d009      	beq.n	8001b70 <__aeabi_dmul+0x4f4>
 8001b5c:	230f      	movs	r3, #15
 8001b5e:	4013      	ands	r3, r2
 8001b60:	2b04      	cmp	r3, #4
 8001b62:	d05d      	beq.n	8001c20 <__aeabi_dmul+0x5a4>
 8001b64:	1d11      	adds	r1, r2, #4
 8001b66:	4291      	cmp	r1, r2
 8001b68:	419b      	sbcs	r3, r3
 8001b6a:	000a      	movs	r2, r1
 8001b6c:	425b      	negs	r3, r3
 8001b6e:	075b      	lsls	r3, r3, #29
 8001b70:	08d2      	lsrs	r2, r2, #3
 8001b72:	431a      	orrs	r2, r3
 8001b74:	2300      	movs	r3, #0
 8001b76:	e5df      	b.n	8001738 <__aeabi_dmul+0xbc>
 8001b78:	9b03      	ldr	r3, [sp, #12]
 8001b7a:	4699      	mov	r9, r3
 8001b7c:	e5fa      	b.n	8001774 <__aeabi_dmul+0xf8>
 8001b7e:	9801      	ldr	r0, [sp, #4]
 8001b80:	f000 fd1c 	bl	80025bc <__clzsi2>
 8001b84:	0002      	movs	r2, r0
 8001b86:	0003      	movs	r3, r0
 8001b88:	3215      	adds	r2, #21
 8001b8a:	3320      	adds	r3, #32
 8001b8c:	2a1c      	cmp	r2, #28
 8001b8e:	dc00      	bgt.n	8001b92 <__aeabi_dmul+0x516>
 8001b90:	e738      	b.n	8001a04 <__aeabi_dmul+0x388>
 8001b92:	9a01      	ldr	r2, [sp, #4]
 8001b94:	3808      	subs	r0, #8
 8001b96:	4082      	lsls	r2, r0
 8001b98:	e73f      	b.n	8001a1a <__aeabi_dmul+0x39e>
 8001b9a:	f000 fd0f 	bl	80025bc <__clzsi2>
 8001b9e:	2315      	movs	r3, #21
 8001ba0:	469c      	mov	ip, r3
 8001ba2:	4484      	add	ip, r0
 8001ba4:	0002      	movs	r2, r0
 8001ba6:	4663      	mov	r3, ip
 8001ba8:	3220      	adds	r2, #32
 8001baa:	2b1c      	cmp	r3, #28
 8001bac:	dc00      	bgt.n	8001bb0 <__aeabi_dmul+0x534>
 8001bae:	e758      	b.n	8001a62 <__aeabi_dmul+0x3e6>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	4698      	mov	r8, r3
 8001bb4:	0023      	movs	r3, r4
 8001bb6:	3808      	subs	r0, #8
 8001bb8:	4083      	lsls	r3, r0
 8001bba:	469a      	mov	sl, r3
 8001bbc:	e762      	b.n	8001a84 <__aeabi_dmul+0x408>
 8001bbe:	001d      	movs	r5, r3
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	2400      	movs	r4, #0
 8001bc4:	2002      	movs	r0, #2
 8001bc6:	9301      	str	r3, [sp, #4]
 8001bc8:	e5a2      	b.n	8001710 <__aeabi_dmul+0x94>
 8001bca:	9002      	str	r0, [sp, #8]
 8001bcc:	e632      	b.n	8001834 <__aeabi_dmul+0x1b8>
 8001bce:	431c      	orrs	r4, r3
 8001bd0:	9b00      	ldr	r3, [sp, #0]
 8001bd2:	9a01      	ldr	r2, [sp, #4]
 8001bd4:	4699      	mov	r9, r3
 8001bd6:	e5ae      	b.n	8001736 <__aeabi_dmul+0xba>
 8001bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c44 <__aeabi_dmul+0x5c8>)
 8001bda:	4652      	mov	r2, sl
 8001bdc:	18c3      	adds	r3, r0, r3
 8001bde:	4640      	mov	r0, r8
 8001be0:	409a      	lsls	r2, r3
 8001be2:	40c8      	lsrs	r0, r1
 8001be4:	4302      	orrs	r2, r0
 8001be6:	4640      	mov	r0, r8
 8001be8:	4098      	lsls	r0, r3
 8001bea:	0003      	movs	r3, r0
 8001bec:	1e58      	subs	r0, r3, #1
 8001bee:	4183      	sbcs	r3, r0
 8001bf0:	4654      	mov	r4, sl
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	40cc      	lsrs	r4, r1
 8001bf6:	0753      	lsls	r3, r2, #29
 8001bf8:	d009      	beq.n	8001c0e <__aeabi_dmul+0x592>
 8001bfa:	230f      	movs	r3, #15
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	d005      	beq.n	8001c0e <__aeabi_dmul+0x592>
 8001c02:	1d13      	adds	r3, r2, #4
 8001c04:	4293      	cmp	r3, r2
 8001c06:	4192      	sbcs	r2, r2
 8001c08:	4252      	negs	r2, r2
 8001c0a:	18a4      	adds	r4, r4, r2
 8001c0c:	001a      	movs	r2, r3
 8001c0e:	0223      	lsls	r3, r4, #8
 8001c10:	d508      	bpl.n	8001c24 <__aeabi_dmul+0x5a8>
 8001c12:	2301      	movs	r3, #1
 8001c14:	2400      	movs	r4, #0
 8001c16:	2200      	movs	r2, #0
 8001c18:	e58e      	b.n	8001738 <__aeabi_dmul+0xbc>
 8001c1a:	4689      	mov	r9, r1
 8001c1c:	2400      	movs	r4, #0
 8001c1e:	e58b      	b.n	8001738 <__aeabi_dmul+0xbc>
 8001c20:	2300      	movs	r3, #0
 8001c22:	e7a5      	b.n	8001b70 <__aeabi_dmul+0x4f4>
 8001c24:	0763      	lsls	r3, r4, #29
 8001c26:	0264      	lsls	r4, r4, #9
 8001c28:	0b24      	lsrs	r4, r4, #12
 8001c2a:	e7a1      	b.n	8001b70 <__aeabi_dmul+0x4f4>
 8001c2c:	9b00      	ldr	r3, [sp, #0]
 8001c2e:	46a2      	mov	sl, r4
 8001c30:	4699      	mov	r9, r3
 8001c32:	9b01      	ldr	r3, [sp, #4]
 8001c34:	4698      	mov	r8, r3
 8001c36:	e737      	b.n	8001aa8 <__aeabi_dmul+0x42c>
 8001c38:	fffffc0d 	.word	0xfffffc0d
 8001c3c:	000007ff 	.word	0x000007ff
 8001c40:	0000043e 	.word	0x0000043e
 8001c44:	0000041e 	.word	0x0000041e

08001c48 <__aeabi_dsub>:
 8001c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c4a:	4657      	mov	r7, sl
 8001c4c:	464e      	mov	r6, r9
 8001c4e:	4645      	mov	r5, r8
 8001c50:	46de      	mov	lr, fp
 8001c52:	b5e0      	push	{r5, r6, r7, lr}
 8001c54:	b083      	sub	sp, #12
 8001c56:	9000      	str	r0, [sp, #0]
 8001c58:	9101      	str	r1, [sp, #4]
 8001c5a:	030c      	lsls	r4, r1, #12
 8001c5c:	004d      	lsls	r5, r1, #1
 8001c5e:	0fce      	lsrs	r6, r1, #31
 8001c60:	0a61      	lsrs	r1, r4, #9
 8001c62:	9c00      	ldr	r4, [sp, #0]
 8001c64:	005f      	lsls	r7, r3, #1
 8001c66:	0f64      	lsrs	r4, r4, #29
 8001c68:	430c      	orrs	r4, r1
 8001c6a:	9900      	ldr	r1, [sp, #0]
 8001c6c:	9200      	str	r2, [sp, #0]
 8001c6e:	9301      	str	r3, [sp, #4]
 8001c70:	00c8      	lsls	r0, r1, #3
 8001c72:	0319      	lsls	r1, r3, #12
 8001c74:	0d7b      	lsrs	r3, r7, #21
 8001c76:	4699      	mov	r9, r3
 8001c78:	9b01      	ldr	r3, [sp, #4]
 8001c7a:	4fcc      	ldr	r7, [pc, #816]	@ (8001fac <__aeabi_dsub+0x364>)
 8001c7c:	0fdb      	lsrs	r3, r3, #31
 8001c7e:	469c      	mov	ip, r3
 8001c80:	0a4b      	lsrs	r3, r1, #9
 8001c82:	9900      	ldr	r1, [sp, #0]
 8001c84:	4680      	mov	r8, r0
 8001c86:	0f49      	lsrs	r1, r1, #29
 8001c88:	4319      	orrs	r1, r3
 8001c8a:	9b00      	ldr	r3, [sp, #0]
 8001c8c:	468b      	mov	fp, r1
 8001c8e:	00da      	lsls	r2, r3, #3
 8001c90:	4692      	mov	sl, r2
 8001c92:	0d6d      	lsrs	r5, r5, #21
 8001c94:	45b9      	cmp	r9, r7
 8001c96:	d100      	bne.n	8001c9a <__aeabi_dsub+0x52>
 8001c98:	e0bf      	b.n	8001e1a <__aeabi_dsub+0x1d2>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	4661      	mov	r1, ip
 8001c9e:	4059      	eors	r1, r3
 8001ca0:	464b      	mov	r3, r9
 8001ca2:	468c      	mov	ip, r1
 8001ca4:	1aeb      	subs	r3, r5, r3
 8001ca6:	428e      	cmp	r6, r1
 8001ca8:	d075      	beq.n	8001d96 <__aeabi_dsub+0x14e>
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	dc00      	bgt.n	8001cb0 <__aeabi_dsub+0x68>
 8001cae:	e2a3      	b.n	80021f8 <__aeabi_dsub+0x5b0>
 8001cb0:	4649      	mov	r1, r9
 8001cb2:	2900      	cmp	r1, #0
 8001cb4:	d100      	bne.n	8001cb8 <__aeabi_dsub+0x70>
 8001cb6:	e0ce      	b.n	8001e56 <__aeabi_dsub+0x20e>
 8001cb8:	42bd      	cmp	r5, r7
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dsub+0x76>
 8001cbc:	e200      	b.n	80020c0 <__aeabi_dsub+0x478>
 8001cbe:	2701      	movs	r7, #1
 8001cc0:	2b38      	cmp	r3, #56	@ 0x38
 8001cc2:	dc19      	bgt.n	8001cf8 <__aeabi_dsub+0xb0>
 8001cc4:	2780      	movs	r7, #128	@ 0x80
 8001cc6:	4659      	mov	r1, fp
 8001cc8:	043f      	lsls	r7, r7, #16
 8001cca:	4339      	orrs	r1, r7
 8001ccc:	468b      	mov	fp, r1
 8001cce:	2b1f      	cmp	r3, #31
 8001cd0:	dd00      	ble.n	8001cd4 <__aeabi_dsub+0x8c>
 8001cd2:	e1fa      	b.n	80020ca <__aeabi_dsub+0x482>
 8001cd4:	2720      	movs	r7, #32
 8001cd6:	1af9      	subs	r1, r7, r3
 8001cd8:	468c      	mov	ip, r1
 8001cda:	4659      	mov	r1, fp
 8001cdc:	4667      	mov	r7, ip
 8001cde:	40b9      	lsls	r1, r7
 8001ce0:	000f      	movs	r7, r1
 8001ce2:	0011      	movs	r1, r2
 8001ce4:	40d9      	lsrs	r1, r3
 8001ce6:	430f      	orrs	r7, r1
 8001ce8:	4661      	mov	r1, ip
 8001cea:	408a      	lsls	r2, r1
 8001cec:	1e51      	subs	r1, r2, #1
 8001cee:	418a      	sbcs	r2, r1
 8001cf0:	4659      	mov	r1, fp
 8001cf2:	40d9      	lsrs	r1, r3
 8001cf4:	4317      	orrs	r7, r2
 8001cf6:	1a64      	subs	r4, r4, r1
 8001cf8:	1bc7      	subs	r7, r0, r7
 8001cfa:	42b8      	cmp	r0, r7
 8001cfc:	4180      	sbcs	r0, r0
 8001cfe:	4240      	negs	r0, r0
 8001d00:	1a24      	subs	r4, r4, r0
 8001d02:	0223      	lsls	r3, r4, #8
 8001d04:	d400      	bmi.n	8001d08 <__aeabi_dsub+0xc0>
 8001d06:	e140      	b.n	8001f8a <__aeabi_dsub+0x342>
 8001d08:	0264      	lsls	r4, r4, #9
 8001d0a:	0a64      	lsrs	r4, r4, #9
 8001d0c:	2c00      	cmp	r4, #0
 8001d0e:	d100      	bne.n	8001d12 <__aeabi_dsub+0xca>
 8001d10:	e154      	b.n	8001fbc <__aeabi_dsub+0x374>
 8001d12:	0020      	movs	r0, r4
 8001d14:	f000 fc52 	bl	80025bc <__clzsi2>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	3b08      	subs	r3, #8
 8001d1c:	2120      	movs	r1, #32
 8001d1e:	0038      	movs	r0, r7
 8001d20:	1aca      	subs	r2, r1, r3
 8001d22:	40d0      	lsrs	r0, r2
 8001d24:	409c      	lsls	r4, r3
 8001d26:	0002      	movs	r2, r0
 8001d28:	409f      	lsls	r7, r3
 8001d2a:	4322      	orrs	r2, r4
 8001d2c:	429d      	cmp	r5, r3
 8001d2e:	dd00      	ble.n	8001d32 <__aeabi_dsub+0xea>
 8001d30:	e1a6      	b.n	8002080 <__aeabi_dsub+0x438>
 8001d32:	1b58      	subs	r0, r3, r5
 8001d34:	3001      	adds	r0, #1
 8001d36:	1a09      	subs	r1, r1, r0
 8001d38:	003c      	movs	r4, r7
 8001d3a:	408f      	lsls	r7, r1
 8001d3c:	40c4      	lsrs	r4, r0
 8001d3e:	1e7b      	subs	r3, r7, #1
 8001d40:	419f      	sbcs	r7, r3
 8001d42:	0013      	movs	r3, r2
 8001d44:	408b      	lsls	r3, r1
 8001d46:	4327      	orrs	r7, r4
 8001d48:	431f      	orrs	r7, r3
 8001d4a:	40c2      	lsrs	r2, r0
 8001d4c:	003b      	movs	r3, r7
 8001d4e:	0014      	movs	r4, r2
 8001d50:	2500      	movs	r5, #0
 8001d52:	4313      	orrs	r3, r2
 8001d54:	d100      	bne.n	8001d58 <__aeabi_dsub+0x110>
 8001d56:	e1f7      	b.n	8002148 <__aeabi_dsub+0x500>
 8001d58:	077b      	lsls	r3, r7, #29
 8001d5a:	d100      	bne.n	8001d5e <__aeabi_dsub+0x116>
 8001d5c:	e377      	b.n	800244e <__aeabi_dsub+0x806>
 8001d5e:	230f      	movs	r3, #15
 8001d60:	0038      	movs	r0, r7
 8001d62:	403b      	ands	r3, r7
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d004      	beq.n	8001d72 <__aeabi_dsub+0x12a>
 8001d68:	1d38      	adds	r0, r7, #4
 8001d6a:	42b8      	cmp	r0, r7
 8001d6c:	41bf      	sbcs	r7, r7
 8001d6e:	427f      	negs	r7, r7
 8001d70:	19e4      	adds	r4, r4, r7
 8001d72:	0223      	lsls	r3, r4, #8
 8001d74:	d400      	bmi.n	8001d78 <__aeabi_dsub+0x130>
 8001d76:	e368      	b.n	800244a <__aeabi_dsub+0x802>
 8001d78:	4b8c      	ldr	r3, [pc, #560]	@ (8001fac <__aeabi_dsub+0x364>)
 8001d7a:	3501      	adds	r5, #1
 8001d7c:	429d      	cmp	r5, r3
 8001d7e:	d100      	bne.n	8001d82 <__aeabi_dsub+0x13a>
 8001d80:	e0f4      	b.n	8001f6c <__aeabi_dsub+0x324>
 8001d82:	4b8b      	ldr	r3, [pc, #556]	@ (8001fb0 <__aeabi_dsub+0x368>)
 8001d84:	056d      	lsls	r5, r5, #21
 8001d86:	401c      	ands	r4, r3
 8001d88:	0d6d      	lsrs	r5, r5, #21
 8001d8a:	0767      	lsls	r7, r4, #29
 8001d8c:	08c0      	lsrs	r0, r0, #3
 8001d8e:	0264      	lsls	r4, r4, #9
 8001d90:	4307      	orrs	r7, r0
 8001d92:	0b24      	lsrs	r4, r4, #12
 8001d94:	e0ec      	b.n	8001f70 <__aeabi_dsub+0x328>
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	dc00      	bgt.n	8001d9c <__aeabi_dsub+0x154>
 8001d9a:	e329      	b.n	80023f0 <__aeabi_dsub+0x7a8>
 8001d9c:	4649      	mov	r1, r9
 8001d9e:	2900      	cmp	r1, #0
 8001da0:	d000      	beq.n	8001da4 <__aeabi_dsub+0x15c>
 8001da2:	e0d6      	b.n	8001f52 <__aeabi_dsub+0x30a>
 8001da4:	4659      	mov	r1, fp
 8001da6:	4311      	orrs	r1, r2
 8001da8:	d100      	bne.n	8001dac <__aeabi_dsub+0x164>
 8001daa:	e12e      	b.n	800200a <__aeabi_dsub+0x3c2>
 8001dac:	1e59      	subs	r1, r3, #1
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d100      	bne.n	8001db4 <__aeabi_dsub+0x16c>
 8001db2:	e1e6      	b.n	8002182 <__aeabi_dsub+0x53a>
 8001db4:	42bb      	cmp	r3, r7
 8001db6:	d100      	bne.n	8001dba <__aeabi_dsub+0x172>
 8001db8:	e182      	b.n	80020c0 <__aeabi_dsub+0x478>
 8001dba:	2701      	movs	r7, #1
 8001dbc:	000b      	movs	r3, r1
 8001dbe:	2938      	cmp	r1, #56	@ 0x38
 8001dc0:	dc14      	bgt.n	8001dec <__aeabi_dsub+0x1a4>
 8001dc2:	2b1f      	cmp	r3, #31
 8001dc4:	dd00      	ble.n	8001dc8 <__aeabi_dsub+0x180>
 8001dc6:	e23c      	b.n	8002242 <__aeabi_dsub+0x5fa>
 8001dc8:	2720      	movs	r7, #32
 8001dca:	1af9      	subs	r1, r7, r3
 8001dcc:	468c      	mov	ip, r1
 8001dce:	4659      	mov	r1, fp
 8001dd0:	4667      	mov	r7, ip
 8001dd2:	40b9      	lsls	r1, r7
 8001dd4:	000f      	movs	r7, r1
 8001dd6:	0011      	movs	r1, r2
 8001dd8:	40d9      	lsrs	r1, r3
 8001dda:	430f      	orrs	r7, r1
 8001ddc:	4661      	mov	r1, ip
 8001dde:	408a      	lsls	r2, r1
 8001de0:	1e51      	subs	r1, r2, #1
 8001de2:	418a      	sbcs	r2, r1
 8001de4:	4659      	mov	r1, fp
 8001de6:	40d9      	lsrs	r1, r3
 8001de8:	4317      	orrs	r7, r2
 8001dea:	1864      	adds	r4, r4, r1
 8001dec:	183f      	adds	r7, r7, r0
 8001dee:	4287      	cmp	r7, r0
 8001df0:	4180      	sbcs	r0, r0
 8001df2:	4240      	negs	r0, r0
 8001df4:	1824      	adds	r4, r4, r0
 8001df6:	0223      	lsls	r3, r4, #8
 8001df8:	d400      	bmi.n	8001dfc <__aeabi_dsub+0x1b4>
 8001dfa:	e0c6      	b.n	8001f8a <__aeabi_dsub+0x342>
 8001dfc:	4b6b      	ldr	r3, [pc, #428]	@ (8001fac <__aeabi_dsub+0x364>)
 8001dfe:	3501      	adds	r5, #1
 8001e00:	429d      	cmp	r5, r3
 8001e02:	d100      	bne.n	8001e06 <__aeabi_dsub+0x1be>
 8001e04:	e0b2      	b.n	8001f6c <__aeabi_dsub+0x324>
 8001e06:	2101      	movs	r1, #1
 8001e08:	4b69      	ldr	r3, [pc, #420]	@ (8001fb0 <__aeabi_dsub+0x368>)
 8001e0a:	087a      	lsrs	r2, r7, #1
 8001e0c:	401c      	ands	r4, r3
 8001e0e:	4039      	ands	r1, r7
 8001e10:	430a      	orrs	r2, r1
 8001e12:	07e7      	lsls	r7, r4, #31
 8001e14:	4317      	orrs	r7, r2
 8001e16:	0864      	lsrs	r4, r4, #1
 8001e18:	e79e      	b.n	8001d58 <__aeabi_dsub+0x110>
 8001e1a:	4b66      	ldr	r3, [pc, #408]	@ (8001fb4 <__aeabi_dsub+0x36c>)
 8001e1c:	4311      	orrs	r1, r2
 8001e1e:	468a      	mov	sl, r1
 8001e20:	18eb      	adds	r3, r5, r3
 8001e22:	2900      	cmp	r1, #0
 8001e24:	d028      	beq.n	8001e78 <__aeabi_dsub+0x230>
 8001e26:	4566      	cmp	r6, ip
 8001e28:	d02c      	beq.n	8001e84 <__aeabi_dsub+0x23c>
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d05b      	beq.n	8001ee6 <__aeabi_dsub+0x29e>
 8001e2e:	2d00      	cmp	r5, #0
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x1ec>
 8001e32:	e12c      	b.n	800208e <__aeabi_dsub+0x446>
 8001e34:	465b      	mov	r3, fp
 8001e36:	4666      	mov	r6, ip
 8001e38:	075f      	lsls	r7, r3, #29
 8001e3a:	08d2      	lsrs	r2, r2, #3
 8001e3c:	4317      	orrs	r7, r2
 8001e3e:	08dd      	lsrs	r5, r3, #3
 8001e40:	003b      	movs	r3, r7
 8001e42:	432b      	orrs	r3, r5
 8001e44:	d100      	bne.n	8001e48 <__aeabi_dsub+0x200>
 8001e46:	e0e2      	b.n	800200e <__aeabi_dsub+0x3c6>
 8001e48:	2480      	movs	r4, #128	@ 0x80
 8001e4a:	0324      	lsls	r4, r4, #12
 8001e4c:	432c      	orrs	r4, r5
 8001e4e:	0324      	lsls	r4, r4, #12
 8001e50:	4d56      	ldr	r5, [pc, #344]	@ (8001fac <__aeabi_dsub+0x364>)
 8001e52:	0b24      	lsrs	r4, r4, #12
 8001e54:	e08c      	b.n	8001f70 <__aeabi_dsub+0x328>
 8001e56:	4659      	mov	r1, fp
 8001e58:	4311      	orrs	r1, r2
 8001e5a:	d100      	bne.n	8001e5e <__aeabi_dsub+0x216>
 8001e5c:	e0d5      	b.n	800200a <__aeabi_dsub+0x3c2>
 8001e5e:	1e59      	subs	r1, r3, #1
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d100      	bne.n	8001e66 <__aeabi_dsub+0x21e>
 8001e64:	e1b9      	b.n	80021da <__aeabi_dsub+0x592>
 8001e66:	42bb      	cmp	r3, r7
 8001e68:	d100      	bne.n	8001e6c <__aeabi_dsub+0x224>
 8001e6a:	e1b1      	b.n	80021d0 <__aeabi_dsub+0x588>
 8001e6c:	2701      	movs	r7, #1
 8001e6e:	000b      	movs	r3, r1
 8001e70:	2938      	cmp	r1, #56	@ 0x38
 8001e72:	dd00      	ble.n	8001e76 <__aeabi_dsub+0x22e>
 8001e74:	e740      	b.n	8001cf8 <__aeabi_dsub+0xb0>
 8001e76:	e72a      	b.n	8001cce <__aeabi_dsub+0x86>
 8001e78:	4661      	mov	r1, ip
 8001e7a:	2701      	movs	r7, #1
 8001e7c:	4079      	eors	r1, r7
 8001e7e:	468c      	mov	ip, r1
 8001e80:	4566      	cmp	r6, ip
 8001e82:	d1d2      	bne.n	8001e2a <__aeabi_dsub+0x1e2>
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d100      	bne.n	8001e8a <__aeabi_dsub+0x242>
 8001e88:	e0c5      	b.n	8002016 <__aeabi_dsub+0x3ce>
 8001e8a:	2d00      	cmp	r5, #0
 8001e8c:	d000      	beq.n	8001e90 <__aeabi_dsub+0x248>
 8001e8e:	e155      	b.n	800213c <__aeabi_dsub+0x4f4>
 8001e90:	464b      	mov	r3, r9
 8001e92:	0025      	movs	r5, r4
 8001e94:	4305      	orrs	r5, r0
 8001e96:	d100      	bne.n	8001e9a <__aeabi_dsub+0x252>
 8001e98:	e212      	b.n	80022c0 <__aeabi_dsub+0x678>
 8001e9a:	1e59      	subs	r1, r3, #1
 8001e9c:	468c      	mov	ip, r1
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x25c>
 8001ea2:	e249      	b.n	8002338 <__aeabi_dsub+0x6f0>
 8001ea4:	4d41      	ldr	r5, [pc, #260]	@ (8001fac <__aeabi_dsub+0x364>)
 8001ea6:	42ab      	cmp	r3, r5
 8001ea8:	d100      	bne.n	8001eac <__aeabi_dsub+0x264>
 8001eaa:	e28f      	b.n	80023cc <__aeabi_dsub+0x784>
 8001eac:	2701      	movs	r7, #1
 8001eae:	2938      	cmp	r1, #56	@ 0x38
 8001eb0:	dc11      	bgt.n	8001ed6 <__aeabi_dsub+0x28e>
 8001eb2:	4663      	mov	r3, ip
 8001eb4:	2b1f      	cmp	r3, #31
 8001eb6:	dd00      	ble.n	8001eba <__aeabi_dsub+0x272>
 8001eb8:	e25b      	b.n	8002372 <__aeabi_dsub+0x72a>
 8001eba:	4661      	mov	r1, ip
 8001ebc:	2320      	movs	r3, #32
 8001ebe:	0027      	movs	r7, r4
 8001ec0:	1a5b      	subs	r3, r3, r1
 8001ec2:	0005      	movs	r5, r0
 8001ec4:	4098      	lsls	r0, r3
 8001ec6:	409f      	lsls	r7, r3
 8001ec8:	40cd      	lsrs	r5, r1
 8001eca:	1e43      	subs	r3, r0, #1
 8001ecc:	4198      	sbcs	r0, r3
 8001ece:	40cc      	lsrs	r4, r1
 8001ed0:	432f      	orrs	r7, r5
 8001ed2:	4307      	orrs	r7, r0
 8001ed4:	44a3      	add	fp, r4
 8001ed6:	18bf      	adds	r7, r7, r2
 8001ed8:	4297      	cmp	r7, r2
 8001eda:	4192      	sbcs	r2, r2
 8001edc:	4252      	negs	r2, r2
 8001ede:	445a      	add	r2, fp
 8001ee0:	0014      	movs	r4, r2
 8001ee2:	464d      	mov	r5, r9
 8001ee4:	e787      	b.n	8001df6 <__aeabi_dsub+0x1ae>
 8001ee6:	4f34      	ldr	r7, [pc, #208]	@ (8001fb8 <__aeabi_dsub+0x370>)
 8001ee8:	1c6b      	adds	r3, r5, #1
 8001eea:	423b      	tst	r3, r7
 8001eec:	d000      	beq.n	8001ef0 <__aeabi_dsub+0x2a8>
 8001eee:	e0b6      	b.n	800205e <__aeabi_dsub+0x416>
 8001ef0:	4659      	mov	r1, fp
 8001ef2:	0023      	movs	r3, r4
 8001ef4:	4311      	orrs	r1, r2
 8001ef6:	000f      	movs	r7, r1
 8001ef8:	4303      	orrs	r3, r0
 8001efa:	2d00      	cmp	r5, #0
 8001efc:	d000      	beq.n	8001f00 <__aeabi_dsub+0x2b8>
 8001efe:	e126      	b.n	800214e <__aeabi_dsub+0x506>
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d100      	bne.n	8001f06 <__aeabi_dsub+0x2be>
 8001f04:	e1c0      	b.n	8002288 <__aeabi_dsub+0x640>
 8001f06:	2900      	cmp	r1, #0
 8001f08:	d100      	bne.n	8001f0c <__aeabi_dsub+0x2c4>
 8001f0a:	e0a1      	b.n	8002050 <__aeabi_dsub+0x408>
 8001f0c:	1a83      	subs	r3, r0, r2
 8001f0e:	4698      	mov	r8, r3
 8001f10:	465b      	mov	r3, fp
 8001f12:	4540      	cmp	r0, r8
 8001f14:	41ad      	sbcs	r5, r5
 8001f16:	1ae3      	subs	r3, r4, r3
 8001f18:	426d      	negs	r5, r5
 8001f1a:	1b5b      	subs	r3, r3, r5
 8001f1c:	2580      	movs	r5, #128	@ 0x80
 8001f1e:	042d      	lsls	r5, r5, #16
 8001f20:	422b      	tst	r3, r5
 8001f22:	d100      	bne.n	8001f26 <__aeabi_dsub+0x2de>
 8001f24:	e14b      	b.n	80021be <__aeabi_dsub+0x576>
 8001f26:	465b      	mov	r3, fp
 8001f28:	1a10      	subs	r0, r2, r0
 8001f2a:	4282      	cmp	r2, r0
 8001f2c:	4192      	sbcs	r2, r2
 8001f2e:	1b1c      	subs	r4, r3, r4
 8001f30:	0007      	movs	r7, r0
 8001f32:	2601      	movs	r6, #1
 8001f34:	4663      	mov	r3, ip
 8001f36:	4252      	negs	r2, r2
 8001f38:	1aa4      	subs	r4, r4, r2
 8001f3a:	4327      	orrs	r7, r4
 8001f3c:	401e      	ands	r6, r3
 8001f3e:	2f00      	cmp	r7, #0
 8001f40:	d100      	bne.n	8001f44 <__aeabi_dsub+0x2fc>
 8001f42:	e142      	b.n	80021ca <__aeabi_dsub+0x582>
 8001f44:	422c      	tst	r4, r5
 8001f46:	d100      	bne.n	8001f4a <__aeabi_dsub+0x302>
 8001f48:	e26d      	b.n	8002426 <__aeabi_dsub+0x7de>
 8001f4a:	4b19      	ldr	r3, [pc, #100]	@ (8001fb0 <__aeabi_dsub+0x368>)
 8001f4c:	2501      	movs	r5, #1
 8001f4e:	401c      	ands	r4, r3
 8001f50:	e71b      	b.n	8001d8a <__aeabi_dsub+0x142>
 8001f52:	42bd      	cmp	r5, r7
 8001f54:	d100      	bne.n	8001f58 <__aeabi_dsub+0x310>
 8001f56:	e13b      	b.n	80021d0 <__aeabi_dsub+0x588>
 8001f58:	2701      	movs	r7, #1
 8001f5a:	2b38      	cmp	r3, #56	@ 0x38
 8001f5c:	dd00      	ble.n	8001f60 <__aeabi_dsub+0x318>
 8001f5e:	e745      	b.n	8001dec <__aeabi_dsub+0x1a4>
 8001f60:	2780      	movs	r7, #128	@ 0x80
 8001f62:	4659      	mov	r1, fp
 8001f64:	043f      	lsls	r7, r7, #16
 8001f66:	4339      	orrs	r1, r7
 8001f68:	468b      	mov	fp, r1
 8001f6a:	e72a      	b.n	8001dc2 <__aeabi_dsub+0x17a>
 8001f6c:	2400      	movs	r4, #0
 8001f6e:	2700      	movs	r7, #0
 8001f70:	052d      	lsls	r5, r5, #20
 8001f72:	4325      	orrs	r5, r4
 8001f74:	07f6      	lsls	r6, r6, #31
 8001f76:	4335      	orrs	r5, r6
 8001f78:	0038      	movs	r0, r7
 8001f7a:	0029      	movs	r1, r5
 8001f7c:	b003      	add	sp, #12
 8001f7e:	bcf0      	pop	{r4, r5, r6, r7}
 8001f80:	46bb      	mov	fp, r7
 8001f82:	46b2      	mov	sl, r6
 8001f84:	46a9      	mov	r9, r5
 8001f86:	46a0      	mov	r8, r4
 8001f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f8a:	077b      	lsls	r3, r7, #29
 8001f8c:	d004      	beq.n	8001f98 <__aeabi_dsub+0x350>
 8001f8e:	230f      	movs	r3, #15
 8001f90:	403b      	ands	r3, r7
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d000      	beq.n	8001f98 <__aeabi_dsub+0x350>
 8001f96:	e6e7      	b.n	8001d68 <__aeabi_dsub+0x120>
 8001f98:	002b      	movs	r3, r5
 8001f9a:	08f8      	lsrs	r0, r7, #3
 8001f9c:	4a03      	ldr	r2, [pc, #12]	@ (8001fac <__aeabi_dsub+0x364>)
 8001f9e:	0767      	lsls	r7, r4, #29
 8001fa0:	4307      	orrs	r7, r0
 8001fa2:	08e5      	lsrs	r5, r4, #3
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d100      	bne.n	8001faa <__aeabi_dsub+0x362>
 8001fa8:	e74a      	b.n	8001e40 <__aeabi_dsub+0x1f8>
 8001faa:	e0a5      	b.n	80020f8 <__aeabi_dsub+0x4b0>
 8001fac:	000007ff 	.word	0x000007ff
 8001fb0:	ff7fffff 	.word	0xff7fffff
 8001fb4:	fffff801 	.word	0xfffff801
 8001fb8:	000007fe 	.word	0x000007fe
 8001fbc:	0038      	movs	r0, r7
 8001fbe:	f000 fafd 	bl	80025bc <__clzsi2>
 8001fc2:	0003      	movs	r3, r0
 8001fc4:	3318      	adds	r3, #24
 8001fc6:	2b1f      	cmp	r3, #31
 8001fc8:	dc00      	bgt.n	8001fcc <__aeabi_dsub+0x384>
 8001fca:	e6a7      	b.n	8001d1c <__aeabi_dsub+0xd4>
 8001fcc:	003a      	movs	r2, r7
 8001fce:	3808      	subs	r0, #8
 8001fd0:	4082      	lsls	r2, r0
 8001fd2:	429d      	cmp	r5, r3
 8001fd4:	dd00      	ble.n	8001fd8 <__aeabi_dsub+0x390>
 8001fd6:	e08a      	b.n	80020ee <__aeabi_dsub+0x4a6>
 8001fd8:	1b5b      	subs	r3, r3, r5
 8001fda:	1c58      	adds	r0, r3, #1
 8001fdc:	281f      	cmp	r0, #31
 8001fde:	dc00      	bgt.n	8001fe2 <__aeabi_dsub+0x39a>
 8001fe0:	e1d8      	b.n	8002394 <__aeabi_dsub+0x74c>
 8001fe2:	0017      	movs	r7, r2
 8001fe4:	3b1f      	subs	r3, #31
 8001fe6:	40df      	lsrs	r7, r3
 8001fe8:	2820      	cmp	r0, #32
 8001fea:	d005      	beq.n	8001ff8 <__aeabi_dsub+0x3b0>
 8001fec:	2340      	movs	r3, #64	@ 0x40
 8001fee:	1a1b      	subs	r3, r3, r0
 8001ff0:	409a      	lsls	r2, r3
 8001ff2:	1e53      	subs	r3, r2, #1
 8001ff4:	419a      	sbcs	r2, r3
 8001ff6:	4317      	orrs	r7, r2
 8001ff8:	2500      	movs	r5, #0
 8001ffa:	2f00      	cmp	r7, #0
 8001ffc:	d100      	bne.n	8002000 <__aeabi_dsub+0x3b8>
 8001ffe:	e0e5      	b.n	80021cc <__aeabi_dsub+0x584>
 8002000:	077b      	lsls	r3, r7, #29
 8002002:	d000      	beq.n	8002006 <__aeabi_dsub+0x3be>
 8002004:	e6ab      	b.n	8001d5e <__aeabi_dsub+0x116>
 8002006:	002c      	movs	r4, r5
 8002008:	e7c6      	b.n	8001f98 <__aeabi_dsub+0x350>
 800200a:	08c0      	lsrs	r0, r0, #3
 800200c:	e7c6      	b.n	8001f9c <__aeabi_dsub+0x354>
 800200e:	2700      	movs	r7, #0
 8002010:	2400      	movs	r4, #0
 8002012:	4dd1      	ldr	r5, [pc, #836]	@ (8002358 <__aeabi_dsub+0x710>)
 8002014:	e7ac      	b.n	8001f70 <__aeabi_dsub+0x328>
 8002016:	4fd1      	ldr	r7, [pc, #836]	@ (800235c <__aeabi_dsub+0x714>)
 8002018:	1c6b      	adds	r3, r5, #1
 800201a:	423b      	tst	r3, r7
 800201c:	d171      	bne.n	8002102 <__aeabi_dsub+0x4ba>
 800201e:	0023      	movs	r3, r4
 8002020:	4303      	orrs	r3, r0
 8002022:	2d00      	cmp	r5, #0
 8002024:	d000      	beq.n	8002028 <__aeabi_dsub+0x3e0>
 8002026:	e14e      	b.n	80022c6 <__aeabi_dsub+0x67e>
 8002028:	4657      	mov	r7, sl
 800202a:	2b00      	cmp	r3, #0
 800202c:	d100      	bne.n	8002030 <__aeabi_dsub+0x3e8>
 800202e:	e1b5      	b.n	800239c <__aeabi_dsub+0x754>
 8002030:	2f00      	cmp	r7, #0
 8002032:	d00d      	beq.n	8002050 <__aeabi_dsub+0x408>
 8002034:	1883      	adds	r3, r0, r2
 8002036:	4283      	cmp	r3, r0
 8002038:	4180      	sbcs	r0, r0
 800203a:	445c      	add	r4, fp
 800203c:	4240      	negs	r0, r0
 800203e:	1824      	adds	r4, r4, r0
 8002040:	0222      	lsls	r2, r4, #8
 8002042:	d500      	bpl.n	8002046 <__aeabi_dsub+0x3fe>
 8002044:	e1c8      	b.n	80023d8 <__aeabi_dsub+0x790>
 8002046:	001f      	movs	r7, r3
 8002048:	4698      	mov	r8, r3
 800204a:	4327      	orrs	r7, r4
 800204c:	d100      	bne.n	8002050 <__aeabi_dsub+0x408>
 800204e:	e0bc      	b.n	80021ca <__aeabi_dsub+0x582>
 8002050:	4643      	mov	r3, r8
 8002052:	0767      	lsls	r7, r4, #29
 8002054:	08db      	lsrs	r3, r3, #3
 8002056:	431f      	orrs	r7, r3
 8002058:	08e5      	lsrs	r5, r4, #3
 800205a:	2300      	movs	r3, #0
 800205c:	e04c      	b.n	80020f8 <__aeabi_dsub+0x4b0>
 800205e:	1a83      	subs	r3, r0, r2
 8002060:	4698      	mov	r8, r3
 8002062:	465b      	mov	r3, fp
 8002064:	4540      	cmp	r0, r8
 8002066:	41bf      	sbcs	r7, r7
 8002068:	1ae3      	subs	r3, r4, r3
 800206a:	427f      	negs	r7, r7
 800206c:	1bdb      	subs	r3, r3, r7
 800206e:	021f      	lsls	r7, r3, #8
 8002070:	d47c      	bmi.n	800216c <__aeabi_dsub+0x524>
 8002072:	4647      	mov	r7, r8
 8002074:	431f      	orrs	r7, r3
 8002076:	d100      	bne.n	800207a <__aeabi_dsub+0x432>
 8002078:	e0a6      	b.n	80021c8 <__aeabi_dsub+0x580>
 800207a:	001c      	movs	r4, r3
 800207c:	4647      	mov	r7, r8
 800207e:	e645      	b.n	8001d0c <__aeabi_dsub+0xc4>
 8002080:	4cb7      	ldr	r4, [pc, #732]	@ (8002360 <__aeabi_dsub+0x718>)
 8002082:	1aed      	subs	r5, r5, r3
 8002084:	4014      	ands	r4, r2
 8002086:	077b      	lsls	r3, r7, #29
 8002088:	d000      	beq.n	800208c <__aeabi_dsub+0x444>
 800208a:	e780      	b.n	8001f8e <__aeabi_dsub+0x346>
 800208c:	e784      	b.n	8001f98 <__aeabi_dsub+0x350>
 800208e:	464b      	mov	r3, r9
 8002090:	0025      	movs	r5, r4
 8002092:	4305      	orrs	r5, r0
 8002094:	d066      	beq.n	8002164 <__aeabi_dsub+0x51c>
 8002096:	1e5f      	subs	r7, r3, #1
 8002098:	2b01      	cmp	r3, #1
 800209a:	d100      	bne.n	800209e <__aeabi_dsub+0x456>
 800209c:	e0fc      	b.n	8002298 <__aeabi_dsub+0x650>
 800209e:	4dae      	ldr	r5, [pc, #696]	@ (8002358 <__aeabi_dsub+0x710>)
 80020a0:	42ab      	cmp	r3, r5
 80020a2:	d100      	bne.n	80020a6 <__aeabi_dsub+0x45e>
 80020a4:	e15e      	b.n	8002364 <__aeabi_dsub+0x71c>
 80020a6:	4666      	mov	r6, ip
 80020a8:	2f38      	cmp	r7, #56	@ 0x38
 80020aa:	dc00      	bgt.n	80020ae <__aeabi_dsub+0x466>
 80020ac:	e0b4      	b.n	8002218 <__aeabi_dsub+0x5d0>
 80020ae:	2001      	movs	r0, #1
 80020b0:	1a17      	subs	r7, r2, r0
 80020b2:	42ba      	cmp	r2, r7
 80020b4:	4192      	sbcs	r2, r2
 80020b6:	465b      	mov	r3, fp
 80020b8:	4252      	negs	r2, r2
 80020ba:	464d      	mov	r5, r9
 80020bc:	1a9c      	subs	r4, r3, r2
 80020be:	e620      	b.n	8001d02 <__aeabi_dsub+0xba>
 80020c0:	0767      	lsls	r7, r4, #29
 80020c2:	08c0      	lsrs	r0, r0, #3
 80020c4:	4307      	orrs	r7, r0
 80020c6:	08e5      	lsrs	r5, r4, #3
 80020c8:	e6ba      	b.n	8001e40 <__aeabi_dsub+0x1f8>
 80020ca:	001f      	movs	r7, r3
 80020cc:	4659      	mov	r1, fp
 80020ce:	3f20      	subs	r7, #32
 80020d0:	40f9      	lsrs	r1, r7
 80020d2:	000f      	movs	r7, r1
 80020d4:	2b20      	cmp	r3, #32
 80020d6:	d005      	beq.n	80020e4 <__aeabi_dsub+0x49c>
 80020d8:	2140      	movs	r1, #64	@ 0x40
 80020da:	1acb      	subs	r3, r1, r3
 80020dc:	4659      	mov	r1, fp
 80020de:	4099      	lsls	r1, r3
 80020e0:	430a      	orrs	r2, r1
 80020e2:	4692      	mov	sl, r2
 80020e4:	4653      	mov	r3, sl
 80020e6:	1e5a      	subs	r2, r3, #1
 80020e8:	4193      	sbcs	r3, r2
 80020ea:	431f      	orrs	r7, r3
 80020ec:	e604      	b.n	8001cf8 <__aeabi_dsub+0xb0>
 80020ee:	1aeb      	subs	r3, r5, r3
 80020f0:	4d9b      	ldr	r5, [pc, #620]	@ (8002360 <__aeabi_dsub+0x718>)
 80020f2:	4015      	ands	r5, r2
 80020f4:	076f      	lsls	r7, r5, #29
 80020f6:	08ed      	lsrs	r5, r5, #3
 80020f8:	032c      	lsls	r4, r5, #12
 80020fa:	055d      	lsls	r5, r3, #21
 80020fc:	0b24      	lsrs	r4, r4, #12
 80020fe:	0d6d      	lsrs	r5, r5, #21
 8002100:	e736      	b.n	8001f70 <__aeabi_dsub+0x328>
 8002102:	4d95      	ldr	r5, [pc, #596]	@ (8002358 <__aeabi_dsub+0x710>)
 8002104:	42ab      	cmp	r3, r5
 8002106:	d100      	bne.n	800210a <__aeabi_dsub+0x4c2>
 8002108:	e0d6      	b.n	80022b8 <__aeabi_dsub+0x670>
 800210a:	1882      	adds	r2, r0, r2
 800210c:	0021      	movs	r1, r4
 800210e:	4282      	cmp	r2, r0
 8002110:	4180      	sbcs	r0, r0
 8002112:	4459      	add	r1, fp
 8002114:	4240      	negs	r0, r0
 8002116:	1808      	adds	r0, r1, r0
 8002118:	07c7      	lsls	r7, r0, #31
 800211a:	0852      	lsrs	r2, r2, #1
 800211c:	4317      	orrs	r7, r2
 800211e:	0844      	lsrs	r4, r0, #1
 8002120:	0752      	lsls	r2, r2, #29
 8002122:	d400      	bmi.n	8002126 <__aeabi_dsub+0x4de>
 8002124:	e185      	b.n	8002432 <__aeabi_dsub+0x7ea>
 8002126:	220f      	movs	r2, #15
 8002128:	001d      	movs	r5, r3
 800212a:	403a      	ands	r2, r7
 800212c:	2a04      	cmp	r2, #4
 800212e:	d000      	beq.n	8002132 <__aeabi_dsub+0x4ea>
 8002130:	e61a      	b.n	8001d68 <__aeabi_dsub+0x120>
 8002132:	08ff      	lsrs	r7, r7, #3
 8002134:	0764      	lsls	r4, r4, #29
 8002136:	4327      	orrs	r7, r4
 8002138:	0905      	lsrs	r5, r0, #4
 800213a:	e7dd      	b.n	80020f8 <__aeabi_dsub+0x4b0>
 800213c:	465b      	mov	r3, fp
 800213e:	08d2      	lsrs	r2, r2, #3
 8002140:	075f      	lsls	r7, r3, #29
 8002142:	4317      	orrs	r7, r2
 8002144:	08dd      	lsrs	r5, r3, #3
 8002146:	e67b      	b.n	8001e40 <__aeabi_dsub+0x1f8>
 8002148:	2700      	movs	r7, #0
 800214a:	2400      	movs	r4, #0
 800214c:	e710      	b.n	8001f70 <__aeabi_dsub+0x328>
 800214e:	2b00      	cmp	r3, #0
 8002150:	d000      	beq.n	8002154 <__aeabi_dsub+0x50c>
 8002152:	e0d6      	b.n	8002302 <__aeabi_dsub+0x6ba>
 8002154:	2900      	cmp	r1, #0
 8002156:	d000      	beq.n	800215a <__aeabi_dsub+0x512>
 8002158:	e12f      	b.n	80023ba <__aeabi_dsub+0x772>
 800215a:	2480      	movs	r4, #128	@ 0x80
 800215c:	2600      	movs	r6, #0
 800215e:	4d7e      	ldr	r5, [pc, #504]	@ (8002358 <__aeabi_dsub+0x710>)
 8002160:	0324      	lsls	r4, r4, #12
 8002162:	e705      	b.n	8001f70 <__aeabi_dsub+0x328>
 8002164:	4666      	mov	r6, ip
 8002166:	465c      	mov	r4, fp
 8002168:	08d0      	lsrs	r0, r2, #3
 800216a:	e717      	b.n	8001f9c <__aeabi_dsub+0x354>
 800216c:	465b      	mov	r3, fp
 800216e:	1a17      	subs	r7, r2, r0
 8002170:	42ba      	cmp	r2, r7
 8002172:	4192      	sbcs	r2, r2
 8002174:	1b1c      	subs	r4, r3, r4
 8002176:	2601      	movs	r6, #1
 8002178:	4663      	mov	r3, ip
 800217a:	4252      	negs	r2, r2
 800217c:	1aa4      	subs	r4, r4, r2
 800217e:	401e      	ands	r6, r3
 8002180:	e5c4      	b.n	8001d0c <__aeabi_dsub+0xc4>
 8002182:	1883      	adds	r3, r0, r2
 8002184:	4283      	cmp	r3, r0
 8002186:	4180      	sbcs	r0, r0
 8002188:	445c      	add	r4, fp
 800218a:	4240      	negs	r0, r0
 800218c:	1825      	adds	r5, r4, r0
 800218e:	022a      	lsls	r2, r5, #8
 8002190:	d400      	bmi.n	8002194 <__aeabi_dsub+0x54c>
 8002192:	e0da      	b.n	800234a <__aeabi_dsub+0x702>
 8002194:	4a72      	ldr	r2, [pc, #456]	@ (8002360 <__aeabi_dsub+0x718>)
 8002196:	085b      	lsrs	r3, r3, #1
 8002198:	4015      	ands	r5, r2
 800219a:	07ea      	lsls	r2, r5, #31
 800219c:	431a      	orrs	r2, r3
 800219e:	0869      	lsrs	r1, r5, #1
 80021a0:	075b      	lsls	r3, r3, #29
 80021a2:	d400      	bmi.n	80021a6 <__aeabi_dsub+0x55e>
 80021a4:	e14a      	b.n	800243c <__aeabi_dsub+0x7f4>
 80021a6:	230f      	movs	r3, #15
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	d100      	bne.n	80021b0 <__aeabi_dsub+0x568>
 80021ae:	e0fc      	b.n	80023aa <__aeabi_dsub+0x762>
 80021b0:	1d17      	adds	r7, r2, #4
 80021b2:	4297      	cmp	r7, r2
 80021b4:	41a4      	sbcs	r4, r4
 80021b6:	4264      	negs	r4, r4
 80021b8:	2502      	movs	r5, #2
 80021ba:	1864      	adds	r4, r4, r1
 80021bc:	e6ec      	b.n	8001f98 <__aeabi_dsub+0x350>
 80021be:	4647      	mov	r7, r8
 80021c0:	001c      	movs	r4, r3
 80021c2:	431f      	orrs	r7, r3
 80021c4:	d000      	beq.n	80021c8 <__aeabi_dsub+0x580>
 80021c6:	e743      	b.n	8002050 <__aeabi_dsub+0x408>
 80021c8:	2600      	movs	r6, #0
 80021ca:	2500      	movs	r5, #0
 80021cc:	2400      	movs	r4, #0
 80021ce:	e6cf      	b.n	8001f70 <__aeabi_dsub+0x328>
 80021d0:	08c0      	lsrs	r0, r0, #3
 80021d2:	0767      	lsls	r7, r4, #29
 80021d4:	4307      	orrs	r7, r0
 80021d6:	08e5      	lsrs	r5, r4, #3
 80021d8:	e632      	b.n	8001e40 <__aeabi_dsub+0x1f8>
 80021da:	1a87      	subs	r7, r0, r2
 80021dc:	465b      	mov	r3, fp
 80021de:	42b8      	cmp	r0, r7
 80021e0:	4180      	sbcs	r0, r0
 80021e2:	1ae4      	subs	r4, r4, r3
 80021e4:	4240      	negs	r0, r0
 80021e6:	1a24      	subs	r4, r4, r0
 80021e8:	0223      	lsls	r3, r4, #8
 80021ea:	d428      	bmi.n	800223e <__aeabi_dsub+0x5f6>
 80021ec:	0763      	lsls	r3, r4, #29
 80021ee:	08ff      	lsrs	r7, r7, #3
 80021f0:	431f      	orrs	r7, r3
 80021f2:	08e5      	lsrs	r5, r4, #3
 80021f4:	2301      	movs	r3, #1
 80021f6:	e77f      	b.n	80020f8 <__aeabi_dsub+0x4b0>
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d100      	bne.n	80021fe <__aeabi_dsub+0x5b6>
 80021fc:	e673      	b.n	8001ee6 <__aeabi_dsub+0x29e>
 80021fe:	464b      	mov	r3, r9
 8002200:	1b5f      	subs	r7, r3, r5
 8002202:	003b      	movs	r3, r7
 8002204:	2d00      	cmp	r5, #0
 8002206:	d100      	bne.n	800220a <__aeabi_dsub+0x5c2>
 8002208:	e742      	b.n	8002090 <__aeabi_dsub+0x448>
 800220a:	2f38      	cmp	r7, #56	@ 0x38
 800220c:	dd00      	ble.n	8002210 <__aeabi_dsub+0x5c8>
 800220e:	e0ec      	b.n	80023ea <__aeabi_dsub+0x7a2>
 8002210:	2380      	movs	r3, #128	@ 0x80
 8002212:	000e      	movs	r6, r1
 8002214:	041b      	lsls	r3, r3, #16
 8002216:	431c      	orrs	r4, r3
 8002218:	2f1f      	cmp	r7, #31
 800221a:	dc25      	bgt.n	8002268 <__aeabi_dsub+0x620>
 800221c:	2520      	movs	r5, #32
 800221e:	0023      	movs	r3, r4
 8002220:	1bed      	subs	r5, r5, r7
 8002222:	0001      	movs	r1, r0
 8002224:	40a8      	lsls	r0, r5
 8002226:	40ab      	lsls	r3, r5
 8002228:	40f9      	lsrs	r1, r7
 800222a:	1e45      	subs	r5, r0, #1
 800222c:	41a8      	sbcs	r0, r5
 800222e:	430b      	orrs	r3, r1
 8002230:	40fc      	lsrs	r4, r7
 8002232:	4318      	orrs	r0, r3
 8002234:	465b      	mov	r3, fp
 8002236:	1b1b      	subs	r3, r3, r4
 8002238:	469b      	mov	fp, r3
 800223a:	e739      	b.n	80020b0 <__aeabi_dsub+0x468>
 800223c:	4666      	mov	r6, ip
 800223e:	2501      	movs	r5, #1
 8002240:	e562      	b.n	8001d08 <__aeabi_dsub+0xc0>
 8002242:	001f      	movs	r7, r3
 8002244:	4659      	mov	r1, fp
 8002246:	3f20      	subs	r7, #32
 8002248:	40f9      	lsrs	r1, r7
 800224a:	468c      	mov	ip, r1
 800224c:	2b20      	cmp	r3, #32
 800224e:	d005      	beq.n	800225c <__aeabi_dsub+0x614>
 8002250:	2740      	movs	r7, #64	@ 0x40
 8002252:	4659      	mov	r1, fp
 8002254:	1afb      	subs	r3, r7, r3
 8002256:	4099      	lsls	r1, r3
 8002258:	430a      	orrs	r2, r1
 800225a:	4692      	mov	sl, r2
 800225c:	4657      	mov	r7, sl
 800225e:	1e7b      	subs	r3, r7, #1
 8002260:	419f      	sbcs	r7, r3
 8002262:	4663      	mov	r3, ip
 8002264:	431f      	orrs	r7, r3
 8002266:	e5c1      	b.n	8001dec <__aeabi_dsub+0x1a4>
 8002268:	003b      	movs	r3, r7
 800226a:	0025      	movs	r5, r4
 800226c:	3b20      	subs	r3, #32
 800226e:	40dd      	lsrs	r5, r3
 8002270:	2f20      	cmp	r7, #32
 8002272:	d004      	beq.n	800227e <__aeabi_dsub+0x636>
 8002274:	2340      	movs	r3, #64	@ 0x40
 8002276:	1bdb      	subs	r3, r3, r7
 8002278:	409c      	lsls	r4, r3
 800227a:	4320      	orrs	r0, r4
 800227c:	4680      	mov	r8, r0
 800227e:	4640      	mov	r0, r8
 8002280:	1e43      	subs	r3, r0, #1
 8002282:	4198      	sbcs	r0, r3
 8002284:	4328      	orrs	r0, r5
 8002286:	e713      	b.n	80020b0 <__aeabi_dsub+0x468>
 8002288:	2900      	cmp	r1, #0
 800228a:	d09d      	beq.n	80021c8 <__aeabi_dsub+0x580>
 800228c:	2601      	movs	r6, #1
 800228e:	4663      	mov	r3, ip
 8002290:	465c      	mov	r4, fp
 8002292:	4690      	mov	r8, r2
 8002294:	401e      	ands	r6, r3
 8002296:	e6db      	b.n	8002050 <__aeabi_dsub+0x408>
 8002298:	1a17      	subs	r7, r2, r0
 800229a:	465b      	mov	r3, fp
 800229c:	42ba      	cmp	r2, r7
 800229e:	4192      	sbcs	r2, r2
 80022a0:	1b1c      	subs	r4, r3, r4
 80022a2:	4252      	negs	r2, r2
 80022a4:	1aa4      	subs	r4, r4, r2
 80022a6:	0223      	lsls	r3, r4, #8
 80022a8:	d4c8      	bmi.n	800223c <__aeabi_dsub+0x5f4>
 80022aa:	0763      	lsls	r3, r4, #29
 80022ac:	08ff      	lsrs	r7, r7, #3
 80022ae:	431f      	orrs	r7, r3
 80022b0:	4666      	mov	r6, ip
 80022b2:	2301      	movs	r3, #1
 80022b4:	08e5      	lsrs	r5, r4, #3
 80022b6:	e71f      	b.n	80020f8 <__aeabi_dsub+0x4b0>
 80022b8:	001d      	movs	r5, r3
 80022ba:	2400      	movs	r4, #0
 80022bc:	2700      	movs	r7, #0
 80022be:	e657      	b.n	8001f70 <__aeabi_dsub+0x328>
 80022c0:	465c      	mov	r4, fp
 80022c2:	08d0      	lsrs	r0, r2, #3
 80022c4:	e66a      	b.n	8001f9c <__aeabi_dsub+0x354>
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d100      	bne.n	80022cc <__aeabi_dsub+0x684>
 80022ca:	e737      	b.n	800213c <__aeabi_dsub+0x4f4>
 80022cc:	4653      	mov	r3, sl
 80022ce:	08c0      	lsrs	r0, r0, #3
 80022d0:	0767      	lsls	r7, r4, #29
 80022d2:	4307      	orrs	r7, r0
 80022d4:	08e5      	lsrs	r5, r4, #3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d100      	bne.n	80022dc <__aeabi_dsub+0x694>
 80022da:	e5b1      	b.n	8001e40 <__aeabi_dsub+0x1f8>
 80022dc:	2380      	movs	r3, #128	@ 0x80
 80022de:	031b      	lsls	r3, r3, #12
 80022e0:	421d      	tst	r5, r3
 80022e2:	d008      	beq.n	80022f6 <__aeabi_dsub+0x6ae>
 80022e4:	4659      	mov	r1, fp
 80022e6:	08c8      	lsrs	r0, r1, #3
 80022e8:	4218      	tst	r0, r3
 80022ea:	d104      	bne.n	80022f6 <__aeabi_dsub+0x6ae>
 80022ec:	08d2      	lsrs	r2, r2, #3
 80022ee:	0749      	lsls	r1, r1, #29
 80022f0:	430a      	orrs	r2, r1
 80022f2:	0017      	movs	r7, r2
 80022f4:	0005      	movs	r5, r0
 80022f6:	0f7b      	lsrs	r3, r7, #29
 80022f8:	00ff      	lsls	r7, r7, #3
 80022fa:	08ff      	lsrs	r7, r7, #3
 80022fc:	075b      	lsls	r3, r3, #29
 80022fe:	431f      	orrs	r7, r3
 8002300:	e59e      	b.n	8001e40 <__aeabi_dsub+0x1f8>
 8002302:	08c0      	lsrs	r0, r0, #3
 8002304:	0763      	lsls	r3, r4, #29
 8002306:	4318      	orrs	r0, r3
 8002308:	08e5      	lsrs	r5, r4, #3
 800230a:	2900      	cmp	r1, #0
 800230c:	d053      	beq.n	80023b6 <__aeabi_dsub+0x76e>
 800230e:	2380      	movs	r3, #128	@ 0x80
 8002310:	031b      	lsls	r3, r3, #12
 8002312:	421d      	tst	r5, r3
 8002314:	d00a      	beq.n	800232c <__aeabi_dsub+0x6e4>
 8002316:	4659      	mov	r1, fp
 8002318:	08cc      	lsrs	r4, r1, #3
 800231a:	421c      	tst	r4, r3
 800231c:	d106      	bne.n	800232c <__aeabi_dsub+0x6e4>
 800231e:	2601      	movs	r6, #1
 8002320:	4663      	mov	r3, ip
 8002322:	0025      	movs	r5, r4
 8002324:	08d0      	lsrs	r0, r2, #3
 8002326:	0749      	lsls	r1, r1, #29
 8002328:	4308      	orrs	r0, r1
 800232a:	401e      	ands	r6, r3
 800232c:	0f47      	lsrs	r7, r0, #29
 800232e:	00c0      	lsls	r0, r0, #3
 8002330:	08c0      	lsrs	r0, r0, #3
 8002332:	077f      	lsls	r7, r7, #29
 8002334:	4307      	orrs	r7, r0
 8002336:	e583      	b.n	8001e40 <__aeabi_dsub+0x1f8>
 8002338:	1883      	adds	r3, r0, r2
 800233a:	4293      	cmp	r3, r2
 800233c:	4192      	sbcs	r2, r2
 800233e:	445c      	add	r4, fp
 8002340:	4252      	negs	r2, r2
 8002342:	18a5      	adds	r5, r4, r2
 8002344:	022a      	lsls	r2, r5, #8
 8002346:	d500      	bpl.n	800234a <__aeabi_dsub+0x702>
 8002348:	e724      	b.n	8002194 <__aeabi_dsub+0x54c>
 800234a:	076f      	lsls	r7, r5, #29
 800234c:	08db      	lsrs	r3, r3, #3
 800234e:	431f      	orrs	r7, r3
 8002350:	08ed      	lsrs	r5, r5, #3
 8002352:	2301      	movs	r3, #1
 8002354:	e6d0      	b.n	80020f8 <__aeabi_dsub+0x4b0>
 8002356:	46c0      	nop			@ (mov r8, r8)
 8002358:	000007ff 	.word	0x000007ff
 800235c:	000007fe 	.word	0x000007fe
 8002360:	ff7fffff 	.word	0xff7fffff
 8002364:	465b      	mov	r3, fp
 8002366:	08d2      	lsrs	r2, r2, #3
 8002368:	075f      	lsls	r7, r3, #29
 800236a:	4666      	mov	r6, ip
 800236c:	4317      	orrs	r7, r2
 800236e:	08dd      	lsrs	r5, r3, #3
 8002370:	e566      	b.n	8001e40 <__aeabi_dsub+0x1f8>
 8002372:	0025      	movs	r5, r4
 8002374:	3b20      	subs	r3, #32
 8002376:	40dd      	lsrs	r5, r3
 8002378:	4663      	mov	r3, ip
 800237a:	2b20      	cmp	r3, #32
 800237c:	d005      	beq.n	800238a <__aeabi_dsub+0x742>
 800237e:	2340      	movs	r3, #64	@ 0x40
 8002380:	4661      	mov	r1, ip
 8002382:	1a5b      	subs	r3, r3, r1
 8002384:	409c      	lsls	r4, r3
 8002386:	4320      	orrs	r0, r4
 8002388:	4680      	mov	r8, r0
 800238a:	4647      	mov	r7, r8
 800238c:	1e7b      	subs	r3, r7, #1
 800238e:	419f      	sbcs	r7, r3
 8002390:	432f      	orrs	r7, r5
 8002392:	e5a0      	b.n	8001ed6 <__aeabi_dsub+0x28e>
 8002394:	2120      	movs	r1, #32
 8002396:	2700      	movs	r7, #0
 8002398:	1a09      	subs	r1, r1, r0
 800239a:	e4d2      	b.n	8001d42 <__aeabi_dsub+0xfa>
 800239c:	2f00      	cmp	r7, #0
 800239e:	d100      	bne.n	80023a2 <__aeabi_dsub+0x75a>
 80023a0:	e713      	b.n	80021ca <__aeabi_dsub+0x582>
 80023a2:	465c      	mov	r4, fp
 80023a4:	0017      	movs	r7, r2
 80023a6:	2500      	movs	r5, #0
 80023a8:	e5f6      	b.n	8001f98 <__aeabi_dsub+0x350>
 80023aa:	08d7      	lsrs	r7, r2, #3
 80023ac:	0749      	lsls	r1, r1, #29
 80023ae:	2302      	movs	r3, #2
 80023b0:	430f      	orrs	r7, r1
 80023b2:	092d      	lsrs	r5, r5, #4
 80023b4:	e6a0      	b.n	80020f8 <__aeabi_dsub+0x4b0>
 80023b6:	0007      	movs	r7, r0
 80023b8:	e542      	b.n	8001e40 <__aeabi_dsub+0x1f8>
 80023ba:	465b      	mov	r3, fp
 80023bc:	2601      	movs	r6, #1
 80023be:	075f      	lsls	r7, r3, #29
 80023c0:	08dd      	lsrs	r5, r3, #3
 80023c2:	4663      	mov	r3, ip
 80023c4:	08d2      	lsrs	r2, r2, #3
 80023c6:	4317      	orrs	r7, r2
 80023c8:	401e      	ands	r6, r3
 80023ca:	e539      	b.n	8001e40 <__aeabi_dsub+0x1f8>
 80023cc:	465b      	mov	r3, fp
 80023ce:	08d2      	lsrs	r2, r2, #3
 80023d0:	075f      	lsls	r7, r3, #29
 80023d2:	4317      	orrs	r7, r2
 80023d4:	08dd      	lsrs	r5, r3, #3
 80023d6:	e533      	b.n	8001e40 <__aeabi_dsub+0x1f8>
 80023d8:	4a1e      	ldr	r2, [pc, #120]	@ (8002454 <__aeabi_dsub+0x80c>)
 80023da:	08db      	lsrs	r3, r3, #3
 80023dc:	4022      	ands	r2, r4
 80023de:	0757      	lsls	r7, r2, #29
 80023e0:	0252      	lsls	r2, r2, #9
 80023e2:	2501      	movs	r5, #1
 80023e4:	431f      	orrs	r7, r3
 80023e6:	0b14      	lsrs	r4, r2, #12
 80023e8:	e5c2      	b.n	8001f70 <__aeabi_dsub+0x328>
 80023ea:	000e      	movs	r6, r1
 80023ec:	2001      	movs	r0, #1
 80023ee:	e65f      	b.n	80020b0 <__aeabi_dsub+0x468>
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00d      	beq.n	8002410 <__aeabi_dsub+0x7c8>
 80023f4:	464b      	mov	r3, r9
 80023f6:	1b5b      	subs	r3, r3, r5
 80023f8:	469c      	mov	ip, r3
 80023fa:	2d00      	cmp	r5, #0
 80023fc:	d100      	bne.n	8002400 <__aeabi_dsub+0x7b8>
 80023fe:	e548      	b.n	8001e92 <__aeabi_dsub+0x24a>
 8002400:	2701      	movs	r7, #1
 8002402:	2b38      	cmp	r3, #56	@ 0x38
 8002404:	dd00      	ble.n	8002408 <__aeabi_dsub+0x7c0>
 8002406:	e566      	b.n	8001ed6 <__aeabi_dsub+0x28e>
 8002408:	2380      	movs	r3, #128	@ 0x80
 800240a:	041b      	lsls	r3, r3, #16
 800240c:	431c      	orrs	r4, r3
 800240e:	e550      	b.n	8001eb2 <__aeabi_dsub+0x26a>
 8002410:	1c6b      	adds	r3, r5, #1
 8002412:	4d11      	ldr	r5, [pc, #68]	@ (8002458 <__aeabi_dsub+0x810>)
 8002414:	422b      	tst	r3, r5
 8002416:	d000      	beq.n	800241a <__aeabi_dsub+0x7d2>
 8002418:	e673      	b.n	8002102 <__aeabi_dsub+0x4ba>
 800241a:	4659      	mov	r1, fp
 800241c:	0023      	movs	r3, r4
 800241e:	4311      	orrs	r1, r2
 8002420:	468a      	mov	sl, r1
 8002422:	4303      	orrs	r3, r0
 8002424:	e600      	b.n	8002028 <__aeabi_dsub+0x3e0>
 8002426:	0767      	lsls	r7, r4, #29
 8002428:	08c0      	lsrs	r0, r0, #3
 800242a:	2300      	movs	r3, #0
 800242c:	4307      	orrs	r7, r0
 800242e:	08e5      	lsrs	r5, r4, #3
 8002430:	e662      	b.n	80020f8 <__aeabi_dsub+0x4b0>
 8002432:	0764      	lsls	r4, r4, #29
 8002434:	08ff      	lsrs	r7, r7, #3
 8002436:	4327      	orrs	r7, r4
 8002438:	0905      	lsrs	r5, r0, #4
 800243a:	e65d      	b.n	80020f8 <__aeabi_dsub+0x4b0>
 800243c:	08d2      	lsrs	r2, r2, #3
 800243e:	0749      	lsls	r1, r1, #29
 8002440:	4311      	orrs	r1, r2
 8002442:	000f      	movs	r7, r1
 8002444:	2302      	movs	r3, #2
 8002446:	092d      	lsrs	r5, r5, #4
 8002448:	e656      	b.n	80020f8 <__aeabi_dsub+0x4b0>
 800244a:	0007      	movs	r7, r0
 800244c:	e5a4      	b.n	8001f98 <__aeabi_dsub+0x350>
 800244e:	0038      	movs	r0, r7
 8002450:	e48f      	b.n	8001d72 <__aeabi_dsub+0x12a>
 8002452:	46c0      	nop			@ (mov r8, r8)
 8002454:	ff7fffff 	.word	0xff7fffff
 8002458:	000007fe 	.word	0x000007fe

0800245c <__aeabi_dcmpun>:
 800245c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800245e:	46c6      	mov	lr, r8
 8002460:	031e      	lsls	r6, r3, #12
 8002462:	0b36      	lsrs	r6, r6, #12
 8002464:	46b0      	mov	r8, r6
 8002466:	4e0d      	ldr	r6, [pc, #52]	@ (800249c <__aeabi_dcmpun+0x40>)
 8002468:	030c      	lsls	r4, r1, #12
 800246a:	004d      	lsls	r5, r1, #1
 800246c:	005f      	lsls	r7, r3, #1
 800246e:	b500      	push	{lr}
 8002470:	0b24      	lsrs	r4, r4, #12
 8002472:	0d6d      	lsrs	r5, r5, #21
 8002474:	0d7f      	lsrs	r7, r7, #21
 8002476:	42b5      	cmp	r5, r6
 8002478:	d00b      	beq.n	8002492 <__aeabi_dcmpun+0x36>
 800247a:	4908      	ldr	r1, [pc, #32]	@ (800249c <__aeabi_dcmpun+0x40>)
 800247c:	2000      	movs	r0, #0
 800247e:	428f      	cmp	r7, r1
 8002480:	d104      	bne.n	800248c <__aeabi_dcmpun+0x30>
 8002482:	4646      	mov	r6, r8
 8002484:	4316      	orrs	r6, r2
 8002486:	0030      	movs	r0, r6
 8002488:	1e43      	subs	r3, r0, #1
 800248a:	4198      	sbcs	r0, r3
 800248c:	bc80      	pop	{r7}
 800248e:	46b8      	mov	r8, r7
 8002490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002492:	4304      	orrs	r4, r0
 8002494:	2001      	movs	r0, #1
 8002496:	2c00      	cmp	r4, #0
 8002498:	d1f8      	bne.n	800248c <__aeabi_dcmpun+0x30>
 800249a:	e7ee      	b.n	800247a <__aeabi_dcmpun+0x1e>
 800249c:	000007ff 	.word	0x000007ff

080024a0 <__aeabi_d2iz>:
 80024a0:	000b      	movs	r3, r1
 80024a2:	0002      	movs	r2, r0
 80024a4:	b570      	push	{r4, r5, r6, lr}
 80024a6:	4d16      	ldr	r5, [pc, #88]	@ (8002500 <__aeabi_d2iz+0x60>)
 80024a8:	030c      	lsls	r4, r1, #12
 80024aa:	b082      	sub	sp, #8
 80024ac:	0049      	lsls	r1, r1, #1
 80024ae:	2000      	movs	r0, #0
 80024b0:	9200      	str	r2, [sp, #0]
 80024b2:	9301      	str	r3, [sp, #4]
 80024b4:	0b24      	lsrs	r4, r4, #12
 80024b6:	0d49      	lsrs	r1, r1, #21
 80024b8:	0fde      	lsrs	r6, r3, #31
 80024ba:	42a9      	cmp	r1, r5
 80024bc:	dd04      	ble.n	80024c8 <__aeabi_d2iz+0x28>
 80024be:	4811      	ldr	r0, [pc, #68]	@ (8002504 <__aeabi_d2iz+0x64>)
 80024c0:	4281      	cmp	r1, r0
 80024c2:	dd03      	ble.n	80024cc <__aeabi_d2iz+0x2c>
 80024c4:	4b10      	ldr	r3, [pc, #64]	@ (8002508 <__aeabi_d2iz+0x68>)
 80024c6:	18f0      	adds	r0, r6, r3
 80024c8:	b002      	add	sp, #8
 80024ca:	bd70      	pop	{r4, r5, r6, pc}
 80024cc:	2080      	movs	r0, #128	@ 0x80
 80024ce:	0340      	lsls	r0, r0, #13
 80024d0:	4320      	orrs	r0, r4
 80024d2:	4c0e      	ldr	r4, [pc, #56]	@ (800250c <__aeabi_d2iz+0x6c>)
 80024d4:	1a64      	subs	r4, r4, r1
 80024d6:	2c1f      	cmp	r4, #31
 80024d8:	dd08      	ble.n	80024ec <__aeabi_d2iz+0x4c>
 80024da:	4b0d      	ldr	r3, [pc, #52]	@ (8002510 <__aeabi_d2iz+0x70>)
 80024dc:	1a5b      	subs	r3, r3, r1
 80024de:	40d8      	lsrs	r0, r3
 80024e0:	0003      	movs	r3, r0
 80024e2:	4258      	negs	r0, r3
 80024e4:	2e00      	cmp	r6, #0
 80024e6:	d1ef      	bne.n	80024c8 <__aeabi_d2iz+0x28>
 80024e8:	0018      	movs	r0, r3
 80024ea:	e7ed      	b.n	80024c8 <__aeabi_d2iz+0x28>
 80024ec:	4b09      	ldr	r3, [pc, #36]	@ (8002514 <__aeabi_d2iz+0x74>)
 80024ee:	9a00      	ldr	r2, [sp, #0]
 80024f0:	469c      	mov	ip, r3
 80024f2:	0003      	movs	r3, r0
 80024f4:	4461      	add	r1, ip
 80024f6:	408b      	lsls	r3, r1
 80024f8:	40e2      	lsrs	r2, r4
 80024fa:	4313      	orrs	r3, r2
 80024fc:	e7f1      	b.n	80024e2 <__aeabi_d2iz+0x42>
 80024fe:	46c0      	nop			@ (mov r8, r8)
 8002500:	000003fe 	.word	0x000003fe
 8002504:	0000041d 	.word	0x0000041d
 8002508:	7fffffff 	.word	0x7fffffff
 800250c:	00000433 	.word	0x00000433
 8002510:	00000413 	.word	0x00000413
 8002514:	fffffbed 	.word	0xfffffbed

08002518 <__aeabi_i2d>:
 8002518:	b570      	push	{r4, r5, r6, lr}
 800251a:	2800      	cmp	r0, #0
 800251c:	d016      	beq.n	800254c <__aeabi_i2d+0x34>
 800251e:	17c3      	asrs	r3, r0, #31
 8002520:	18c5      	adds	r5, r0, r3
 8002522:	405d      	eors	r5, r3
 8002524:	0fc4      	lsrs	r4, r0, #31
 8002526:	0028      	movs	r0, r5
 8002528:	f000 f848 	bl	80025bc <__clzsi2>
 800252c:	4b10      	ldr	r3, [pc, #64]	@ (8002570 <__aeabi_i2d+0x58>)
 800252e:	1a1b      	subs	r3, r3, r0
 8002530:	055b      	lsls	r3, r3, #21
 8002532:	0d5b      	lsrs	r3, r3, #21
 8002534:	280a      	cmp	r0, #10
 8002536:	dc14      	bgt.n	8002562 <__aeabi_i2d+0x4a>
 8002538:	0002      	movs	r2, r0
 800253a:	002e      	movs	r6, r5
 800253c:	3215      	adds	r2, #21
 800253e:	4096      	lsls	r6, r2
 8002540:	220b      	movs	r2, #11
 8002542:	1a12      	subs	r2, r2, r0
 8002544:	40d5      	lsrs	r5, r2
 8002546:	032d      	lsls	r5, r5, #12
 8002548:	0b2d      	lsrs	r5, r5, #12
 800254a:	e003      	b.n	8002554 <__aeabi_i2d+0x3c>
 800254c:	2400      	movs	r4, #0
 800254e:	2300      	movs	r3, #0
 8002550:	2500      	movs	r5, #0
 8002552:	2600      	movs	r6, #0
 8002554:	051b      	lsls	r3, r3, #20
 8002556:	432b      	orrs	r3, r5
 8002558:	07e4      	lsls	r4, r4, #31
 800255a:	4323      	orrs	r3, r4
 800255c:	0030      	movs	r0, r6
 800255e:	0019      	movs	r1, r3
 8002560:	bd70      	pop	{r4, r5, r6, pc}
 8002562:	380b      	subs	r0, #11
 8002564:	4085      	lsls	r5, r0
 8002566:	032d      	lsls	r5, r5, #12
 8002568:	2600      	movs	r6, #0
 800256a:	0b2d      	lsrs	r5, r5, #12
 800256c:	e7f2      	b.n	8002554 <__aeabi_i2d+0x3c>
 800256e:	46c0      	nop			@ (mov r8, r8)
 8002570:	0000041e 	.word	0x0000041e

08002574 <__aeabi_ui2d>:
 8002574:	b510      	push	{r4, lr}
 8002576:	1e04      	subs	r4, r0, #0
 8002578:	d010      	beq.n	800259c <__aeabi_ui2d+0x28>
 800257a:	f000 f81f 	bl	80025bc <__clzsi2>
 800257e:	4b0e      	ldr	r3, [pc, #56]	@ (80025b8 <__aeabi_ui2d+0x44>)
 8002580:	1a1b      	subs	r3, r3, r0
 8002582:	055b      	lsls	r3, r3, #21
 8002584:	0d5b      	lsrs	r3, r3, #21
 8002586:	280a      	cmp	r0, #10
 8002588:	dc0f      	bgt.n	80025aa <__aeabi_ui2d+0x36>
 800258a:	220b      	movs	r2, #11
 800258c:	0021      	movs	r1, r4
 800258e:	1a12      	subs	r2, r2, r0
 8002590:	40d1      	lsrs	r1, r2
 8002592:	3015      	adds	r0, #21
 8002594:	030a      	lsls	r2, r1, #12
 8002596:	4084      	lsls	r4, r0
 8002598:	0b12      	lsrs	r2, r2, #12
 800259a:	e001      	b.n	80025a0 <__aeabi_ui2d+0x2c>
 800259c:	2300      	movs	r3, #0
 800259e:	2200      	movs	r2, #0
 80025a0:	051b      	lsls	r3, r3, #20
 80025a2:	4313      	orrs	r3, r2
 80025a4:	0020      	movs	r0, r4
 80025a6:	0019      	movs	r1, r3
 80025a8:	bd10      	pop	{r4, pc}
 80025aa:	0022      	movs	r2, r4
 80025ac:	380b      	subs	r0, #11
 80025ae:	4082      	lsls	r2, r0
 80025b0:	0312      	lsls	r2, r2, #12
 80025b2:	2400      	movs	r4, #0
 80025b4:	0b12      	lsrs	r2, r2, #12
 80025b6:	e7f3      	b.n	80025a0 <__aeabi_ui2d+0x2c>
 80025b8:	0000041e 	.word	0x0000041e

080025bc <__clzsi2>:
 80025bc:	211c      	movs	r1, #28
 80025be:	2301      	movs	r3, #1
 80025c0:	041b      	lsls	r3, r3, #16
 80025c2:	4298      	cmp	r0, r3
 80025c4:	d301      	bcc.n	80025ca <__clzsi2+0xe>
 80025c6:	0c00      	lsrs	r0, r0, #16
 80025c8:	3910      	subs	r1, #16
 80025ca:	0a1b      	lsrs	r3, r3, #8
 80025cc:	4298      	cmp	r0, r3
 80025ce:	d301      	bcc.n	80025d4 <__clzsi2+0x18>
 80025d0:	0a00      	lsrs	r0, r0, #8
 80025d2:	3908      	subs	r1, #8
 80025d4:	091b      	lsrs	r3, r3, #4
 80025d6:	4298      	cmp	r0, r3
 80025d8:	d301      	bcc.n	80025de <__clzsi2+0x22>
 80025da:	0900      	lsrs	r0, r0, #4
 80025dc:	3904      	subs	r1, #4
 80025de:	a202      	add	r2, pc, #8	@ (adr r2, 80025e8 <__clzsi2+0x2c>)
 80025e0:	5c10      	ldrb	r0, [r2, r0]
 80025e2:	1840      	adds	r0, r0, r1
 80025e4:	4770      	bx	lr
 80025e6:	46c0      	nop			@ (mov r8, r8)
 80025e8:	02020304 	.word	0x02020304
 80025ec:	01010101 	.word	0x01010101
	...

080025f8 <__clzdi2>:
 80025f8:	b510      	push	{r4, lr}
 80025fa:	2900      	cmp	r1, #0
 80025fc:	d103      	bne.n	8002606 <__clzdi2+0xe>
 80025fe:	f7ff ffdd 	bl	80025bc <__clzsi2>
 8002602:	3020      	adds	r0, #32
 8002604:	e002      	b.n	800260c <__clzdi2+0x14>
 8002606:	0008      	movs	r0, r1
 8002608:	f7ff ffd8 	bl	80025bc <__clzsi2>
 800260c:	bd10      	pop	{r4, pc}
 800260e:	46c0      	nop			@ (mov r8, r8)

08002610 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002610:	b590      	push	{r4, r7, lr}
 8002612:	b08b      	sub	sp, #44	@ 0x2c
 8002614:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002616:	2414      	movs	r4, #20
 8002618:	193b      	adds	r3, r7, r4
 800261a:	0018      	movs	r0, r3
 800261c:	2314      	movs	r3, #20
 800261e:	001a      	movs	r2, r3
 8002620:	2100      	movs	r1, #0
 8002622:	f003 fcab 	bl	8005f7c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002626:	4b53      	ldr	r3, [pc, #332]	@ (8002774 <MX_GPIO_Init+0x164>)
 8002628:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800262a:	4b52      	ldr	r3, [pc, #328]	@ (8002774 <MX_GPIO_Init+0x164>)
 800262c:	2104      	movs	r1, #4
 800262e:	430a      	orrs	r2, r1
 8002630:	635a      	str	r2, [r3, #52]	@ 0x34
 8002632:	4b50      	ldr	r3, [pc, #320]	@ (8002774 <MX_GPIO_Init+0x164>)
 8002634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002636:	2204      	movs	r2, #4
 8002638:	4013      	ands	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
 800263c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800263e:	4b4d      	ldr	r3, [pc, #308]	@ (8002774 <MX_GPIO_Init+0x164>)
 8002640:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002642:	4b4c      	ldr	r3, [pc, #304]	@ (8002774 <MX_GPIO_Init+0x164>)
 8002644:	2120      	movs	r1, #32
 8002646:	430a      	orrs	r2, r1
 8002648:	635a      	str	r2, [r3, #52]	@ 0x34
 800264a:	4b4a      	ldr	r3, [pc, #296]	@ (8002774 <MX_GPIO_Init+0x164>)
 800264c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800264e:	2220      	movs	r2, #32
 8002650:	4013      	ands	r3, r2
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002656:	4b47      	ldr	r3, [pc, #284]	@ (8002774 <MX_GPIO_Init+0x164>)
 8002658:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800265a:	4b46      	ldr	r3, [pc, #280]	@ (8002774 <MX_GPIO_Init+0x164>)
 800265c:	2101      	movs	r1, #1
 800265e:	430a      	orrs	r2, r1
 8002660:	635a      	str	r2, [r3, #52]	@ 0x34
 8002662:	4b44      	ldr	r3, [pc, #272]	@ (8002774 <MX_GPIO_Init+0x164>)
 8002664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002666:	2201      	movs	r2, #1
 8002668:	4013      	ands	r3, r2
 800266a:	60bb      	str	r3, [r7, #8]
 800266c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800266e:	4b41      	ldr	r3, [pc, #260]	@ (8002774 <MX_GPIO_Init+0x164>)
 8002670:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002672:	4b40      	ldr	r3, [pc, #256]	@ (8002774 <MX_GPIO_Init+0x164>)
 8002674:	2102      	movs	r1, #2
 8002676:	430a      	orrs	r2, r1
 8002678:	635a      	str	r2, [r3, #52]	@ 0x34
 800267a:	4b3e      	ldr	r3, [pc, #248]	@ (8002774 <MX_GPIO_Init+0x164>)
 800267c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800267e:	2202      	movs	r2, #2
 8002680:	4013      	ands	r3, r2
 8002682:	607b      	str	r3, [r7, #4]
 8002684:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|LCD_DC_Pin_Pin, GPIO_PIN_RESET);
 8002686:	2390      	movs	r3, #144	@ 0x90
 8002688:	0059      	lsls	r1, r3, #1
 800268a:	23a0      	movs	r3, #160	@ 0xa0
 800268c:	05db      	lsls	r3, r3, #23
 800268e:	2200      	movs	r2, #0
 8002690:	0018      	movs	r0, r3
 8002692:	f000 feaf 	bl	80033f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin_Pin|LCD_CS_Pin_Pin, GPIO_PIN_RESET);
 8002696:	4938      	ldr	r1, [pc, #224]	@ (8002778 <MX_GPIO_Init+0x168>)
 8002698:	4b38      	ldr	r3, [pc, #224]	@ (800277c <MX_GPIO_Init+0x16c>)
 800269a:	2200      	movs	r2, #0
 800269c:	0018      	movs	r0, r3
 800269e:	f000 fea9 	bl	80033f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_Pin_GPIO_Port, LCD_BL_Pin_Pin, GPIO_PIN_SET);
 80026a2:	4b37      	ldr	r3, [pc, #220]	@ (8002780 <MX_GPIO_Init+0x170>)
 80026a4:	2201      	movs	r2, #1
 80026a6:	2180      	movs	r1, #128	@ 0x80
 80026a8:	0018      	movs	r0, r3
 80026aa:	f000 fea3 	bl	80033f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80026ae:	193b      	adds	r3, r7, r4
 80026b0:	2280      	movs	r2, #128	@ 0x80
 80026b2:	0192      	lsls	r2, r2, #6
 80026b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026b6:	193b      	adds	r3, r7, r4
 80026b8:	2288      	movs	r2, #136	@ 0x88
 80026ba:	0352      	lsls	r2, r2, #13
 80026bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026be:	193b      	adds	r3, r7, r4
 80026c0:	2200      	movs	r2, #0
 80026c2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80026c4:	193b      	adds	r3, r7, r4
 80026c6:	4a2e      	ldr	r2, [pc, #184]	@ (8002780 <MX_GPIO_Init+0x170>)
 80026c8:	0019      	movs	r1, r3
 80026ca:	0010      	movs	r0, r2
 80026cc:	f000 fd26 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80026d0:	193b      	adds	r3, r7, r4
 80026d2:	2220      	movs	r2, #32
 80026d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026d6:	193b      	adds	r3, r7, r4
 80026d8:	2201      	movs	r2, #1
 80026da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026dc:	193b      	adds	r3, r7, r4
 80026de:	2200      	movs	r2, #0
 80026e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026e2:	193b      	adds	r3, r7, r4
 80026e4:	2202      	movs	r2, #2
 80026e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80026e8:	193a      	adds	r2, r7, r4
 80026ea:	23a0      	movs	r3, #160	@ 0xa0
 80026ec:	05db      	lsls	r3, r3, #23
 80026ee:	0011      	movs	r1, r2
 80026f0:	0018      	movs	r0, r3
 80026f2:	f000 fd13 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin_Pin LCD_CS_Pin_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin_Pin|LCD_CS_Pin_Pin;
 80026f6:	193b      	adds	r3, r7, r4
 80026f8:	4a1f      	ldr	r2, [pc, #124]	@ (8002778 <MX_GPIO_Init+0x168>)
 80026fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026fc:	193b      	adds	r3, r7, r4
 80026fe:	2201      	movs	r2, #1
 8002700:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002702:	193b      	adds	r3, r7, r4
 8002704:	2200      	movs	r2, #0
 8002706:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002708:	193b      	adds	r3, r7, r4
 800270a:	2200      	movs	r2, #0
 800270c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800270e:	193b      	adds	r3, r7, r4
 8002710:	4a1a      	ldr	r2, [pc, #104]	@ (800277c <MX_GPIO_Init+0x16c>)
 8002712:	0019      	movs	r1, r3
 8002714:	0010      	movs	r0, r2
 8002716:	f000 fd01 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin_Pin;
 800271a:	0021      	movs	r1, r4
 800271c:	187b      	adds	r3, r7, r1
 800271e:	2280      	movs	r2, #128	@ 0x80
 8002720:	0052      	lsls	r2, r2, #1
 8002722:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002724:	000c      	movs	r4, r1
 8002726:	193b      	adds	r3, r7, r4
 8002728:	2201      	movs	r2, #1
 800272a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	193b      	adds	r3, r7, r4
 800272e:	2200      	movs	r2, #0
 8002730:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002732:	193b      	adds	r3, r7, r4
 8002734:	2200      	movs	r2, #0
 8002736:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_DC_Pin_GPIO_Port, &GPIO_InitStruct);
 8002738:	193a      	adds	r2, r7, r4
 800273a:	23a0      	movs	r3, #160	@ 0xa0
 800273c:	05db      	lsls	r3, r3, #23
 800273e:	0011      	movs	r1, r2
 8002740:	0018      	movs	r0, r3
 8002742:	f000 fceb 	bl	800311c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin_Pin;
 8002746:	0021      	movs	r1, r4
 8002748:	187b      	adds	r3, r7, r1
 800274a:	2280      	movs	r2, #128	@ 0x80
 800274c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800274e:	187b      	adds	r3, r7, r1
 8002750:	2201      	movs	r2, #1
 8002752:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	187b      	adds	r3, r7, r1
 8002756:	2200      	movs	r2, #0
 8002758:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275a:	187b      	adds	r3, r7, r1
 800275c:	2200      	movs	r2, #0
 800275e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_BL_Pin_GPIO_Port, &GPIO_InitStruct);
 8002760:	187b      	adds	r3, r7, r1
 8002762:	4a07      	ldr	r2, [pc, #28]	@ (8002780 <MX_GPIO_Init+0x170>)
 8002764:	0019      	movs	r1, r3
 8002766:	0010      	movs	r0, r2
 8002768:	f000 fcd8 	bl	800311c <HAL_GPIO_Init>

}
 800276c:	46c0      	nop			@ (mov r8, r8)
 800276e:	46bd      	mov	sp, r7
 8002770:	b00b      	add	sp, #44	@ 0x2c
 8002772:	bd90      	pop	{r4, r7, pc}
 8002774:	40021000 	.word	0x40021000
 8002778:	00008040 	.word	0x00008040
 800277c:	50000400 	.word	0x50000400
 8002780:	50000800 	.word	0x50000800

08002784 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002788:	4b1b      	ldr	r3, [pc, #108]	@ (80027f8 <MX_I2C1_Init+0x74>)
 800278a:	4a1c      	ldr	r2, [pc, #112]	@ (80027fc <MX_I2C1_Init+0x78>)
 800278c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C12166;
 800278e:	4b1a      	ldr	r3, [pc, #104]	@ (80027f8 <MX_I2C1_Init+0x74>)
 8002790:	4a1b      	ldr	r2, [pc, #108]	@ (8002800 <MX_I2C1_Init+0x7c>)
 8002792:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002794:	4b18      	ldr	r3, [pc, #96]	@ (80027f8 <MX_I2C1_Init+0x74>)
 8002796:	2200      	movs	r2, #0
 8002798:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800279a:	4b17      	ldr	r3, [pc, #92]	@ (80027f8 <MX_I2C1_Init+0x74>)
 800279c:	2201      	movs	r2, #1
 800279e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027a0:	4b15      	ldr	r3, [pc, #84]	@ (80027f8 <MX_I2C1_Init+0x74>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80027a6:	4b14      	ldr	r3, [pc, #80]	@ (80027f8 <MX_I2C1_Init+0x74>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80027ac:	4b12      	ldr	r3, [pc, #72]	@ (80027f8 <MX_I2C1_Init+0x74>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027b2:	4b11      	ldr	r3, [pc, #68]	@ (80027f8 <MX_I2C1_Init+0x74>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027b8:	4b0f      	ldr	r3, [pc, #60]	@ (80027f8 <MX_I2C1_Init+0x74>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027be:	4b0e      	ldr	r3, [pc, #56]	@ (80027f8 <MX_I2C1_Init+0x74>)
 80027c0:	0018      	movs	r0, r3
 80027c2:	f000 fe35 	bl	8003430 <HAL_I2C_Init>
 80027c6:	1e03      	subs	r3, r0, #0
 80027c8:	d001      	beq.n	80027ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80027ca:	f000 f8eb 	bl	80029a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80027ce:	4b0a      	ldr	r3, [pc, #40]	@ (80027f8 <MX_I2C1_Init+0x74>)
 80027d0:	2100      	movs	r1, #0
 80027d2:	0018      	movs	r0, r3
 80027d4:	f000 fed2 	bl	800357c <HAL_I2CEx_ConfigAnalogFilter>
 80027d8:	1e03      	subs	r3, r0, #0
 80027da:	d001      	beq.n	80027e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80027dc:	f000 f8e2 	bl	80029a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80027e0:	4b05      	ldr	r3, [pc, #20]	@ (80027f8 <MX_I2C1_Init+0x74>)
 80027e2:	2100      	movs	r1, #0
 80027e4:	0018      	movs	r0, r3
 80027e6:	f000 ff15 	bl	8003614 <HAL_I2CEx_ConfigDigitalFilter>
 80027ea:	1e03      	subs	r3, r0, #0
 80027ec:	d001      	beq.n	80027f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80027ee:	f000 f8d9 	bl	80029a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80027f2:	46c0      	nop			@ (mov r8, r8)
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	200001f0 	.word	0x200001f0
 80027fc:	40005400 	.word	0x40005400
 8002800:	00c12166 	.word	0x00c12166

08002804 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002804:	b590      	push	{r4, r7, lr}
 8002806:	b09d      	sub	sp, #116	@ 0x74
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800280c:	235c      	movs	r3, #92	@ 0x5c
 800280e:	18fb      	adds	r3, r7, r3
 8002810:	0018      	movs	r0, r3
 8002812:	2314      	movs	r3, #20
 8002814:	001a      	movs	r2, r3
 8002816:	2100      	movs	r1, #0
 8002818:	f003 fbb0 	bl	8005f7c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800281c:	2410      	movs	r4, #16
 800281e:	193b      	adds	r3, r7, r4
 8002820:	0018      	movs	r0, r3
 8002822:	234c      	movs	r3, #76	@ 0x4c
 8002824:	001a      	movs	r2, r3
 8002826:	2100      	movs	r1, #0
 8002828:	f003 fba8 	bl	8005f7c <memset>
  if(i2cHandle->Instance==I2C1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a23      	ldr	r2, [pc, #140]	@ (80028c0 <HAL_I2C_MspInit+0xbc>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d13f      	bne.n	80028b6 <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002836:	193b      	adds	r3, r7, r4
 8002838:	2220      	movs	r2, #32
 800283a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800283c:	193b      	adds	r3, r7, r4
 800283e:	2200      	movs	r2, #0
 8002840:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002842:	193b      	adds	r3, r7, r4
 8002844:	0018      	movs	r0, r3
 8002846:	f001 fc87 	bl	8004158 <HAL_RCCEx_PeriphCLKConfig>
 800284a:	1e03      	subs	r3, r0, #0
 800284c:	d001      	beq.n	8002852 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800284e:	f000 f8a9 	bl	80029a4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002852:	4b1c      	ldr	r3, [pc, #112]	@ (80028c4 <HAL_I2C_MspInit+0xc0>)
 8002854:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002856:	4b1b      	ldr	r3, [pc, #108]	@ (80028c4 <HAL_I2C_MspInit+0xc0>)
 8002858:	2101      	movs	r1, #1
 800285a:	430a      	orrs	r2, r1
 800285c:	635a      	str	r2, [r3, #52]	@ 0x34
 800285e:	4b19      	ldr	r3, [pc, #100]	@ (80028c4 <HAL_I2C_MspInit+0xc0>)
 8002860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002862:	2201      	movs	r2, #1
 8002864:	4013      	ands	r3, r2
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800286a:	215c      	movs	r1, #92	@ 0x5c
 800286c:	187b      	adds	r3, r7, r1
 800286e:	22c0      	movs	r2, #192	@ 0xc0
 8002870:	00d2      	lsls	r2, r2, #3
 8002872:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002874:	187b      	adds	r3, r7, r1
 8002876:	2212      	movs	r2, #18
 8002878:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287a:	187b      	adds	r3, r7, r1
 800287c:	2200      	movs	r2, #0
 800287e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002880:	187b      	adds	r3, r7, r1
 8002882:	2200      	movs	r2, #0
 8002884:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002886:	187b      	adds	r3, r7, r1
 8002888:	2206      	movs	r2, #6
 800288a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800288c:	187a      	adds	r2, r7, r1
 800288e:	23a0      	movs	r3, #160	@ 0xa0
 8002890:	05db      	lsls	r3, r3, #23
 8002892:	0011      	movs	r1, r2
 8002894:	0018      	movs	r0, r3
 8002896:	f000 fc41 	bl	800311c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800289a:	4b0a      	ldr	r3, [pc, #40]	@ (80028c4 <HAL_I2C_MspInit+0xc0>)
 800289c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800289e:	4b09      	ldr	r3, [pc, #36]	@ (80028c4 <HAL_I2C_MspInit+0xc0>)
 80028a0:	2180      	movs	r1, #128	@ 0x80
 80028a2:	0389      	lsls	r1, r1, #14
 80028a4:	430a      	orrs	r2, r1
 80028a6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80028a8:	4b06      	ldr	r3, [pc, #24]	@ (80028c4 <HAL_I2C_MspInit+0xc0>)
 80028aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028ac:	2380      	movs	r3, #128	@ 0x80
 80028ae:	039b      	lsls	r3, r3, #14
 80028b0:	4013      	ands	r3, r2
 80028b2:	60bb      	str	r3, [r7, #8]
 80028b4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80028b6:	46c0      	nop			@ (mov r8, r8)
 80028b8:	46bd      	mov	sp, r7
 80028ba:	b01d      	add	sp, #116	@ 0x74
 80028bc:	bd90      	pop	{r4, r7, pc}
 80028be:	46c0      	nop			@ (mov r8, r8)
 80028c0:	40005400 	.word	0x40005400
 80028c4:	40021000 	.word	0x40021000

080028c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028cc:	f000 fad6 	bl	8002e7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028d0:	f000 f80a 	bl	80028e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028d4:	f7ff fe9c 	bl	8002610 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80028d8:	f000 f9f8 	bl	8002ccc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80028dc:	f7ff ff52 	bl	8002784 <MX_I2C1_Init>
  MX_SPI1_Init();
 80028e0:	f000 f866 	bl	80029b0 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80028e4:	46c0      	nop			@ (mov r8, r8)
 80028e6:	e7fd      	b.n	80028e4 <main+0x1c>

080028e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028e8:	b590      	push	{r4, r7, lr}
 80028ea:	b095      	sub	sp, #84	@ 0x54
 80028ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028ee:	2414      	movs	r4, #20
 80028f0:	193b      	adds	r3, r7, r4
 80028f2:	0018      	movs	r0, r3
 80028f4:	233c      	movs	r3, #60	@ 0x3c
 80028f6:	001a      	movs	r2, r3
 80028f8:	2100      	movs	r1, #0
 80028fa:	f003 fb3f 	bl	8005f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028fe:	1d3b      	adds	r3, r7, #4
 8002900:	0018      	movs	r0, r3
 8002902:	2310      	movs	r3, #16
 8002904:	001a      	movs	r2, r3
 8002906:	2100      	movs	r1, #0
 8002908:	f003 fb38 	bl	8005f7c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800290c:	2380      	movs	r3, #128	@ 0x80
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	0018      	movs	r0, r3
 8002912:	f000 fecb 	bl	80036ac <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002916:	193b      	adds	r3, r7, r4
 8002918:	2202      	movs	r2, #2
 800291a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800291c:	193b      	adds	r3, r7, r4
 800291e:	2280      	movs	r2, #128	@ 0x80
 8002920:	0052      	lsls	r2, r2, #1
 8002922:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002924:	0021      	movs	r1, r4
 8002926:	187b      	adds	r3, r7, r1
 8002928:	2200      	movs	r2, #0
 800292a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800292c:	187b      	adds	r3, r7, r1
 800292e:	2240      	movs	r2, #64	@ 0x40
 8002930:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002932:	187b      	adds	r3, r7, r1
 8002934:	2202      	movs	r2, #2
 8002936:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002938:	187b      	adds	r3, r7, r1
 800293a:	2202      	movs	r2, #2
 800293c:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800293e:	187b      	adds	r3, r7, r1
 8002940:	2200      	movs	r2, #0
 8002942:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002944:	187b      	adds	r3, r7, r1
 8002946:	2208      	movs	r2, #8
 8002948:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800294a:	187b      	adds	r3, r7, r1
 800294c:	2280      	movs	r2, #128	@ 0x80
 800294e:	0292      	lsls	r2, r2, #10
 8002950:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002952:	187b      	adds	r3, r7, r1
 8002954:	2280      	movs	r2, #128	@ 0x80
 8002956:	0492      	lsls	r2, r2, #18
 8002958:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800295a:	187b      	adds	r3, r7, r1
 800295c:	2280      	movs	r2, #128	@ 0x80
 800295e:	0592      	lsls	r2, r2, #22
 8002960:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002962:	187b      	adds	r3, r7, r1
 8002964:	0018      	movs	r0, r3
 8002966:	f000 feed 	bl	8003744 <HAL_RCC_OscConfig>
 800296a:	1e03      	subs	r3, r0, #0
 800296c:	d001      	beq.n	8002972 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800296e:	f000 f819 	bl	80029a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002972:	1d3b      	adds	r3, r7, #4
 8002974:	2207      	movs	r2, #7
 8002976:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002978:	1d3b      	adds	r3, r7, #4
 800297a:	2202      	movs	r2, #2
 800297c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800297e:	1d3b      	adds	r3, r7, #4
 8002980:	2200      	movs	r2, #0
 8002982:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002984:	1d3b      	adds	r3, r7, #4
 8002986:	2200      	movs	r2, #0
 8002988:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800298a:	1d3b      	adds	r3, r7, #4
 800298c:	2102      	movs	r1, #2
 800298e:	0018      	movs	r0, r3
 8002990:	f001 fa38 	bl	8003e04 <HAL_RCC_ClockConfig>
 8002994:	1e03      	subs	r3, r0, #0
 8002996:	d001      	beq.n	800299c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002998:	f000 f804 	bl	80029a4 <Error_Handler>
  }
}
 800299c:	46c0      	nop			@ (mov r8, r8)
 800299e:	46bd      	mov	sp, r7
 80029a0:	b015      	add	sp, #84	@ 0x54
 80029a2:	bd90      	pop	{r4, r7, pc}

080029a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029a8:	b672      	cpsid	i
}
 80029aa:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029ac:	46c0      	nop			@ (mov r8, r8)
 80029ae:	e7fd      	b.n	80029ac <Error_Handler+0x8>

080029b0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80029b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a24 <MX_SPI1_Init+0x74>)
 80029b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002a28 <MX_SPI1_Init+0x78>)
 80029b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002a24 <MX_SPI1_Init+0x74>)
 80029bc:	2282      	movs	r2, #130	@ 0x82
 80029be:	0052      	lsls	r2, r2, #1
 80029c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80029c2:	4b18      	ldr	r3, [pc, #96]	@ (8002a24 <MX_SPI1_Init+0x74>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80029c8:	4b16      	ldr	r3, [pc, #88]	@ (8002a24 <MX_SPI1_Init+0x74>)
 80029ca:	22e0      	movs	r2, #224	@ 0xe0
 80029cc:	00d2      	lsls	r2, r2, #3
 80029ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029d0:	4b14      	ldr	r3, [pc, #80]	@ (8002a24 <MX_SPI1_Init+0x74>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029d6:	4b13      	ldr	r3, [pc, #76]	@ (8002a24 <MX_SPI1_Init+0x74>)
 80029d8:	2200      	movs	r2, #0
 80029da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029dc:	4b11      	ldr	r3, [pc, #68]	@ (8002a24 <MX_SPI1_Init+0x74>)
 80029de:	2280      	movs	r2, #128	@ 0x80
 80029e0:	0092      	lsls	r2, r2, #2
 80029e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80029e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002a24 <MX_SPI1_Init+0x74>)
 80029e6:	2210      	movs	r2, #16
 80029e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002a24 <MX_SPI1_Init+0x74>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80029f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002a24 <MX_SPI1_Init+0x74>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002a24 <MX_SPI1_Init+0x74>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80029fc:	4b09      	ldr	r3, [pc, #36]	@ (8002a24 <MX_SPI1_Init+0x74>)
 80029fe:	2207      	movs	r2, #7
 8002a00:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a02:	4b08      	ldr	r3, [pc, #32]	@ (8002a24 <MX_SPI1_Init+0x74>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a08:	4b06      	ldr	r3, [pc, #24]	@ (8002a24 <MX_SPI1_Init+0x74>)
 8002a0a:	2208      	movs	r2, #8
 8002a0c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a0e:	4b05      	ldr	r3, [pc, #20]	@ (8002a24 <MX_SPI1_Init+0x74>)
 8002a10:	0018      	movs	r0, r3
 8002a12:	f001 fddd 	bl	80045d0 <HAL_SPI_Init>
 8002a16:	1e03      	subs	r3, r0, #0
 8002a18:	d001      	beq.n	8002a1e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002a1a:	f7ff ffc3 	bl	80029a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a1e:	46c0      	nop			@ (mov r8, r8)
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	20000244 	.word	0x20000244
 8002a28:	40013000 	.word	0x40013000

08002a2c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002a2c:	b590      	push	{r4, r7, lr}
 8002a2e:	b08b      	sub	sp, #44	@ 0x2c
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a34:	2414      	movs	r4, #20
 8002a36:	193b      	adds	r3, r7, r4
 8002a38:	0018      	movs	r0, r3
 8002a3a:	2314      	movs	r3, #20
 8002a3c:	001a      	movs	r2, r3
 8002a3e:	2100      	movs	r1, #0
 8002a40:	f003 fa9c 	bl	8005f7c <memset>
  if(spiHandle->Instance==SPI1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a1b      	ldr	r2, [pc, #108]	@ (8002ab8 <HAL_SPI_MspInit+0x8c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d130      	bne.n	8002ab0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8002abc <HAL_SPI_MspInit+0x90>)
 8002a50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a52:	4b1a      	ldr	r3, [pc, #104]	@ (8002abc <HAL_SPI_MspInit+0x90>)
 8002a54:	2180      	movs	r1, #128	@ 0x80
 8002a56:	0149      	lsls	r1, r1, #5
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a5c:	4b17      	ldr	r3, [pc, #92]	@ (8002abc <HAL_SPI_MspInit+0x90>)
 8002a5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a60:	2380      	movs	r3, #128	@ 0x80
 8002a62:	015b      	lsls	r3, r3, #5
 8002a64:	4013      	ands	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
 8002a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a6a:	4b14      	ldr	r3, [pc, #80]	@ (8002abc <HAL_SPI_MspInit+0x90>)
 8002a6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a6e:	4b13      	ldr	r3, [pc, #76]	@ (8002abc <HAL_SPI_MspInit+0x90>)
 8002a70:	2101      	movs	r1, #1
 8002a72:	430a      	orrs	r2, r1
 8002a74:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a76:	4b11      	ldr	r3, [pc, #68]	@ (8002abc <HAL_SPI_MspInit+0x90>)
 8002a78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8002a82:	0021      	movs	r1, r4
 8002a84:	187b      	adds	r3, r7, r1
 8002a86:	22c2      	movs	r2, #194	@ 0xc2
 8002a88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8a:	187b      	adds	r3, r7, r1
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a90:	187b      	adds	r3, r7, r1
 8002a92:	2200      	movs	r2, #0
 8002a94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a96:	187b      	adds	r3, r7, r1
 8002a98:	2200      	movs	r2, #0
 8002a9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002a9c:	187b      	adds	r3, r7, r1
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa2:	187a      	adds	r2, r7, r1
 8002aa4:	23a0      	movs	r3, #160	@ 0xa0
 8002aa6:	05db      	lsls	r3, r3, #23
 8002aa8:	0011      	movs	r1, r2
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f000 fb36 	bl	800311c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002ab0:	46c0      	nop			@ (mov r8, r8)
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	b00b      	add	sp, #44	@ 0x2c
 8002ab6:	bd90      	pop	{r4, r7, pc}
 8002ab8:	40013000 	.word	0x40013000
 8002abc:	40021000 	.word	0x40021000

08002ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ac6:	4b11      	ldr	r3, [pc, #68]	@ (8002b0c <HAL_MspInit+0x4c>)
 8002ac8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002aca:	4b10      	ldr	r3, [pc, #64]	@ (8002b0c <HAL_MspInit+0x4c>)
 8002acc:	2101      	movs	r1, #1
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8002b0c <HAL_MspInit+0x4c>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	4013      	ands	r3, r2
 8002ada:	607b      	str	r3, [r7, #4]
 8002adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ade:	4b0b      	ldr	r3, [pc, #44]	@ (8002b0c <HAL_MspInit+0x4c>)
 8002ae0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8002b0c <HAL_MspInit+0x4c>)
 8002ae4:	2180      	movs	r1, #128	@ 0x80
 8002ae6:	0549      	lsls	r1, r1, #21
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002aec:	4b07      	ldr	r3, [pc, #28]	@ (8002b0c <HAL_MspInit+0x4c>)
 8002aee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002af0:	2380      	movs	r3, #128	@ 0x80
 8002af2:	055b      	lsls	r3, r3, #21
 8002af4:	4013      	ands	r3, r2
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8002afa:	23c0      	movs	r3, #192	@ 0xc0
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	0018      	movs	r0, r3
 8002b00:	f000 fa42 	bl	8002f88 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b04:	46c0      	nop			@ (mov r8, r8)
 8002b06:	46bd      	mov	sp, r7
 8002b08:	b002      	add	sp, #8
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40021000 	.word	0x40021000

08002b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b14:	46c0      	nop			@ (mov r8, r8)
 8002b16:	e7fd      	b.n	8002b14 <NMI_Handler+0x4>

08002b18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b1c:	46c0      	nop			@ (mov r8, r8)
 8002b1e:	e7fd      	b.n	8002b1c <HardFault_Handler+0x4>

08002b20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002b24:	46c0      	nop			@ (mov r8, r8)
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b2e:	46c0      	nop			@ (mov r8, r8)
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b38:	f000 fa0a 	bl	8002f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b3c:	46c0      	nop			@ (mov r8, r8)
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	af00      	add	r7, sp, #0
  return 1;
 8002b46:	2301      	movs	r3, #1
}
 8002b48:	0018      	movs	r0, r3
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <_kill>:

int _kill(int pid, int sig)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b082      	sub	sp, #8
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
 8002b56:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b58:	f003 fa18 	bl	8005f8c <__errno>
 8002b5c:	0003      	movs	r3, r0
 8002b5e:	2216      	movs	r2, #22
 8002b60:	601a      	str	r2, [r3, #0]
  return -1;
 8002b62:	2301      	movs	r3, #1
 8002b64:	425b      	negs	r3, r3
}
 8002b66:	0018      	movs	r0, r3
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	b002      	add	sp, #8
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <_exit>:

void _exit (int status)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b76:	2301      	movs	r3, #1
 8002b78:	425a      	negs	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	0011      	movs	r1, r2
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f7ff ffe5 	bl	8002b4e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b84:	46c0      	nop			@ (mov r8, r8)
 8002b86:	e7fd      	b.n	8002b84 <_exit+0x16>

08002b88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	e00a      	b.n	8002bb0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b9a:	e000      	b.n	8002b9e <_read+0x16>
 8002b9c:	bf00      	nop
 8002b9e:	0001      	movs	r1, r0
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	1c5a      	adds	r2, r3, #1
 8002ba4:	60ba      	str	r2, [r7, #8]
 8002ba6:	b2ca      	uxtb	r2, r1
 8002ba8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	3301      	adds	r3, #1
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	dbf0      	blt.n	8002b9a <_read+0x12>
  }

  return len;
 8002bb8:	687b      	ldr	r3, [r7, #4]
}
 8002bba:	0018      	movs	r0, r3
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	b006      	add	sp, #24
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b086      	sub	sp, #24
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	60f8      	str	r0, [r7, #12]
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bce:	2300      	movs	r3, #0
 8002bd0:	617b      	str	r3, [r7, #20]
 8002bd2:	e009      	b.n	8002be8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	60ba      	str	r2, [r7, #8]
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	0018      	movs	r0, r3
 8002bde:	e000      	b.n	8002be2 <_write+0x20>
 8002be0:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	3301      	adds	r3, #1
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	dbf1      	blt.n	8002bd4 <_write+0x12>
  }
  return len;
 8002bf0:	687b      	ldr	r3, [r7, #4]
}
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	b006      	add	sp, #24
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <_close>:

int _close(int file)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b082      	sub	sp, #8
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c02:	2301      	movs	r3, #1
 8002c04:	425b      	negs	r3, r3
}
 8002c06:	0018      	movs	r0, r3
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	b002      	add	sp, #8
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b082      	sub	sp, #8
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	2280      	movs	r2, #128	@ 0x80
 8002c1c:	0192      	lsls	r2, r2, #6
 8002c1e:	605a      	str	r2, [r3, #4]
  return 0;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	0018      	movs	r0, r3
 8002c24:	46bd      	mov	sp, r7
 8002c26:	b002      	add	sp, #8
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <_isatty>:

int _isatty(int file)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b082      	sub	sp, #8
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c32:	2301      	movs	r3, #1
}
 8002c34:	0018      	movs	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b002      	add	sp, #8
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	b004      	add	sp, #16
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c5c:	4a14      	ldr	r2, [pc, #80]	@ (8002cb0 <_sbrk+0x5c>)
 8002c5e:	4b15      	ldr	r3, [pc, #84]	@ (8002cb4 <_sbrk+0x60>)
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c68:	4b13      	ldr	r3, [pc, #76]	@ (8002cb8 <_sbrk+0x64>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d102      	bne.n	8002c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c70:	4b11      	ldr	r3, [pc, #68]	@ (8002cb8 <_sbrk+0x64>)
 8002c72:	4a12      	ldr	r2, [pc, #72]	@ (8002cbc <_sbrk+0x68>)
 8002c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c76:	4b10      	ldr	r3, [pc, #64]	@ (8002cb8 <_sbrk+0x64>)
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	18d3      	adds	r3, r2, r3
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d207      	bcs.n	8002c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c84:	f003 f982 	bl	8005f8c <__errno>
 8002c88:	0003      	movs	r3, r0
 8002c8a:	220c      	movs	r2, #12
 8002c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	425b      	negs	r3, r3
 8002c92:	e009      	b.n	8002ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c94:	4b08      	ldr	r3, [pc, #32]	@ (8002cb8 <_sbrk+0x64>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c9a:	4b07      	ldr	r3, [pc, #28]	@ (8002cb8 <_sbrk+0x64>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	18d2      	adds	r2, r2, r3
 8002ca2:	4b05      	ldr	r3, [pc, #20]	@ (8002cb8 <_sbrk+0x64>)
 8002ca4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
}
 8002ca8:	0018      	movs	r0, r3
 8002caa:	46bd      	mov	sp, r7
 8002cac:	b006      	add	sp, #24
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	20024000 	.word	0x20024000
 8002cb4:	00000400 	.word	0x00000400
 8002cb8:	200002a8 	.word	0x200002a8
 8002cbc:	20000490 	.word	0x20000490

08002cc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cc4:	46c0      	nop			@ (mov r8, r8)
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002cd0:	4b23      	ldr	r3, [pc, #140]	@ (8002d60 <MX_USART2_UART_Init+0x94>)
 8002cd2:	4a24      	ldr	r2, [pc, #144]	@ (8002d64 <MX_USART2_UART_Init+0x98>)
 8002cd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002cd6:	4b22      	ldr	r3, [pc, #136]	@ (8002d60 <MX_USART2_UART_Init+0x94>)
 8002cd8:	22e1      	movs	r2, #225	@ 0xe1
 8002cda:	0252      	lsls	r2, r2, #9
 8002cdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cde:	4b20      	ldr	r3, [pc, #128]	@ (8002d60 <MX_USART2_UART_Init+0x94>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ce4:	4b1e      	ldr	r3, [pc, #120]	@ (8002d60 <MX_USART2_UART_Init+0x94>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cea:	4b1d      	ldr	r3, [pc, #116]	@ (8002d60 <MX_USART2_UART_Init+0x94>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d60 <MX_USART2_UART_Init+0x94>)
 8002cf2:	220c      	movs	r2, #12
 8002cf4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d60 <MX_USART2_UART_Init+0x94>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cfc:	4b18      	ldr	r3, [pc, #96]	@ (8002d60 <MX_USART2_UART_Init+0x94>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d02:	4b17      	ldr	r3, [pc, #92]	@ (8002d60 <MX_USART2_UART_Init+0x94>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d08:	4b15      	ldr	r3, [pc, #84]	@ (8002d60 <MX_USART2_UART_Init+0x94>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d0e:	4b14      	ldr	r3, [pc, #80]	@ (8002d60 <MX_USART2_UART_Init+0x94>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d14:	4b12      	ldr	r3, [pc, #72]	@ (8002d60 <MX_USART2_UART_Init+0x94>)
 8002d16:	0018      	movs	r0, r3
 8002d18:	f001 fd12 	bl	8004740 <HAL_UART_Init>
 8002d1c:	1e03      	subs	r3, r0, #0
 8002d1e:	d001      	beq.n	8002d24 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002d20:	f7ff fe40 	bl	80029a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d24:	4b0e      	ldr	r3, [pc, #56]	@ (8002d60 <MX_USART2_UART_Init+0x94>)
 8002d26:	2100      	movs	r1, #0
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f002 fb23 	bl	8005374 <HAL_UARTEx_SetTxFifoThreshold>
 8002d2e:	1e03      	subs	r3, r0, #0
 8002d30:	d001      	beq.n	8002d36 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002d32:	f7ff fe37 	bl	80029a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d36:	4b0a      	ldr	r3, [pc, #40]	@ (8002d60 <MX_USART2_UART_Init+0x94>)
 8002d38:	2100      	movs	r1, #0
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	f002 fb5a 	bl	80053f4 <HAL_UARTEx_SetRxFifoThreshold>
 8002d40:	1e03      	subs	r3, r0, #0
 8002d42:	d001      	beq.n	8002d48 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002d44:	f7ff fe2e 	bl	80029a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002d48:	4b05      	ldr	r3, [pc, #20]	@ (8002d60 <MX_USART2_UART_Init+0x94>)
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	f002 fad8 	bl	8005300 <HAL_UARTEx_DisableFifoMode>
 8002d50:	1e03      	subs	r3, r0, #0
 8002d52:	d001      	beq.n	8002d58 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002d54:	f7ff fe26 	bl	80029a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d58:	46c0      	nop			@ (mov r8, r8)
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	46c0      	nop			@ (mov r8, r8)
 8002d60:	200002ac 	.word	0x200002ac
 8002d64:	40004400 	.word	0x40004400

08002d68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d68:	b590      	push	{r4, r7, lr}
 8002d6a:	b09d      	sub	sp, #116	@ 0x74
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d70:	235c      	movs	r3, #92	@ 0x5c
 8002d72:	18fb      	adds	r3, r7, r3
 8002d74:	0018      	movs	r0, r3
 8002d76:	2314      	movs	r3, #20
 8002d78:	001a      	movs	r2, r3
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	f003 f8fe 	bl	8005f7c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d80:	2410      	movs	r4, #16
 8002d82:	193b      	adds	r3, r7, r4
 8002d84:	0018      	movs	r0, r3
 8002d86:	234c      	movs	r3, #76	@ 0x4c
 8002d88:	001a      	movs	r2, r3
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	f003 f8f6 	bl	8005f7c <memset>
  if(uartHandle->Instance==USART2)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a22      	ldr	r2, [pc, #136]	@ (8002e20 <HAL_UART_MspInit+0xb8>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d13e      	bne.n	8002e18 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002d9a:	193b      	adds	r3, r7, r4
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002da0:	193b      	adds	r3, r7, r4
 8002da2:	2200      	movs	r2, #0
 8002da4:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002da6:	193b      	adds	r3, r7, r4
 8002da8:	0018      	movs	r0, r3
 8002daa:	f001 f9d5 	bl	8004158 <HAL_RCCEx_PeriphCLKConfig>
 8002dae:	1e03      	subs	r3, r0, #0
 8002db0:	d001      	beq.n	8002db6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002db2:	f7ff fdf7 	bl	80029a4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002db6:	4b1b      	ldr	r3, [pc, #108]	@ (8002e24 <HAL_UART_MspInit+0xbc>)
 8002db8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002dba:	4b1a      	ldr	r3, [pc, #104]	@ (8002e24 <HAL_UART_MspInit+0xbc>)
 8002dbc:	2180      	movs	r1, #128	@ 0x80
 8002dbe:	0289      	lsls	r1, r1, #10
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002dc4:	4b17      	ldr	r3, [pc, #92]	@ (8002e24 <HAL_UART_MspInit+0xbc>)
 8002dc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002dc8:	2380      	movs	r3, #128	@ 0x80
 8002dca:	029b      	lsls	r3, r3, #10
 8002dcc:	4013      	ands	r3, r2
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd2:	4b14      	ldr	r3, [pc, #80]	@ (8002e24 <HAL_UART_MspInit+0xbc>)
 8002dd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dd6:	4b13      	ldr	r3, [pc, #76]	@ (8002e24 <HAL_UART_MspInit+0xbc>)
 8002dd8:	2101      	movs	r1, #1
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	635a      	str	r2, [r3, #52]	@ 0x34
 8002dde:	4b11      	ldr	r3, [pc, #68]	@ (8002e24 <HAL_UART_MspInit+0xbc>)
 8002de0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002de2:	2201      	movs	r2, #1
 8002de4:	4013      	ands	r3, r2
 8002de6:	60bb      	str	r3, [r7, #8]
 8002de8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8002dea:	215c      	movs	r1, #92	@ 0x5c
 8002dec:	187b      	adds	r3, r7, r1
 8002dee:	220c      	movs	r2, #12
 8002df0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df2:	187b      	adds	r3, r7, r1
 8002df4:	2202      	movs	r2, #2
 8002df6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df8:	187b      	adds	r3, r7, r1
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dfe:	187b      	adds	r3, r7, r1
 8002e00:	2200      	movs	r2, #0
 8002e02:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002e04:	187b      	adds	r3, r7, r1
 8002e06:	2201      	movs	r2, #1
 8002e08:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e0a:	187a      	adds	r2, r7, r1
 8002e0c:	23a0      	movs	r3, #160	@ 0xa0
 8002e0e:	05db      	lsls	r3, r3, #23
 8002e10:	0011      	movs	r1, r2
 8002e12:	0018      	movs	r0, r3
 8002e14:	f000 f982 	bl	800311c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002e18:	46c0      	nop			@ (mov r8, r8)
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	b01d      	add	sp, #116	@ 0x74
 8002e1e:	bd90      	pop	{r4, r7, pc}
 8002e20:	40004400 	.word	0x40004400
 8002e24:	40021000 	.word	0x40021000

08002e28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e28:	480d      	ldr	r0, [pc, #52]	@ (8002e60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e2a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e2c:	f7ff ff48 	bl	8002cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e30:	480c      	ldr	r0, [pc, #48]	@ (8002e64 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e32:	490d      	ldr	r1, [pc, #52]	@ (8002e68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e34:	4a0d      	ldr	r2, [pc, #52]	@ (8002e6c <LoopForever+0xe>)
  movs r3, #0
 8002e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e38:	e002      	b.n	8002e40 <LoopCopyDataInit>

08002e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e3e:	3304      	adds	r3, #4

08002e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e44:	d3f9      	bcc.n	8002e3a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e46:	4a0a      	ldr	r2, [pc, #40]	@ (8002e70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e48:	4c0a      	ldr	r4, [pc, #40]	@ (8002e74 <LoopForever+0x16>)
  movs r3, #0
 8002e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e4c:	e001      	b.n	8002e52 <LoopFillZerobss>

08002e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e50:	3204      	adds	r2, #4

08002e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e54:	d3fb      	bcc.n	8002e4e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002e56:	f003 f89f 	bl	8005f98 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002e5a:	f7ff fd35 	bl	80028c8 <main>

08002e5e <LoopForever>:

LoopForever:
  b LoopForever
 8002e5e:	e7fe      	b.n	8002e5e <LoopForever>
  ldr   r0, =_estack
 8002e60:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8002e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e68:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002e6c:	080083e4 	.word	0x080083e4
  ldr r2, =_sbss
 8002e70:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002e74:	20000490 	.word	0x20000490

08002e78 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e78:	e7fe      	b.n	8002e78 <ADC1_COMP_IRQHandler>
	...

08002e7c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e82:	1dfb      	adds	r3, r7, #7
 8002e84:	2200      	movs	r2, #0
 8002e86:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e88:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb8 <HAL_Init+0x3c>)
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb8 <HAL_Init+0x3c>)
 8002e8e:	2180      	movs	r1, #128	@ 0x80
 8002e90:	0049      	lsls	r1, r1, #1
 8002e92:	430a      	orrs	r2, r1
 8002e94:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e96:	2000      	movs	r0, #0
 8002e98:	f000 f810 	bl	8002ebc <HAL_InitTick>
 8002e9c:	1e03      	subs	r3, r0, #0
 8002e9e:	d003      	beq.n	8002ea8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002ea0:	1dfb      	adds	r3, r7, #7
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	701a      	strb	r2, [r3, #0]
 8002ea6:	e001      	b.n	8002eac <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002ea8:	f7ff fe0a 	bl	8002ac0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002eac:	1dfb      	adds	r3, r7, #7
 8002eae:	781b      	ldrb	r3, [r3, #0]
}
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	b002      	add	sp, #8
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40022000 	.word	0x40022000

08002ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ebc:	b590      	push	{r4, r7, lr}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ec4:	230f      	movs	r3, #15
 8002ec6:	18fb      	adds	r3, r7, r3
 8002ec8:	2200      	movs	r2, #0
 8002eca:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002ecc:	4b1d      	ldr	r3, [pc, #116]	@ (8002f44 <HAL_InitTick+0x88>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d02b      	beq.n	8002f2c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002ed4:	4b1c      	ldr	r3, [pc, #112]	@ (8002f48 <HAL_InitTick+0x8c>)
 8002ed6:	681c      	ldr	r4, [r3, #0]
 8002ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8002f44 <HAL_InitTick+0x88>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	0019      	movs	r1, r3
 8002ede:	23fa      	movs	r3, #250	@ 0xfa
 8002ee0:	0098      	lsls	r0, r3, #2
 8002ee2:	f7fd f92b 	bl	800013c <__udivsi3>
 8002ee6:	0003      	movs	r3, r0
 8002ee8:	0019      	movs	r1, r3
 8002eea:	0020      	movs	r0, r4
 8002eec:	f7fd f926 	bl	800013c <__udivsi3>
 8002ef0:	0003      	movs	r3, r0
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	f000 f905 	bl	8003102 <HAL_SYSTICK_Config>
 8002ef8:	1e03      	subs	r3, r0, #0
 8002efa:	d112      	bne.n	8002f22 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b03      	cmp	r3, #3
 8002f00:	d80a      	bhi.n	8002f18 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	2301      	movs	r3, #1
 8002f06:	425b      	negs	r3, r3
 8002f08:	2200      	movs	r2, #0
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f000 f8e4 	bl	80030d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f10:	4b0e      	ldr	r3, [pc, #56]	@ (8002f4c <HAL_InitTick+0x90>)
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	e00d      	b.n	8002f34 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002f18:	230f      	movs	r3, #15
 8002f1a:	18fb      	adds	r3, r7, r3
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	701a      	strb	r2, [r3, #0]
 8002f20:	e008      	b.n	8002f34 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f22:	230f      	movs	r3, #15
 8002f24:	18fb      	adds	r3, r7, r3
 8002f26:	2201      	movs	r2, #1
 8002f28:	701a      	strb	r2, [r3, #0]
 8002f2a:	e003      	b.n	8002f34 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f2c:	230f      	movs	r3, #15
 8002f2e:	18fb      	adds	r3, r7, r3
 8002f30:	2201      	movs	r2, #1
 8002f32:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002f34:	230f      	movs	r3, #15
 8002f36:	18fb      	adds	r3, r7, r3
 8002f38:	781b      	ldrb	r3, [r3, #0]
}
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	b005      	add	sp, #20
 8002f40:	bd90      	pop	{r4, r7, pc}
 8002f42:	46c0      	nop			@ (mov r8, r8)
 8002f44:	20000008 	.word	0x20000008
 8002f48:	20000000 	.word	0x20000000
 8002f4c:	20000004 	.word	0x20000004

08002f50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f54:	4b05      	ldr	r3, [pc, #20]	@ (8002f6c <HAL_IncTick+0x1c>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	001a      	movs	r2, r3
 8002f5a:	4b05      	ldr	r3, [pc, #20]	@ (8002f70 <HAL_IncTick+0x20>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	18d2      	adds	r2, r2, r3
 8002f60:	4b03      	ldr	r3, [pc, #12]	@ (8002f70 <HAL_IncTick+0x20>)
 8002f62:	601a      	str	r2, [r3, #0]
}
 8002f64:	46c0      	nop			@ (mov r8, r8)
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	46c0      	nop			@ (mov r8, r8)
 8002f6c:	20000008 	.word	0x20000008
 8002f70:	20000340 	.word	0x20000340

08002f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  return uwTick;
 8002f78:	4b02      	ldr	r3, [pc, #8]	@ (8002f84 <HAL_GetTick+0x10>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
}
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	46c0      	nop			@ (mov r8, r8)
 8002f84:	20000340 	.word	0x20000340

08002f88 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002f90:	4b06      	ldr	r3, [pc, #24]	@ (8002fac <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a06      	ldr	r2, [pc, #24]	@ (8002fb0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8002f96:	4013      	ands	r3, r2
 8002f98:	0019      	movs	r1, r3
 8002f9a:	4b04      	ldr	r3, [pc, #16]	@ (8002fac <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	601a      	str	r2, [r3, #0]
}
 8002fa2:	46c0      	nop			@ (mov r8, r8)
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	b002      	add	sp, #8
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	46c0      	nop			@ (mov r8, r8)
 8002fac:	40010000 	.word	0x40010000
 8002fb0:	fffff9ff 	.word	0xfffff9ff

08002fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fb4:	b590      	push	{r4, r7, lr}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	0002      	movs	r2, r0
 8002fbc:	6039      	str	r1, [r7, #0]
 8002fbe:	1dfb      	adds	r3, r7, #7
 8002fc0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002fc2:	1dfb      	adds	r3, r7, #7
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b7f      	cmp	r3, #127	@ 0x7f
 8002fc8:	d828      	bhi.n	800301c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fca:	4a2f      	ldr	r2, [pc, #188]	@ (8003088 <__NVIC_SetPriority+0xd4>)
 8002fcc:	1dfb      	adds	r3, r7, #7
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	b25b      	sxtb	r3, r3
 8002fd2:	089b      	lsrs	r3, r3, #2
 8002fd4:	33c0      	adds	r3, #192	@ 0xc0
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	589b      	ldr	r3, [r3, r2]
 8002fda:	1dfa      	adds	r2, r7, #7
 8002fdc:	7812      	ldrb	r2, [r2, #0]
 8002fde:	0011      	movs	r1, r2
 8002fe0:	2203      	movs	r2, #3
 8002fe2:	400a      	ands	r2, r1
 8002fe4:	00d2      	lsls	r2, r2, #3
 8002fe6:	21ff      	movs	r1, #255	@ 0xff
 8002fe8:	4091      	lsls	r1, r2
 8002fea:	000a      	movs	r2, r1
 8002fec:	43d2      	mvns	r2, r2
 8002fee:	401a      	ands	r2, r3
 8002ff0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	019b      	lsls	r3, r3, #6
 8002ff6:	22ff      	movs	r2, #255	@ 0xff
 8002ff8:	401a      	ands	r2, r3
 8002ffa:	1dfb      	adds	r3, r7, #7
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	0018      	movs	r0, r3
 8003000:	2303      	movs	r3, #3
 8003002:	4003      	ands	r3, r0
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003008:	481f      	ldr	r0, [pc, #124]	@ (8003088 <__NVIC_SetPriority+0xd4>)
 800300a:	1dfb      	adds	r3, r7, #7
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	b25b      	sxtb	r3, r3
 8003010:	089b      	lsrs	r3, r3, #2
 8003012:	430a      	orrs	r2, r1
 8003014:	33c0      	adds	r3, #192	@ 0xc0
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800301a:	e031      	b.n	8003080 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800301c:	4a1b      	ldr	r2, [pc, #108]	@ (800308c <__NVIC_SetPriority+0xd8>)
 800301e:	1dfb      	adds	r3, r7, #7
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	0019      	movs	r1, r3
 8003024:	230f      	movs	r3, #15
 8003026:	400b      	ands	r3, r1
 8003028:	3b08      	subs	r3, #8
 800302a:	089b      	lsrs	r3, r3, #2
 800302c:	3306      	adds	r3, #6
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	18d3      	adds	r3, r2, r3
 8003032:	3304      	adds	r3, #4
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	1dfa      	adds	r2, r7, #7
 8003038:	7812      	ldrb	r2, [r2, #0]
 800303a:	0011      	movs	r1, r2
 800303c:	2203      	movs	r2, #3
 800303e:	400a      	ands	r2, r1
 8003040:	00d2      	lsls	r2, r2, #3
 8003042:	21ff      	movs	r1, #255	@ 0xff
 8003044:	4091      	lsls	r1, r2
 8003046:	000a      	movs	r2, r1
 8003048:	43d2      	mvns	r2, r2
 800304a:	401a      	ands	r2, r3
 800304c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	019b      	lsls	r3, r3, #6
 8003052:	22ff      	movs	r2, #255	@ 0xff
 8003054:	401a      	ands	r2, r3
 8003056:	1dfb      	adds	r3, r7, #7
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	0018      	movs	r0, r3
 800305c:	2303      	movs	r3, #3
 800305e:	4003      	ands	r3, r0
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003064:	4809      	ldr	r0, [pc, #36]	@ (800308c <__NVIC_SetPriority+0xd8>)
 8003066:	1dfb      	adds	r3, r7, #7
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	001c      	movs	r4, r3
 800306c:	230f      	movs	r3, #15
 800306e:	4023      	ands	r3, r4
 8003070:	3b08      	subs	r3, #8
 8003072:	089b      	lsrs	r3, r3, #2
 8003074:	430a      	orrs	r2, r1
 8003076:	3306      	adds	r3, #6
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	18c3      	adds	r3, r0, r3
 800307c:	3304      	adds	r3, #4
 800307e:	601a      	str	r2, [r3, #0]
}
 8003080:	46c0      	nop			@ (mov r8, r8)
 8003082:	46bd      	mov	sp, r7
 8003084:	b003      	add	sp, #12
 8003086:	bd90      	pop	{r4, r7, pc}
 8003088:	e000e100 	.word	0xe000e100
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	1e5a      	subs	r2, r3, #1
 800309c:	2380      	movs	r3, #128	@ 0x80
 800309e:	045b      	lsls	r3, r3, #17
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d301      	bcc.n	80030a8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030a4:	2301      	movs	r3, #1
 80030a6:	e010      	b.n	80030ca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030a8:	4b0a      	ldr	r3, [pc, #40]	@ (80030d4 <SysTick_Config+0x44>)
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	3a01      	subs	r2, #1
 80030ae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030b0:	2301      	movs	r3, #1
 80030b2:	425b      	negs	r3, r3
 80030b4:	2103      	movs	r1, #3
 80030b6:	0018      	movs	r0, r3
 80030b8:	f7ff ff7c 	bl	8002fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030bc:	4b05      	ldr	r3, [pc, #20]	@ (80030d4 <SysTick_Config+0x44>)
 80030be:	2200      	movs	r2, #0
 80030c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030c2:	4b04      	ldr	r3, [pc, #16]	@ (80030d4 <SysTick_Config+0x44>)
 80030c4:	2207      	movs	r2, #7
 80030c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	0018      	movs	r0, r3
 80030cc:	46bd      	mov	sp, r7
 80030ce:	b002      	add	sp, #8
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	46c0      	nop			@ (mov r8, r8)
 80030d4:	e000e010 	.word	0xe000e010

080030d8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60b9      	str	r1, [r7, #8]
 80030e0:	607a      	str	r2, [r7, #4]
 80030e2:	210f      	movs	r1, #15
 80030e4:	187b      	adds	r3, r7, r1
 80030e6:	1c02      	adds	r2, r0, #0
 80030e8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	187b      	adds	r3, r7, r1
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	b25b      	sxtb	r3, r3
 80030f2:	0011      	movs	r1, r2
 80030f4:	0018      	movs	r0, r3
 80030f6:	f7ff ff5d 	bl	8002fb4 <__NVIC_SetPriority>
}
 80030fa:	46c0      	nop			@ (mov r8, r8)
 80030fc:	46bd      	mov	sp, r7
 80030fe:	b004      	add	sp, #16
 8003100:	bd80      	pop	{r7, pc}

08003102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b082      	sub	sp, #8
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	0018      	movs	r0, r3
 800310e:	f7ff ffbf 	bl	8003090 <SysTick_Config>
 8003112:	0003      	movs	r3, r0
}
 8003114:	0018      	movs	r0, r3
 8003116:	46bd      	mov	sp, r7
 8003118:	b002      	add	sp, #8
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003126:	2300      	movs	r3, #0
 8003128:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800312a:	e14d      	b.n	80033c8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2101      	movs	r1, #1
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	4091      	lsls	r1, r2
 8003136:	000a      	movs	r2, r1
 8003138:	4013      	ands	r3, r2
 800313a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d100      	bne.n	8003144 <HAL_GPIO_Init+0x28>
 8003142:	e13e      	b.n	80033c2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2203      	movs	r2, #3
 800314a:	4013      	ands	r3, r2
 800314c:	2b01      	cmp	r3, #1
 800314e:	d005      	beq.n	800315c <HAL_GPIO_Init+0x40>
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2203      	movs	r2, #3
 8003156:	4013      	ands	r3, r2
 8003158:	2b02      	cmp	r3, #2
 800315a:	d130      	bne.n	80031be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	2203      	movs	r2, #3
 8003168:	409a      	lsls	r2, r3
 800316a:	0013      	movs	r3, r2
 800316c:	43da      	mvns	r2, r3
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	4013      	ands	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	409a      	lsls	r2, r3
 800317e:	0013      	movs	r3, r2
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	4313      	orrs	r3, r2
 8003184:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003192:	2201      	movs	r2, #1
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	409a      	lsls	r2, r3
 8003198:	0013      	movs	r3, r2
 800319a:	43da      	mvns	r2, r3
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	4013      	ands	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	091b      	lsrs	r3, r3, #4
 80031a8:	2201      	movs	r2, #1
 80031aa:	401a      	ands	r2, r3
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	409a      	lsls	r2, r3
 80031b0:	0013      	movs	r3, r2
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2203      	movs	r2, #3
 80031c4:	4013      	ands	r3, r2
 80031c6:	2b03      	cmp	r3, #3
 80031c8:	d017      	beq.n	80031fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	2203      	movs	r2, #3
 80031d6:	409a      	lsls	r2, r3
 80031d8:	0013      	movs	r3, r2
 80031da:	43da      	mvns	r2, r3
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	4013      	ands	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	409a      	lsls	r2, r3
 80031ec:	0013      	movs	r3, r2
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2203      	movs	r2, #3
 8003200:	4013      	ands	r3, r2
 8003202:	2b02      	cmp	r3, #2
 8003204:	d123      	bne.n	800324e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	08da      	lsrs	r2, r3, #3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3208      	adds	r2, #8
 800320e:	0092      	lsls	r2, r2, #2
 8003210:	58d3      	ldr	r3, [r2, r3]
 8003212:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	2207      	movs	r2, #7
 8003218:	4013      	ands	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	220f      	movs	r2, #15
 800321e:	409a      	lsls	r2, r3
 8003220:	0013      	movs	r3, r2
 8003222:	43da      	mvns	r2, r3
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	4013      	ands	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	691a      	ldr	r2, [r3, #16]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	2107      	movs	r1, #7
 8003232:	400b      	ands	r3, r1
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	409a      	lsls	r2, r3
 8003238:	0013      	movs	r3, r2
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	4313      	orrs	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	08da      	lsrs	r2, r3, #3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3208      	adds	r2, #8
 8003248:	0092      	lsls	r2, r2, #2
 800324a:	6939      	ldr	r1, [r7, #16]
 800324c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	2203      	movs	r2, #3
 800325a:	409a      	lsls	r2, r3
 800325c:	0013      	movs	r3, r2
 800325e:	43da      	mvns	r2, r3
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	4013      	ands	r3, r2
 8003264:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2203      	movs	r2, #3
 800326c:	401a      	ands	r2, r3
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	409a      	lsls	r2, r3
 8003274:	0013      	movs	r3, r2
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	4313      	orrs	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	23c0      	movs	r3, #192	@ 0xc0
 8003288:	029b      	lsls	r3, r3, #10
 800328a:	4013      	ands	r3, r2
 800328c:	d100      	bne.n	8003290 <HAL_GPIO_Init+0x174>
 800328e:	e098      	b.n	80033c2 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003290:	4a53      	ldr	r2, [pc, #332]	@ (80033e0 <HAL_GPIO_Init+0x2c4>)
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	089b      	lsrs	r3, r3, #2
 8003296:	3318      	adds	r3, #24
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	589b      	ldr	r3, [r3, r2]
 800329c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	2203      	movs	r2, #3
 80032a2:	4013      	ands	r3, r2
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	220f      	movs	r2, #15
 80032a8:	409a      	lsls	r2, r3
 80032aa:	0013      	movs	r3, r2
 80032ac:	43da      	mvns	r2, r3
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	4013      	ands	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	23a0      	movs	r3, #160	@ 0xa0
 80032b8:	05db      	lsls	r3, r3, #23
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d019      	beq.n	80032f2 <HAL_GPIO_Init+0x1d6>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a48      	ldr	r2, [pc, #288]	@ (80033e4 <HAL_GPIO_Init+0x2c8>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d013      	beq.n	80032ee <HAL_GPIO_Init+0x1d2>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a47      	ldr	r2, [pc, #284]	@ (80033e8 <HAL_GPIO_Init+0x2cc>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d00d      	beq.n	80032ea <HAL_GPIO_Init+0x1ce>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a46      	ldr	r2, [pc, #280]	@ (80033ec <HAL_GPIO_Init+0x2d0>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d007      	beq.n	80032e6 <HAL_GPIO_Init+0x1ca>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a45      	ldr	r2, [pc, #276]	@ (80033f0 <HAL_GPIO_Init+0x2d4>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d101      	bne.n	80032e2 <HAL_GPIO_Init+0x1c6>
 80032de:	2304      	movs	r3, #4
 80032e0:	e008      	b.n	80032f4 <HAL_GPIO_Init+0x1d8>
 80032e2:	2305      	movs	r3, #5
 80032e4:	e006      	b.n	80032f4 <HAL_GPIO_Init+0x1d8>
 80032e6:	2303      	movs	r3, #3
 80032e8:	e004      	b.n	80032f4 <HAL_GPIO_Init+0x1d8>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e002      	b.n	80032f4 <HAL_GPIO_Init+0x1d8>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <HAL_GPIO_Init+0x1d8>
 80032f2:	2300      	movs	r3, #0
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	2103      	movs	r1, #3
 80032f8:	400a      	ands	r2, r1
 80032fa:	00d2      	lsls	r2, r2, #3
 80032fc:	4093      	lsls	r3, r2
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	4313      	orrs	r3, r2
 8003302:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003304:	4936      	ldr	r1, [pc, #216]	@ (80033e0 <HAL_GPIO_Init+0x2c4>)
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	089b      	lsrs	r3, r3, #2
 800330a:	3318      	adds	r3, #24
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003312:	4b33      	ldr	r3, [pc, #204]	@ (80033e0 <HAL_GPIO_Init+0x2c4>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	43da      	mvns	r2, r3
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	4013      	ands	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	2380      	movs	r3, #128	@ 0x80
 8003328:	035b      	lsls	r3, r3, #13
 800332a:	4013      	ands	r3, r2
 800332c:	d003      	beq.n	8003336 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4313      	orrs	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003336:	4b2a      	ldr	r3, [pc, #168]	@ (80033e0 <HAL_GPIO_Init+0x2c4>)
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800333c:	4b28      	ldr	r3, [pc, #160]	@ (80033e0 <HAL_GPIO_Init+0x2c4>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	43da      	mvns	r2, r3
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	4013      	ands	r3, r2
 800334a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	2380      	movs	r3, #128	@ 0x80
 8003352:	039b      	lsls	r3, r3, #14
 8003354:	4013      	ands	r3, r2
 8003356:	d003      	beq.n	8003360 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4313      	orrs	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003360:	4b1f      	ldr	r3, [pc, #124]	@ (80033e0 <HAL_GPIO_Init+0x2c4>)
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003366:	4a1e      	ldr	r2, [pc, #120]	@ (80033e0 <HAL_GPIO_Init+0x2c4>)
 8003368:	2384      	movs	r3, #132	@ 0x84
 800336a:	58d3      	ldr	r3, [r2, r3]
 800336c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	43da      	mvns	r2, r3
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	4013      	ands	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	2380      	movs	r3, #128	@ 0x80
 800337e:	029b      	lsls	r3, r3, #10
 8003380:	4013      	ands	r3, r2
 8003382:	d003      	beq.n	800338c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4313      	orrs	r3, r2
 800338a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800338c:	4914      	ldr	r1, [pc, #80]	@ (80033e0 <HAL_GPIO_Init+0x2c4>)
 800338e:	2284      	movs	r2, #132	@ 0x84
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003394:	4a12      	ldr	r2, [pc, #72]	@ (80033e0 <HAL_GPIO_Init+0x2c4>)
 8003396:	2380      	movs	r3, #128	@ 0x80
 8003398:	58d3      	ldr	r3, [r2, r3]
 800339a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	43da      	mvns	r2, r3
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	4013      	ands	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	2380      	movs	r3, #128	@ 0x80
 80033ac:	025b      	lsls	r3, r3, #9
 80033ae:	4013      	ands	r3, r2
 80033b0:	d003      	beq.n	80033ba <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033ba:	4909      	ldr	r1, [pc, #36]	@ (80033e0 <HAL_GPIO_Init+0x2c4>)
 80033bc:	2280      	movs	r2, #128	@ 0x80
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	3301      	adds	r3, #1
 80033c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	40da      	lsrs	r2, r3
 80033d0:	1e13      	subs	r3, r2, #0
 80033d2:	d000      	beq.n	80033d6 <HAL_GPIO_Init+0x2ba>
 80033d4:	e6aa      	b.n	800312c <HAL_GPIO_Init+0x10>
  }
}
 80033d6:	46c0      	nop			@ (mov r8, r8)
 80033d8:	46c0      	nop			@ (mov r8, r8)
 80033da:	46bd      	mov	sp, r7
 80033dc:	b006      	add	sp, #24
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40021800 	.word	0x40021800
 80033e4:	50000400 	.word	0x50000400
 80033e8:	50000800 	.word	0x50000800
 80033ec:	50000c00 	.word	0x50000c00
 80033f0:	50001000 	.word	0x50001000

080033f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	0008      	movs	r0, r1
 80033fe:	0011      	movs	r1, r2
 8003400:	1cbb      	adds	r3, r7, #2
 8003402:	1c02      	adds	r2, r0, #0
 8003404:	801a      	strh	r2, [r3, #0]
 8003406:	1c7b      	adds	r3, r7, #1
 8003408:	1c0a      	adds	r2, r1, #0
 800340a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800340c:	1c7b      	adds	r3, r7, #1
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d004      	beq.n	800341e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003414:	1cbb      	adds	r3, r7, #2
 8003416:	881a      	ldrh	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800341c:	e003      	b.n	8003426 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800341e:	1cbb      	adds	r3, r7, #2
 8003420:	881a      	ldrh	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003426:	46c0      	nop			@ (mov r8, r8)
 8003428:	46bd      	mov	sp, r7
 800342a:	b002      	add	sp, #8
 800342c:	bd80      	pop	{r7, pc}
	...

08003430 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e08f      	b.n	8003562 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2241      	movs	r2, #65	@ 0x41
 8003446:	5c9b      	ldrb	r3, [r3, r2]
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d107      	bne.n	800345e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2240      	movs	r2, #64	@ 0x40
 8003452:	2100      	movs	r1, #0
 8003454:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	0018      	movs	r0, r3
 800345a:	f7ff f9d3 	bl	8002804 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2241      	movs	r2, #65	@ 0x41
 8003462:	2124      	movs	r1, #36	@ 0x24
 8003464:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2101      	movs	r1, #1
 8003472:	438a      	bics	r2, r1
 8003474:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	493b      	ldr	r1, [pc, #236]	@ (800356c <HAL_I2C_Init+0x13c>)
 8003480:	400a      	ands	r2, r1
 8003482:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4938      	ldr	r1, [pc, #224]	@ (8003570 <HAL_I2C_Init+0x140>)
 8003490:	400a      	ands	r2, r1
 8003492:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d108      	bne.n	80034ae <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2180      	movs	r1, #128	@ 0x80
 80034a6:	0209      	lsls	r1, r1, #8
 80034a8:	430a      	orrs	r2, r1
 80034aa:	609a      	str	r2, [r3, #8]
 80034ac:	e007      	b.n	80034be <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2184      	movs	r1, #132	@ 0x84
 80034b8:	0209      	lsls	r1, r1, #8
 80034ba:	430a      	orrs	r2, r1
 80034bc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d109      	bne.n	80034da <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2180      	movs	r1, #128	@ 0x80
 80034d2:	0109      	lsls	r1, r1, #4
 80034d4:	430a      	orrs	r2, r1
 80034d6:	605a      	str	r2, [r3, #4]
 80034d8:	e007      	b.n	80034ea <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4923      	ldr	r1, [pc, #140]	@ (8003574 <HAL_I2C_Init+0x144>)
 80034e6:	400a      	ands	r2, r1
 80034e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4920      	ldr	r1, [pc, #128]	@ (8003578 <HAL_I2C_Init+0x148>)
 80034f6:	430a      	orrs	r2, r1
 80034f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	491a      	ldr	r1, [pc, #104]	@ (8003570 <HAL_I2C_Init+0x140>)
 8003506:	400a      	ands	r2, r1
 8003508:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691a      	ldr	r2, [r3, #16]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	431a      	orrs	r2, r3
 8003514:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	69d9      	ldr	r1, [r3, #28]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a1a      	ldr	r2, [r3, #32]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2101      	movs	r1, #1
 8003540:	430a      	orrs	r2, r1
 8003542:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2241      	movs	r2, #65	@ 0x41
 800354e:	2120      	movs	r1, #32
 8003550:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2242      	movs	r2, #66	@ 0x42
 800355c:	2100      	movs	r1, #0
 800355e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	0018      	movs	r0, r3
 8003564:	46bd      	mov	sp, r7
 8003566:	b002      	add	sp, #8
 8003568:	bd80      	pop	{r7, pc}
 800356a:	46c0      	nop			@ (mov r8, r8)
 800356c:	f0ffffff 	.word	0xf0ffffff
 8003570:	ffff7fff 	.word	0xffff7fff
 8003574:	fffff7ff 	.word	0xfffff7ff
 8003578:	02008000 	.word	0x02008000

0800357c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2241      	movs	r2, #65	@ 0x41
 800358a:	5c9b      	ldrb	r3, [r3, r2]
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b20      	cmp	r3, #32
 8003590:	d138      	bne.n	8003604 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2240      	movs	r2, #64	@ 0x40
 8003596:	5c9b      	ldrb	r3, [r3, r2]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d101      	bne.n	80035a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800359c:	2302      	movs	r3, #2
 800359e:	e032      	b.n	8003606 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2240      	movs	r2, #64	@ 0x40
 80035a4:	2101      	movs	r1, #1
 80035a6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2241      	movs	r2, #65	@ 0x41
 80035ac:	2124      	movs	r1, #36	@ 0x24
 80035ae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2101      	movs	r1, #1
 80035bc:	438a      	bics	r2, r1
 80035be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4911      	ldr	r1, [pc, #68]	@ (8003610 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80035cc:	400a      	ands	r2, r1
 80035ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6819      	ldr	r1, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2101      	movs	r1, #1
 80035ec:	430a      	orrs	r2, r1
 80035ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2241      	movs	r2, #65	@ 0x41
 80035f4:	2120      	movs	r1, #32
 80035f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2240      	movs	r2, #64	@ 0x40
 80035fc:	2100      	movs	r1, #0
 80035fe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003600:	2300      	movs	r3, #0
 8003602:	e000      	b.n	8003606 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003604:	2302      	movs	r3, #2
  }
}
 8003606:	0018      	movs	r0, r3
 8003608:	46bd      	mov	sp, r7
 800360a:	b002      	add	sp, #8
 800360c:	bd80      	pop	{r7, pc}
 800360e:	46c0      	nop			@ (mov r8, r8)
 8003610:	ffffefff 	.word	0xffffefff

08003614 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2241      	movs	r2, #65	@ 0x41
 8003622:	5c9b      	ldrb	r3, [r3, r2]
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b20      	cmp	r3, #32
 8003628:	d139      	bne.n	800369e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2240      	movs	r2, #64	@ 0x40
 800362e:	5c9b      	ldrb	r3, [r3, r2]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003634:	2302      	movs	r3, #2
 8003636:	e033      	b.n	80036a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2240      	movs	r2, #64	@ 0x40
 800363c:	2101      	movs	r1, #1
 800363e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2241      	movs	r2, #65	@ 0x41
 8003644:	2124      	movs	r1, #36	@ 0x24
 8003646:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2101      	movs	r1, #1
 8003654:	438a      	bics	r2, r1
 8003656:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4a11      	ldr	r2, [pc, #68]	@ (80036a8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003664:	4013      	ands	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	021b      	lsls	r3, r3, #8
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	4313      	orrs	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2101      	movs	r1, #1
 8003686:	430a      	orrs	r2, r1
 8003688:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2241      	movs	r2, #65	@ 0x41
 800368e:	2120      	movs	r1, #32
 8003690:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2240      	movs	r2, #64	@ 0x40
 8003696:	2100      	movs	r1, #0
 8003698:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800369a:	2300      	movs	r3, #0
 800369c:	e000      	b.n	80036a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800369e:	2302      	movs	r3, #2
  }
}
 80036a0:	0018      	movs	r0, r3
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b004      	add	sp, #16
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	fffff0ff 	.word	0xfffff0ff

080036ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80036b4:	4b19      	ldr	r3, [pc, #100]	@ (800371c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a19      	ldr	r2, [pc, #100]	@ (8003720 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80036ba:	4013      	ands	r3, r2
 80036bc:	0019      	movs	r1, r3
 80036be:	4b17      	ldr	r3, [pc, #92]	@ (800371c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	2380      	movs	r3, #128	@ 0x80
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d11f      	bne.n	8003710 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80036d0:	4b14      	ldr	r3, [pc, #80]	@ (8003724 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	0013      	movs	r3, r2
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	189b      	adds	r3, r3, r2
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	4912      	ldr	r1, [pc, #72]	@ (8003728 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80036de:	0018      	movs	r0, r3
 80036e0:	f7fc fd2c 	bl	800013c <__udivsi3>
 80036e4:	0003      	movs	r3, r0
 80036e6:	3301      	adds	r3, #1
 80036e8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036ea:	e008      	b.n	80036fe <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	3b01      	subs	r3, #1
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	e001      	b.n	80036fe <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e009      	b.n	8003712 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036fe:	4b07      	ldr	r3, [pc, #28]	@ (800371c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003700:	695a      	ldr	r2, [r3, #20]
 8003702:	2380      	movs	r3, #128	@ 0x80
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	401a      	ands	r2, r3
 8003708:	2380      	movs	r3, #128	@ 0x80
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	429a      	cmp	r2, r3
 800370e:	d0ed      	beq.n	80036ec <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	0018      	movs	r0, r3
 8003714:	46bd      	mov	sp, r7
 8003716:	b004      	add	sp, #16
 8003718:	bd80      	pop	{r7, pc}
 800371a:	46c0      	nop			@ (mov r8, r8)
 800371c:	40007000 	.word	0x40007000
 8003720:	fffff9ff 	.word	0xfffff9ff
 8003724:	20000000 	.word	0x20000000
 8003728:	000f4240 	.word	0x000f4240

0800372c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003730:	4b03      	ldr	r3, [pc, #12]	@ (8003740 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	23e0      	movs	r3, #224	@ 0xe0
 8003736:	01db      	lsls	r3, r3, #7
 8003738:	4013      	ands	r3, r2
}
 800373a:	0018      	movs	r0, r3
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40021000 	.word	0x40021000

08003744 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b088      	sub	sp, #32
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d102      	bne.n	8003758 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	f000 fb50 	bl	8003df8 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2201      	movs	r2, #1
 800375e:	4013      	ands	r3, r2
 8003760:	d100      	bne.n	8003764 <HAL_RCC_OscConfig+0x20>
 8003762:	e07c      	b.n	800385e <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003764:	4bc3      	ldr	r3, [pc, #780]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	2238      	movs	r2, #56	@ 0x38
 800376a:	4013      	ands	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800376e:	4bc1      	ldr	r3, [pc, #772]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	2203      	movs	r2, #3
 8003774:	4013      	ands	r3, r2
 8003776:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	2b10      	cmp	r3, #16
 800377c:	d102      	bne.n	8003784 <HAL_RCC_OscConfig+0x40>
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2b03      	cmp	r3, #3
 8003782:	d002      	beq.n	800378a <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	2b08      	cmp	r3, #8
 8003788:	d10b      	bne.n	80037a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800378a:	4bba      	ldr	r3, [pc, #744]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	2380      	movs	r3, #128	@ 0x80
 8003790:	029b      	lsls	r3, r3, #10
 8003792:	4013      	ands	r3, r2
 8003794:	d062      	beq.n	800385c <HAL_RCC_OscConfig+0x118>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d15e      	bne.n	800385c <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e32a      	b.n	8003df8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	2380      	movs	r3, #128	@ 0x80
 80037a8:	025b      	lsls	r3, r3, #9
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d107      	bne.n	80037be <HAL_RCC_OscConfig+0x7a>
 80037ae:	4bb1      	ldr	r3, [pc, #708]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	4bb0      	ldr	r3, [pc, #704]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 80037b4:	2180      	movs	r1, #128	@ 0x80
 80037b6:	0249      	lsls	r1, r1, #9
 80037b8:	430a      	orrs	r2, r1
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	e020      	b.n	8003800 <HAL_RCC_OscConfig+0xbc>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	23a0      	movs	r3, #160	@ 0xa0
 80037c4:	02db      	lsls	r3, r3, #11
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d10e      	bne.n	80037e8 <HAL_RCC_OscConfig+0xa4>
 80037ca:	4baa      	ldr	r3, [pc, #680]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	4ba9      	ldr	r3, [pc, #676]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 80037d0:	2180      	movs	r1, #128	@ 0x80
 80037d2:	02c9      	lsls	r1, r1, #11
 80037d4:	430a      	orrs	r2, r1
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	4ba6      	ldr	r3, [pc, #664]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	4ba5      	ldr	r3, [pc, #660]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 80037de:	2180      	movs	r1, #128	@ 0x80
 80037e0:	0249      	lsls	r1, r1, #9
 80037e2:	430a      	orrs	r2, r1
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	e00b      	b.n	8003800 <HAL_RCC_OscConfig+0xbc>
 80037e8:	4ba2      	ldr	r3, [pc, #648]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	4ba1      	ldr	r3, [pc, #644]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 80037ee:	49a2      	ldr	r1, [pc, #648]	@ (8003a78 <HAL_RCC_OscConfig+0x334>)
 80037f0:	400a      	ands	r2, r1
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	4b9f      	ldr	r3, [pc, #636]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	4b9e      	ldr	r3, [pc, #632]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 80037fa:	49a0      	ldr	r1, [pc, #640]	@ (8003a7c <HAL_RCC_OscConfig+0x338>)
 80037fc:	400a      	ands	r2, r1
 80037fe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d014      	beq.n	8003832 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003808:	f7ff fbb4 	bl	8002f74 <HAL_GetTick>
 800380c:	0003      	movs	r3, r0
 800380e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003810:	e008      	b.n	8003824 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003812:	f7ff fbaf 	bl	8002f74 <HAL_GetTick>
 8003816:	0002      	movs	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b64      	cmp	r3, #100	@ 0x64
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e2e9      	b.n	8003df8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003824:	4b93      	ldr	r3, [pc, #588]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	2380      	movs	r3, #128	@ 0x80
 800382a:	029b      	lsls	r3, r3, #10
 800382c:	4013      	ands	r3, r2
 800382e:	d0f0      	beq.n	8003812 <HAL_RCC_OscConfig+0xce>
 8003830:	e015      	b.n	800385e <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003832:	f7ff fb9f 	bl	8002f74 <HAL_GetTick>
 8003836:	0003      	movs	r3, r0
 8003838:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800383c:	f7ff fb9a 	bl	8002f74 <HAL_GetTick>
 8003840:	0002      	movs	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b64      	cmp	r3, #100	@ 0x64
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e2d4      	b.n	8003df8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800384e:	4b89      	ldr	r3, [pc, #548]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	2380      	movs	r3, #128	@ 0x80
 8003854:	029b      	lsls	r3, r3, #10
 8003856:	4013      	ands	r3, r2
 8003858:	d1f0      	bne.n	800383c <HAL_RCC_OscConfig+0xf8>
 800385a:	e000      	b.n	800385e <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800385c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2202      	movs	r2, #2
 8003864:	4013      	ands	r3, r2
 8003866:	d100      	bne.n	800386a <HAL_RCC_OscConfig+0x126>
 8003868:	e099      	b.n	800399e <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800386a:	4b82      	ldr	r3, [pc, #520]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	2238      	movs	r2, #56	@ 0x38
 8003870:	4013      	ands	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003874:	4b7f      	ldr	r3, [pc, #508]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	2203      	movs	r2, #3
 800387a:	4013      	ands	r3, r2
 800387c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	2b10      	cmp	r3, #16
 8003882:	d102      	bne.n	800388a <HAL_RCC_OscConfig+0x146>
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	2b02      	cmp	r3, #2
 8003888:	d002      	beq.n	8003890 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d135      	bne.n	80038fc <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003890:	4b78      	ldr	r3, [pc, #480]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	2380      	movs	r3, #128	@ 0x80
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	4013      	ands	r3, r2
 800389a:	d005      	beq.n	80038a8 <HAL_RCC_OscConfig+0x164>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e2a7      	b.n	8003df8 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a8:	4b72      	ldr	r3, [pc, #456]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	4a74      	ldr	r2, [pc, #464]	@ (8003a80 <HAL_RCC_OscConfig+0x33c>)
 80038ae:	4013      	ands	r3, r2
 80038b0:	0019      	movs	r1, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	021a      	lsls	r2, r3, #8
 80038b8:	4b6e      	ldr	r3, [pc, #440]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 80038ba:	430a      	orrs	r2, r1
 80038bc:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d112      	bne.n	80038ea <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80038c4:	4b6b      	ldr	r3, [pc, #428]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a6e      	ldr	r2, [pc, #440]	@ (8003a84 <HAL_RCC_OscConfig+0x340>)
 80038ca:	4013      	ands	r3, r2
 80038cc:	0019      	movs	r1, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691a      	ldr	r2, [r3, #16]
 80038d2:	4b68      	ldr	r3, [pc, #416]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 80038d4:	430a      	orrs	r2, r1
 80038d6:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80038d8:	4b66      	ldr	r3, [pc, #408]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	0adb      	lsrs	r3, r3, #11
 80038de:	2207      	movs	r2, #7
 80038e0:	4013      	ands	r3, r2
 80038e2:	4a69      	ldr	r2, [pc, #420]	@ (8003a88 <HAL_RCC_OscConfig+0x344>)
 80038e4:	40da      	lsrs	r2, r3
 80038e6:	4b69      	ldr	r3, [pc, #420]	@ (8003a8c <HAL_RCC_OscConfig+0x348>)
 80038e8:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80038ea:	4b69      	ldr	r3, [pc, #420]	@ (8003a90 <HAL_RCC_OscConfig+0x34c>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	0018      	movs	r0, r3
 80038f0:	f7ff fae4 	bl	8002ebc <HAL_InitTick>
 80038f4:	1e03      	subs	r3, r0, #0
 80038f6:	d051      	beq.n	800399c <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e27d      	b.n	8003df8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d030      	beq.n	8003966 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003904:	4b5b      	ldr	r3, [pc, #364]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a5e      	ldr	r2, [pc, #376]	@ (8003a84 <HAL_RCC_OscConfig+0x340>)
 800390a:	4013      	ands	r3, r2
 800390c:	0019      	movs	r1, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691a      	ldr	r2, [r3, #16]
 8003912:	4b58      	ldr	r3, [pc, #352]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 8003914:	430a      	orrs	r2, r1
 8003916:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003918:	4b56      	ldr	r3, [pc, #344]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	4b55      	ldr	r3, [pc, #340]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 800391e:	2180      	movs	r1, #128	@ 0x80
 8003920:	0049      	lsls	r1, r1, #1
 8003922:	430a      	orrs	r2, r1
 8003924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003926:	f7ff fb25 	bl	8002f74 <HAL_GetTick>
 800392a:	0003      	movs	r3, r0
 800392c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003930:	f7ff fb20 	bl	8002f74 <HAL_GetTick>
 8003934:	0002      	movs	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e25a      	b.n	8003df8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003942:	4b4c      	ldr	r3, [pc, #304]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	2380      	movs	r3, #128	@ 0x80
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	4013      	ands	r3, r2
 800394c:	d0f0      	beq.n	8003930 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800394e:	4b49      	ldr	r3, [pc, #292]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	4a4b      	ldr	r2, [pc, #300]	@ (8003a80 <HAL_RCC_OscConfig+0x33c>)
 8003954:	4013      	ands	r3, r2
 8003956:	0019      	movs	r1, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	021a      	lsls	r2, r3, #8
 800395e:	4b45      	ldr	r3, [pc, #276]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 8003960:	430a      	orrs	r2, r1
 8003962:	605a      	str	r2, [r3, #4]
 8003964:	e01b      	b.n	800399e <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003966:	4b43      	ldr	r3, [pc, #268]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	4b42      	ldr	r3, [pc, #264]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 800396c:	4949      	ldr	r1, [pc, #292]	@ (8003a94 <HAL_RCC_OscConfig+0x350>)
 800396e:	400a      	ands	r2, r1
 8003970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003972:	f7ff faff 	bl	8002f74 <HAL_GetTick>
 8003976:	0003      	movs	r3, r0
 8003978:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800397c:	f7ff fafa 	bl	8002f74 <HAL_GetTick>
 8003980:	0002      	movs	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e234      	b.n	8003df8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800398e:	4b39      	ldr	r3, [pc, #228]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	2380      	movs	r3, #128	@ 0x80
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	4013      	ands	r3, r2
 8003998:	d1f0      	bne.n	800397c <HAL_RCC_OscConfig+0x238>
 800399a:	e000      	b.n	800399e <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800399c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2208      	movs	r2, #8
 80039a4:	4013      	ands	r3, r2
 80039a6:	d047      	beq.n	8003a38 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80039a8:	4b32      	ldr	r3, [pc, #200]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	2238      	movs	r2, #56	@ 0x38
 80039ae:	4013      	ands	r3, r2
 80039b0:	2b18      	cmp	r3, #24
 80039b2:	d10a      	bne.n	80039ca <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80039b4:	4b2f      	ldr	r3, [pc, #188]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 80039b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039b8:	2202      	movs	r2, #2
 80039ba:	4013      	ands	r3, r2
 80039bc:	d03c      	beq.n	8003a38 <HAL_RCC_OscConfig+0x2f4>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d138      	bne.n	8003a38 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e216      	b.n	8003df8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d019      	beq.n	8003a06 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80039d2:	4b28      	ldr	r3, [pc, #160]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 80039d4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80039d6:	4b27      	ldr	r3, [pc, #156]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 80039d8:	2101      	movs	r1, #1
 80039da:	430a      	orrs	r2, r1
 80039dc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039de:	f7ff fac9 	bl	8002f74 <HAL_GetTick>
 80039e2:	0003      	movs	r3, r0
 80039e4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039e8:	f7ff fac4 	bl	8002f74 <HAL_GetTick>
 80039ec:	0002      	movs	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e1fe      	b.n	8003df8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 80039fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039fe:	2202      	movs	r2, #2
 8003a00:	4013      	ands	r3, r2
 8003a02:	d0f1      	beq.n	80039e8 <HAL_RCC_OscConfig+0x2a4>
 8003a04:	e018      	b.n	8003a38 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003a06:	4b1b      	ldr	r3, [pc, #108]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 8003a08:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	438a      	bics	r2, r1
 8003a10:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a12:	f7ff faaf 	bl	8002f74 <HAL_GetTick>
 8003a16:	0003      	movs	r3, r0
 8003a18:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a1c:	f7ff faaa 	bl	8002f74 <HAL_GetTick>
 8003a20:	0002      	movs	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e1e4      	b.n	8003df8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a2e:	4b11      	ldr	r3, [pc, #68]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 8003a30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a32:	2202      	movs	r2, #2
 8003a34:	4013      	ands	r3, r2
 8003a36:	d1f1      	bne.n	8003a1c <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2204      	movs	r2, #4
 8003a3e:	4013      	ands	r3, r2
 8003a40:	d100      	bne.n	8003a44 <HAL_RCC_OscConfig+0x300>
 8003a42:	e0c7      	b.n	8003bd4 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a44:	231f      	movs	r3, #31
 8003a46:	18fb      	adds	r3, r7, r3
 8003a48:	2200      	movs	r2, #0
 8003a4a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003a4c:	4b09      	ldr	r3, [pc, #36]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	2238      	movs	r2, #56	@ 0x38
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b20      	cmp	r3, #32
 8003a56:	d11f      	bne.n	8003a98 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003a58:	4b06      	ldr	r3, [pc, #24]	@ (8003a74 <HAL_RCC_OscConfig+0x330>)
 8003a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	4013      	ands	r3, r2
 8003a60:	d100      	bne.n	8003a64 <HAL_RCC_OscConfig+0x320>
 8003a62:	e0b7      	b.n	8003bd4 <HAL_RCC_OscConfig+0x490>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d000      	beq.n	8003a6e <HAL_RCC_OscConfig+0x32a>
 8003a6c:	e0b2      	b.n	8003bd4 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e1c2      	b.n	8003df8 <HAL_RCC_OscConfig+0x6b4>
 8003a72:	46c0      	nop			@ (mov r8, r8)
 8003a74:	40021000 	.word	0x40021000
 8003a78:	fffeffff 	.word	0xfffeffff
 8003a7c:	fffbffff 	.word	0xfffbffff
 8003a80:	ffff80ff 	.word	0xffff80ff
 8003a84:	ffffc7ff 	.word	0xffffc7ff
 8003a88:	00f42400 	.word	0x00f42400
 8003a8c:	20000000 	.word	0x20000000
 8003a90:	20000004 	.word	0x20000004
 8003a94:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a98:	4bb5      	ldr	r3, [pc, #724]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003a9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a9c:	2380      	movs	r3, #128	@ 0x80
 8003a9e:	055b      	lsls	r3, r3, #21
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	d101      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x364>
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e000      	b.n	8003aaa <HAL_RCC_OscConfig+0x366>
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d011      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003aae:	4bb0      	ldr	r3, [pc, #704]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003ab0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ab2:	4baf      	ldr	r3, [pc, #700]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003ab4:	2180      	movs	r1, #128	@ 0x80
 8003ab6:	0549      	lsls	r1, r1, #21
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003abc:	4bac      	ldr	r3, [pc, #688]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003abe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ac0:	2380      	movs	r3, #128	@ 0x80
 8003ac2:	055b      	lsls	r3, r3, #21
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003aca:	231f      	movs	r3, #31
 8003acc:	18fb      	adds	r3, r7, r3
 8003ace:	2201      	movs	r2, #1
 8003ad0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ad2:	4ba8      	ldr	r3, [pc, #672]	@ (8003d74 <HAL_RCC_OscConfig+0x630>)
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	2380      	movs	r3, #128	@ 0x80
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	4013      	ands	r3, r2
 8003adc:	d11a      	bne.n	8003b14 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ade:	4ba5      	ldr	r3, [pc, #660]	@ (8003d74 <HAL_RCC_OscConfig+0x630>)
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	4ba4      	ldr	r3, [pc, #656]	@ (8003d74 <HAL_RCC_OscConfig+0x630>)
 8003ae4:	2180      	movs	r1, #128	@ 0x80
 8003ae6:	0049      	lsls	r1, r1, #1
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003aec:	f7ff fa42 	bl	8002f74 <HAL_GetTick>
 8003af0:	0003      	movs	r3, r0
 8003af2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003af4:	e008      	b.n	8003b08 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af6:	f7ff fa3d 	bl	8002f74 <HAL_GetTick>
 8003afa:	0002      	movs	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e177      	b.n	8003df8 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b08:	4b9a      	ldr	r3, [pc, #616]	@ (8003d74 <HAL_RCC_OscConfig+0x630>)
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	2380      	movs	r3, #128	@ 0x80
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	4013      	ands	r3, r2
 8003b12:	d0f0      	beq.n	8003af6 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d106      	bne.n	8003b2a <HAL_RCC_OscConfig+0x3e6>
 8003b1c:	4b94      	ldr	r3, [pc, #592]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003b1e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003b20:	4b93      	ldr	r3, [pc, #588]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003b22:	2101      	movs	r1, #1
 8003b24:	430a      	orrs	r2, r1
 8003b26:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b28:	e01c      	b.n	8003b64 <HAL_RCC_OscConfig+0x420>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2b05      	cmp	r3, #5
 8003b30:	d10c      	bne.n	8003b4c <HAL_RCC_OscConfig+0x408>
 8003b32:	4b8f      	ldr	r3, [pc, #572]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003b34:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003b36:	4b8e      	ldr	r3, [pc, #568]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003b38:	2104      	movs	r1, #4
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b3e:	4b8c      	ldr	r3, [pc, #560]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003b40:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003b42:	4b8b      	ldr	r3, [pc, #556]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003b44:	2101      	movs	r1, #1
 8003b46:	430a      	orrs	r2, r1
 8003b48:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b4a:	e00b      	b.n	8003b64 <HAL_RCC_OscConfig+0x420>
 8003b4c:	4b88      	ldr	r3, [pc, #544]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003b4e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003b50:	4b87      	ldr	r3, [pc, #540]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003b52:	2101      	movs	r1, #1
 8003b54:	438a      	bics	r2, r1
 8003b56:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b58:	4b85      	ldr	r3, [pc, #532]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003b5a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003b5c:	4b84      	ldr	r3, [pc, #528]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003b5e:	2104      	movs	r1, #4
 8003b60:	438a      	bics	r2, r1
 8003b62:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d014      	beq.n	8003b96 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6c:	f7ff fa02 	bl	8002f74 <HAL_GetTick>
 8003b70:	0003      	movs	r3, r0
 8003b72:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b74:	e009      	b.n	8003b8a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b76:	f7ff f9fd 	bl	8002f74 <HAL_GetTick>
 8003b7a:	0002      	movs	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	4a7d      	ldr	r2, [pc, #500]	@ (8003d78 <HAL_RCC_OscConfig+0x634>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e136      	b.n	8003df8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b8a:	4b79      	ldr	r3, [pc, #484]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b8e:	2202      	movs	r2, #2
 8003b90:	4013      	ands	r3, r2
 8003b92:	d0f0      	beq.n	8003b76 <HAL_RCC_OscConfig+0x432>
 8003b94:	e013      	b.n	8003bbe <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b96:	f7ff f9ed 	bl	8002f74 <HAL_GetTick>
 8003b9a:	0003      	movs	r3, r0
 8003b9c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b9e:	e009      	b.n	8003bb4 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba0:	f7ff f9e8 	bl	8002f74 <HAL_GetTick>
 8003ba4:	0002      	movs	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	4a73      	ldr	r2, [pc, #460]	@ (8003d78 <HAL_RCC_OscConfig+0x634>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e121      	b.n	8003df8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bb4:	4b6e      	ldr	r3, [pc, #440]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bb8:	2202      	movs	r2, #2
 8003bba:	4013      	ands	r3, r2
 8003bbc:	d1f0      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003bbe:	231f      	movs	r3, #31
 8003bc0:	18fb      	adds	r3, r7, r3
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d105      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003bc8:	4b69      	ldr	r3, [pc, #420]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003bca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bcc:	4b68      	ldr	r3, [pc, #416]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003bce:	496b      	ldr	r1, [pc, #428]	@ (8003d7c <HAL_RCC_OscConfig+0x638>)
 8003bd0:	400a      	ands	r2, r1
 8003bd2:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	4013      	ands	r3, r2
 8003bdc:	d039      	beq.n	8003c52 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d01b      	beq.n	8003c1e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003be6:	4b62      	ldr	r3, [pc, #392]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	4b61      	ldr	r3, [pc, #388]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003bec:	2180      	movs	r1, #128	@ 0x80
 8003bee:	03c9      	lsls	r1, r1, #15
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf4:	f7ff f9be 	bl	8002f74 <HAL_GetTick>
 8003bf8:	0003      	movs	r3, r0
 8003bfa:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003bfc:	e008      	b.n	8003c10 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bfe:	f7ff f9b9 	bl	8002f74 <HAL_GetTick>
 8003c02:	0002      	movs	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e0f3      	b.n	8003df8 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003c10:	4b57      	ldr	r3, [pc, #348]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	2380      	movs	r3, #128	@ 0x80
 8003c16:	041b      	lsls	r3, r3, #16
 8003c18:	4013      	ands	r3, r2
 8003c1a:	d0f0      	beq.n	8003bfe <HAL_RCC_OscConfig+0x4ba>
 8003c1c:	e019      	b.n	8003c52 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c1e:	4b54      	ldr	r3, [pc, #336]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	4b53      	ldr	r3, [pc, #332]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003c24:	4956      	ldr	r1, [pc, #344]	@ (8003d80 <HAL_RCC_OscConfig+0x63c>)
 8003c26:	400a      	ands	r2, r1
 8003c28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2a:	f7ff f9a3 	bl	8002f74 <HAL_GetTick>
 8003c2e:	0003      	movs	r3, r0
 8003c30:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c34:	f7ff f99e 	bl	8002f74 <HAL_GetTick>
 8003c38:	0002      	movs	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e0d8      	b.n	8003df8 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003c46:	4b4a      	ldr	r3, [pc, #296]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	2380      	movs	r3, #128	@ 0x80
 8003c4c:	041b      	lsls	r3, r3, #16
 8003c4e:	4013      	ands	r3, r2
 8003c50:	d1f0      	bne.n	8003c34 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d100      	bne.n	8003c5c <HAL_RCC_OscConfig+0x518>
 8003c5a:	e0cc      	b.n	8003df6 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c5c:	4b44      	ldr	r3, [pc, #272]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	2238      	movs	r2, #56	@ 0x38
 8003c62:	4013      	ands	r3, r2
 8003c64:	2b10      	cmp	r3, #16
 8003c66:	d100      	bne.n	8003c6a <HAL_RCC_OscConfig+0x526>
 8003c68:	e07b      	b.n	8003d62 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d156      	bne.n	8003d20 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c72:	4b3f      	ldr	r3, [pc, #252]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	4b3e      	ldr	r3, [pc, #248]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003c78:	4942      	ldr	r1, [pc, #264]	@ (8003d84 <HAL_RCC_OscConfig+0x640>)
 8003c7a:	400a      	ands	r2, r1
 8003c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7e:	f7ff f979 	bl	8002f74 <HAL_GetTick>
 8003c82:	0003      	movs	r3, r0
 8003c84:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c88:	f7ff f974 	bl	8002f74 <HAL_GetTick>
 8003c8c:	0002      	movs	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e0ae      	b.n	8003df8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c9a:	4b35      	ldr	r3, [pc, #212]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	2380      	movs	r3, #128	@ 0x80
 8003ca0:	049b      	lsls	r3, r3, #18
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	d1f0      	bne.n	8003c88 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ca6:	4b32      	ldr	r3, [pc, #200]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	4a37      	ldr	r2, [pc, #220]	@ (8003d88 <HAL_RCC_OscConfig+0x644>)
 8003cac:	4013      	ands	r3, r2
 8003cae:	0019      	movs	r1, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cbe:	021b      	lsls	r3, r3, #8
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	4b26      	ldr	r3, [pc, #152]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cda:	4b25      	ldr	r3, [pc, #148]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	4b24      	ldr	r3, [pc, #144]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003ce0:	2180      	movs	r1, #128	@ 0x80
 8003ce2:	0449      	lsls	r1, r1, #17
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003ce8:	4b21      	ldr	r3, [pc, #132]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003cea:	68da      	ldr	r2, [r3, #12]
 8003cec:	4b20      	ldr	r3, [pc, #128]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003cee:	2180      	movs	r1, #128	@ 0x80
 8003cf0:	0549      	lsls	r1, r1, #21
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf6:	f7ff f93d 	bl	8002f74 <HAL_GetTick>
 8003cfa:	0003      	movs	r3, r0
 8003cfc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d00:	f7ff f938 	bl	8002f74 <HAL_GetTick>
 8003d04:	0002      	movs	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e072      	b.n	8003df8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d12:	4b17      	ldr	r3, [pc, #92]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	2380      	movs	r3, #128	@ 0x80
 8003d18:	049b      	lsls	r3, r3, #18
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	d0f0      	beq.n	8003d00 <HAL_RCC_OscConfig+0x5bc>
 8003d1e:	e06a      	b.n	8003df6 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d20:	4b13      	ldr	r3, [pc, #76]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	4b12      	ldr	r3, [pc, #72]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003d26:	4917      	ldr	r1, [pc, #92]	@ (8003d84 <HAL_RCC_OscConfig+0x640>)
 8003d28:	400a      	ands	r2, r1
 8003d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2c:	f7ff f922 	bl	8002f74 <HAL_GetTick>
 8003d30:	0003      	movs	r3, r0
 8003d32:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d36:	f7ff f91d 	bl	8002f74 <HAL_GetTick>
 8003d3a:	0002      	movs	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e057      	b.n	8003df8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d48:	4b09      	ldr	r3, [pc, #36]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	2380      	movs	r3, #128	@ 0x80
 8003d4e:	049b      	lsls	r3, r3, #18
 8003d50:	4013      	ands	r3, r2
 8003d52:	d1f0      	bne.n	8003d36 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003d54:	4b06      	ldr	r3, [pc, #24]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003d56:	68da      	ldr	r2, [r3, #12]
 8003d58:	4b05      	ldr	r3, [pc, #20]	@ (8003d70 <HAL_RCC_OscConfig+0x62c>)
 8003d5a:	490c      	ldr	r1, [pc, #48]	@ (8003d8c <HAL_RCC_OscConfig+0x648>)
 8003d5c:	400a      	ands	r2, r1
 8003d5e:	60da      	str	r2, [r3, #12]
 8003d60:	e049      	b.n	8003df6 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d112      	bne.n	8003d90 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e044      	b.n	8003df8 <HAL_RCC_OscConfig+0x6b4>
 8003d6e:	46c0      	nop			@ (mov r8, r8)
 8003d70:	40021000 	.word	0x40021000
 8003d74:	40007000 	.word	0x40007000
 8003d78:	00001388 	.word	0x00001388
 8003d7c:	efffffff 	.word	0xefffffff
 8003d80:	ffbfffff 	.word	0xffbfffff
 8003d84:	feffffff 	.word	0xfeffffff
 8003d88:	11c1808c 	.word	0x11c1808c
 8003d8c:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003d90:	4b1b      	ldr	r3, [pc, #108]	@ (8003e00 <HAL_RCC_OscConfig+0x6bc>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	2203      	movs	r2, #3
 8003d9a:	401a      	ands	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d126      	bne.n	8003df2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	2270      	movs	r2, #112	@ 0x70
 8003da8:	401a      	ands	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d11f      	bne.n	8003df2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	23fe      	movs	r3, #254	@ 0xfe
 8003db6:	01db      	lsls	r3, r3, #7
 8003db8:	401a      	ands	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dbe:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d116      	bne.n	8003df2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	23f8      	movs	r3, #248	@ 0xf8
 8003dc8:	039b      	lsls	r3, r3, #14
 8003dca:	401a      	ands	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d10e      	bne.n	8003df2 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	23e0      	movs	r3, #224	@ 0xe0
 8003dd8:	051b      	lsls	r3, r3, #20
 8003dda:	401a      	ands	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d106      	bne.n	8003df2 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	0f5b      	lsrs	r3, r3, #29
 8003de8:	075a      	lsls	r2, r3, #29
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d001      	beq.n	8003df6 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e000      	b.n	8003df8 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	0018      	movs	r0, r3
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	b008      	add	sp, #32
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40021000 	.word	0x40021000

08003e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e0e9      	b.n	8003fec <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e18:	4b76      	ldr	r3, [pc, #472]	@ (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2207      	movs	r2, #7
 8003e1e:	4013      	ands	r3, r2
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d91e      	bls.n	8003e64 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e26:	4b73      	ldr	r3, [pc, #460]	@ (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2207      	movs	r2, #7
 8003e2c:	4393      	bics	r3, r2
 8003e2e:	0019      	movs	r1, r3
 8003e30:	4b70      	ldr	r3, [pc, #448]	@ (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003e38:	f7ff f89c 	bl	8002f74 <HAL_GetTick>
 8003e3c:	0003      	movs	r3, r0
 8003e3e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e40:	e009      	b.n	8003e56 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e42:	f7ff f897 	bl	8002f74 <HAL_GetTick>
 8003e46:	0002      	movs	r2, r0
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	4a6a      	ldr	r2, [pc, #424]	@ (8003ff8 <HAL_RCC_ClockConfig+0x1f4>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e0ca      	b.n	8003fec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e56:	4b67      	ldr	r3, [pc, #412]	@ (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2207      	movs	r2, #7
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d1ee      	bne.n	8003e42 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2202      	movs	r2, #2
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	d015      	beq.n	8003e9a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2204      	movs	r2, #4
 8003e74:	4013      	ands	r3, r2
 8003e76:	d006      	beq.n	8003e86 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003e78:	4b60      	ldr	r3, [pc, #384]	@ (8003ffc <HAL_RCC_ClockConfig+0x1f8>)
 8003e7a:	689a      	ldr	r2, [r3, #8]
 8003e7c:	4b5f      	ldr	r3, [pc, #380]	@ (8003ffc <HAL_RCC_ClockConfig+0x1f8>)
 8003e7e:	21e0      	movs	r1, #224	@ 0xe0
 8003e80:	01c9      	lsls	r1, r1, #7
 8003e82:	430a      	orrs	r2, r1
 8003e84:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e86:	4b5d      	ldr	r3, [pc, #372]	@ (8003ffc <HAL_RCC_ClockConfig+0x1f8>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	4a5d      	ldr	r2, [pc, #372]	@ (8004000 <HAL_RCC_ClockConfig+0x1fc>)
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	0019      	movs	r1, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	4b59      	ldr	r3, [pc, #356]	@ (8003ffc <HAL_RCC_ClockConfig+0x1f8>)
 8003e96:	430a      	orrs	r2, r1
 8003e98:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	d057      	beq.n	8003f54 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d107      	bne.n	8003ebc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eac:	4b53      	ldr	r3, [pc, #332]	@ (8003ffc <HAL_RCC_ClockConfig+0x1f8>)
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	2380      	movs	r3, #128	@ 0x80
 8003eb2:	029b      	lsls	r3, r3, #10
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	d12b      	bne.n	8003f10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e097      	b.n	8003fec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d107      	bne.n	8003ed4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ec4:	4b4d      	ldr	r3, [pc, #308]	@ (8003ffc <HAL_RCC_ClockConfig+0x1f8>)
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	2380      	movs	r3, #128	@ 0x80
 8003eca:	049b      	lsls	r3, r3, #18
 8003ecc:	4013      	ands	r3, r2
 8003ece:	d11f      	bne.n	8003f10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e08b      	b.n	8003fec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d107      	bne.n	8003eec <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003edc:	4b47      	ldr	r3, [pc, #284]	@ (8003ffc <HAL_RCC_ClockConfig+0x1f8>)
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	2380      	movs	r3, #128	@ 0x80
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	d113      	bne.n	8003f10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e07f      	b.n	8003fec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	2b03      	cmp	r3, #3
 8003ef2:	d106      	bne.n	8003f02 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ef4:	4b41      	ldr	r3, [pc, #260]	@ (8003ffc <HAL_RCC_ClockConfig+0x1f8>)
 8003ef6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ef8:	2202      	movs	r2, #2
 8003efa:	4013      	ands	r3, r2
 8003efc:	d108      	bne.n	8003f10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e074      	b.n	8003fec <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f02:	4b3e      	ldr	r3, [pc, #248]	@ (8003ffc <HAL_RCC_ClockConfig+0x1f8>)
 8003f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f06:	2202      	movs	r2, #2
 8003f08:	4013      	ands	r3, r2
 8003f0a:	d101      	bne.n	8003f10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e06d      	b.n	8003fec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f10:	4b3a      	ldr	r3, [pc, #232]	@ (8003ffc <HAL_RCC_ClockConfig+0x1f8>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	2207      	movs	r2, #7
 8003f16:	4393      	bics	r3, r2
 8003f18:	0019      	movs	r1, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	4b37      	ldr	r3, [pc, #220]	@ (8003ffc <HAL_RCC_ClockConfig+0x1f8>)
 8003f20:	430a      	orrs	r2, r1
 8003f22:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f24:	f7ff f826 	bl	8002f74 <HAL_GetTick>
 8003f28:	0003      	movs	r3, r0
 8003f2a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f2c:	e009      	b.n	8003f42 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f2e:	f7ff f821 	bl	8002f74 <HAL_GetTick>
 8003f32:	0002      	movs	r2, r0
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	4a2f      	ldr	r2, [pc, #188]	@ (8003ff8 <HAL_RCC_ClockConfig+0x1f4>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e054      	b.n	8003fec <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f42:	4b2e      	ldr	r3, [pc, #184]	@ (8003ffc <HAL_RCC_ClockConfig+0x1f8>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	2238      	movs	r2, #56	@ 0x38
 8003f48:	401a      	ands	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d1ec      	bne.n	8003f2e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f54:	4b27      	ldr	r3, [pc, #156]	@ (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2207      	movs	r2, #7
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d21e      	bcs.n	8003fa0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f62:	4b24      	ldr	r3, [pc, #144]	@ (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2207      	movs	r2, #7
 8003f68:	4393      	bics	r3, r2
 8003f6a:	0019      	movs	r1, r3
 8003f6c:	4b21      	ldr	r3, [pc, #132]	@ (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f74:	f7fe fffe 	bl	8002f74 <HAL_GetTick>
 8003f78:	0003      	movs	r3, r0
 8003f7a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f7c:	e009      	b.n	8003f92 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f7e:	f7fe fff9 	bl	8002f74 <HAL_GetTick>
 8003f82:	0002      	movs	r2, r0
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	4a1b      	ldr	r2, [pc, #108]	@ (8003ff8 <HAL_RCC_ClockConfig+0x1f4>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e02c      	b.n	8003fec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f92:	4b18      	ldr	r3, [pc, #96]	@ (8003ff4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2207      	movs	r2, #7
 8003f98:	4013      	ands	r3, r2
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d1ee      	bne.n	8003f7e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2204      	movs	r2, #4
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	d009      	beq.n	8003fbe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003faa:	4b14      	ldr	r3, [pc, #80]	@ (8003ffc <HAL_RCC_ClockConfig+0x1f8>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	4a15      	ldr	r2, [pc, #84]	@ (8004004 <HAL_RCC_ClockConfig+0x200>)
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	0019      	movs	r1, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68da      	ldr	r2, [r3, #12]
 8003fb8:	4b10      	ldr	r3, [pc, #64]	@ (8003ffc <HAL_RCC_ClockConfig+0x1f8>)
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003fbe:	f000 f829 	bl	8004014 <HAL_RCC_GetSysClockFreq>
 8003fc2:	0001      	movs	r1, r0
 8003fc4:	4b0d      	ldr	r3, [pc, #52]	@ (8003ffc <HAL_RCC_ClockConfig+0x1f8>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	0a1b      	lsrs	r3, r3, #8
 8003fca:	220f      	movs	r2, #15
 8003fcc:	401a      	ands	r2, r3
 8003fce:	4b0e      	ldr	r3, [pc, #56]	@ (8004008 <HAL_RCC_ClockConfig+0x204>)
 8003fd0:	0092      	lsls	r2, r2, #2
 8003fd2:	58d3      	ldr	r3, [r2, r3]
 8003fd4:	221f      	movs	r2, #31
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	000a      	movs	r2, r1
 8003fda:	40da      	lsrs	r2, r3
 8003fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800400c <HAL_RCC_ClockConfig+0x208>)
 8003fde:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8004010 <HAL_RCC_ClockConfig+0x20c>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	f7fe ff69 	bl	8002ebc <HAL_InitTick>
 8003fea:	0003      	movs	r3, r0
}
 8003fec:	0018      	movs	r0, r3
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	b004      	add	sp, #16
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40022000 	.word	0x40022000
 8003ff8:	00001388 	.word	0x00001388
 8003ffc:	40021000 	.word	0x40021000
 8004000:	fffff0ff 	.word	0xfffff0ff
 8004004:	ffff8fff 	.word	0xffff8fff
 8004008:	08007fd8 	.word	0x08007fd8
 800400c:	20000000 	.word	0x20000000
 8004010:	20000004 	.word	0x20000004

08004014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800401a:	4b3c      	ldr	r3, [pc, #240]	@ (800410c <HAL_RCC_GetSysClockFreq+0xf8>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	2238      	movs	r2, #56	@ 0x38
 8004020:	4013      	ands	r3, r2
 8004022:	d10f      	bne.n	8004044 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004024:	4b39      	ldr	r3, [pc, #228]	@ (800410c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	0adb      	lsrs	r3, r3, #11
 800402a:	2207      	movs	r2, #7
 800402c:	4013      	ands	r3, r2
 800402e:	2201      	movs	r2, #1
 8004030:	409a      	lsls	r2, r3
 8004032:	0013      	movs	r3, r2
 8004034:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004036:	6839      	ldr	r1, [r7, #0]
 8004038:	4835      	ldr	r0, [pc, #212]	@ (8004110 <HAL_RCC_GetSysClockFreq+0xfc>)
 800403a:	f7fc f87f 	bl	800013c <__udivsi3>
 800403e:	0003      	movs	r3, r0
 8004040:	613b      	str	r3, [r7, #16]
 8004042:	e05d      	b.n	8004100 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004044:	4b31      	ldr	r3, [pc, #196]	@ (800410c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	2238      	movs	r2, #56	@ 0x38
 800404a:	4013      	ands	r3, r2
 800404c:	2b08      	cmp	r3, #8
 800404e:	d102      	bne.n	8004056 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004050:	4b30      	ldr	r3, [pc, #192]	@ (8004114 <HAL_RCC_GetSysClockFreq+0x100>)
 8004052:	613b      	str	r3, [r7, #16]
 8004054:	e054      	b.n	8004100 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004056:	4b2d      	ldr	r3, [pc, #180]	@ (800410c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	2238      	movs	r2, #56	@ 0x38
 800405c:	4013      	ands	r3, r2
 800405e:	2b10      	cmp	r3, #16
 8004060:	d138      	bne.n	80040d4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004062:	4b2a      	ldr	r3, [pc, #168]	@ (800410c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	2203      	movs	r2, #3
 8004068:	4013      	ands	r3, r2
 800406a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800406c:	4b27      	ldr	r3, [pc, #156]	@ (800410c <HAL_RCC_GetSysClockFreq+0xf8>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	091b      	lsrs	r3, r3, #4
 8004072:	2207      	movs	r2, #7
 8004074:	4013      	ands	r3, r2
 8004076:	3301      	adds	r3, #1
 8004078:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2b03      	cmp	r3, #3
 800407e:	d10d      	bne.n	800409c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004080:	68b9      	ldr	r1, [r7, #8]
 8004082:	4824      	ldr	r0, [pc, #144]	@ (8004114 <HAL_RCC_GetSysClockFreq+0x100>)
 8004084:	f7fc f85a 	bl	800013c <__udivsi3>
 8004088:	0003      	movs	r3, r0
 800408a:	0019      	movs	r1, r3
 800408c:	4b1f      	ldr	r3, [pc, #124]	@ (800410c <HAL_RCC_GetSysClockFreq+0xf8>)
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	0a1b      	lsrs	r3, r3, #8
 8004092:	227f      	movs	r2, #127	@ 0x7f
 8004094:	4013      	ands	r3, r2
 8004096:	434b      	muls	r3, r1
 8004098:	617b      	str	r3, [r7, #20]
        break;
 800409a:	e00d      	b.n	80040b8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800409c:	68b9      	ldr	r1, [r7, #8]
 800409e:	481c      	ldr	r0, [pc, #112]	@ (8004110 <HAL_RCC_GetSysClockFreq+0xfc>)
 80040a0:	f7fc f84c 	bl	800013c <__udivsi3>
 80040a4:	0003      	movs	r3, r0
 80040a6:	0019      	movs	r1, r3
 80040a8:	4b18      	ldr	r3, [pc, #96]	@ (800410c <HAL_RCC_GetSysClockFreq+0xf8>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	0a1b      	lsrs	r3, r3, #8
 80040ae:	227f      	movs	r2, #127	@ 0x7f
 80040b0:	4013      	ands	r3, r2
 80040b2:	434b      	muls	r3, r1
 80040b4:	617b      	str	r3, [r7, #20]
        break;
 80040b6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80040b8:	4b14      	ldr	r3, [pc, #80]	@ (800410c <HAL_RCC_GetSysClockFreq+0xf8>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	0f5b      	lsrs	r3, r3, #29
 80040be:	2207      	movs	r2, #7
 80040c0:	4013      	ands	r3, r2
 80040c2:	3301      	adds	r3, #1
 80040c4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	6978      	ldr	r0, [r7, #20]
 80040ca:	f7fc f837 	bl	800013c <__udivsi3>
 80040ce:	0003      	movs	r3, r0
 80040d0:	613b      	str	r3, [r7, #16]
 80040d2:	e015      	b.n	8004100 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80040d4:	4b0d      	ldr	r3, [pc, #52]	@ (800410c <HAL_RCC_GetSysClockFreq+0xf8>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	2238      	movs	r2, #56	@ 0x38
 80040da:	4013      	ands	r3, r2
 80040dc:	2b20      	cmp	r3, #32
 80040de:	d103      	bne.n	80040e8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80040e0:	2380      	movs	r3, #128	@ 0x80
 80040e2:	021b      	lsls	r3, r3, #8
 80040e4:	613b      	str	r3, [r7, #16]
 80040e6:	e00b      	b.n	8004100 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80040e8:	4b08      	ldr	r3, [pc, #32]	@ (800410c <HAL_RCC_GetSysClockFreq+0xf8>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2238      	movs	r2, #56	@ 0x38
 80040ee:	4013      	ands	r3, r2
 80040f0:	2b18      	cmp	r3, #24
 80040f2:	d103      	bne.n	80040fc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80040f4:	23fa      	movs	r3, #250	@ 0xfa
 80040f6:	01db      	lsls	r3, r3, #7
 80040f8:	613b      	str	r3, [r7, #16]
 80040fa:	e001      	b.n	8004100 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004100:	693b      	ldr	r3, [r7, #16]
}
 8004102:	0018      	movs	r0, r3
 8004104:	46bd      	mov	sp, r7
 8004106:	b006      	add	sp, #24
 8004108:	bd80      	pop	{r7, pc}
 800410a:	46c0      	nop			@ (mov r8, r8)
 800410c:	40021000 	.word	0x40021000
 8004110:	00f42400 	.word	0x00f42400
 8004114:	007a1200 	.word	0x007a1200

08004118 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800411c:	4b02      	ldr	r3, [pc, #8]	@ (8004128 <HAL_RCC_GetHCLKFreq+0x10>)
 800411e:	681b      	ldr	r3, [r3, #0]
}
 8004120:	0018      	movs	r0, r3
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	46c0      	nop			@ (mov r8, r8)
 8004128:	20000000 	.word	0x20000000

0800412c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800412c:	b5b0      	push	{r4, r5, r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004130:	f7ff fff2 	bl	8004118 <HAL_RCC_GetHCLKFreq>
 8004134:	0004      	movs	r4, r0
 8004136:	f7ff faf9 	bl	800372c <LL_RCC_GetAPB1Prescaler>
 800413a:	0003      	movs	r3, r0
 800413c:	0b1a      	lsrs	r2, r3, #12
 800413e:	4b05      	ldr	r3, [pc, #20]	@ (8004154 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004140:	0092      	lsls	r2, r2, #2
 8004142:	58d3      	ldr	r3, [r2, r3]
 8004144:	221f      	movs	r2, #31
 8004146:	4013      	ands	r3, r2
 8004148:	40dc      	lsrs	r4, r3
 800414a:	0023      	movs	r3, r4
}
 800414c:	0018      	movs	r0, r3
 800414e:	46bd      	mov	sp, r7
 8004150:	bdb0      	pop	{r4, r5, r7, pc}
 8004152:	46c0      	nop			@ (mov r8, r8)
 8004154:	08008018 	.word	0x08008018

08004158 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004160:	2313      	movs	r3, #19
 8004162:	18fb      	adds	r3, r7, r3
 8004164:	2200      	movs	r2, #0
 8004166:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004168:	2312      	movs	r3, #18
 800416a:	18fb      	adds	r3, r7, r3
 800416c:	2200      	movs	r2, #0
 800416e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	2380      	movs	r3, #128	@ 0x80
 8004176:	029b      	lsls	r3, r3, #10
 8004178:	4013      	ands	r3, r2
 800417a:	d100      	bne.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800417c:	e0ad      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800417e:	2011      	movs	r0, #17
 8004180:	183b      	adds	r3, r7, r0
 8004182:	2200      	movs	r2, #0
 8004184:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004186:	4b47      	ldr	r3, [pc, #284]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004188:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800418a:	2380      	movs	r3, #128	@ 0x80
 800418c:	055b      	lsls	r3, r3, #21
 800418e:	4013      	ands	r3, r2
 8004190:	d110      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004192:	4b44      	ldr	r3, [pc, #272]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004194:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004196:	4b43      	ldr	r3, [pc, #268]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004198:	2180      	movs	r1, #128	@ 0x80
 800419a:	0549      	lsls	r1, r1, #21
 800419c:	430a      	orrs	r2, r1
 800419e:	63da      	str	r2, [r3, #60]	@ 0x3c
 80041a0:	4b40      	ldr	r3, [pc, #256]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80041a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041a4:	2380      	movs	r3, #128	@ 0x80
 80041a6:	055b      	lsls	r3, r3, #21
 80041a8:	4013      	ands	r3, r2
 80041aa:	60bb      	str	r3, [r7, #8]
 80041ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041ae:	183b      	adds	r3, r7, r0
 80041b0:	2201      	movs	r2, #1
 80041b2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041b4:	4b3c      	ldr	r3, [pc, #240]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	4b3b      	ldr	r3, [pc, #236]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80041ba:	2180      	movs	r1, #128	@ 0x80
 80041bc:	0049      	lsls	r1, r1, #1
 80041be:	430a      	orrs	r2, r1
 80041c0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041c2:	f7fe fed7 	bl	8002f74 <HAL_GetTick>
 80041c6:	0003      	movs	r3, r0
 80041c8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041ca:	e00b      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041cc:	f7fe fed2 	bl	8002f74 <HAL_GetTick>
 80041d0:	0002      	movs	r2, r0
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d904      	bls.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80041da:	2313      	movs	r3, #19
 80041dc:	18fb      	adds	r3, r7, r3
 80041de:	2203      	movs	r2, #3
 80041e0:	701a      	strb	r2, [r3, #0]
        break;
 80041e2:	e005      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041e4:	4b30      	ldr	r3, [pc, #192]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	2380      	movs	r3, #128	@ 0x80
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	4013      	ands	r3, r2
 80041ee:	d0ed      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80041f0:	2313      	movs	r3, #19
 80041f2:	18fb      	adds	r3, r7, r3
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d15e      	bne.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041fa:	4b2a      	ldr	r3, [pc, #168]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80041fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80041fe:	23c0      	movs	r3, #192	@ 0xc0
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	4013      	ands	r3, r2
 8004204:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d019      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	429a      	cmp	r2, r3
 8004214:	d014      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004216:	4b23      	ldr	r3, [pc, #140]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004218:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800421a:	4a24      	ldr	r2, [pc, #144]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800421c:	4013      	ands	r3, r2
 800421e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004220:	4b20      	ldr	r3, [pc, #128]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004222:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004224:	4b1f      	ldr	r3, [pc, #124]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004226:	2180      	movs	r1, #128	@ 0x80
 8004228:	0249      	lsls	r1, r1, #9
 800422a:	430a      	orrs	r2, r1
 800422c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800422e:	4b1d      	ldr	r3, [pc, #116]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004230:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004232:	4b1c      	ldr	r3, [pc, #112]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004234:	491e      	ldr	r1, [pc, #120]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8004236:	400a      	ands	r2, r1
 8004238:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800423a:	4b1a      	ldr	r3, [pc, #104]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	2201      	movs	r2, #1
 8004244:	4013      	ands	r3, r2
 8004246:	d016      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004248:	f7fe fe94 	bl	8002f74 <HAL_GetTick>
 800424c:	0003      	movs	r3, r0
 800424e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004250:	e00c      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004252:	f7fe fe8f 	bl	8002f74 <HAL_GetTick>
 8004256:	0002      	movs	r2, r0
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	4a15      	ldr	r2, [pc, #84]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d904      	bls.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004262:	2313      	movs	r3, #19
 8004264:	18fb      	adds	r3, r7, r3
 8004266:	2203      	movs	r2, #3
 8004268:	701a      	strb	r2, [r3, #0]
            break;
 800426a:	e004      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800426c:	4b0d      	ldr	r3, [pc, #52]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800426e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004270:	2202      	movs	r2, #2
 8004272:	4013      	ands	r3, r2
 8004274:	d0ed      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004276:	2313      	movs	r3, #19
 8004278:	18fb      	adds	r3, r7, r3
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10a      	bne.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004280:	4b08      	ldr	r3, [pc, #32]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004282:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004284:	4a09      	ldr	r2, [pc, #36]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004286:	4013      	ands	r3, r2
 8004288:	0019      	movs	r1, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800428e:	4b05      	ldr	r3, [pc, #20]	@ (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004290:	430a      	orrs	r2, r1
 8004292:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004294:	e016      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004296:	2312      	movs	r3, #18
 8004298:	18fb      	adds	r3, r7, r3
 800429a:	2213      	movs	r2, #19
 800429c:	18ba      	adds	r2, r7, r2
 800429e:	7812      	ldrb	r2, [r2, #0]
 80042a0:	701a      	strb	r2, [r3, #0]
 80042a2:	e00f      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80042a4:	40021000 	.word	0x40021000
 80042a8:	40007000 	.word	0x40007000
 80042ac:	fffffcff 	.word	0xfffffcff
 80042b0:	fffeffff 	.word	0xfffeffff
 80042b4:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b8:	2312      	movs	r3, #18
 80042ba:	18fb      	adds	r3, r7, r3
 80042bc:	2213      	movs	r2, #19
 80042be:	18ba      	adds	r2, r7, r2
 80042c0:	7812      	ldrb	r2, [r2, #0]
 80042c2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042c4:	2311      	movs	r3, #17
 80042c6:	18fb      	adds	r3, r7, r3
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d105      	bne.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ce:	4bb6      	ldr	r3, [pc, #728]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042d2:	4bb5      	ldr	r3, [pc, #724]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042d4:	49b5      	ldr	r1, [pc, #724]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80042d6:	400a      	ands	r2, r1
 80042d8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2201      	movs	r2, #1
 80042e0:	4013      	ands	r3, r2
 80042e2:	d009      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042e4:	4bb0      	ldr	r3, [pc, #704]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042e8:	2203      	movs	r2, #3
 80042ea:	4393      	bics	r3, r2
 80042ec:	0019      	movs	r1, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	4bad      	ldr	r3, [pc, #692]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042f4:	430a      	orrs	r2, r1
 80042f6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2202      	movs	r2, #2
 80042fe:	4013      	ands	r3, r2
 8004300:	d009      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004302:	4ba9      	ldr	r3, [pc, #676]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004306:	220c      	movs	r2, #12
 8004308:	4393      	bics	r3, r2
 800430a:	0019      	movs	r1, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	4ba5      	ldr	r3, [pc, #660]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004312:	430a      	orrs	r2, r1
 8004314:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2204      	movs	r2, #4
 800431c:	4013      	ands	r3, r2
 800431e:	d009      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004320:	4ba1      	ldr	r3, [pc, #644]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004324:	2230      	movs	r2, #48	@ 0x30
 8004326:	4393      	bics	r3, r2
 8004328:	0019      	movs	r1, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	4b9e      	ldr	r3, [pc, #632]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004330:	430a      	orrs	r2, r1
 8004332:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2210      	movs	r2, #16
 800433a:	4013      	ands	r3, r2
 800433c:	d009      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800433e:	4b9a      	ldr	r3, [pc, #616]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004342:	4a9b      	ldr	r2, [pc, #620]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004344:	4013      	ands	r3, r2
 8004346:	0019      	movs	r1, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691a      	ldr	r2, [r3, #16]
 800434c:	4b96      	ldr	r3, [pc, #600]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800434e:	430a      	orrs	r2, r1
 8004350:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	2380      	movs	r3, #128	@ 0x80
 8004358:	015b      	lsls	r3, r3, #5
 800435a:	4013      	ands	r3, r2
 800435c:	d009      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800435e:	4b92      	ldr	r3, [pc, #584]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004362:	4a94      	ldr	r2, [pc, #592]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004364:	4013      	ands	r3, r2
 8004366:	0019      	movs	r1, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	695a      	ldr	r2, [r3, #20]
 800436c:	4b8e      	ldr	r3, [pc, #568]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800436e:	430a      	orrs	r2, r1
 8004370:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	2380      	movs	r3, #128	@ 0x80
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4013      	ands	r3, r2
 800437c:	d009      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800437e:	4b8a      	ldr	r3, [pc, #552]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004382:	4a8d      	ldr	r2, [pc, #564]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8004384:	4013      	ands	r3, r2
 8004386:	0019      	movs	r1, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800438c:	4b86      	ldr	r3, [pc, #536]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800438e:	430a      	orrs	r2, r1
 8004390:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	2380      	movs	r3, #128	@ 0x80
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	4013      	ands	r3, r2
 800439c:	d009      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800439e:	4b82      	ldr	r3, [pc, #520]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043a2:	4a86      	ldr	r2, [pc, #536]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80043a4:	4013      	ands	r3, r2
 80043a6:	0019      	movs	r1, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043ac:	4b7e      	ldr	r3, [pc, #504]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043ae:	430a      	orrs	r2, r1
 80043b0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2220      	movs	r2, #32
 80043b8:	4013      	ands	r3, r2
 80043ba:	d009      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043bc:	4b7a      	ldr	r3, [pc, #488]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043c0:	4a7f      	ldr	r2, [pc, #508]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80043c2:	4013      	ands	r3, r2
 80043c4:	0019      	movs	r1, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	699a      	ldr	r2, [r3, #24]
 80043ca:	4b77      	ldr	r3, [pc, #476]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043cc:	430a      	orrs	r2, r1
 80043ce:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2240      	movs	r2, #64	@ 0x40
 80043d6:	4013      	ands	r3, r2
 80043d8:	d009      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043da:	4b73      	ldr	r3, [pc, #460]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043de:	4a79      	ldr	r2, [pc, #484]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80043e0:	4013      	ands	r3, r2
 80043e2:	0019      	movs	r1, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	69da      	ldr	r2, [r3, #28]
 80043e8:	4b6f      	ldr	r3, [pc, #444]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043ea:	430a      	orrs	r2, r1
 80043ec:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	2380      	movs	r3, #128	@ 0x80
 80043f4:	01db      	lsls	r3, r3, #7
 80043f6:	4013      	ands	r3, r2
 80043f8:	d015      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043fa:	4b6b      	ldr	r3, [pc, #428]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	0899      	lsrs	r1, r3, #2
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004406:	4b68      	ldr	r3, [pc, #416]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004408:	430a      	orrs	r2, r1
 800440a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004410:	2380      	movs	r3, #128	@ 0x80
 8004412:	05db      	lsls	r3, r3, #23
 8004414:	429a      	cmp	r2, r3
 8004416:	d106      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004418:	4b63      	ldr	r3, [pc, #396]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800441a:	68da      	ldr	r2, [r3, #12]
 800441c:	4b62      	ldr	r3, [pc, #392]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800441e:	2180      	movs	r1, #128	@ 0x80
 8004420:	0249      	lsls	r1, r1, #9
 8004422:	430a      	orrs	r2, r1
 8004424:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	2380      	movs	r3, #128	@ 0x80
 800442c:	031b      	lsls	r3, r3, #12
 800442e:	4013      	ands	r3, r2
 8004430:	d009      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004432:	4b5d      	ldr	r3, [pc, #372]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004436:	2240      	movs	r2, #64	@ 0x40
 8004438:	4393      	bics	r3, r2
 800443a:	0019      	movs	r1, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004440:	4b59      	ldr	r3, [pc, #356]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004442:	430a      	orrs	r2, r1
 8004444:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	2380      	movs	r3, #128	@ 0x80
 800444c:	039b      	lsls	r3, r3, #14
 800444e:	4013      	ands	r3, r2
 8004450:	d016      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004452:	4b55      	ldr	r3, [pc, #340]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004456:	4a5c      	ldr	r2, [pc, #368]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004458:	4013      	ands	r3, r2
 800445a:	0019      	movs	r1, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004460:	4b51      	ldr	r3, [pc, #324]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004462:	430a      	orrs	r2, r1
 8004464:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800446a:	2380      	movs	r3, #128	@ 0x80
 800446c:	03db      	lsls	r3, r3, #15
 800446e:	429a      	cmp	r2, r3
 8004470:	d106      	bne.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004472:	4b4d      	ldr	r3, [pc, #308]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004474:	68da      	ldr	r2, [r3, #12]
 8004476:	4b4c      	ldr	r3, [pc, #304]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004478:	2180      	movs	r1, #128	@ 0x80
 800447a:	0449      	lsls	r1, r1, #17
 800447c:	430a      	orrs	r2, r1
 800447e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	2380      	movs	r3, #128	@ 0x80
 8004486:	03db      	lsls	r3, r3, #15
 8004488:	4013      	ands	r3, r2
 800448a:	d016      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800448c:	4b46      	ldr	r3, [pc, #280]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800448e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004490:	4a4e      	ldr	r2, [pc, #312]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004492:	4013      	ands	r3, r2
 8004494:	0019      	movs	r1, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800449a:	4b43      	ldr	r3, [pc, #268]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800449c:	430a      	orrs	r2, r1
 800449e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044a4:	2380      	movs	r3, #128	@ 0x80
 80044a6:	045b      	lsls	r3, r3, #17
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d106      	bne.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80044ac:	4b3e      	ldr	r3, [pc, #248]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044ae:	68da      	ldr	r2, [r3, #12]
 80044b0:	4b3d      	ldr	r3, [pc, #244]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044b2:	2180      	movs	r1, #128	@ 0x80
 80044b4:	0449      	lsls	r1, r1, #17
 80044b6:	430a      	orrs	r2, r1
 80044b8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	2380      	movs	r3, #128	@ 0x80
 80044c0:	011b      	lsls	r3, r3, #4
 80044c2:	4013      	ands	r3, r2
 80044c4:	d014      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80044c6:	4b38      	ldr	r3, [pc, #224]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ca:	2203      	movs	r2, #3
 80044cc:	4393      	bics	r3, r2
 80044ce:	0019      	movs	r1, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a1a      	ldr	r2, [r3, #32]
 80044d4:	4b34      	ldr	r3, [pc, #208]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044d6:	430a      	orrs	r2, r1
 80044d8:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d106      	bne.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80044e2:	4b31      	ldr	r3, [pc, #196]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044e4:	68da      	ldr	r2, [r3, #12]
 80044e6:	4b30      	ldr	r3, [pc, #192]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044e8:	2180      	movs	r1, #128	@ 0x80
 80044ea:	0249      	lsls	r1, r1, #9
 80044ec:	430a      	orrs	r2, r1
 80044ee:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	2380      	movs	r3, #128	@ 0x80
 80044f6:	019b      	lsls	r3, r3, #6
 80044f8:	4013      	ands	r3, r2
 80044fa:	d014      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80044fc:	4b2a      	ldr	r3, [pc, #168]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80044fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004500:	220c      	movs	r2, #12
 8004502:	4393      	bics	r3, r2
 8004504:	0019      	movs	r1, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800450a:	4b27      	ldr	r3, [pc, #156]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800450c:	430a      	orrs	r2, r1
 800450e:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004514:	2b04      	cmp	r3, #4
 8004516:	d106      	bne.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004518:	4b23      	ldr	r3, [pc, #140]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800451a:	68da      	ldr	r2, [r3, #12]
 800451c:	4b22      	ldr	r3, [pc, #136]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800451e:	2180      	movs	r1, #128	@ 0x80
 8004520:	0249      	lsls	r1, r1, #9
 8004522:	430a      	orrs	r2, r1
 8004524:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	2380      	movs	r3, #128	@ 0x80
 800452c:	045b      	lsls	r3, r3, #17
 800452e:	4013      	ands	r3, r2
 8004530:	d016      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004532:	4b1d      	ldr	r3, [pc, #116]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004536:	4a22      	ldr	r2, [pc, #136]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004538:	4013      	ands	r3, r2
 800453a:	0019      	movs	r1, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004540:	4b19      	ldr	r3, [pc, #100]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004542:	430a      	orrs	r2, r1
 8004544:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800454a:	2380      	movs	r3, #128	@ 0x80
 800454c:	019b      	lsls	r3, r3, #6
 800454e:	429a      	cmp	r2, r3
 8004550:	d106      	bne.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004552:	4b15      	ldr	r3, [pc, #84]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004554:	68da      	ldr	r2, [r3, #12]
 8004556:	4b14      	ldr	r3, [pc, #80]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004558:	2180      	movs	r1, #128	@ 0x80
 800455a:	0449      	lsls	r1, r1, #17
 800455c:	430a      	orrs	r2, r1
 800455e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	2380      	movs	r3, #128	@ 0x80
 8004566:	049b      	lsls	r3, r3, #18
 8004568:	4013      	ands	r3, r2
 800456a:	d016      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800456c:	4b0e      	ldr	r3, [pc, #56]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800456e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004570:	4a10      	ldr	r2, [pc, #64]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004572:	4013      	ands	r3, r2
 8004574:	0019      	movs	r1, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800457a:	4b0b      	ldr	r3, [pc, #44]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800457c:	430a      	orrs	r2, r1
 800457e:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004584:	2380      	movs	r3, #128	@ 0x80
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	429a      	cmp	r2, r3
 800458a:	d106      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800458c:	4b06      	ldr	r3, [pc, #24]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800458e:	68da      	ldr	r2, [r3, #12]
 8004590:	4b05      	ldr	r3, [pc, #20]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004592:	2180      	movs	r1, #128	@ 0x80
 8004594:	0449      	lsls	r1, r1, #17
 8004596:	430a      	orrs	r2, r1
 8004598:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800459a:	2312      	movs	r3, #18
 800459c:	18fb      	adds	r3, r7, r3
 800459e:	781b      	ldrb	r3, [r3, #0]
}
 80045a0:	0018      	movs	r0, r3
 80045a2:	46bd      	mov	sp, r7
 80045a4:	b006      	add	sp, #24
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	40021000 	.word	0x40021000
 80045ac:	efffffff 	.word	0xefffffff
 80045b0:	fffff3ff 	.word	0xfffff3ff
 80045b4:	fffffcff 	.word	0xfffffcff
 80045b8:	fff3ffff 	.word	0xfff3ffff
 80045bc:	ffcfffff 	.word	0xffcfffff
 80045c0:	ffffcfff 	.word	0xffffcfff
 80045c4:	ffff3fff 	.word	0xffff3fff
 80045c8:	ffbfffff 	.word	0xffbfffff
 80045cc:	feffffff 	.word	0xfeffffff

080045d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e0a8      	b.n	8004734 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d109      	bne.n	80045fe <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	2382      	movs	r3, #130	@ 0x82
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d009      	beq.n	800460a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	61da      	str	r2, [r3, #28]
 80045fc:	e005      	b.n	800460a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	225d      	movs	r2, #93	@ 0x5d
 8004614:	5c9b      	ldrb	r3, [r3, r2]
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b00      	cmp	r3, #0
 800461a:	d107      	bne.n	800462c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	225c      	movs	r2, #92	@ 0x5c
 8004620:	2100      	movs	r1, #0
 8004622:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	0018      	movs	r0, r3
 8004628:	f7fe fa00 	bl	8002a2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	225d      	movs	r2, #93	@ 0x5d
 8004630:	2102      	movs	r1, #2
 8004632:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2140      	movs	r1, #64	@ 0x40
 8004640:	438a      	bics	r2, r1
 8004642:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68da      	ldr	r2, [r3, #12]
 8004648:	23e0      	movs	r3, #224	@ 0xe0
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	429a      	cmp	r2, r3
 800464e:	d902      	bls.n	8004656 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004650:	2300      	movs	r3, #0
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	e002      	b.n	800465c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004656:	2380      	movs	r3, #128	@ 0x80
 8004658:	015b      	lsls	r3, r3, #5
 800465a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68da      	ldr	r2, [r3, #12]
 8004660:	23f0      	movs	r3, #240	@ 0xf0
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	429a      	cmp	r2, r3
 8004666:	d008      	beq.n	800467a <HAL_SPI_Init+0xaa>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	23e0      	movs	r3, #224	@ 0xe0
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	429a      	cmp	r2, r3
 8004672:	d002      	beq.n	800467a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	2382      	movs	r3, #130	@ 0x82
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	401a      	ands	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6899      	ldr	r1, [r3, #8]
 8004688:	2384      	movs	r3, #132	@ 0x84
 800468a:	021b      	lsls	r3, r3, #8
 800468c:	400b      	ands	r3, r1
 800468e:	431a      	orrs	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	2102      	movs	r1, #2
 8004696:	400b      	ands	r3, r1
 8004698:	431a      	orrs	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	2101      	movs	r1, #1
 80046a0:	400b      	ands	r3, r1
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6999      	ldr	r1, [r3, #24]
 80046a8:	2380      	movs	r3, #128	@ 0x80
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	400b      	ands	r3, r1
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	69db      	ldr	r3, [r3, #28]
 80046b4:	2138      	movs	r1, #56	@ 0x38
 80046b6:	400b      	ands	r3, r1
 80046b8:	431a      	orrs	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	2180      	movs	r1, #128	@ 0x80
 80046c0:	400b      	ands	r3, r1
 80046c2:	431a      	orrs	r2, r3
 80046c4:	0011      	movs	r1, r2
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80046ca:	2380      	movs	r3, #128	@ 0x80
 80046cc:	019b      	lsls	r3, r3, #6
 80046ce:	401a      	ands	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	0c1b      	lsrs	r3, r3, #16
 80046de:	2204      	movs	r2, #4
 80046e0:	401a      	ands	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e6:	2110      	movs	r1, #16
 80046e8:	400b      	ands	r3, r1
 80046ea:	431a      	orrs	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046f0:	2108      	movs	r1, #8
 80046f2:	400b      	ands	r3, r1
 80046f4:	431a      	orrs	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68d9      	ldr	r1, [r3, #12]
 80046fa:	23f0      	movs	r3, #240	@ 0xf0
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	400b      	ands	r3, r1
 8004700:	431a      	orrs	r2, r3
 8004702:	0011      	movs	r1, r2
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	2380      	movs	r3, #128	@ 0x80
 8004708:	015b      	lsls	r3, r3, #5
 800470a:	401a      	ands	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	69da      	ldr	r2, [r3, #28]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4907      	ldr	r1, [pc, #28]	@ (800473c <HAL_SPI_Init+0x16c>)
 8004720:	400a      	ands	r2, r1
 8004722:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	225d      	movs	r2, #93	@ 0x5d
 800472e:	2101      	movs	r1, #1
 8004730:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	0018      	movs	r0, r3
 8004736:	46bd      	mov	sp, r7
 8004738:	b004      	add	sp, #16
 800473a:	bd80      	pop	{r7, pc}
 800473c:	fffff7ff 	.word	0xfffff7ff

08004740 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e046      	b.n	80047e0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2288      	movs	r2, #136	@ 0x88
 8004756:	589b      	ldr	r3, [r3, r2]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d107      	bne.n	800476c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2284      	movs	r2, #132	@ 0x84
 8004760:	2100      	movs	r1, #0
 8004762:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	0018      	movs	r0, r3
 8004768:	f7fe fafe 	bl	8002d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2288      	movs	r2, #136	@ 0x88
 8004770:	2124      	movs	r1, #36	@ 0x24
 8004772:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2101      	movs	r1, #1
 8004780:	438a      	bics	r2, r1
 8004782:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004788:	2b00      	cmp	r3, #0
 800478a:	d003      	beq.n	8004794 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	0018      	movs	r0, r3
 8004790:	f000 fb82 	bl	8004e98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	0018      	movs	r0, r3
 8004798:	f000 f828 	bl	80047ec <UART_SetConfig>
 800479c:	0003      	movs	r3, r0
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d101      	bne.n	80047a6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e01c      	b.n	80047e0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	490d      	ldr	r1, [pc, #52]	@ (80047e8 <HAL_UART_Init+0xa8>)
 80047b2:	400a      	ands	r2, r1
 80047b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	212a      	movs	r1, #42	@ 0x2a
 80047c2:	438a      	bics	r2, r1
 80047c4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2101      	movs	r1, #1
 80047d2:	430a      	orrs	r2, r1
 80047d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	0018      	movs	r0, r3
 80047da:	f000 fc11 	bl	8005000 <UART_CheckIdleState>
 80047de:	0003      	movs	r3, r0
}
 80047e0:	0018      	movs	r0, r3
 80047e2:	46bd      	mov	sp, r7
 80047e4:	b002      	add	sp, #8
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	ffffb7ff 	.word	0xffffb7ff

080047ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047ec:	b5b0      	push	{r4, r5, r7, lr}
 80047ee:	b090      	sub	sp, #64	@ 0x40
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047f4:	231a      	movs	r3, #26
 80047f6:	2220      	movs	r2, #32
 80047f8:	189b      	adds	r3, r3, r2
 80047fa:	19db      	adds	r3, r3, r7
 80047fc:	2200      	movs	r2, #0
 80047fe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	431a      	orrs	r2, r3
 800480a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	431a      	orrs	r2, r3
 8004810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	4313      	orrs	r3, r2
 8004816:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4ac1      	ldr	r2, [pc, #772]	@ (8004b24 <UART_SetConfig+0x338>)
 8004820:	4013      	ands	r3, r2
 8004822:	0019      	movs	r1, r3
 8004824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800482a:	430b      	orrs	r3, r1
 800482c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800482e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	4abc      	ldr	r2, [pc, #752]	@ (8004b28 <UART_SetConfig+0x33c>)
 8004836:	4013      	ands	r3, r2
 8004838:	0018      	movs	r0, r3
 800483a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483c:	68d9      	ldr	r1, [r3, #12]
 800483e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	0003      	movs	r3, r0
 8004844:	430b      	orrs	r3, r1
 8004846:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800484e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4ab6      	ldr	r2, [pc, #728]	@ (8004b2c <UART_SetConfig+0x340>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d009      	beq.n	800486c <UART_SetConfig+0x80>
 8004858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4ab4      	ldr	r2, [pc, #720]	@ (8004b30 <UART_SetConfig+0x344>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d004      	beq.n	800486c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004868:	4313      	orrs	r3, r2
 800486a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800486c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	4ab0      	ldr	r2, [pc, #704]	@ (8004b34 <UART_SetConfig+0x348>)
 8004874:	4013      	ands	r3, r2
 8004876:	0019      	movs	r1, r3
 8004878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800487e:	430b      	orrs	r3, r1
 8004880:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004888:	220f      	movs	r2, #15
 800488a:	4393      	bics	r3, r2
 800488c:	0018      	movs	r0, r3
 800488e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004890:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	0003      	movs	r3, r0
 8004898:	430b      	orrs	r3, r1
 800489a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800489c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4aa5      	ldr	r2, [pc, #660]	@ (8004b38 <UART_SetConfig+0x34c>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d131      	bne.n	800490a <UART_SetConfig+0x11e>
 80048a6:	4ba5      	ldr	r3, [pc, #660]	@ (8004b3c <UART_SetConfig+0x350>)
 80048a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048aa:	2203      	movs	r2, #3
 80048ac:	4013      	ands	r3, r2
 80048ae:	2b03      	cmp	r3, #3
 80048b0:	d01d      	beq.n	80048ee <UART_SetConfig+0x102>
 80048b2:	d823      	bhi.n	80048fc <UART_SetConfig+0x110>
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d00c      	beq.n	80048d2 <UART_SetConfig+0xe6>
 80048b8:	d820      	bhi.n	80048fc <UART_SetConfig+0x110>
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d002      	beq.n	80048c4 <UART_SetConfig+0xd8>
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d00e      	beq.n	80048e0 <UART_SetConfig+0xf4>
 80048c2:	e01b      	b.n	80048fc <UART_SetConfig+0x110>
 80048c4:	231b      	movs	r3, #27
 80048c6:	2220      	movs	r2, #32
 80048c8:	189b      	adds	r3, r3, r2
 80048ca:	19db      	adds	r3, r3, r7
 80048cc:	2200      	movs	r2, #0
 80048ce:	701a      	strb	r2, [r3, #0]
 80048d0:	e154      	b.n	8004b7c <UART_SetConfig+0x390>
 80048d2:	231b      	movs	r3, #27
 80048d4:	2220      	movs	r2, #32
 80048d6:	189b      	adds	r3, r3, r2
 80048d8:	19db      	adds	r3, r3, r7
 80048da:	2202      	movs	r2, #2
 80048dc:	701a      	strb	r2, [r3, #0]
 80048de:	e14d      	b.n	8004b7c <UART_SetConfig+0x390>
 80048e0:	231b      	movs	r3, #27
 80048e2:	2220      	movs	r2, #32
 80048e4:	189b      	adds	r3, r3, r2
 80048e6:	19db      	adds	r3, r3, r7
 80048e8:	2204      	movs	r2, #4
 80048ea:	701a      	strb	r2, [r3, #0]
 80048ec:	e146      	b.n	8004b7c <UART_SetConfig+0x390>
 80048ee:	231b      	movs	r3, #27
 80048f0:	2220      	movs	r2, #32
 80048f2:	189b      	adds	r3, r3, r2
 80048f4:	19db      	adds	r3, r3, r7
 80048f6:	2208      	movs	r2, #8
 80048f8:	701a      	strb	r2, [r3, #0]
 80048fa:	e13f      	b.n	8004b7c <UART_SetConfig+0x390>
 80048fc:	231b      	movs	r3, #27
 80048fe:	2220      	movs	r2, #32
 8004900:	189b      	adds	r3, r3, r2
 8004902:	19db      	adds	r3, r3, r7
 8004904:	2210      	movs	r2, #16
 8004906:	701a      	strb	r2, [r3, #0]
 8004908:	e138      	b.n	8004b7c <UART_SetConfig+0x390>
 800490a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a8c      	ldr	r2, [pc, #560]	@ (8004b40 <UART_SetConfig+0x354>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d131      	bne.n	8004978 <UART_SetConfig+0x18c>
 8004914:	4b89      	ldr	r3, [pc, #548]	@ (8004b3c <UART_SetConfig+0x350>)
 8004916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004918:	220c      	movs	r2, #12
 800491a:	4013      	ands	r3, r2
 800491c:	2b0c      	cmp	r3, #12
 800491e:	d01d      	beq.n	800495c <UART_SetConfig+0x170>
 8004920:	d823      	bhi.n	800496a <UART_SetConfig+0x17e>
 8004922:	2b08      	cmp	r3, #8
 8004924:	d00c      	beq.n	8004940 <UART_SetConfig+0x154>
 8004926:	d820      	bhi.n	800496a <UART_SetConfig+0x17e>
 8004928:	2b00      	cmp	r3, #0
 800492a:	d002      	beq.n	8004932 <UART_SetConfig+0x146>
 800492c:	2b04      	cmp	r3, #4
 800492e:	d00e      	beq.n	800494e <UART_SetConfig+0x162>
 8004930:	e01b      	b.n	800496a <UART_SetConfig+0x17e>
 8004932:	231b      	movs	r3, #27
 8004934:	2220      	movs	r2, #32
 8004936:	189b      	adds	r3, r3, r2
 8004938:	19db      	adds	r3, r3, r7
 800493a:	2200      	movs	r2, #0
 800493c:	701a      	strb	r2, [r3, #0]
 800493e:	e11d      	b.n	8004b7c <UART_SetConfig+0x390>
 8004940:	231b      	movs	r3, #27
 8004942:	2220      	movs	r2, #32
 8004944:	189b      	adds	r3, r3, r2
 8004946:	19db      	adds	r3, r3, r7
 8004948:	2202      	movs	r2, #2
 800494a:	701a      	strb	r2, [r3, #0]
 800494c:	e116      	b.n	8004b7c <UART_SetConfig+0x390>
 800494e:	231b      	movs	r3, #27
 8004950:	2220      	movs	r2, #32
 8004952:	189b      	adds	r3, r3, r2
 8004954:	19db      	adds	r3, r3, r7
 8004956:	2204      	movs	r2, #4
 8004958:	701a      	strb	r2, [r3, #0]
 800495a:	e10f      	b.n	8004b7c <UART_SetConfig+0x390>
 800495c:	231b      	movs	r3, #27
 800495e:	2220      	movs	r2, #32
 8004960:	189b      	adds	r3, r3, r2
 8004962:	19db      	adds	r3, r3, r7
 8004964:	2208      	movs	r2, #8
 8004966:	701a      	strb	r2, [r3, #0]
 8004968:	e108      	b.n	8004b7c <UART_SetConfig+0x390>
 800496a:	231b      	movs	r3, #27
 800496c:	2220      	movs	r2, #32
 800496e:	189b      	adds	r3, r3, r2
 8004970:	19db      	adds	r3, r3, r7
 8004972:	2210      	movs	r2, #16
 8004974:	701a      	strb	r2, [r3, #0]
 8004976:	e101      	b.n	8004b7c <UART_SetConfig+0x390>
 8004978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a71      	ldr	r2, [pc, #452]	@ (8004b44 <UART_SetConfig+0x358>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d131      	bne.n	80049e6 <UART_SetConfig+0x1fa>
 8004982:	4b6e      	ldr	r3, [pc, #440]	@ (8004b3c <UART_SetConfig+0x350>)
 8004984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004986:	2230      	movs	r2, #48	@ 0x30
 8004988:	4013      	ands	r3, r2
 800498a:	2b30      	cmp	r3, #48	@ 0x30
 800498c:	d01d      	beq.n	80049ca <UART_SetConfig+0x1de>
 800498e:	d823      	bhi.n	80049d8 <UART_SetConfig+0x1ec>
 8004990:	2b20      	cmp	r3, #32
 8004992:	d00c      	beq.n	80049ae <UART_SetConfig+0x1c2>
 8004994:	d820      	bhi.n	80049d8 <UART_SetConfig+0x1ec>
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <UART_SetConfig+0x1b4>
 800499a:	2b10      	cmp	r3, #16
 800499c:	d00e      	beq.n	80049bc <UART_SetConfig+0x1d0>
 800499e:	e01b      	b.n	80049d8 <UART_SetConfig+0x1ec>
 80049a0:	231b      	movs	r3, #27
 80049a2:	2220      	movs	r2, #32
 80049a4:	189b      	adds	r3, r3, r2
 80049a6:	19db      	adds	r3, r3, r7
 80049a8:	2200      	movs	r2, #0
 80049aa:	701a      	strb	r2, [r3, #0]
 80049ac:	e0e6      	b.n	8004b7c <UART_SetConfig+0x390>
 80049ae:	231b      	movs	r3, #27
 80049b0:	2220      	movs	r2, #32
 80049b2:	189b      	adds	r3, r3, r2
 80049b4:	19db      	adds	r3, r3, r7
 80049b6:	2202      	movs	r2, #2
 80049b8:	701a      	strb	r2, [r3, #0]
 80049ba:	e0df      	b.n	8004b7c <UART_SetConfig+0x390>
 80049bc:	231b      	movs	r3, #27
 80049be:	2220      	movs	r2, #32
 80049c0:	189b      	adds	r3, r3, r2
 80049c2:	19db      	adds	r3, r3, r7
 80049c4:	2204      	movs	r2, #4
 80049c6:	701a      	strb	r2, [r3, #0]
 80049c8:	e0d8      	b.n	8004b7c <UART_SetConfig+0x390>
 80049ca:	231b      	movs	r3, #27
 80049cc:	2220      	movs	r2, #32
 80049ce:	189b      	adds	r3, r3, r2
 80049d0:	19db      	adds	r3, r3, r7
 80049d2:	2208      	movs	r2, #8
 80049d4:	701a      	strb	r2, [r3, #0]
 80049d6:	e0d1      	b.n	8004b7c <UART_SetConfig+0x390>
 80049d8:	231b      	movs	r3, #27
 80049da:	2220      	movs	r2, #32
 80049dc:	189b      	adds	r3, r3, r2
 80049de:	19db      	adds	r3, r3, r7
 80049e0:	2210      	movs	r2, #16
 80049e2:	701a      	strb	r2, [r3, #0]
 80049e4:	e0ca      	b.n	8004b7c <UART_SetConfig+0x390>
 80049e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a57      	ldr	r2, [pc, #348]	@ (8004b48 <UART_SetConfig+0x35c>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d106      	bne.n	80049fe <UART_SetConfig+0x212>
 80049f0:	231b      	movs	r3, #27
 80049f2:	2220      	movs	r2, #32
 80049f4:	189b      	adds	r3, r3, r2
 80049f6:	19db      	adds	r3, r3, r7
 80049f8:	2200      	movs	r2, #0
 80049fa:	701a      	strb	r2, [r3, #0]
 80049fc:	e0be      	b.n	8004b7c <UART_SetConfig+0x390>
 80049fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a52      	ldr	r2, [pc, #328]	@ (8004b4c <UART_SetConfig+0x360>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d106      	bne.n	8004a16 <UART_SetConfig+0x22a>
 8004a08:	231b      	movs	r3, #27
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	189b      	adds	r3, r3, r2
 8004a0e:	19db      	adds	r3, r3, r7
 8004a10:	2200      	movs	r2, #0
 8004a12:	701a      	strb	r2, [r3, #0]
 8004a14:	e0b2      	b.n	8004b7c <UART_SetConfig+0x390>
 8004a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a4d      	ldr	r2, [pc, #308]	@ (8004b50 <UART_SetConfig+0x364>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d106      	bne.n	8004a2e <UART_SetConfig+0x242>
 8004a20:	231b      	movs	r3, #27
 8004a22:	2220      	movs	r2, #32
 8004a24:	189b      	adds	r3, r3, r2
 8004a26:	19db      	adds	r3, r3, r7
 8004a28:	2200      	movs	r2, #0
 8004a2a:	701a      	strb	r2, [r3, #0]
 8004a2c:	e0a6      	b.n	8004b7c <UART_SetConfig+0x390>
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a3e      	ldr	r2, [pc, #248]	@ (8004b2c <UART_SetConfig+0x340>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d13e      	bne.n	8004ab6 <UART_SetConfig+0x2ca>
 8004a38:	4b40      	ldr	r3, [pc, #256]	@ (8004b3c <UART_SetConfig+0x350>)
 8004a3a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004a3c:	23c0      	movs	r3, #192	@ 0xc0
 8004a3e:	011b      	lsls	r3, r3, #4
 8004a40:	4013      	ands	r3, r2
 8004a42:	22c0      	movs	r2, #192	@ 0xc0
 8004a44:	0112      	lsls	r2, r2, #4
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d027      	beq.n	8004a9a <UART_SetConfig+0x2ae>
 8004a4a:	22c0      	movs	r2, #192	@ 0xc0
 8004a4c:	0112      	lsls	r2, r2, #4
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d82a      	bhi.n	8004aa8 <UART_SetConfig+0x2bc>
 8004a52:	2280      	movs	r2, #128	@ 0x80
 8004a54:	0112      	lsls	r2, r2, #4
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d011      	beq.n	8004a7e <UART_SetConfig+0x292>
 8004a5a:	2280      	movs	r2, #128	@ 0x80
 8004a5c:	0112      	lsls	r2, r2, #4
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d822      	bhi.n	8004aa8 <UART_SetConfig+0x2bc>
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d004      	beq.n	8004a70 <UART_SetConfig+0x284>
 8004a66:	2280      	movs	r2, #128	@ 0x80
 8004a68:	00d2      	lsls	r2, r2, #3
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d00e      	beq.n	8004a8c <UART_SetConfig+0x2a0>
 8004a6e:	e01b      	b.n	8004aa8 <UART_SetConfig+0x2bc>
 8004a70:	231b      	movs	r3, #27
 8004a72:	2220      	movs	r2, #32
 8004a74:	189b      	adds	r3, r3, r2
 8004a76:	19db      	adds	r3, r3, r7
 8004a78:	2200      	movs	r2, #0
 8004a7a:	701a      	strb	r2, [r3, #0]
 8004a7c:	e07e      	b.n	8004b7c <UART_SetConfig+0x390>
 8004a7e:	231b      	movs	r3, #27
 8004a80:	2220      	movs	r2, #32
 8004a82:	189b      	adds	r3, r3, r2
 8004a84:	19db      	adds	r3, r3, r7
 8004a86:	2202      	movs	r2, #2
 8004a88:	701a      	strb	r2, [r3, #0]
 8004a8a:	e077      	b.n	8004b7c <UART_SetConfig+0x390>
 8004a8c:	231b      	movs	r3, #27
 8004a8e:	2220      	movs	r2, #32
 8004a90:	189b      	adds	r3, r3, r2
 8004a92:	19db      	adds	r3, r3, r7
 8004a94:	2204      	movs	r2, #4
 8004a96:	701a      	strb	r2, [r3, #0]
 8004a98:	e070      	b.n	8004b7c <UART_SetConfig+0x390>
 8004a9a:	231b      	movs	r3, #27
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	189b      	adds	r3, r3, r2
 8004aa0:	19db      	adds	r3, r3, r7
 8004aa2:	2208      	movs	r2, #8
 8004aa4:	701a      	strb	r2, [r3, #0]
 8004aa6:	e069      	b.n	8004b7c <UART_SetConfig+0x390>
 8004aa8:	231b      	movs	r3, #27
 8004aaa:	2220      	movs	r2, #32
 8004aac:	189b      	adds	r3, r3, r2
 8004aae:	19db      	adds	r3, r3, r7
 8004ab0:	2210      	movs	r2, #16
 8004ab2:	701a      	strb	r2, [r3, #0]
 8004ab4:	e062      	b.n	8004b7c <UART_SetConfig+0x390>
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a1d      	ldr	r2, [pc, #116]	@ (8004b30 <UART_SetConfig+0x344>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d157      	bne.n	8004b70 <UART_SetConfig+0x384>
 8004ac0:	4b1e      	ldr	r3, [pc, #120]	@ (8004b3c <UART_SetConfig+0x350>)
 8004ac2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ac4:	23c0      	movs	r3, #192	@ 0xc0
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4013      	ands	r3, r2
 8004aca:	22c0      	movs	r2, #192	@ 0xc0
 8004acc:	0092      	lsls	r2, r2, #2
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d040      	beq.n	8004b54 <UART_SetConfig+0x368>
 8004ad2:	22c0      	movs	r2, #192	@ 0xc0
 8004ad4:	0092      	lsls	r2, r2, #2
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d843      	bhi.n	8004b62 <UART_SetConfig+0x376>
 8004ada:	2280      	movs	r2, #128	@ 0x80
 8004adc:	0092      	lsls	r2, r2, #2
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d011      	beq.n	8004b06 <UART_SetConfig+0x31a>
 8004ae2:	2280      	movs	r2, #128	@ 0x80
 8004ae4:	0092      	lsls	r2, r2, #2
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d83b      	bhi.n	8004b62 <UART_SetConfig+0x376>
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d004      	beq.n	8004af8 <UART_SetConfig+0x30c>
 8004aee:	2280      	movs	r2, #128	@ 0x80
 8004af0:	0052      	lsls	r2, r2, #1
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d00e      	beq.n	8004b14 <UART_SetConfig+0x328>
 8004af6:	e034      	b.n	8004b62 <UART_SetConfig+0x376>
 8004af8:	231b      	movs	r3, #27
 8004afa:	2220      	movs	r2, #32
 8004afc:	189b      	adds	r3, r3, r2
 8004afe:	19db      	adds	r3, r3, r7
 8004b00:	2200      	movs	r2, #0
 8004b02:	701a      	strb	r2, [r3, #0]
 8004b04:	e03a      	b.n	8004b7c <UART_SetConfig+0x390>
 8004b06:	231b      	movs	r3, #27
 8004b08:	2220      	movs	r2, #32
 8004b0a:	189b      	adds	r3, r3, r2
 8004b0c:	19db      	adds	r3, r3, r7
 8004b0e:	2202      	movs	r2, #2
 8004b10:	701a      	strb	r2, [r3, #0]
 8004b12:	e033      	b.n	8004b7c <UART_SetConfig+0x390>
 8004b14:	231b      	movs	r3, #27
 8004b16:	2220      	movs	r2, #32
 8004b18:	189b      	adds	r3, r3, r2
 8004b1a:	19db      	adds	r3, r3, r7
 8004b1c:	2204      	movs	r2, #4
 8004b1e:	701a      	strb	r2, [r3, #0]
 8004b20:	e02c      	b.n	8004b7c <UART_SetConfig+0x390>
 8004b22:	46c0      	nop			@ (mov r8, r8)
 8004b24:	cfff69f3 	.word	0xcfff69f3
 8004b28:	ffffcfff 	.word	0xffffcfff
 8004b2c:	40008000 	.word	0x40008000
 8004b30:	40008400 	.word	0x40008400
 8004b34:	11fff4ff 	.word	0x11fff4ff
 8004b38:	40013800 	.word	0x40013800
 8004b3c:	40021000 	.word	0x40021000
 8004b40:	40004400 	.word	0x40004400
 8004b44:	40004800 	.word	0x40004800
 8004b48:	40004c00 	.word	0x40004c00
 8004b4c:	40005000 	.word	0x40005000
 8004b50:	40013c00 	.word	0x40013c00
 8004b54:	231b      	movs	r3, #27
 8004b56:	2220      	movs	r2, #32
 8004b58:	189b      	adds	r3, r3, r2
 8004b5a:	19db      	adds	r3, r3, r7
 8004b5c:	2208      	movs	r2, #8
 8004b5e:	701a      	strb	r2, [r3, #0]
 8004b60:	e00c      	b.n	8004b7c <UART_SetConfig+0x390>
 8004b62:	231b      	movs	r3, #27
 8004b64:	2220      	movs	r2, #32
 8004b66:	189b      	adds	r3, r3, r2
 8004b68:	19db      	adds	r3, r3, r7
 8004b6a:	2210      	movs	r2, #16
 8004b6c:	701a      	strb	r2, [r3, #0]
 8004b6e:	e005      	b.n	8004b7c <UART_SetConfig+0x390>
 8004b70:	231b      	movs	r3, #27
 8004b72:	2220      	movs	r2, #32
 8004b74:	189b      	adds	r3, r3, r2
 8004b76:	19db      	adds	r3, r3, r7
 8004b78:	2210      	movs	r2, #16
 8004b7a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4ac1      	ldr	r2, [pc, #772]	@ (8004e88 <UART_SetConfig+0x69c>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d005      	beq.n	8004b92 <UART_SetConfig+0x3a6>
 8004b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4ac0      	ldr	r2, [pc, #768]	@ (8004e8c <UART_SetConfig+0x6a0>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d000      	beq.n	8004b92 <UART_SetConfig+0x3a6>
 8004b90:	e093      	b.n	8004cba <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b92:	231b      	movs	r3, #27
 8004b94:	2220      	movs	r2, #32
 8004b96:	189b      	adds	r3, r3, r2
 8004b98:	19db      	adds	r3, r3, r7
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	2b08      	cmp	r3, #8
 8004b9e:	d015      	beq.n	8004bcc <UART_SetConfig+0x3e0>
 8004ba0:	dc18      	bgt.n	8004bd4 <UART_SetConfig+0x3e8>
 8004ba2:	2b04      	cmp	r3, #4
 8004ba4:	d00d      	beq.n	8004bc2 <UART_SetConfig+0x3d6>
 8004ba6:	dc15      	bgt.n	8004bd4 <UART_SetConfig+0x3e8>
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d002      	beq.n	8004bb2 <UART_SetConfig+0x3c6>
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d005      	beq.n	8004bbc <UART_SetConfig+0x3d0>
 8004bb0:	e010      	b.n	8004bd4 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bb2:	f7ff fabb 	bl	800412c <HAL_RCC_GetPCLK1Freq>
 8004bb6:	0003      	movs	r3, r0
 8004bb8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004bba:	e014      	b.n	8004be6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bbc:	4bb4      	ldr	r3, [pc, #720]	@ (8004e90 <UART_SetConfig+0x6a4>)
 8004bbe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004bc0:	e011      	b.n	8004be6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bc2:	f7ff fa27 	bl	8004014 <HAL_RCC_GetSysClockFreq>
 8004bc6:	0003      	movs	r3, r0
 8004bc8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004bca:	e00c      	b.n	8004be6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bcc:	2380      	movs	r3, #128	@ 0x80
 8004bce:	021b      	lsls	r3, r3, #8
 8004bd0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004bd2:	e008      	b.n	8004be6 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004bd8:	231a      	movs	r3, #26
 8004bda:	2220      	movs	r2, #32
 8004bdc:	189b      	adds	r3, r3, r2
 8004bde:	19db      	adds	r3, r3, r7
 8004be0:	2201      	movs	r2, #1
 8004be2:	701a      	strb	r2, [r3, #0]
        break;
 8004be4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004be6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d100      	bne.n	8004bee <UART_SetConfig+0x402>
 8004bec:	e135      	b.n	8004e5a <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004bf2:	4ba8      	ldr	r3, [pc, #672]	@ (8004e94 <UART_SetConfig+0x6a8>)
 8004bf4:	0052      	lsls	r2, r2, #1
 8004bf6:	5ad3      	ldrh	r3, [r2, r3]
 8004bf8:	0019      	movs	r1, r3
 8004bfa:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004bfc:	f7fb fa9e 	bl	800013c <__udivsi3>
 8004c00:	0003      	movs	r3, r0
 8004c02:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	0013      	movs	r3, r2
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	189b      	adds	r3, r3, r2
 8004c0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d305      	bcc.n	8004c20 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d906      	bls.n	8004c2e <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8004c20:	231a      	movs	r3, #26
 8004c22:	2220      	movs	r2, #32
 8004c24:	189b      	adds	r3, r3, r2
 8004c26:	19db      	adds	r3, r3, r7
 8004c28:	2201      	movs	r2, #1
 8004c2a:	701a      	strb	r2, [r3, #0]
 8004c2c:	e044      	b.n	8004cb8 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c30:	61bb      	str	r3, [r7, #24]
 8004c32:	2300      	movs	r3, #0
 8004c34:	61fb      	str	r3, [r7, #28]
 8004c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c3a:	4b96      	ldr	r3, [pc, #600]	@ (8004e94 <UART_SetConfig+0x6a8>)
 8004c3c:	0052      	lsls	r2, r2, #1
 8004c3e:	5ad3      	ldrh	r3, [r2, r3]
 8004c40:	613b      	str	r3, [r7, #16]
 8004c42:	2300      	movs	r3, #0
 8004c44:	617b      	str	r3, [r7, #20]
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	69b8      	ldr	r0, [r7, #24]
 8004c4c:	69f9      	ldr	r1, [r7, #28]
 8004c4e:	f7fb fc29 	bl	80004a4 <__aeabi_uldivmod>
 8004c52:	0002      	movs	r2, r0
 8004c54:	000b      	movs	r3, r1
 8004c56:	0e11      	lsrs	r1, r2, #24
 8004c58:	021d      	lsls	r5, r3, #8
 8004c5a:	430d      	orrs	r5, r1
 8004c5c:	0214      	lsls	r4, r2, #8
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	085b      	lsrs	r3, r3, #1
 8004c64:	60bb      	str	r3, [r7, #8]
 8004c66:	2300      	movs	r3, #0
 8004c68:	60fb      	str	r3, [r7, #12]
 8004c6a:	68b8      	ldr	r0, [r7, #8]
 8004c6c:	68f9      	ldr	r1, [r7, #12]
 8004c6e:	1900      	adds	r0, r0, r4
 8004c70:	4169      	adcs	r1, r5
 8004c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	603b      	str	r3, [r7, #0]
 8004c78:	2300      	movs	r3, #0
 8004c7a:	607b      	str	r3, [r7, #4]
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f7fb fc10 	bl	80004a4 <__aeabi_uldivmod>
 8004c84:	0002      	movs	r2, r0
 8004c86:	000b      	movs	r3, r1
 8004c88:	0013      	movs	r3, r2
 8004c8a:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c8e:	23c0      	movs	r3, #192	@ 0xc0
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d309      	bcc.n	8004caa <UART_SetConfig+0x4be>
 8004c96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c98:	2380      	movs	r3, #128	@ 0x80
 8004c9a:	035b      	lsls	r3, r3, #13
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d204      	bcs.n	8004caa <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ca6:	60da      	str	r2, [r3, #12]
 8004ca8:	e006      	b.n	8004cb8 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8004caa:	231a      	movs	r3, #26
 8004cac:	2220      	movs	r2, #32
 8004cae:	189b      	adds	r3, r3, r2
 8004cb0:	19db      	adds	r3, r3, r7
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8004cb6:	e0d0      	b.n	8004e5a <UART_SetConfig+0x66e>
 8004cb8:	e0cf      	b.n	8004e5a <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cbc:	69da      	ldr	r2, [r3, #28]
 8004cbe:	2380      	movs	r3, #128	@ 0x80
 8004cc0:	021b      	lsls	r3, r3, #8
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d000      	beq.n	8004cc8 <UART_SetConfig+0x4dc>
 8004cc6:	e070      	b.n	8004daa <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8004cc8:	231b      	movs	r3, #27
 8004cca:	2220      	movs	r2, #32
 8004ccc:	189b      	adds	r3, r3, r2
 8004cce:	19db      	adds	r3, r3, r7
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	2b08      	cmp	r3, #8
 8004cd4:	d015      	beq.n	8004d02 <UART_SetConfig+0x516>
 8004cd6:	dc18      	bgt.n	8004d0a <UART_SetConfig+0x51e>
 8004cd8:	2b04      	cmp	r3, #4
 8004cda:	d00d      	beq.n	8004cf8 <UART_SetConfig+0x50c>
 8004cdc:	dc15      	bgt.n	8004d0a <UART_SetConfig+0x51e>
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d002      	beq.n	8004ce8 <UART_SetConfig+0x4fc>
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d005      	beq.n	8004cf2 <UART_SetConfig+0x506>
 8004ce6:	e010      	b.n	8004d0a <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ce8:	f7ff fa20 	bl	800412c <HAL_RCC_GetPCLK1Freq>
 8004cec:	0003      	movs	r3, r0
 8004cee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004cf0:	e014      	b.n	8004d1c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cf2:	4b67      	ldr	r3, [pc, #412]	@ (8004e90 <UART_SetConfig+0x6a4>)
 8004cf4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004cf6:	e011      	b.n	8004d1c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cf8:	f7ff f98c 	bl	8004014 <HAL_RCC_GetSysClockFreq>
 8004cfc:	0003      	movs	r3, r0
 8004cfe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d00:	e00c      	b.n	8004d1c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d02:	2380      	movs	r3, #128	@ 0x80
 8004d04:	021b      	lsls	r3, r3, #8
 8004d06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d08:	e008      	b.n	8004d1c <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004d0e:	231a      	movs	r3, #26
 8004d10:	2220      	movs	r2, #32
 8004d12:	189b      	adds	r3, r3, r2
 8004d14:	19db      	adds	r3, r3, r7
 8004d16:	2201      	movs	r2, #1
 8004d18:	701a      	strb	r2, [r3, #0]
        break;
 8004d1a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d100      	bne.n	8004d24 <UART_SetConfig+0x538>
 8004d22:	e09a      	b.n	8004e5a <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d28:	4b5a      	ldr	r3, [pc, #360]	@ (8004e94 <UART_SetConfig+0x6a8>)
 8004d2a:	0052      	lsls	r2, r2, #1
 8004d2c:	5ad3      	ldrh	r3, [r2, r3]
 8004d2e:	0019      	movs	r1, r3
 8004d30:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004d32:	f7fb fa03 	bl	800013c <__udivsi3>
 8004d36:	0003      	movs	r3, r0
 8004d38:	005a      	lsls	r2, r3, #1
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	085b      	lsrs	r3, r3, #1
 8004d40:	18d2      	adds	r2, r2, r3
 8004d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	0019      	movs	r1, r3
 8004d48:	0010      	movs	r0, r2
 8004d4a:	f7fb f9f7 	bl	800013c <__udivsi3>
 8004d4e:	0003      	movs	r3, r0
 8004d50:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d54:	2b0f      	cmp	r3, #15
 8004d56:	d921      	bls.n	8004d9c <UART_SetConfig+0x5b0>
 8004d58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d5a:	2380      	movs	r3, #128	@ 0x80
 8004d5c:	025b      	lsls	r3, r3, #9
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d21c      	bcs.n	8004d9c <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	200e      	movs	r0, #14
 8004d68:	2420      	movs	r4, #32
 8004d6a:	1903      	adds	r3, r0, r4
 8004d6c:	19db      	adds	r3, r3, r7
 8004d6e:	210f      	movs	r1, #15
 8004d70:	438a      	bics	r2, r1
 8004d72:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d76:	085b      	lsrs	r3, r3, #1
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	2207      	movs	r2, #7
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	b299      	uxth	r1, r3
 8004d80:	1903      	adds	r3, r0, r4
 8004d82:	19db      	adds	r3, r3, r7
 8004d84:	1902      	adds	r2, r0, r4
 8004d86:	19d2      	adds	r2, r2, r7
 8004d88:	8812      	ldrh	r2, [r2, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	1902      	adds	r2, r0, r4
 8004d94:	19d2      	adds	r2, r2, r7
 8004d96:	8812      	ldrh	r2, [r2, #0]
 8004d98:	60da      	str	r2, [r3, #12]
 8004d9a:	e05e      	b.n	8004e5a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8004d9c:	231a      	movs	r3, #26
 8004d9e:	2220      	movs	r2, #32
 8004da0:	189b      	adds	r3, r3, r2
 8004da2:	19db      	adds	r3, r3, r7
 8004da4:	2201      	movs	r2, #1
 8004da6:	701a      	strb	r2, [r3, #0]
 8004da8:	e057      	b.n	8004e5a <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004daa:	231b      	movs	r3, #27
 8004dac:	2220      	movs	r2, #32
 8004dae:	189b      	adds	r3, r3, r2
 8004db0:	19db      	adds	r3, r3, r7
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	d015      	beq.n	8004de4 <UART_SetConfig+0x5f8>
 8004db8:	dc18      	bgt.n	8004dec <UART_SetConfig+0x600>
 8004dba:	2b04      	cmp	r3, #4
 8004dbc:	d00d      	beq.n	8004dda <UART_SetConfig+0x5ee>
 8004dbe:	dc15      	bgt.n	8004dec <UART_SetConfig+0x600>
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d002      	beq.n	8004dca <UART_SetConfig+0x5de>
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d005      	beq.n	8004dd4 <UART_SetConfig+0x5e8>
 8004dc8:	e010      	b.n	8004dec <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dca:	f7ff f9af 	bl	800412c <HAL_RCC_GetPCLK1Freq>
 8004dce:	0003      	movs	r3, r0
 8004dd0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004dd2:	e014      	b.n	8004dfe <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dd4:	4b2e      	ldr	r3, [pc, #184]	@ (8004e90 <UART_SetConfig+0x6a4>)
 8004dd6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004dd8:	e011      	b.n	8004dfe <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dda:	f7ff f91b 	bl	8004014 <HAL_RCC_GetSysClockFreq>
 8004dde:	0003      	movs	r3, r0
 8004de0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004de2:	e00c      	b.n	8004dfe <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004de4:	2380      	movs	r3, #128	@ 0x80
 8004de6:	021b      	lsls	r3, r3, #8
 8004de8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004dea:	e008      	b.n	8004dfe <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004df0:	231a      	movs	r3, #26
 8004df2:	2220      	movs	r2, #32
 8004df4:	189b      	adds	r3, r3, r2
 8004df6:	19db      	adds	r3, r3, r7
 8004df8:	2201      	movs	r2, #1
 8004dfa:	701a      	strb	r2, [r3, #0]
        break;
 8004dfc:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d02a      	beq.n	8004e5a <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e08:	4b22      	ldr	r3, [pc, #136]	@ (8004e94 <UART_SetConfig+0x6a8>)
 8004e0a:	0052      	lsls	r2, r2, #1
 8004e0c:	5ad3      	ldrh	r3, [r2, r3]
 8004e0e:	0019      	movs	r1, r3
 8004e10:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004e12:	f7fb f993 	bl	800013c <__udivsi3>
 8004e16:	0003      	movs	r3, r0
 8004e18:	001a      	movs	r2, r3
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	085b      	lsrs	r3, r3, #1
 8004e20:	18d2      	adds	r2, r2, r3
 8004e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	0019      	movs	r1, r3
 8004e28:	0010      	movs	r0, r2
 8004e2a:	f7fb f987 	bl	800013c <__udivsi3>
 8004e2e:	0003      	movs	r3, r0
 8004e30:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e34:	2b0f      	cmp	r3, #15
 8004e36:	d90a      	bls.n	8004e4e <UART_SetConfig+0x662>
 8004e38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e3a:	2380      	movs	r3, #128	@ 0x80
 8004e3c:	025b      	lsls	r3, r3, #9
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d205      	bcs.n	8004e4e <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	60da      	str	r2, [r3, #12]
 8004e4c:	e005      	b.n	8004e5a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8004e4e:	231a      	movs	r3, #26
 8004e50:	2220      	movs	r2, #32
 8004e52:	189b      	adds	r3, r3, r2
 8004e54:	19db      	adds	r3, r3, r7
 8004e56:	2201      	movs	r2, #1
 8004e58:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5c:	226a      	movs	r2, #106	@ 0x6a
 8004e5e:	2101      	movs	r1, #1
 8004e60:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e64:	2268      	movs	r2, #104	@ 0x68
 8004e66:	2101      	movs	r1, #1
 8004e68:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e72:	2200      	movs	r2, #0
 8004e74:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004e76:	231a      	movs	r3, #26
 8004e78:	2220      	movs	r2, #32
 8004e7a:	189b      	adds	r3, r3, r2
 8004e7c:	19db      	adds	r3, r3, r7
 8004e7e:	781b      	ldrb	r3, [r3, #0]
}
 8004e80:	0018      	movs	r0, r3
 8004e82:	46bd      	mov	sp, r7
 8004e84:	b010      	add	sp, #64	@ 0x40
 8004e86:	bdb0      	pop	{r4, r5, r7, pc}
 8004e88:	40008000 	.word	0x40008000
 8004e8c:	40008400 	.word	0x40008400
 8004e90:	00f42400 	.word	0x00f42400
 8004e94:	08008038 	.word	0x08008038

08004e98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea4:	2208      	movs	r2, #8
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	d00b      	beq.n	8004ec2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	4a4a      	ldr	r2, [pc, #296]	@ (8004fdc <UART_AdvFeatureConfig+0x144>)
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	0019      	movs	r1, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	4013      	ands	r3, r2
 8004eca:	d00b      	beq.n	8004ee4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	4a43      	ldr	r2, [pc, #268]	@ (8004fe0 <UART_AdvFeatureConfig+0x148>)
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	0019      	movs	r1, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee8:	2202      	movs	r2, #2
 8004eea:	4013      	ands	r3, r2
 8004eec:	d00b      	beq.n	8004f06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	4a3b      	ldr	r2, [pc, #236]	@ (8004fe4 <UART_AdvFeatureConfig+0x14c>)
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	0019      	movs	r1, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f0a:	2204      	movs	r2, #4
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	d00b      	beq.n	8004f28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	4a34      	ldr	r2, [pc, #208]	@ (8004fe8 <UART_AdvFeatureConfig+0x150>)
 8004f18:	4013      	ands	r3, r2
 8004f1a:	0019      	movs	r1, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f2c:	2210      	movs	r2, #16
 8004f2e:	4013      	ands	r3, r2
 8004f30:	d00b      	beq.n	8004f4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	4a2c      	ldr	r2, [pc, #176]	@ (8004fec <UART_AdvFeatureConfig+0x154>)
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	0019      	movs	r1, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f4e:	2220      	movs	r2, #32
 8004f50:	4013      	ands	r3, r2
 8004f52:	d00b      	beq.n	8004f6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	4a25      	ldr	r2, [pc, #148]	@ (8004ff0 <UART_AdvFeatureConfig+0x158>)
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	0019      	movs	r1, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f70:	2240      	movs	r2, #64	@ 0x40
 8004f72:	4013      	ands	r3, r2
 8004f74:	d01d      	beq.n	8004fb2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ff4 <UART_AdvFeatureConfig+0x15c>)
 8004f7e:	4013      	ands	r3, r2
 8004f80:	0019      	movs	r1, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f92:	2380      	movs	r3, #128	@ 0x80
 8004f94:	035b      	lsls	r3, r3, #13
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d10b      	bne.n	8004fb2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	4a15      	ldr	r2, [pc, #84]	@ (8004ff8 <UART_AdvFeatureConfig+0x160>)
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	0019      	movs	r1, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb6:	2280      	movs	r2, #128	@ 0x80
 8004fb8:	4013      	ands	r3, r2
 8004fba:	d00b      	beq.n	8004fd4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	4a0e      	ldr	r2, [pc, #56]	@ (8004ffc <UART_AdvFeatureConfig+0x164>)
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	0019      	movs	r1, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	605a      	str	r2, [r3, #4]
  }
}
 8004fd4:	46c0      	nop			@ (mov r8, r8)
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	b002      	add	sp, #8
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	ffff7fff 	.word	0xffff7fff
 8004fe0:	fffdffff 	.word	0xfffdffff
 8004fe4:	fffeffff 	.word	0xfffeffff
 8004fe8:	fffbffff 	.word	0xfffbffff
 8004fec:	ffffefff 	.word	0xffffefff
 8004ff0:	ffffdfff 	.word	0xffffdfff
 8004ff4:	ffefffff 	.word	0xffefffff
 8004ff8:	ff9fffff 	.word	0xff9fffff
 8004ffc:	fff7ffff 	.word	0xfff7ffff

08005000 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b092      	sub	sp, #72	@ 0x48
 8005004:	af02      	add	r7, sp, #8
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2290      	movs	r2, #144	@ 0x90
 800500c:	2100      	movs	r1, #0
 800500e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005010:	f7fd ffb0 	bl	8002f74 <HAL_GetTick>
 8005014:	0003      	movs	r3, r0
 8005016:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2208      	movs	r2, #8
 8005020:	4013      	ands	r3, r2
 8005022:	2b08      	cmp	r3, #8
 8005024:	d12d      	bne.n	8005082 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005028:	2280      	movs	r2, #128	@ 0x80
 800502a:	0391      	lsls	r1, r2, #14
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	4a47      	ldr	r2, [pc, #284]	@ (800514c <UART_CheckIdleState+0x14c>)
 8005030:	9200      	str	r2, [sp, #0]
 8005032:	2200      	movs	r2, #0
 8005034:	f000 f88e 	bl	8005154 <UART_WaitOnFlagUntilTimeout>
 8005038:	1e03      	subs	r3, r0, #0
 800503a:	d022      	beq.n	8005082 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800503c:	f3ef 8310 	mrs	r3, PRIMASK
 8005040:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005044:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005046:	2301      	movs	r3, #1
 8005048:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800504a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800504c:	f383 8810 	msr	PRIMASK, r3
}
 8005050:	46c0      	nop			@ (mov r8, r8)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2180      	movs	r1, #128	@ 0x80
 800505e:	438a      	bics	r2, r1
 8005060:	601a      	str	r2, [r3, #0]
 8005062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005064:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005068:	f383 8810 	msr	PRIMASK, r3
}
 800506c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2288      	movs	r2, #136	@ 0x88
 8005072:	2120      	movs	r1, #32
 8005074:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2284      	movs	r2, #132	@ 0x84
 800507a:	2100      	movs	r1, #0
 800507c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e060      	b.n	8005144 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2204      	movs	r2, #4
 800508a:	4013      	ands	r3, r2
 800508c:	2b04      	cmp	r3, #4
 800508e:	d146      	bne.n	800511e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005092:	2280      	movs	r2, #128	@ 0x80
 8005094:	03d1      	lsls	r1, r2, #15
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	4a2c      	ldr	r2, [pc, #176]	@ (800514c <UART_CheckIdleState+0x14c>)
 800509a:	9200      	str	r2, [sp, #0]
 800509c:	2200      	movs	r2, #0
 800509e:	f000 f859 	bl	8005154 <UART_WaitOnFlagUntilTimeout>
 80050a2:	1e03      	subs	r3, r0, #0
 80050a4:	d03b      	beq.n	800511e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050a6:	f3ef 8310 	mrs	r3, PRIMASK
 80050aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80050ac:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80050b0:	2301      	movs	r3, #1
 80050b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	f383 8810 	msr	PRIMASK, r3
}
 80050ba:	46c0      	nop			@ (mov r8, r8)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4922      	ldr	r1, [pc, #136]	@ (8005150 <UART_CheckIdleState+0x150>)
 80050c8:	400a      	ands	r2, r1
 80050ca:	601a      	str	r2, [r3, #0]
 80050cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f383 8810 	msr	PRIMASK, r3
}
 80050d6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050d8:	f3ef 8310 	mrs	r3, PRIMASK
 80050dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80050de:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80050e2:	2301      	movs	r3, #1
 80050e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	f383 8810 	msr	PRIMASK, r3
}
 80050ec:	46c0      	nop			@ (mov r8, r8)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2101      	movs	r1, #1
 80050fa:	438a      	bics	r2, r1
 80050fc:	609a      	str	r2, [r3, #8]
 80050fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005100:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005102:	6a3b      	ldr	r3, [r7, #32]
 8005104:	f383 8810 	msr	PRIMASK, r3
}
 8005108:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	228c      	movs	r2, #140	@ 0x8c
 800510e:	2120      	movs	r1, #32
 8005110:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2284      	movs	r2, #132	@ 0x84
 8005116:	2100      	movs	r1, #0
 8005118:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e012      	b.n	8005144 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2288      	movs	r2, #136	@ 0x88
 8005122:	2120      	movs	r1, #32
 8005124:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	228c      	movs	r2, #140	@ 0x8c
 800512a:	2120      	movs	r1, #32
 800512c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2284      	movs	r2, #132	@ 0x84
 800513e:	2100      	movs	r1, #0
 8005140:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	0018      	movs	r0, r3
 8005146:	46bd      	mov	sp, r7
 8005148:	b010      	add	sp, #64	@ 0x40
 800514a:	bd80      	pop	{r7, pc}
 800514c:	01ffffff 	.word	0x01ffffff
 8005150:	fffffedf 	.word	0xfffffedf

08005154 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	603b      	str	r3, [r7, #0]
 8005160:	1dfb      	adds	r3, r7, #7
 8005162:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005164:	e051      	b.n	800520a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	3301      	adds	r3, #1
 800516a:	d04e      	beq.n	800520a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800516c:	f7fd ff02 	bl	8002f74 <HAL_GetTick>
 8005170:	0002      	movs	r2, r0
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	69ba      	ldr	r2, [r7, #24]
 8005178:	429a      	cmp	r2, r3
 800517a:	d302      	bcc.n	8005182 <UART_WaitOnFlagUntilTimeout+0x2e>
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d101      	bne.n	8005186 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e051      	b.n	800522a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2204      	movs	r2, #4
 800518e:	4013      	ands	r3, r2
 8005190:	d03b      	beq.n	800520a <UART_WaitOnFlagUntilTimeout+0xb6>
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2b80      	cmp	r3, #128	@ 0x80
 8005196:	d038      	beq.n	800520a <UART_WaitOnFlagUntilTimeout+0xb6>
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2b40      	cmp	r3, #64	@ 0x40
 800519c:	d035      	beq.n	800520a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	69db      	ldr	r3, [r3, #28]
 80051a4:	2208      	movs	r2, #8
 80051a6:	4013      	ands	r3, r2
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	d111      	bne.n	80051d0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2208      	movs	r2, #8
 80051b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	0018      	movs	r0, r3
 80051b8:	f000 f83c 	bl	8005234 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2290      	movs	r2, #144	@ 0x90
 80051c0:	2108      	movs	r1, #8
 80051c2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2284      	movs	r2, #132	@ 0x84
 80051c8:	2100      	movs	r1, #0
 80051ca:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e02c      	b.n	800522a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	69da      	ldr	r2, [r3, #28]
 80051d6:	2380      	movs	r3, #128	@ 0x80
 80051d8:	011b      	lsls	r3, r3, #4
 80051da:	401a      	ands	r2, r3
 80051dc:	2380      	movs	r3, #128	@ 0x80
 80051de:	011b      	lsls	r3, r3, #4
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d112      	bne.n	800520a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2280      	movs	r2, #128	@ 0x80
 80051ea:	0112      	lsls	r2, r2, #4
 80051ec:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	0018      	movs	r0, r3
 80051f2:	f000 f81f 	bl	8005234 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2290      	movs	r2, #144	@ 0x90
 80051fa:	2120      	movs	r1, #32
 80051fc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2284      	movs	r2, #132	@ 0x84
 8005202:	2100      	movs	r1, #0
 8005204:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e00f      	b.n	800522a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	69db      	ldr	r3, [r3, #28]
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	4013      	ands	r3, r2
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	425a      	negs	r2, r3
 800521a:	4153      	adcs	r3, r2
 800521c:	b2db      	uxtb	r3, r3
 800521e:	001a      	movs	r2, r3
 8005220:	1dfb      	adds	r3, r7, #7
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	429a      	cmp	r2, r3
 8005226:	d09e      	beq.n	8005166 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	0018      	movs	r0, r3
 800522c:	46bd      	mov	sp, r7
 800522e:	b004      	add	sp, #16
 8005230:	bd80      	pop	{r7, pc}
	...

08005234 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b08e      	sub	sp, #56	@ 0x38
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800523c:	f3ef 8310 	mrs	r3, PRIMASK
 8005240:	617b      	str	r3, [r7, #20]
  return(result);
 8005242:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005244:	637b      	str	r3, [r7, #52]	@ 0x34
 8005246:	2301      	movs	r3, #1
 8005248:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	f383 8810 	msr	PRIMASK, r3
}
 8005250:	46c0      	nop			@ (mov r8, r8)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4926      	ldr	r1, [pc, #152]	@ (80052f8 <UART_EndRxTransfer+0xc4>)
 800525e:	400a      	ands	r2, r1
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005264:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	f383 8810 	msr	PRIMASK, r3
}
 800526c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800526e:	f3ef 8310 	mrs	r3, PRIMASK
 8005272:	623b      	str	r3, [r7, #32]
  return(result);
 8005274:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005276:	633b      	str	r3, [r7, #48]	@ 0x30
 8005278:	2301      	movs	r3, #1
 800527a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800527c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527e:	f383 8810 	msr	PRIMASK, r3
}
 8005282:	46c0      	nop			@ (mov r8, r8)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689a      	ldr	r2, [r3, #8]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	491b      	ldr	r1, [pc, #108]	@ (80052fc <UART_EndRxTransfer+0xc8>)
 8005290:	400a      	ands	r2, r1
 8005292:	609a      	str	r2, [r3, #8]
 8005294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005296:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800529a:	f383 8810 	msr	PRIMASK, r3
}
 800529e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d118      	bne.n	80052da <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052a8:	f3ef 8310 	mrs	r3, PRIMASK
 80052ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80052ae:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052b2:	2301      	movs	r3, #1
 80052b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f383 8810 	msr	PRIMASK, r3
}
 80052bc:	46c0      	nop			@ (mov r8, r8)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2110      	movs	r1, #16
 80052ca:	438a      	bics	r2, r1
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	f383 8810 	msr	PRIMASK, r3
}
 80052d8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	228c      	movs	r2, #140	@ 0x8c
 80052de:	2120      	movs	r1, #32
 80052e0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80052ee:	46c0      	nop			@ (mov r8, r8)
 80052f0:	46bd      	mov	sp, r7
 80052f2:	b00e      	add	sp, #56	@ 0x38
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	46c0      	nop			@ (mov r8, r8)
 80052f8:	fffffedf 	.word	0xfffffedf
 80052fc:	effffffe 	.word	0xeffffffe

08005300 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2284      	movs	r2, #132	@ 0x84
 800530c:	5c9b      	ldrb	r3, [r3, r2]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d101      	bne.n	8005316 <HAL_UARTEx_DisableFifoMode+0x16>
 8005312:	2302      	movs	r3, #2
 8005314:	e027      	b.n	8005366 <HAL_UARTEx_DisableFifoMode+0x66>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2284      	movs	r2, #132	@ 0x84
 800531a:	2101      	movs	r1, #1
 800531c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2288      	movs	r2, #136	@ 0x88
 8005322:	2124      	movs	r1, #36	@ 0x24
 8005324:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2101      	movs	r1, #1
 800533a:	438a      	bics	r2, r1
 800533c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	4a0b      	ldr	r2, [pc, #44]	@ (8005370 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005342:	4013      	ands	r3, r2
 8005344:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2288      	movs	r2, #136	@ 0x88
 8005358:	2120      	movs	r1, #32
 800535a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2284      	movs	r2, #132	@ 0x84
 8005360:	2100      	movs	r1, #0
 8005362:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	0018      	movs	r0, r3
 8005368:	46bd      	mov	sp, r7
 800536a:	b004      	add	sp, #16
 800536c:	bd80      	pop	{r7, pc}
 800536e:	46c0      	nop			@ (mov r8, r8)
 8005370:	dfffffff 	.word	0xdfffffff

08005374 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2284      	movs	r2, #132	@ 0x84
 8005382:	5c9b      	ldrb	r3, [r3, r2]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d101      	bne.n	800538c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005388:	2302      	movs	r3, #2
 800538a:	e02e      	b.n	80053ea <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2284      	movs	r2, #132	@ 0x84
 8005390:	2101      	movs	r1, #1
 8005392:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2288      	movs	r2, #136	@ 0x88
 8005398:	2124      	movs	r1, #36	@ 0x24
 800539a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2101      	movs	r1, #1
 80053b0:	438a      	bics	r2, r1
 80053b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	08d9      	lsrs	r1, r3, #3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	683a      	ldr	r2, [r7, #0]
 80053c4:	430a      	orrs	r2, r1
 80053c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	0018      	movs	r0, r3
 80053cc:	f000 f854 	bl	8005478 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2288      	movs	r2, #136	@ 0x88
 80053dc:	2120      	movs	r1, #32
 80053de:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2284      	movs	r2, #132	@ 0x84
 80053e4:	2100      	movs	r1, #0
 80053e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	0018      	movs	r0, r3
 80053ec:	46bd      	mov	sp, r7
 80053ee:	b004      	add	sp, #16
 80053f0:	bd80      	pop	{r7, pc}
	...

080053f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2284      	movs	r2, #132	@ 0x84
 8005402:	5c9b      	ldrb	r3, [r3, r2]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d101      	bne.n	800540c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005408:	2302      	movs	r3, #2
 800540a:	e02f      	b.n	800546c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2284      	movs	r2, #132	@ 0x84
 8005410:	2101      	movs	r1, #1
 8005412:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2288      	movs	r2, #136	@ 0x88
 8005418:	2124      	movs	r1, #36	@ 0x24
 800541a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2101      	movs	r1, #1
 8005430:	438a      	bics	r2, r1
 8005432:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	4a0e      	ldr	r2, [pc, #56]	@ (8005474 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800543c:	4013      	ands	r3, r2
 800543e:	0019      	movs	r1, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	0018      	movs	r0, r3
 800544e:	f000 f813 	bl	8005478 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2288      	movs	r2, #136	@ 0x88
 800545e:	2120      	movs	r1, #32
 8005460:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2284      	movs	r2, #132	@ 0x84
 8005466:	2100      	movs	r1, #0
 8005468:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	0018      	movs	r0, r3
 800546e:	46bd      	mov	sp, r7
 8005470:	b004      	add	sp, #16
 8005472:	bd80      	pop	{r7, pc}
 8005474:	f1ffffff 	.word	0xf1ffffff

08005478 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005484:	2b00      	cmp	r3, #0
 8005486:	d108      	bne.n	800549a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	226a      	movs	r2, #106	@ 0x6a
 800548c:	2101      	movs	r1, #1
 800548e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2268      	movs	r2, #104	@ 0x68
 8005494:	2101      	movs	r1, #1
 8005496:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005498:	e043      	b.n	8005522 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800549a:	260f      	movs	r6, #15
 800549c:	19bb      	adds	r3, r7, r6
 800549e:	2208      	movs	r2, #8
 80054a0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80054a2:	200e      	movs	r0, #14
 80054a4:	183b      	adds	r3, r7, r0
 80054a6:	2208      	movs	r2, #8
 80054a8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	0e5b      	lsrs	r3, r3, #25
 80054b2:	b2da      	uxtb	r2, r3
 80054b4:	240d      	movs	r4, #13
 80054b6:	193b      	adds	r3, r7, r4
 80054b8:	2107      	movs	r1, #7
 80054ba:	400a      	ands	r2, r1
 80054bc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	0f5b      	lsrs	r3, r3, #29
 80054c6:	b2da      	uxtb	r2, r3
 80054c8:	250c      	movs	r5, #12
 80054ca:	197b      	adds	r3, r7, r5
 80054cc:	2107      	movs	r1, #7
 80054ce:	400a      	ands	r2, r1
 80054d0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054d2:	183b      	adds	r3, r7, r0
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	197a      	adds	r2, r7, r5
 80054d8:	7812      	ldrb	r2, [r2, #0]
 80054da:	4914      	ldr	r1, [pc, #80]	@ (800552c <UARTEx_SetNbDataToProcess+0xb4>)
 80054dc:	5c8a      	ldrb	r2, [r1, r2]
 80054de:	435a      	muls	r2, r3
 80054e0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80054e2:	197b      	adds	r3, r7, r5
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	4a12      	ldr	r2, [pc, #72]	@ (8005530 <UARTEx_SetNbDataToProcess+0xb8>)
 80054e8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054ea:	0019      	movs	r1, r3
 80054ec:	f7fa feb0 	bl	8000250 <__divsi3>
 80054f0:	0003      	movs	r3, r0
 80054f2:	b299      	uxth	r1, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	226a      	movs	r2, #106	@ 0x6a
 80054f8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054fa:	19bb      	adds	r3, r7, r6
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	193a      	adds	r2, r7, r4
 8005500:	7812      	ldrb	r2, [r2, #0]
 8005502:	490a      	ldr	r1, [pc, #40]	@ (800552c <UARTEx_SetNbDataToProcess+0xb4>)
 8005504:	5c8a      	ldrb	r2, [r1, r2]
 8005506:	435a      	muls	r2, r3
 8005508:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800550a:	193b      	adds	r3, r7, r4
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	4a08      	ldr	r2, [pc, #32]	@ (8005530 <UARTEx_SetNbDataToProcess+0xb8>)
 8005510:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005512:	0019      	movs	r1, r3
 8005514:	f7fa fe9c 	bl	8000250 <__divsi3>
 8005518:	0003      	movs	r3, r0
 800551a:	b299      	uxth	r1, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2268      	movs	r2, #104	@ 0x68
 8005520:	5299      	strh	r1, [r3, r2]
}
 8005522:	46c0      	nop			@ (mov r8, r8)
 8005524:	46bd      	mov	sp, r7
 8005526:	b005      	add	sp, #20
 8005528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800552a:	46c0      	nop			@ (mov r8, r8)
 800552c:	08008050 	.word	0x08008050
 8005530:	08008058 	.word	0x08008058

08005534 <__cvt>:
 8005534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005536:	001f      	movs	r7, r3
 8005538:	2300      	movs	r3, #0
 800553a:	0016      	movs	r6, r2
 800553c:	b08b      	sub	sp, #44	@ 0x2c
 800553e:	429f      	cmp	r7, r3
 8005540:	da04      	bge.n	800554c <__cvt+0x18>
 8005542:	2180      	movs	r1, #128	@ 0x80
 8005544:	0609      	lsls	r1, r1, #24
 8005546:	187b      	adds	r3, r7, r1
 8005548:	001f      	movs	r7, r3
 800554a:	232d      	movs	r3, #45	@ 0x2d
 800554c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800554e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8005550:	7013      	strb	r3, [r2, #0]
 8005552:	2320      	movs	r3, #32
 8005554:	2203      	movs	r2, #3
 8005556:	439d      	bics	r5, r3
 8005558:	2d46      	cmp	r5, #70	@ 0x46
 800555a:	d007      	beq.n	800556c <__cvt+0x38>
 800555c:	002b      	movs	r3, r5
 800555e:	3b45      	subs	r3, #69	@ 0x45
 8005560:	4259      	negs	r1, r3
 8005562:	414b      	adcs	r3, r1
 8005564:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8005566:	3a01      	subs	r2, #1
 8005568:	18cb      	adds	r3, r1, r3
 800556a:	9310      	str	r3, [sp, #64]	@ 0x40
 800556c:	ab09      	add	r3, sp, #36	@ 0x24
 800556e:	9304      	str	r3, [sp, #16]
 8005570:	ab08      	add	r3, sp, #32
 8005572:	9303      	str	r3, [sp, #12]
 8005574:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005576:	9200      	str	r2, [sp, #0]
 8005578:	9302      	str	r3, [sp, #8]
 800557a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800557c:	0032      	movs	r2, r6
 800557e:	9301      	str	r3, [sp, #4]
 8005580:	003b      	movs	r3, r7
 8005582:	f000 fdc5 	bl	8006110 <_dtoa_r>
 8005586:	0004      	movs	r4, r0
 8005588:	2d47      	cmp	r5, #71	@ 0x47
 800558a:	d11b      	bne.n	80055c4 <__cvt+0x90>
 800558c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800558e:	07db      	lsls	r3, r3, #31
 8005590:	d511      	bpl.n	80055b6 <__cvt+0x82>
 8005592:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005594:	18c3      	adds	r3, r0, r3
 8005596:	9307      	str	r3, [sp, #28]
 8005598:	2200      	movs	r2, #0
 800559a:	2300      	movs	r3, #0
 800559c:	0030      	movs	r0, r6
 800559e:	0039      	movs	r1, r7
 80055a0:	f7fa ff52 	bl	8000448 <__aeabi_dcmpeq>
 80055a4:	2800      	cmp	r0, #0
 80055a6:	d001      	beq.n	80055ac <__cvt+0x78>
 80055a8:	9b07      	ldr	r3, [sp, #28]
 80055aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80055ac:	2230      	movs	r2, #48	@ 0x30
 80055ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055b0:	9907      	ldr	r1, [sp, #28]
 80055b2:	428b      	cmp	r3, r1
 80055b4:	d320      	bcc.n	80055f8 <__cvt+0xc4>
 80055b6:	0020      	movs	r0, r4
 80055b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055ba:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80055bc:	1b1b      	subs	r3, r3, r4
 80055be:	6013      	str	r3, [r2, #0]
 80055c0:	b00b      	add	sp, #44	@ 0x2c
 80055c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80055c6:	18c3      	adds	r3, r0, r3
 80055c8:	9307      	str	r3, [sp, #28]
 80055ca:	2d46      	cmp	r5, #70	@ 0x46
 80055cc:	d1e4      	bne.n	8005598 <__cvt+0x64>
 80055ce:	7803      	ldrb	r3, [r0, #0]
 80055d0:	2b30      	cmp	r3, #48	@ 0x30
 80055d2:	d10c      	bne.n	80055ee <__cvt+0xba>
 80055d4:	2200      	movs	r2, #0
 80055d6:	2300      	movs	r3, #0
 80055d8:	0030      	movs	r0, r6
 80055da:	0039      	movs	r1, r7
 80055dc:	f7fa ff34 	bl	8000448 <__aeabi_dcmpeq>
 80055e0:	2800      	cmp	r0, #0
 80055e2:	d104      	bne.n	80055ee <__cvt+0xba>
 80055e4:	2301      	movs	r3, #1
 80055e6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80055e8:	1a9b      	subs	r3, r3, r2
 80055ea:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80055ec:	6013      	str	r3, [r2, #0]
 80055ee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80055f0:	9a07      	ldr	r2, [sp, #28]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	18d3      	adds	r3, r2, r3
 80055f6:	e7ce      	b.n	8005596 <__cvt+0x62>
 80055f8:	1c59      	adds	r1, r3, #1
 80055fa:	9109      	str	r1, [sp, #36]	@ 0x24
 80055fc:	701a      	strb	r2, [r3, #0]
 80055fe:	e7d6      	b.n	80055ae <__cvt+0x7a>

08005600 <__exponent>:
 8005600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005602:	232b      	movs	r3, #43	@ 0x2b
 8005604:	b085      	sub	sp, #20
 8005606:	0005      	movs	r5, r0
 8005608:	1e0c      	subs	r4, r1, #0
 800560a:	7002      	strb	r2, [r0, #0]
 800560c:	da01      	bge.n	8005612 <__exponent+0x12>
 800560e:	424c      	negs	r4, r1
 8005610:	3302      	adds	r3, #2
 8005612:	706b      	strb	r3, [r5, #1]
 8005614:	2c09      	cmp	r4, #9
 8005616:	dd2c      	ble.n	8005672 <__exponent+0x72>
 8005618:	ab02      	add	r3, sp, #8
 800561a:	1dde      	adds	r6, r3, #7
 800561c:	0020      	movs	r0, r4
 800561e:	210a      	movs	r1, #10
 8005620:	f7fa fefc 	bl	800041c <__aeabi_idivmod>
 8005624:	0037      	movs	r7, r6
 8005626:	3130      	adds	r1, #48	@ 0x30
 8005628:	3e01      	subs	r6, #1
 800562a:	0020      	movs	r0, r4
 800562c:	7031      	strb	r1, [r6, #0]
 800562e:	210a      	movs	r1, #10
 8005630:	9401      	str	r4, [sp, #4]
 8005632:	f7fa fe0d 	bl	8000250 <__divsi3>
 8005636:	9b01      	ldr	r3, [sp, #4]
 8005638:	0004      	movs	r4, r0
 800563a:	2b63      	cmp	r3, #99	@ 0x63
 800563c:	dcee      	bgt.n	800561c <__exponent+0x1c>
 800563e:	1eba      	subs	r2, r7, #2
 8005640:	1ca8      	adds	r0, r5, #2
 8005642:	0001      	movs	r1, r0
 8005644:	0013      	movs	r3, r2
 8005646:	3430      	adds	r4, #48	@ 0x30
 8005648:	7014      	strb	r4, [r2, #0]
 800564a:	ac02      	add	r4, sp, #8
 800564c:	3407      	adds	r4, #7
 800564e:	429c      	cmp	r4, r3
 8005650:	d80a      	bhi.n	8005668 <__exponent+0x68>
 8005652:	2300      	movs	r3, #0
 8005654:	4294      	cmp	r4, r2
 8005656:	d303      	bcc.n	8005660 <__exponent+0x60>
 8005658:	3309      	adds	r3, #9
 800565a:	aa02      	add	r2, sp, #8
 800565c:	189b      	adds	r3, r3, r2
 800565e:	1bdb      	subs	r3, r3, r7
 8005660:	18c0      	adds	r0, r0, r3
 8005662:	1b40      	subs	r0, r0, r5
 8005664:	b005      	add	sp, #20
 8005666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005668:	781c      	ldrb	r4, [r3, #0]
 800566a:	3301      	adds	r3, #1
 800566c:	700c      	strb	r4, [r1, #0]
 800566e:	3101      	adds	r1, #1
 8005670:	e7eb      	b.n	800564a <__exponent+0x4a>
 8005672:	2330      	movs	r3, #48	@ 0x30
 8005674:	18e4      	adds	r4, r4, r3
 8005676:	70ab      	strb	r3, [r5, #2]
 8005678:	1d28      	adds	r0, r5, #4
 800567a:	70ec      	strb	r4, [r5, #3]
 800567c:	e7f1      	b.n	8005662 <__exponent+0x62>
	...

08005680 <_printf_float>:
 8005680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005682:	b097      	sub	sp, #92	@ 0x5c
 8005684:	000d      	movs	r5, r1
 8005686:	920a      	str	r2, [sp, #40]	@ 0x28
 8005688:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800568a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800568c:	9009      	str	r0, [sp, #36]	@ 0x24
 800568e:	f000 fcab 	bl	8005fe8 <_localeconv_r>
 8005692:	6803      	ldr	r3, [r0, #0]
 8005694:	0018      	movs	r0, r3
 8005696:	930d      	str	r3, [sp, #52]	@ 0x34
 8005698:	f7fa fd34 	bl	8000104 <strlen>
 800569c:	2300      	movs	r3, #0
 800569e:	900f      	str	r0, [sp, #60]	@ 0x3c
 80056a0:	9314      	str	r3, [sp, #80]	@ 0x50
 80056a2:	7e2b      	ldrb	r3, [r5, #24]
 80056a4:	2207      	movs	r2, #7
 80056a6:	930c      	str	r3, [sp, #48]	@ 0x30
 80056a8:	682b      	ldr	r3, [r5, #0]
 80056aa:	930e      	str	r3, [sp, #56]	@ 0x38
 80056ac:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80056ae:	6823      	ldr	r3, [r4, #0]
 80056b0:	05c9      	lsls	r1, r1, #23
 80056b2:	d545      	bpl.n	8005740 <_printf_float+0xc0>
 80056b4:	189b      	adds	r3, r3, r2
 80056b6:	4393      	bics	r3, r2
 80056b8:	001a      	movs	r2, r3
 80056ba:	3208      	adds	r2, #8
 80056bc:	6022      	str	r2, [r4, #0]
 80056be:	2201      	movs	r2, #1
 80056c0:	681e      	ldr	r6, [r3, #0]
 80056c2:	685f      	ldr	r7, [r3, #4]
 80056c4:	007b      	lsls	r3, r7, #1
 80056c6:	085b      	lsrs	r3, r3, #1
 80056c8:	9311      	str	r3, [sp, #68]	@ 0x44
 80056ca:	9610      	str	r6, [sp, #64]	@ 0x40
 80056cc:	64ae      	str	r6, [r5, #72]	@ 0x48
 80056ce:	64ef      	str	r7, [r5, #76]	@ 0x4c
 80056d0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80056d2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80056d4:	4ba7      	ldr	r3, [pc, #668]	@ (8005974 <_printf_float+0x2f4>)
 80056d6:	4252      	negs	r2, r2
 80056d8:	f7fc fec0 	bl	800245c <__aeabi_dcmpun>
 80056dc:	2800      	cmp	r0, #0
 80056de:	d131      	bne.n	8005744 <_printf_float+0xc4>
 80056e0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80056e2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80056e4:	2201      	movs	r2, #1
 80056e6:	4ba3      	ldr	r3, [pc, #652]	@ (8005974 <_printf_float+0x2f4>)
 80056e8:	4252      	negs	r2, r2
 80056ea:	f7fa febd 	bl	8000468 <__aeabi_dcmple>
 80056ee:	2800      	cmp	r0, #0
 80056f0:	d128      	bne.n	8005744 <_printf_float+0xc4>
 80056f2:	2200      	movs	r2, #0
 80056f4:	2300      	movs	r3, #0
 80056f6:	0030      	movs	r0, r6
 80056f8:	0039      	movs	r1, r7
 80056fa:	f7fa feab 	bl	8000454 <__aeabi_dcmplt>
 80056fe:	2800      	cmp	r0, #0
 8005700:	d003      	beq.n	800570a <_printf_float+0x8a>
 8005702:	002b      	movs	r3, r5
 8005704:	222d      	movs	r2, #45	@ 0x2d
 8005706:	3343      	adds	r3, #67	@ 0x43
 8005708:	701a      	strb	r2, [r3, #0]
 800570a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800570c:	4f9a      	ldr	r7, [pc, #616]	@ (8005978 <_printf_float+0x2f8>)
 800570e:	2b47      	cmp	r3, #71	@ 0x47
 8005710:	d800      	bhi.n	8005714 <_printf_float+0x94>
 8005712:	4f9a      	ldr	r7, [pc, #616]	@ (800597c <_printf_float+0x2fc>)
 8005714:	2303      	movs	r3, #3
 8005716:	2400      	movs	r4, #0
 8005718:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800571a:	612b      	str	r3, [r5, #16]
 800571c:	3301      	adds	r3, #1
 800571e:	439a      	bics	r2, r3
 8005720:	602a      	str	r2, [r5, #0]
 8005722:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005724:	0029      	movs	r1, r5
 8005726:	9300      	str	r3, [sp, #0]
 8005728:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800572a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800572c:	aa15      	add	r2, sp, #84	@ 0x54
 800572e:	f000 f9e5 	bl	8005afc <_printf_common>
 8005732:	3001      	adds	r0, #1
 8005734:	d000      	beq.n	8005738 <_printf_float+0xb8>
 8005736:	e09e      	b.n	8005876 <_printf_float+0x1f6>
 8005738:	2001      	movs	r0, #1
 800573a:	4240      	negs	r0, r0
 800573c:	b017      	add	sp, #92	@ 0x5c
 800573e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005740:	3307      	adds	r3, #7
 8005742:	e7b8      	b.n	80056b6 <_printf_float+0x36>
 8005744:	0032      	movs	r2, r6
 8005746:	003b      	movs	r3, r7
 8005748:	0030      	movs	r0, r6
 800574a:	0039      	movs	r1, r7
 800574c:	f7fc fe86 	bl	800245c <__aeabi_dcmpun>
 8005750:	2800      	cmp	r0, #0
 8005752:	d00b      	beq.n	800576c <_printf_float+0xec>
 8005754:	2f00      	cmp	r7, #0
 8005756:	da03      	bge.n	8005760 <_printf_float+0xe0>
 8005758:	002b      	movs	r3, r5
 800575a:	222d      	movs	r2, #45	@ 0x2d
 800575c:	3343      	adds	r3, #67	@ 0x43
 800575e:	701a      	strb	r2, [r3, #0]
 8005760:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005762:	4f87      	ldr	r7, [pc, #540]	@ (8005980 <_printf_float+0x300>)
 8005764:	2b47      	cmp	r3, #71	@ 0x47
 8005766:	d8d5      	bhi.n	8005714 <_printf_float+0x94>
 8005768:	4f86      	ldr	r7, [pc, #536]	@ (8005984 <_printf_float+0x304>)
 800576a:	e7d3      	b.n	8005714 <_printf_float+0x94>
 800576c:	2220      	movs	r2, #32
 800576e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8005770:	686b      	ldr	r3, [r5, #4]
 8005772:	4394      	bics	r4, r2
 8005774:	1c5a      	adds	r2, r3, #1
 8005776:	d146      	bne.n	8005806 <_printf_float+0x186>
 8005778:	3307      	adds	r3, #7
 800577a:	606b      	str	r3, [r5, #4]
 800577c:	2380      	movs	r3, #128	@ 0x80
 800577e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005780:	00db      	lsls	r3, r3, #3
 8005782:	4313      	orrs	r3, r2
 8005784:	2200      	movs	r2, #0
 8005786:	602b      	str	r3, [r5, #0]
 8005788:	9206      	str	r2, [sp, #24]
 800578a:	aa14      	add	r2, sp, #80	@ 0x50
 800578c:	9205      	str	r2, [sp, #20]
 800578e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005790:	a90a      	add	r1, sp, #40	@ 0x28
 8005792:	9204      	str	r2, [sp, #16]
 8005794:	aa13      	add	r2, sp, #76	@ 0x4c
 8005796:	9203      	str	r2, [sp, #12]
 8005798:	2223      	movs	r2, #35	@ 0x23
 800579a:	1852      	adds	r2, r2, r1
 800579c:	9202      	str	r2, [sp, #8]
 800579e:	9301      	str	r3, [sp, #4]
 80057a0:	686b      	ldr	r3, [r5, #4]
 80057a2:	0032      	movs	r2, r6
 80057a4:	9300      	str	r3, [sp, #0]
 80057a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80057a8:	003b      	movs	r3, r7
 80057aa:	f7ff fec3 	bl	8005534 <__cvt>
 80057ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80057b0:	0007      	movs	r7, r0
 80057b2:	2c47      	cmp	r4, #71	@ 0x47
 80057b4:	d12d      	bne.n	8005812 <_printf_float+0x192>
 80057b6:	1cd3      	adds	r3, r2, #3
 80057b8:	db02      	blt.n	80057c0 <_printf_float+0x140>
 80057ba:	686b      	ldr	r3, [r5, #4]
 80057bc:	429a      	cmp	r2, r3
 80057be:	dd47      	ble.n	8005850 <_printf_float+0x1d0>
 80057c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80057c2:	3b02      	subs	r3, #2
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	930c      	str	r3, [sp, #48]	@ 0x30
 80057c8:	0028      	movs	r0, r5
 80057ca:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80057cc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80057ce:	3901      	subs	r1, #1
 80057d0:	3050      	adds	r0, #80	@ 0x50
 80057d2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80057d4:	f7ff ff14 	bl	8005600 <__exponent>
 80057d8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80057da:	0004      	movs	r4, r0
 80057dc:	1813      	adds	r3, r2, r0
 80057de:	612b      	str	r3, [r5, #16]
 80057e0:	2a01      	cmp	r2, #1
 80057e2:	dc02      	bgt.n	80057ea <_printf_float+0x16a>
 80057e4:	682a      	ldr	r2, [r5, #0]
 80057e6:	07d2      	lsls	r2, r2, #31
 80057e8:	d501      	bpl.n	80057ee <_printf_float+0x16e>
 80057ea:	3301      	adds	r3, #1
 80057ec:	612b      	str	r3, [r5, #16]
 80057ee:	2323      	movs	r3, #35	@ 0x23
 80057f0:	aa0a      	add	r2, sp, #40	@ 0x28
 80057f2:	189b      	adds	r3, r3, r2
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d100      	bne.n	80057fc <_printf_float+0x17c>
 80057fa:	e792      	b.n	8005722 <_printf_float+0xa2>
 80057fc:	002b      	movs	r3, r5
 80057fe:	222d      	movs	r2, #45	@ 0x2d
 8005800:	3343      	adds	r3, #67	@ 0x43
 8005802:	701a      	strb	r2, [r3, #0]
 8005804:	e78d      	b.n	8005722 <_printf_float+0xa2>
 8005806:	2c47      	cmp	r4, #71	@ 0x47
 8005808:	d1b8      	bne.n	800577c <_printf_float+0xfc>
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1b6      	bne.n	800577c <_printf_float+0xfc>
 800580e:	3301      	adds	r3, #1
 8005810:	e7b3      	b.n	800577a <_printf_float+0xfa>
 8005812:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005814:	2b65      	cmp	r3, #101	@ 0x65
 8005816:	d9d7      	bls.n	80057c8 <_printf_float+0x148>
 8005818:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800581a:	2b66      	cmp	r3, #102	@ 0x66
 800581c:	d11a      	bne.n	8005854 <_printf_float+0x1d4>
 800581e:	686b      	ldr	r3, [r5, #4]
 8005820:	2a00      	cmp	r2, #0
 8005822:	dd09      	ble.n	8005838 <_printf_float+0x1b8>
 8005824:	612a      	str	r2, [r5, #16]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d102      	bne.n	8005830 <_printf_float+0x1b0>
 800582a:	6829      	ldr	r1, [r5, #0]
 800582c:	07c9      	lsls	r1, r1, #31
 800582e:	d50b      	bpl.n	8005848 <_printf_float+0x1c8>
 8005830:	3301      	adds	r3, #1
 8005832:	189b      	adds	r3, r3, r2
 8005834:	612b      	str	r3, [r5, #16]
 8005836:	e007      	b.n	8005848 <_printf_float+0x1c8>
 8005838:	2b00      	cmp	r3, #0
 800583a:	d103      	bne.n	8005844 <_printf_float+0x1c4>
 800583c:	2201      	movs	r2, #1
 800583e:	6829      	ldr	r1, [r5, #0]
 8005840:	4211      	tst	r1, r2
 8005842:	d000      	beq.n	8005846 <_printf_float+0x1c6>
 8005844:	1c9a      	adds	r2, r3, #2
 8005846:	612a      	str	r2, [r5, #16]
 8005848:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800584a:	2400      	movs	r4, #0
 800584c:	65ab      	str	r3, [r5, #88]	@ 0x58
 800584e:	e7ce      	b.n	80057ee <_printf_float+0x16e>
 8005850:	2367      	movs	r3, #103	@ 0x67
 8005852:	930c      	str	r3, [sp, #48]	@ 0x30
 8005854:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005856:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005858:	4299      	cmp	r1, r3
 800585a:	db06      	blt.n	800586a <_printf_float+0x1ea>
 800585c:	682b      	ldr	r3, [r5, #0]
 800585e:	6129      	str	r1, [r5, #16]
 8005860:	07db      	lsls	r3, r3, #31
 8005862:	d5f1      	bpl.n	8005848 <_printf_float+0x1c8>
 8005864:	3101      	adds	r1, #1
 8005866:	6129      	str	r1, [r5, #16]
 8005868:	e7ee      	b.n	8005848 <_printf_float+0x1c8>
 800586a:	2201      	movs	r2, #1
 800586c:	2900      	cmp	r1, #0
 800586e:	dce0      	bgt.n	8005832 <_printf_float+0x1b2>
 8005870:	1892      	adds	r2, r2, r2
 8005872:	1a52      	subs	r2, r2, r1
 8005874:	e7dd      	b.n	8005832 <_printf_float+0x1b2>
 8005876:	682a      	ldr	r2, [r5, #0]
 8005878:	0553      	lsls	r3, r2, #21
 800587a:	d408      	bmi.n	800588e <_printf_float+0x20e>
 800587c:	692b      	ldr	r3, [r5, #16]
 800587e:	003a      	movs	r2, r7
 8005880:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005882:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005884:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005886:	47a0      	blx	r4
 8005888:	3001      	adds	r0, #1
 800588a:	d129      	bne.n	80058e0 <_printf_float+0x260>
 800588c:	e754      	b.n	8005738 <_printf_float+0xb8>
 800588e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005890:	2b65      	cmp	r3, #101	@ 0x65
 8005892:	d800      	bhi.n	8005896 <_printf_float+0x216>
 8005894:	e0db      	b.n	8005a4e <_printf_float+0x3ce>
 8005896:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8005898:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800589a:	2200      	movs	r2, #0
 800589c:	2300      	movs	r3, #0
 800589e:	f7fa fdd3 	bl	8000448 <__aeabi_dcmpeq>
 80058a2:	2800      	cmp	r0, #0
 80058a4:	d033      	beq.n	800590e <_printf_float+0x28e>
 80058a6:	2301      	movs	r3, #1
 80058a8:	4a37      	ldr	r2, [pc, #220]	@ (8005988 <_printf_float+0x308>)
 80058aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80058ac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80058ae:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80058b0:	47a0      	blx	r4
 80058b2:	3001      	adds	r0, #1
 80058b4:	d100      	bne.n	80058b8 <_printf_float+0x238>
 80058b6:	e73f      	b.n	8005738 <_printf_float+0xb8>
 80058b8:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80058ba:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80058bc:	42b3      	cmp	r3, r6
 80058be:	db02      	blt.n	80058c6 <_printf_float+0x246>
 80058c0:	682b      	ldr	r3, [r5, #0]
 80058c2:	07db      	lsls	r3, r3, #31
 80058c4:	d50c      	bpl.n	80058e0 <_printf_float+0x260>
 80058c6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80058c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80058ca:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80058cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80058ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80058d0:	47a0      	blx	r4
 80058d2:	2400      	movs	r4, #0
 80058d4:	3001      	adds	r0, #1
 80058d6:	d100      	bne.n	80058da <_printf_float+0x25a>
 80058d8:	e72e      	b.n	8005738 <_printf_float+0xb8>
 80058da:	1e73      	subs	r3, r6, #1
 80058dc:	42a3      	cmp	r3, r4
 80058de:	dc0a      	bgt.n	80058f6 <_printf_float+0x276>
 80058e0:	682b      	ldr	r3, [r5, #0]
 80058e2:	079b      	lsls	r3, r3, #30
 80058e4:	d500      	bpl.n	80058e8 <_printf_float+0x268>
 80058e6:	e106      	b.n	8005af6 <_printf_float+0x476>
 80058e8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80058ea:	68e8      	ldr	r0, [r5, #12]
 80058ec:	4298      	cmp	r0, r3
 80058ee:	db00      	blt.n	80058f2 <_printf_float+0x272>
 80058f0:	e724      	b.n	800573c <_printf_float+0xbc>
 80058f2:	0018      	movs	r0, r3
 80058f4:	e722      	b.n	800573c <_printf_float+0xbc>
 80058f6:	002a      	movs	r2, r5
 80058f8:	2301      	movs	r3, #1
 80058fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80058fc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80058fe:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8005900:	321a      	adds	r2, #26
 8005902:	47b8      	blx	r7
 8005904:	3001      	adds	r0, #1
 8005906:	d100      	bne.n	800590a <_printf_float+0x28a>
 8005908:	e716      	b.n	8005738 <_printf_float+0xb8>
 800590a:	3401      	adds	r4, #1
 800590c:	e7e5      	b.n	80058da <_printf_float+0x25a>
 800590e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005910:	2b00      	cmp	r3, #0
 8005912:	dc3b      	bgt.n	800598c <_printf_float+0x30c>
 8005914:	2301      	movs	r3, #1
 8005916:	4a1c      	ldr	r2, [pc, #112]	@ (8005988 <_printf_float+0x308>)
 8005918:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800591a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800591c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800591e:	47a0      	blx	r4
 8005920:	3001      	adds	r0, #1
 8005922:	d100      	bne.n	8005926 <_printf_float+0x2a6>
 8005924:	e708      	b.n	8005738 <_printf_float+0xb8>
 8005926:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8005928:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800592a:	4333      	orrs	r3, r6
 800592c:	d102      	bne.n	8005934 <_printf_float+0x2b4>
 800592e:	682b      	ldr	r3, [r5, #0]
 8005930:	07db      	lsls	r3, r3, #31
 8005932:	d5d5      	bpl.n	80058e0 <_printf_float+0x260>
 8005934:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005936:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005938:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800593a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800593c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800593e:	47a0      	blx	r4
 8005940:	2300      	movs	r3, #0
 8005942:	3001      	adds	r0, #1
 8005944:	d100      	bne.n	8005948 <_printf_float+0x2c8>
 8005946:	e6f7      	b.n	8005738 <_printf_float+0xb8>
 8005948:	930c      	str	r3, [sp, #48]	@ 0x30
 800594a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800594c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800594e:	425b      	negs	r3, r3
 8005950:	4293      	cmp	r3, r2
 8005952:	dc01      	bgt.n	8005958 <_printf_float+0x2d8>
 8005954:	0033      	movs	r3, r6
 8005956:	e792      	b.n	800587e <_printf_float+0x1fe>
 8005958:	002a      	movs	r2, r5
 800595a:	2301      	movs	r3, #1
 800595c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800595e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005960:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005962:	321a      	adds	r2, #26
 8005964:	47a0      	blx	r4
 8005966:	3001      	adds	r0, #1
 8005968:	d100      	bne.n	800596c <_printf_float+0x2ec>
 800596a:	e6e5      	b.n	8005738 <_printf_float+0xb8>
 800596c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800596e:	3301      	adds	r3, #1
 8005970:	e7ea      	b.n	8005948 <_printf_float+0x2c8>
 8005972:	46c0      	nop			@ (mov r8, r8)
 8005974:	7fefffff 	.word	0x7fefffff
 8005978:	08008064 	.word	0x08008064
 800597c:	08008060 	.word	0x08008060
 8005980:	0800806c 	.word	0x0800806c
 8005984:	08008068 	.word	0x08008068
 8005988:	08008070 	.word	0x08008070
 800598c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800598e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8005990:	930c      	str	r3, [sp, #48]	@ 0x30
 8005992:	429e      	cmp	r6, r3
 8005994:	dd00      	ble.n	8005998 <_printf_float+0x318>
 8005996:	001e      	movs	r6, r3
 8005998:	2e00      	cmp	r6, #0
 800599a:	dc31      	bgt.n	8005a00 <_printf_float+0x380>
 800599c:	43f3      	mvns	r3, r6
 800599e:	2400      	movs	r4, #0
 80059a0:	17db      	asrs	r3, r3, #31
 80059a2:	4033      	ands	r3, r6
 80059a4:	930e      	str	r3, [sp, #56]	@ 0x38
 80059a6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80059a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80059aa:	1af3      	subs	r3, r6, r3
 80059ac:	42a3      	cmp	r3, r4
 80059ae:	dc30      	bgt.n	8005a12 <_printf_float+0x392>
 80059b0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80059b2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80059b4:	429a      	cmp	r2, r3
 80059b6:	dc38      	bgt.n	8005a2a <_printf_float+0x3aa>
 80059b8:	682b      	ldr	r3, [r5, #0]
 80059ba:	07db      	lsls	r3, r3, #31
 80059bc:	d435      	bmi.n	8005a2a <_printf_float+0x3aa>
 80059be:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80059c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80059c2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80059c4:	1b9b      	subs	r3, r3, r6
 80059c6:	1b14      	subs	r4, r2, r4
 80059c8:	429c      	cmp	r4, r3
 80059ca:	dd00      	ble.n	80059ce <_printf_float+0x34e>
 80059cc:	001c      	movs	r4, r3
 80059ce:	2c00      	cmp	r4, #0
 80059d0:	dc34      	bgt.n	8005a3c <_printf_float+0x3bc>
 80059d2:	43e3      	mvns	r3, r4
 80059d4:	2600      	movs	r6, #0
 80059d6:	17db      	asrs	r3, r3, #31
 80059d8:	401c      	ands	r4, r3
 80059da:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80059dc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	1b1b      	subs	r3, r3, r4
 80059e2:	42b3      	cmp	r3, r6
 80059e4:	dc00      	bgt.n	80059e8 <_printf_float+0x368>
 80059e6:	e77b      	b.n	80058e0 <_printf_float+0x260>
 80059e8:	002a      	movs	r2, r5
 80059ea:	2301      	movs	r3, #1
 80059ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80059ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80059f0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80059f2:	321a      	adds	r2, #26
 80059f4:	47b8      	blx	r7
 80059f6:	3001      	adds	r0, #1
 80059f8:	d100      	bne.n	80059fc <_printf_float+0x37c>
 80059fa:	e69d      	b.n	8005738 <_printf_float+0xb8>
 80059fc:	3601      	adds	r6, #1
 80059fe:	e7ec      	b.n	80059da <_printf_float+0x35a>
 8005a00:	0033      	movs	r3, r6
 8005a02:	003a      	movs	r2, r7
 8005a04:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005a06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a08:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005a0a:	47a0      	blx	r4
 8005a0c:	3001      	adds	r0, #1
 8005a0e:	d1c5      	bne.n	800599c <_printf_float+0x31c>
 8005a10:	e692      	b.n	8005738 <_printf_float+0xb8>
 8005a12:	002a      	movs	r2, r5
 8005a14:	2301      	movs	r3, #1
 8005a16:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005a18:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a1a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005a1c:	321a      	adds	r2, #26
 8005a1e:	47b0      	blx	r6
 8005a20:	3001      	adds	r0, #1
 8005a22:	d100      	bne.n	8005a26 <_printf_float+0x3a6>
 8005a24:	e688      	b.n	8005738 <_printf_float+0xb8>
 8005a26:	3401      	adds	r4, #1
 8005a28:	e7bd      	b.n	80059a6 <_printf_float+0x326>
 8005a2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a2c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005a2e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005a30:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a32:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005a34:	47a0      	blx	r4
 8005a36:	3001      	adds	r0, #1
 8005a38:	d1c1      	bne.n	80059be <_printf_float+0x33e>
 8005a3a:	e67d      	b.n	8005738 <_printf_float+0xb8>
 8005a3c:	19ba      	adds	r2, r7, r6
 8005a3e:	0023      	movs	r3, r4
 8005a40:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005a42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a44:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005a46:	47b0      	blx	r6
 8005a48:	3001      	adds	r0, #1
 8005a4a:	d1c2      	bne.n	80059d2 <_printf_float+0x352>
 8005a4c:	e674      	b.n	8005738 <_printf_float+0xb8>
 8005a4e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005a50:	930c      	str	r3, [sp, #48]	@ 0x30
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	dc02      	bgt.n	8005a5c <_printf_float+0x3dc>
 8005a56:	2301      	movs	r3, #1
 8005a58:	421a      	tst	r2, r3
 8005a5a:	d039      	beq.n	8005ad0 <_printf_float+0x450>
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	003a      	movs	r2, r7
 8005a60:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005a62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a64:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005a66:	47b0      	blx	r6
 8005a68:	3001      	adds	r0, #1
 8005a6a:	d100      	bne.n	8005a6e <_printf_float+0x3ee>
 8005a6c:	e664      	b.n	8005738 <_printf_float+0xb8>
 8005a6e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a70:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005a72:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005a74:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a76:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005a78:	47b0      	blx	r6
 8005a7a:	3001      	adds	r0, #1
 8005a7c:	d100      	bne.n	8005a80 <_printf_float+0x400>
 8005a7e:	e65b      	b.n	8005738 <_printf_float+0xb8>
 8005a80:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8005a82:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8005a84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005a86:	2200      	movs	r2, #0
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	930c      	str	r3, [sp, #48]	@ 0x30
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	f7fa fcdb 	bl	8000448 <__aeabi_dcmpeq>
 8005a92:	2800      	cmp	r0, #0
 8005a94:	d11a      	bne.n	8005acc <_printf_float+0x44c>
 8005a96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005a98:	1c7a      	adds	r2, r7, #1
 8005a9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005a9c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a9e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005aa0:	47b0      	blx	r6
 8005aa2:	3001      	adds	r0, #1
 8005aa4:	d10e      	bne.n	8005ac4 <_printf_float+0x444>
 8005aa6:	e647      	b.n	8005738 <_printf_float+0xb8>
 8005aa8:	002a      	movs	r2, r5
 8005aaa:	2301      	movs	r3, #1
 8005aac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005aae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ab0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8005ab2:	321a      	adds	r2, #26
 8005ab4:	47b8      	blx	r7
 8005ab6:	3001      	adds	r0, #1
 8005ab8:	d100      	bne.n	8005abc <_printf_float+0x43c>
 8005aba:	e63d      	b.n	8005738 <_printf_float+0xb8>
 8005abc:	3601      	adds	r6, #1
 8005abe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005ac0:	429e      	cmp	r6, r3
 8005ac2:	dbf1      	blt.n	8005aa8 <_printf_float+0x428>
 8005ac4:	002a      	movs	r2, r5
 8005ac6:	0023      	movs	r3, r4
 8005ac8:	3250      	adds	r2, #80	@ 0x50
 8005aca:	e6d9      	b.n	8005880 <_printf_float+0x200>
 8005acc:	2600      	movs	r6, #0
 8005ace:	e7f6      	b.n	8005abe <_printf_float+0x43e>
 8005ad0:	003a      	movs	r2, r7
 8005ad2:	e7e2      	b.n	8005a9a <_printf_float+0x41a>
 8005ad4:	002a      	movs	r2, r5
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005ada:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005adc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005ade:	3219      	adds	r2, #25
 8005ae0:	47b0      	blx	r6
 8005ae2:	3001      	adds	r0, #1
 8005ae4:	d100      	bne.n	8005ae8 <_printf_float+0x468>
 8005ae6:	e627      	b.n	8005738 <_printf_float+0xb8>
 8005ae8:	3401      	adds	r4, #1
 8005aea:	68eb      	ldr	r3, [r5, #12]
 8005aec:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005aee:	1a9b      	subs	r3, r3, r2
 8005af0:	42a3      	cmp	r3, r4
 8005af2:	dcef      	bgt.n	8005ad4 <_printf_float+0x454>
 8005af4:	e6f8      	b.n	80058e8 <_printf_float+0x268>
 8005af6:	2400      	movs	r4, #0
 8005af8:	e7f7      	b.n	8005aea <_printf_float+0x46a>
 8005afa:	46c0      	nop			@ (mov r8, r8)

08005afc <_printf_common>:
 8005afc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005afe:	0016      	movs	r6, r2
 8005b00:	9301      	str	r3, [sp, #4]
 8005b02:	688a      	ldr	r2, [r1, #8]
 8005b04:	690b      	ldr	r3, [r1, #16]
 8005b06:	000c      	movs	r4, r1
 8005b08:	9000      	str	r0, [sp, #0]
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	da00      	bge.n	8005b10 <_printf_common+0x14>
 8005b0e:	0013      	movs	r3, r2
 8005b10:	0022      	movs	r2, r4
 8005b12:	6033      	str	r3, [r6, #0]
 8005b14:	3243      	adds	r2, #67	@ 0x43
 8005b16:	7812      	ldrb	r2, [r2, #0]
 8005b18:	2a00      	cmp	r2, #0
 8005b1a:	d001      	beq.n	8005b20 <_printf_common+0x24>
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	6033      	str	r3, [r6, #0]
 8005b20:	6823      	ldr	r3, [r4, #0]
 8005b22:	069b      	lsls	r3, r3, #26
 8005b24:	d502      	bpl.n	8005b2c <_printf_common+0x30>
 8005b26:	6833      	ldr	r3, [r6, #0]
 8005b28:	3302      	adds	r3, #2
 8005b2a:	6033      	str	r3, [r6, #0]
 8005b2c:	6822      	ldr	r2, [r4, #0]
 8005b2e:	2306      	movs	r3, #6
 8005b30:	0015      	movs	r5, r2
 8005b32:	401d      	ands	r5, r3
 8005b34:	421a      	tst	r2, r3
 8005b36:	d027      	beq.n	8005b88 <_printf_common+0x8c>
 8005b38:	0023      	movs	r3, r4
 8005b3a:	3343      	adds	r3, #67	@ 0x43
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	1e5a      	subs	r2, r3, #1
 8005b40:	4193      	sbcs	r3, r2
 8005b42:	6822      	ldr	r2, [r4, #0]
 8005b44:	0692      	lsls	r2, r2, #26
 8005b46:	d430      	bmi.n	8005baa <_printf_common+0xae>
 8005b48:	0022      	movs	r2, r4
 8005b4a:	9901      	ldr	r1, [sp, #4]
 8005b4c:	9800      	ldr	r0, [sp, #0]
 8005b4e:	9d08      	ldr	r5, [sp, #32]
 8005b50:	3243      	adds	r2, #67	@ 0x43
 8005b52:	47a8      	blx	r5
 8005b54:	3001      	adds	r0, #1
 8005b56:	d025      	beq.n	8005ba4 <_printf_common+0xa8>
 8005b58:	2206      	movs	r2, #6
 8005b5a:	6823      	ldr	r3, [r4, #0]
 8005b5c:	2500      	movs	r5, #0
 8005b5e:	4013      	ands	r3, r2
 8005b60:	2b04      	cmp	r3, #4
 8005b62:	d105      	bne.n	8005b70 <_printf_common+0x74>
 8005b64:	6833      	ldr	r3, [r6, #0]
 8005b66:	68e5      	ldr	r5, [r4, #12]
 8005b68:	1aed      	subs	r5, r5, r3
 8005b6a:	43eb      	mvns	r3, r5
 8005b6c:	17db      	asrs	r3, r3, #31
 8005b6e:	401d      	ands	r5, r3
 8005b70:	68a3      	ldr	r3, [r4, #8]
 8005b72:	6922      	ldr	r2, [r4, #16]
 8005b74:	4293      	cmp	r3, r2
 8005b76:	dd01      	ble.n	8005b7c <_printf_common+0x80>
 8005b78:	1a9b      	subs	r3, r3, r2
 8005b7a:	18ed      	adds	r5, r5, r3
 8005b7c:	2600      	movs	r6, #0
 8005b7e:	42b5      	cmp	r5, r6
 8005b80:	d120      	bne.n	8005bc4 <_printf_common+0xc8>
 8005b82:	2000      	movs	r0, #0
 8005b84:	e010      	b.n	8005ba8 <_printf_common+0xac>
 8005b86:	3501      	adds	r5, #1
 8005b88:	68e3      	ldr	r3, [r4, #12]
 8005b8a:	6832      	ldr	r2, [r6, #0]
 8005b8c:	1a9b      	subs	r3, r3, r2
 8005b8e:	42ab      	cmp	r3, r5
 8005b90:	ddd2      	ble.n	8005b38 <_printf_common+0x3c>
 8005b92:	0022      	movs	r2, r4
 8005b94:	2301      	movs	r3, #1
 8005b96:	9901      	ldr	r1, [sp, #4]
 8005b98:	9800      	ldr	r0, [sp, #0]
 8005b9a:	9f08      	ldr	r7, [sp, #32]
 8005b9c:	3219      	adds	r2, #25
 8005b9e:	47b8      	blx	r7
 8005ba0:	3001      	adds	r0, #1
 8005ba2:	d1f0      	bne.n	8005b86 <_printf_common+0x8a>
 8005ba4:	2001      	movs	r0, #1
 8005ba6:	4240      	negs	r0, r0
 8005ba8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005baa:	2030      	movs	r0, #48	@ 0x30
 8005bac:	18e1      	adds	r1, r4, r3
 8005bae:	3143      	adds	r1, #67	@ 0x43
 8005bb0:	7008      	strb	r0, [r1, #0]
 8005bb2:	0021      	movs	r1, r4
 8005bb4:	1c5a      	adds	r2, r3, #1
 8005bb6:	3145      	adds	r1, #69	@ 0x45
 8005bb8:	7809      	ldrb	r1, [r1, #0]
 8005bba:	18a2      	adds	r2, r4, r2
 8005bbc:	3243      	adds	r2, #67	@ 0x43
 8005bbe:	3302      	adds	r3, #2
 8005bc0:	7011      	strb	r1, [r2, #0]
 8005bc2:	e7c1      	b.n	8005b48 <_printf_common+0x4c>
 8005bc4:	0022      	movs	r2, r4
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	9901      	ldr	r1, [sp, #4]
 8005bca:	9800      	ldr	r0, [sp, #0]
 8005bcc:	9f08      	ldr	r7, [sp, #32]
 8005bce:	321a      	adds	r2, #26
 8005bd0:	47b8      	blx	r7
 8005bd2:	3001      	adds	r0, #1
 8005bd4:	d0e6      	beq.n	8005ba4 <_printf_common+0xa8>
 8005bd6:	3601      	adds	r6, #1
 8005bd8:	e7d1      	b.n	8005b7e <_printf_common+0x82>
	...

08005bdc <_printf_i>:
 8005bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bde:	b08b      	sub	sp, #44	@ 0x2c
 8005be0:	9206      	str	r2, [sp, #24]
 8005be2:	000a      	movs	r2, r1
 8005be4:	3243      	adds	r2, #67	@ 0x43
 8005be6:	9307      	str	r3, [sp, #28]
 8005be8:	9005      	str	r0, [sp, #20]
 8005bea:	9203      	str	r2, [sp, #12]
 8005bec:	7e0a      	ldrb	r2, [r1, #24]
 8005bee:	000c      	movs	r4, r1
 8005bf0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005bf2:	2a78      	cmp	r2, #120	@ 0x78
 8005bf4:	d809      	bhi.n	8005c0a <_printf_i+0x2e>
 8005bf6:	2a62      	cmp	r2, #98	@ 0x62
 8005bf8:	d80b      	bhi.n	8005c12 <_printf_i+0x36>
 8005bfa:	2a00      	cmp	r2, #0
 8005bfc:	d100      	bne.n	8005c00 <_printf_i+0x24>
 8005bfe:	e0ba      	b.n	8005d76 <_printf_i+0x19a>
 8005c00:	497a      	ldr	r1, [pc, #488]	@ (8005dec <_printf_i+0x210>)
 8005c02:	9104      	str	r1, [sp, #16]
 8005c04:	2a58      	cmp	r2, #88	@ 0x58
 8005c06:	d100      	bne.n	8005c0a <_printf_i+0x2e>
 8005c08:	e08e      	b.n	8005d28 <_printf_i+0x14c>
 8005c0a:	0025      	movs	r5, r4
 8005c0c:	3542      	adds	r5, #66	@ 0x42
 8005c0e:	702a      	strb	r2, [r5, #0]
 8005c10:	e022      	b.n	8005c58 <_printf_i+0x7c>
 8005c12:	0010      	movs	r0, r2
 8005c14:	3863      	subs	r0, #99	@ 0x63
 8005c16:	2815      	cmp	r0, #21
 8005c18:	d8f7      	bhi.n	8005c0a <_printf_i+0x2e>
 8005c1a:	f7fa fa85 	bl	8000128 <__gnu_thumb1_case_shi>
 8005c1e:	0016      	.short	0x0016
 8005c20:	fff6001f 	.word	0xfff6001f
 8005c24:	fff6fff6 	.word	0xfff6fff6
 8005c28:	001ffff6 	.word	0x001ffff6
 8005c2c:	fff6fff6 	.word	0xfff6fff6
 8005c30:	fff6fff6 	.word	0xfff6fff6
 8005c34:	0036009f 	.word	0x0036009f
 8005c38:	fff6007e 	.word	0xfff6007e
 8005c3c:	00b0fff6 	.word	0x00b0fff6
 8005c40:	0036fff6 	.word	0x0036fff6
 8005c44:	fff6fff6 	.word	0xfff6fff6
 8005c48:	0082      	.short	0x0082
 8005c4a:	0025      	movs	r5, r4
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	3542      	adds	r5, #66	@ 0x42
 8005c50:	1d11      	adds	r1, r2, #4
 8005c52:	6019      	str	r1, [r3, #0]
 8005c54:	6813      	ldr	r3, [r2, #0]
 8005c56:	702b      	strb	r3, [r5, #0]
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e09e      	b.n	8005d9a <_printf_i+0x1be>
 8005c5c:	6818      	ldr	r0, [r3, #0]
 8005c5e:	6809      	ldr	r1, [r1, #0]
 8005c60:	1d02      	adds	r2, r0, #4
 8005c62:	060d      	lsls	r5, r1, #24
 8005c64:	d50b      	bpl.n	8005c7e <_printf_i+0xa2>
 8005c66:	6806      	ldr	r6, [r0, #0]
 8005c68:	601a      	str	r2, [r3, #0]
 8005c6a:	2e00      	cmp	r6, #0
 8005c6c:	da03      	bge.n	8005c76 <_printf_i+0x9a>
 8005c6e:	232d      	movs	r3, #45	@ 0x2d
 8005c70:	9a03      	ldr	r2, [sp, #12]
 8005c72:	4276      	negs	r6, r6
 8005c74:	7013      	strb	r3, [r2, #0]
 8005c76:	4b5d      	ldr	r3, [pc, #372]	@ (8005dec <_printf_i+0x210>)
 8005c78:	270a      	movs	r7, #10
 8005c7a:	9304      	str	r3, [sp, #16]
 8005c7c:	e018      	b.n	8005cb0 <_printf_i+0xd4>
 8005c7e:	6806      	ldr	r6, [r0, #0]
 8005c80:	601a      	str	r2, [r3, #0]
 8005c82:	0649      	lsls	r1, r1, #25
 8005c84:	d5f1      	bpl.n	8005c6a <_printf_i+0x8e>
 8005c86:	b236      	sxth	r6, r6
 8005c88:	e7ef      	b.n	8005c6a <_printf_i+0x8e>
 8005c8a:	6808      	ldr	r0, [r1, #0]
 8005c8c:	6819      	ldr	r1, [r3, #0]
 8005c8e:	c940      	ldmia	r1!, {r6}
 8005c90:	0605      	lsls	r5, r0, #24
 8005c92:	d402      	bmi.n	8005c9a <_printf_i+0xbe>
 8005c94:	0640      	lsls	r0, r0, #25
 8005c96:	d500      	bpl.n	8005c9a <_printf_i+0xbe>
 8005c98:	b2b6      	uxth	r6, r6
 8005c9a:	6019      	str	r1, [r3, #0]
 8005c9c:	4b53      	ldr	r3, [pc, #332]	@ (8005dec <_printf_i+0x210>)
 8005c9e:	270a      	movs	r7, #10
 8005ca0:	9304      	str	r3, [sp, #16]
 8005ca2:	2a6f      	cmp	r2, #111	@ 0x6f
 8005ca4:	d100      	bne.n	8005ca8 <_printf_i+0xcc>
 8005ca6:	3f02      	subs	r7, #2
 8005ca8:	0023      	movs	r3, r4
 8005caa:	2200      	movs	r2, #0
 8005cac:	3343      	adds	r3, #67	@ 0x43
 8005cae:	701a      	strb	r2, [r3, #0]
 8005cb0:	6863      	ldr	r3, [r4, #4]
 8005cb2:	60a3      	str	r3, [r4, #8]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	db06      	blt.n	8005cc6 <_printf_i+0xea>
 8005cb8:	2104      	movs	r1, #4
 8005cba:	6822      	ldr	r2, [r4, #0]
 8005cbc:	9d03      	ldr	r5, [sp, #12]
 8005cbe:	438a      	bics	r2, r1
 8005cc0:	6022      	str	r2, [r4, #0]
 8005cc2:	4333      	orrs	r3, r6
 8005cc4:	d00c      	beq.n	8005ce0 <_printf_i+0x104>
 8005cc6:	9d03      	ldr	r5, [sp, #12]
 8005cc8:	0030      	movs	r0, r6
 8005cca:	0039      	movs	r1, r7
 8005ccc:	f7fa fabc 	bl	8000248 <__aeabi_uidivmod>
 8005cd0:	9b04      	ldr	r3, [sp, #16]
 8005cd2:	3d01      	subs	r5, #1
 8005cd4:	5c5b      	ldrb	r3, [r3, r1]
 8005cd6:	702b      	strb	r3, [r5, #0]
 8005cd8:	0033      	movs	r3, r6
 8005cda:	0006      	movs	r6, r0
 8005cdc:	429f      	cmp	r7, r3
 8005cde:	d9f3      	bls.n	8005cc8 <_printf_i+0xec>
 8005ce0:	2f08      	cmp	r7, #8
 8005ce2:	d109      	bne.n	8005cf8 <_printf_i+0x11c>
 8005ce4:	6823      	ldr	r3, [r4, #0]
 8005ce6:	07db      	lsls	r3, r3, #31
 8005ce8:	d506      	bpl.n	8005cf8 <_printf_i+0x11c>
 8005cea:	6862      	ldr	r2, [r4, #4]
 8005cec:	6923      	ldr	r3, [r4, #16]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	dc02      	bgt.n	8005cf8 <_printf_i+0x11c>
 8005cf2:	2330      	movs	r3, #48	@ 0x30
 8005cf4:	3d01      	subs	r5, #1
 8005cf6:	702b      	strb	r3, [r5, #0]
 8005cf8:	9b03      	ldr	r3, [sp, #12]
 8005cfa:	1b5b      	subs	r3, r3, r5
 8005cfc:	6123      	str	r3, [r4, #16]
 8005cfe:	9b07      	ldr	r3, [sp, #28]
 8005d00:	0021      	movs	r1, r4
 8005d02:	9300      	str	r3, [sp, #0]
 8005d04:	9805      	ldr	r0, [sp, #20]
 8005d06:	9b06      	ldr	r3, [sp, #24]
 8005d08:	aa09      	add	r2, sp, #36	@ 0x24
 8005d0a:	f7ff fef7 	bl	8005afc <_printf_common>
 8005d0e:	3001      	adds	r0, #1
 8005d10:	d148      	bne.n	8005da4 <_printf_i+0x1c8>
 8005d12:	2001      	movs	r0, #1
 8005d14:	4240      	negs	r0, r0
 8005d16:	b00b      	add	sp, #44	@ 0x2c
 8005d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	6809      	ldr	r1, [r1, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	6022      	str	r2, [r4, #0]
 8005d22:	2278      	movs	r2, #120	@ 0x78
 8005d24:	4932      	ldr	r1, [pc, #200]	@ (8005df0 <_printf_i+0x214>)
 8005d26:	9104      	str	r1, [sp, #16]
 8005d28:	0021      	movs	r1, r4
 8005d2a:	3145      	adds	r1, #69	@ 0x45
 8005d2c:	700a      	strb	r2, [r1, #0]
 8005d2e:	6819      	ldr	r1, [r3, #0]
 8005d30:	6822      	ldr	r2, [r4, #0]
 8005d32:	c940      	ldmia	r1!, {r6}
 8005d34:	0610      	lsls	r0, r2, #24
 8005d36:	d402      	bmi.n	8005d3e <_printf_i+0x162>
 8005d38:	0650      	lsls	r0, r2, #25
 8005d3a:	d500      	bpl.n	8005d3e <_printf_i+0x162>
 8005d3c:	b2b6      	uxth	r6, r6
 8005d3e:	6019      	str	r1, [r3, #0]
 8005d40:	07d3      	lsls	r3, r2, #31
 8005d42:	d502      	bpl.n	8005d4a <_printf_i+0x16e>
 8005d44:	2320      	movs	r3, #32
 8005d46:	4313      	orrs	r3, r2
 8005d48:	6023      	str	r3, [r4, #0]
 8005d4a:	2e00      	cmp	r6, #0
 8005d4c:	d001      	beq.n	8005d52 <_printf_i+0x176>
 8005d4e:	2710      	movs	r7, #16
 8005d50:	e7aa      	b.n	8005ca8 <_printf_i+0xcc>
 8005d52:	2220      	movs	r2, #32
 8005d54:	6823      	ldr	r3, [r4, #0]
 8005d56:	4393      	bics	r3, r2
 8005d58:	6023      	str	r3, [r4, #0]
 8005d5a:	e7f8      	b.n	8005d4e <_printf_i+0x172>
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	680d      	ldr	r5, [r1, #0]
 8005d60:	1d10      	adds	r0, r2, #4
 8005d62:	6949      	ldr	r1, [r1, #20]
 8005d64:	6018      	str	r0, [r3, #0]
 8005d66:	6813      	ldr	r3, [r2, #0]
 8005d68:	062e      	lsls	r6, r5, #24
 8005d6a:	d501      	bpl.n	8005d70 <_printf_i+0x194>
 8005d6c:	6019      	str	r1, [r3, #0]
 8005d6e:	e002      	b.n	8005d76 <_printf_i+0x19a>
 8005d70:	066d      	lsls	r5, r5, #25
 8005d72:	d5fb      	bpl.n	8005d6c <_printf_i+0x190>
 8005d74:	8019      	strh	r1, [r3, #0]
 8005d76:	2300      	movs	r3, #0
 8005d78:	9d03      	ldr	r5, [sp, #12]
 8005d7a:	6123      	str	r3, [r4, #16]
 8005d7c:	e7bf      	b.n	8005cfe <_printf_i+0x122>
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	1d11      	adds	r1, r2, #4
 8005d82:	6019      	str	r1, [r3, #0]
 8005d84:	6815      	ldr	r5, [r2, #0]
 8005d86:	2100      	movs	r1, #0
 8005d88:	0028      	movs	r0, r5
 8005d8a:	6862      	ldr	r2, [r4, #4]
 8005d8c:	f000 f930 	bl	8005ff0 <memchr>
 8005d90:	2800      	cmp	r0, #0
 8005d92:	d001      	beq.n	8005d98 <_printf_i+0x1bc>
 8005d94:	1b40      	subs	r0, r0, r5
 8005d96:	6060      	str	r0, [r4, #4]
 8005d98:	6863      	ldr	r3, [r4, #4]
 8005d9a:	6123      	str	r3, [r4, #16]
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	9a03      	ldr	r2, [sp, #12]
 8005da0:	7013      	strb	r3, [r2, #0]
 8005da2:	e7ac      	b.n	8005cfe <_printf_i+0x122>
 8005da4:	002a      	movs	r2, r5
 8005da6:	6923      	ldr	r3, [r4, #16]
 8005da8:	9906      	ldr	r1, [sp, #24]
 8005daa:	9805      	ldr	r0, [sp, #20]
 8005dac:	9d07      	ldr	r5, [sp, #28]
 8005dae:	47a8      	blx	r5
 8005db0:	3001      	adds	r0, #1
 8005db2:	d0ae      	beq.n	8005d12 <_printf_i+0x136>
 8005db4:	6823      	ldr	r3, [r4, #0]
 8005db6:	079b      	lsls	r3, r3, #30
 8005db8:	d415      	bmi.n	8005de6 <_printf_i+0x20a>
 8005dba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dbc:	68e0      	ldr	r0, [r4, #12]
 8005dbe:	4298      	cmp	r0, r3
 8005dc0:	daa9      	bge.n	8005d16 <_printf_i+0x13a>
 8005dc2:	0018      	movs	r0, r3
 8005dc4:	e7a7      	b.n	8005d16 <_printf_i+0x13a>
 8005dc6:	0022      	movs	r2, r4
 8005dc8:	2301      	movs	r3, #1
 8005dca:	9906      	ldr	r1, [sp, #24]
 8005dcc:	9805      	ldr	r0, [sp, #20]
 8005dce:	9e07      	ldr	r6, [sp, #28]
 8005dd0:	3219      	adds	r2, #25
 8005dd2:	47b0      	blx	r6
 8005dd4:	3001      	adds	r0, #1
 8005dd6:	d09c      	beq.n	8005d12 <_printf_i+0x136>
 8005dd8:	3501      	adds	r5, #1
 8005dda:	68e3      	ldr	r3, [r4, #12]
 8005ddc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005dde:	1a9b      	subs	r3, r3, r2
 8005de0:	42ab      	cmp	r3, r5
 8005de2:	dcf0      	bgt.n	8005dc6 <_printf_i+0x1ea>
 8005de4:	e7e9      	b.n	8005dba <_printf_i+0x1de>
 8005de6:	2500      	movs	r5, #0
 8005de8:	e7f7      	b.n	8005dda <_printf_i+0x1fe>
 8005dea:	46c0      	nop			@ (mov r8, r8)
 8005dec:	08008072 	.word	0x08008072
 8005df0:	08008083 	.word	0x08008083

08005df4 <std>:
 8005df4:	2300      	movs	r3, #0
 8005df6:	b510      	push	{r4, lr}
 8005df8:	0004      	movs	r4, r0
 8005dfa:	6003      	str	r3, [r0, #0]
 8005dfc:	6043      	str	r3, [r0, #4]
 8005dfe:	6083      	str	r3, [r0, #8]
 8005e00:	8181      	strh	r1, [r0, #12]
 8005e02:	6643      	str	r3, [r0, #100]	@ 0x64
 8005e04:	81c2      	strh	r2, [r0, #14]
 8005e06:	6103      	str	r3, [r0, #16]
 8005e08:	6143      	str	r3, [r0, #20]
 8005e0a:	6183      	str	r3, [r0, #24]
 8005e0c:	0019      	movs	r1, r3
 8005e0e:	2208      	movs	r2, #8
 8005e10:	305c      	adds	r0, #92	@ 0x5c
 8005e12:	f000 f8b3 	bl	8005f7c <memset>
 8005e16:	4b0b      	ldr	r3, [pc, #44]	@ (8005e44 <std+0x50>)
 8005e18:	6224      	str	r4, [r4, #32]
 8005e1a:	6263      	str	r3, [r4, #36]	@ 0x24
 8005e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8005e48 <std+0x54>)
 8005e1e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005e20:	4b0a      	ldr	r3, [pc, #40]	@ (8005e4c <std+0x58>)
 8005e22:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005e24:	4b0a      	ldr	r3, [pc, #40]	@ (8005e50 <std+0x5c>)
 8005e26:	6323      	str	r3, [r4, #48]	@ 0x30
 8005e28:	4b0a      	ldr	r3, [pc, #40]	@ (8005e54 <std+0x60>)
 8005e2a:	429c      	cmp	r4, r3
 8005e2c:	d005      	beq.n	8005e3a <std+0x46>
 8005e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8005e58 <std+0x64>)
 8005e30:	429c      	cmp	r4, r3
 8005e32:	d002      	beq.n	8005e3a <std+0x46>
 8005e34:	4b09      	ldr	r3, [pc, #36]	@ (8005e5c <std+0x68>)
 8005e36:	429c      	cmp	r4, r3
 8005e38:	d103      	bne.n	8005e42 <std+0x4e>
 8005e3a:	0020      	movs	r0, r4
 8005e3c:	3058      	adds	r0, #88	@ 0x58
 8005e3e:	f000 f8cf 	bl	8005fe0 <__retarget_lock_init_recursive>
 8005e42:	bd10      	pop	{r4, pc}
 8005e44:	08007705 	.word	0x08007705
 8005e48:	0800772d 	.word	0x0800772d
 8005e4c:	08007765 	.word	0x08007765
 8005e50:	08007791 	.word	0x08007791
 8005e54:	20000344 	.word	0x20000344
 8005e58:	200003ac 	.word	0x200003ac
 8005e5c:	20000414 	.word	0x20000414

08005e60 <stdio_exit_handler>:
 8005e60:	b510      	push	{r4, lr}
 8005e62:	4a03      	ldr	r2, [pc, #12]	@ (8005e70 <stdio_exit_handler+0x10>)
 8005e64:	4903      	ldr	r1, [pc, #12]	@ (8005e74 <stdio_exit_handler+0x14>)
 8005e66:	4804      	ldr	r0, [pc, #16]	@ (8005e78 <stdio_exit_handler+0x18>)
 8005e68:	f000 f86c 	bl	8005f44 <_fwalk_sglue>
 8005e6c:	bd10      	pop	{r4, pc}
 8005e6e:	46c0      	nop			@ (mov r8, r8)
 8005e70:	2000000c 	.word	0x2000000c
 8005e74:	08006f55 	.word	0x08006f55
 8005e78:	2000001c 	.word	0x2000001c

08005e7c <cleanup_stdio>:
 8005e7c:	6841      	ldr	r1, [r0, #4]
 8005e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8005eac <cleanup_stdio+0x30>)
 8005e80:	b510      	push	{r4, lr}
 8005e82:	0004      	movs	r4, r0
 8005e84:	4299      	cmp	r1, r3
 8005e86:	d001      	beq.n	8005e8c <cleanup_stdio+0x10>
 8005e88:	f001 f864 	bl	8006f54 <_fflush_r>
 8005e8c:	68a1      	ldr	r1, [r4, #8]
 8005e8e:	4b08      	ldr	r3, [pc, #32]	@ (8005eb0 <cleanup_stdio+0x34>)
 8005e90:	4299      	cmp	r1, r3
 8005e92:	d002      	beq.n	8005e9a <cleanup_stdio+0x1e>
 8005e94:	0020      	movs	r0, r4
 8005e96:	f001 f85d 	bl	8006f54 <_fflush_r>
 8005e9a:	68e1      	ldr	r1, [r4, #12]
 8005e9c:	4b05      	ldr	r3, [pc, #20]	@ (8005eb4 <cleanup_stdio+0x38>)
 8005e9e:	4299      	cmp	r1, r3
 8005ea0:	d002      	beq.n	8005ea8 <cleanup_stdio+0x2c>
 8005ea2:	0020      	movs	r0, r4
 8005ea4:	f001 f856 	bl	8006f54 <_fflush_r>
 8005ea8:	bd10      	pop	{r4, pc}
 8005eaa:	46c0      	nop			@ (mov r8, r8)
 8005eac:	20000344 	.word	0x20000344
 8005eb0:	200003ac 	.word	0x200003ac
 8005eb4:	20000414 	.word	0x20000414

08005eb8 <global_stdio_init.part.0>:
 8005eb8:	b510      	push	{r4, lr}
 8005eba:	4b09      	ldr	r3, [pc, #36]	@ (8005ee0 <global_stdio_init.part.0+0x28>)
 8005ebc:	4a09      	ldr	r2, [pc, #36]	@ (8005ee4 <global_stdio_init.part.0+0x2c>)
 8005ebe:	2104      	movs	r1, #4
 8005ec0:	601a      	str	r2, [r3, #0]
 8005ec2:	4809      	ldr	r0, [pc, #36]	@ (8005ee8 <global_stdio_init.part.0+0x30>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f7ff ff95 	bl	8005df4 <std>
 8005eca:	2201      	movs	r2, #1
 8005ecc:	2109      	movs	r1, #9
 8005ece:	4807      	ldr	r0, [pc, #28]	@ (8005eec <global_stdio_init.part.0+0x34>)
 8005ed0:	f7ff ff90 	bl	8005df4 <std>
 8005ed4:	2202      	movs	r2, #2
 8005ed6:	2112      	movs	r1, #18
 8005ed8:	4805      	ldr	r0, [pc, #20]	@ (8005ef0 <global_stdio_init.part.0+0x38>)
 8005eda:	f7ff ff8b 	bl	8005df4 <std>
 8005ede:	bd10      	pop	{r4, pc}
 8005ee0:	2000047c 	.word	0x2000047c
 8005ee4:	08005e61 	.word	0x08005e61
 8005ee8:	20000344 	.word	0x20000344
 8005eec:	200003ac 	.word	0x200003ac
 8005ef0:	20000414 	.word	0x20000414

08005ef4 <__sfp_lock_acquire>:
 8005ef4:	b510      	push	{r4, lr}
 8005ef6:	4802      	ldr	r0, [pc, #8]	@ (8005f00 <__sfp_lock_acquire+0xc>)
 8005ef8:	f000 f873 	bl	8005fe2 <__retarget_lock_acquire_recursive>
 8005efc:	bd10      	pop	{r4, pc}
 8005efe:	46c0      	nop			@ (mov r8, r8)
 8005f00:	20000481 	.word	0x20000481

08005f04 <__sfp_lock_release>:
 8005f04:	b510      	push	{r4, lr}
 8005f06:	4802      	ldr	r0, [pc, #8]	@ (8005f10 <__sfp_lock_release+0xc>)
 8005f08:	f000 f86c 	bl	8005fe4 <__retarget_lock_release_recursive>
 8005f0c:	bd10      	pop	{r4, pc}
 8005f0e:	46c0      	nop			@ (mov r8, r8)
 8005f10:	20000481 	.word	0x20000481

08005f14 <__sinit>:
 8005f14:	b510      	push	{r4, lr}
 8005f16:	0004      	movs	r4, r0
 8005f18:	f7ff ffec 	bl	8005ef4 <__sfp_lock_acquire>
 8005f1c:	6a23      	ldr	r3, [r4, #32]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d002      	beq.n	8005f28 <__sinit+0x14>
 8005f22:	f7ff ffef 	bl	8005f04 <__sfp_lock_release>
 8005f26:	bd10      	pop	{r4, pc}
 8005f28:	4b04      	ldr	r3, [pc, #16]	@ (8005f3c <__sinit+0x28>)
 8005f2a:	6223      	str	r3, [r4, #32]
 8005f2c:	4b04      	ldr	r3, [pc, #16]	@ (8005f40 <__sinit+0x2c>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1f6      	bne.n	8005f22 <__sinit+0xe>
 8005f34:	f7ff ffc0 	bl	8005eb8 <global_stdio_init.part.0>
 8005f38:	e7f3      	b.n	8005f22 <__sinit+0xe>
 8005f3a:	46c0      	nop			@ (mov r8, r8)
 8005f3c:	08005e7d 	.word	0x08005e7d
 8005f40:	2000047c 	.word	0x2000047c

08005f44 <_fwalk_sglue>:
 8005f44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f46:	0014      	movs	r4, r2
 8005f48:	2600      	movs	r6, #0
 8005f4a:	9000      	str	r0, [sp, #0]
 8005f4c:	9101      	str	r1, [sp, #4]
 8005f4e:	68a5      	ldr	r5, [r4, #8]
 8005f50:	6867      	ldr	r7, [r4, #4]
 8005f52:	3f01      	subs	r7, #1
 8005f54:	d504      	bpl.n	8005f60 <_fwalk_sglue+0x1c>
 8005f56:	6824      	ldr	r4, [r4, #0]
 8005f58:	2c00      	cmp	r4, #0
 8005f5a:	d1f8      	bne.n	8005f4e <_fwalk_sglue+0xa>
 8005f5c:	0030      	movs	r0, r6
 8005f5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005f60:	89ab      	ldrh	r3, [r5, #12]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d908      	bls.n	8005f78 <_fwalk_sglue+0x34>
 8005f66:	220e      	movs	r2, #14
 8005f68:	5eab      	ldrsh	r3, [r5, r2]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	d004      	beq.n	8005f78 <_fwalk_sglue+0x34>
 8005f6e:	0029      	movs	r1, r5
 8005f70:	9800      	ldr	r0, [sp, #0]
 8005f72:	9b01      	ldr	r3, [sp, #4]
 8005f74:	4798      	blx	r3
 8005f76:	4306      	orrs	r6, r0
 8005f78:	3568      	adds	r5, #104	@ 0x68
 8005f7a:	e7ea      	b.n	8005f52 <_fwalk_sglue+0xe>

08005f7c <memset>:
 8005f7c:	0003      	movs	r3, r0
 8005f7e:	1882      	adds	r2, r0, r2
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d100      	bne.n	8005f86 <memset+0xa>
 8005f84:	4770      	bx	lr
 8005f86:	7019      	strb	r1, [r3, #0]
 8005f88:	3301      	adds	r3, #1
 8005f8a:	e7f9      	b.n	8005f80 <memset+0x4>

08005f8c <__errno>:
 8005f8c:	4b01      	ldr	r3, [pc, #4]	@ (8005f94 <__errno+0x8>)
 8005f8e:	6818      	ldr	r0, [r3, #0]
 8005f90:	4770      	bx	lr
 8005f92:	46c0      	nop			@ (mov r8, r8)
 8005f94:	20000018 	.word	0x20000018

08005f98 <__libc_init_array>:
 8005f98:	b570      	push	{r4, r5, r6, lr}
 8005f9a:	2600      	movs	r6, #0
 8005f9c:	4c0c      	ldr	r4, [pc, #48]	@ (8005fd0 <__libc_init_array+0x38>)
 8005f9e:	4d0d      	ldr	r5, [pc, #52]	@ (8005fd4 <__libc_init_array+0x3c>)
 8005fa0:	1b64      	subs	r4, r4, r5
 8005fa2:	10a4      	asrs	r4, r4, #2
 8005fa4:	42a6      	cmp	r6, r4
 8005fa6:	d109      	bne.n	8005fbc <__libc_init_array+0x24>
 8005fa8:	2600      	movs	r6, #0
 8005faa:	f001 ffe9 	bl	8007f80 <_init>
 8005fae:	4c0a      	ldr	r4, [pc, #40]	@ (8005fd8 <__libc_init_array+0x40>)
 8005fb0:	4d0a      	ldr	r5, [pc, #40]	@ (8005fdc <__libc_init_array+0x44>)
 8005fb2:	1b64      	subs	r4, r4, r5
 8005fb4:	10a4      	asrs	r4, r4, #2
 8005fb6:	42a6      	cmp	r6, r4
 8005fb8:	d105      	bne.n	8005fc6 <__libc_init_array+0x2e>
 8005fba:	bd70      	pop	{r4, r5, r6, pc}
 8005fbc:	00b3      	lsls	r3, r6, #2
 8005fbe:	58eb      	ldr	r3, [r5, r3]
 8005fc0:	4798      	blx	r3
 8005fc2:	3601      	adds	r6, #1
 8005fc4:	e7ee      	b.n	8005fa4 <__libc_init_array+0xc>
 8005fc6:	00b3      	lsls	r3, r6, #2
 8005fc8:	58eb      	ldr	r3, [r5, r3]
 8005fca:	4798      	blx	r3
 8005fcc:	3601      	adds	r6, #1
 8005fce:	e7f2      	b.n	8005fb6 <__libc_init_array+0x1e>
 8005fd0:	080083dc 	.word	0x080083dc
 8005fd4:	080083dc 	.word	0x080083dc
 8005fd8:	080083e0 	.word	0x080083e0
 8005fdc:	080083dc 	.word	0x080083dc

08005fe0 <__retarget_lock_init_recursive>:
 8005fe0:	4770      	bx	lr

08005fe2 <__retarget_lock_acquire_recursive>:
 8005fe2:	4770      	bx	lr

08005fe4 <__retarget_lock_release_recursive>:
 8005fe4:	4770      	bx	lr
	...

08005fe8 <_localeconv_r>:
 8005fe8:	4800      	ldr	r0, [pc, #0]	@ (8005fec <_localeconv_r+0x4>)
 8005fea:	4770      	bx	lr
 8005fec:	20000158 	.word	0x20000158

08005ff0 <memchr>:
 8005ff0:	b2c9      	uxtb	r1, r1
 8005ff2:	1882      	adds	r2, r0, r2
 8005ff4:	4290      	cmp	r0, r2
 8005ff6:	d101      	bne.n	8005ffc <memchr+0xc>
 8005ff8:	2000      	movs	r0, #0
 8005ffa:	4770      	bx	lr
 8005ffc:	7803      	ldrb	r3, [r0, #0]
 8005ffe:	428b      	cmp	r3, r1
 8006000:	d0fb      	beq.n	8005ffa <memchr+0xa>
 8006002:	3001      	adds	r0, #1
 8006004:	e7f6      	b.n	8005ff4 <memchr+0x4>

08006006 <quorem>:
 8006006:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006008:	6903      	ldr	r3, [r0, #16]
 800600a:	690c      	ldr	r4, [r1, #16]
 800600c:	b089      	sub	sp, #36	@ 0x24
 800600e:	9003      	str	r0, [sp, #12]
 8006010:	9106      	str	r1, [sp, #24]
 8006012:	2000      	movs	r0, #0
 8006014:	42a3      	cmp	r3, r4
 8006016:	db63      	blt.n	80060e0 <quorem+0xda>
 8006018:	000b      	movs	r3, r1
 800601a:	3c01      	subs	r4, #1
 800601c:	3314      	adds	r3, #20
 800601e:	00a5      	lsls	r5, r4, #2
 8006020:	9304      	str	r3, [sp, #16]
 8006022:	195b      	adds	r3, r3, r5
 8006024:	9305      	str	r3, [sp, #20]
 8006026:	9b03      	ldr	r3, [sp, #12]
 8006028:	3314      	adds	r3, #20
 800602a:	9301      	str	r3, [sp, #4]
 800602c:	195d      	adds	r5, r3, r5
 800602e:	9b05      	ldr	r3, [sp, #20]
 8006030:	682f      	ldr	r7, [r5, #0]
 8006032:	681e      	ldr	r6, [r3, #0]
 8006034:	0038      	movs	r0, r7
 8006036:	3601      	adds	r6, #1
 8006038:	0031      	movs	r1, r6
 800603a:	f7fa f87f 	bl	800013c <__udivsi3>
 800603e:	9002      	str	r0, [sp, #8]
 8006040:	42b7      	cmp	r7, r6
 8006042:	d327      	bcc.n	8006094 <quorem+0x8e>
 8006044:	9b04      	ldr	r3, [sp, #16]
 8006046:	2700      	movs	r7, #0
 8006048:	469c      	mov	ip, r3
 800604a:	9e01      	ldr	r6, [sp, #4]
 800604c:	9707      	str	r7, [sp, #28]
 800604e:	4662      	mov	r2, ip
 8006050:	ca08      	ldmia	r2!, {r3}
 8006052:	6830      	ldr	r0, [r6, #0]
 8006054:	4694      	mov	ip, r2
 8006056:	9a02      	ldr	r2, [sp, #8]
 8006058:	b299      	uxth	r1, r3
 800605a:	4351      	muls	r1, r2
 800605c:	0c1b      	lsrs	r3, r3, #16
 800605e:	4353      	muls	r3, r2
 8006060:	19c9      	adds	r1, r1, r7
 8006062:	0c0a      	lsrs	r2, r1, #16
 8006064:	189b      	adds	r3, r3, r2
 8006066:	b289      	uxth	r1, r1
 8006068:	b282      	uxth	r2, r0
 800606a:	1a52      	subs	r2, r2, r1
 800606c:	9907      	ldr	r1, [sp, #28]
 800606e:	0c1f      	lsrs	r7, r3, #16
 8006070:	1852      	adds	r2, r2, r1
 8006072:	0c00      	lsrs	r0, r0, #16
 8006074:	b29b      	uxth	r3, r3
 8006076:	1411      	asrs	r1, r2, #16
 8006078:	1ac3      	subs	r3, r0, r3
 800607a:	185b      	adds	r3, r3, r1
 800607c:	1419      	asrs	r1, r3, #16
 800607e:	b292      	uxth	r2, r2
 8006080:	041b      	lsls	r3, r3, #16
 8006082:	431a      	orrs	r2, r3
 8006084:	9b05      	ldr	r3, [sp, #20]
 8006086:	9107      	str	r1, [sp, #28]
 8006088:	c604      	stmia	r6!, {r2}
 800608a:	4563      	cmp	r3, ip
 800608c:	d2df      	bcs.n	800604e <quorem+0x48>
 800608e:	682b      	ldr	r3, [r5, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d02b      	beq.n	80060ec <quorem+0xe6>
 8006094:	9906      	ldr	r1, [sp, #24]
 8006096:	9803      	ldr	r0, [sp, #12]
 8006098:	f001 fa1e 	bl	80074d8 <__mcmp>
 800609c:	2800      	cmp	r0, #0
 800609e:	db1e      	blt.n	80060de <quorem+0xd8>
 80060a0:	2600      	movs	r6, #0
 80060a2:	9d01      	ldr	r5, [sp, #4]
 80060a4:	9904      	ldr	r1, [sp, #16]
 80060a6:	c901      	ldmia	r1!, {r0}
 80060a8:	682b      	ldr	r3, [r5, #0]
 80060aa:	b287      	uxth	r7, r0
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	1bd2      	subs	r2, r2, r7
 80060b0:	1992      	adds	r2, r2, r6
 80060b2:	0c00      	lsrs	r0, r0, #16
 80060b4:	0c1b      	lsrs	r3, r3, #16
 80060b6:	1a1b      	subs	r3, r3, r0
 80060b8:	1410      	asrs	r0, r2, #16
 80060ba:	181b      	adds	r3, r3, r0
 80060bc:	141e      	asrs	r6, r3, #16
 80060be:	b292      	uxth	r2, r2
 80060c0:	041b      	lsls	r3, r3, #16
 80060c2:	431a      	orrs	r2, r3
 80060c4:	9b05      	ldr	r3, [sp, #20]
 80060c6:	c504      	stmia	r5!, {r2}
 80060c8:	428b      	cmp	r3, r1
 80060ca:	d2ec      	bcs.n	80060a6 <quorem+0xa0>
 80060cc:	9a01      	ldr	r2, [sp, #4]
 80060ce:	00a3      	lsls	r3, r4, #2
 80060d0:	18d3      	adds	r3, r2, r3
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	2a00      	cmp	r2, #0
 80060d6:	d014      	beq.n	8006102 <quorem+0xfc>
 80060d8:	9b02      	ldr	r3, [sp, #8]
 80060da:	3301      	adds	r3, #1
 80060dc:	9302      	str	r3, [sp, #8]
 80060de:	9802      	ldr	r0, [sp, #8]
 80060e0:	b009      	add	sp, #36	@ 0x24
 80060e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060e4:	682b      	ldr	r3, [r5, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d104      	bne.n	80060f4 <quorem+0xee>
 80060ea:	3c01      	subs	r4, #1
 80060ec:	9b01      	ldr	r3, [sp, #4]
 80060ee:	3d04      	subs	r5, #4
 80060f0:	42ab      	cmp	r3, r5
 80060f2:	d3f7      	bcc.n	80060e4 <quorem+0xde>
 80060f4:	9b03      	ldr	r3, [sp, #12]
 80060f6:	611c      	str	r4, [r3, #16]
 80060f8:	e7cc      	b.n	8006094 <quorem+0x8e>
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	2a00      	cmp	r2, #0
 80060fe:	d104      	bne.n	800610a <quorem+0x104>
 8006100:	3c01      	subs	r4, #1
 8006102:	9a01      	ldr	r2, [sp, #4]
 8006104:	3b04      	subs	r3, #4
 8006106:	429a      	cmp	r2, r3
 8006108:	d3f7      	bcc.n	80060fa <quorem+0xf4>
 800610a:	9b03      	ldr	r3, [sp, #12]
 800610c:	611c      	str	r4, [r3, #16]
 800610e:	e7e3      	b.n	80060d8 <quorem+0xd2>

08006110 <_dtoa_r>:
 8006110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006112:	0014      	movs	r4, r2
 8006114:	001d      	movs	r5, r3
 8006116:	69c6      	ldr	r6, [r0, #28]
 8006118:	b09d      	sub	sp, #116	@ 0x74
 800611a:	940a      	str	r4, [sp, #40]	@ 0x28
 800611c:	950b      	str	r5, [sp, #44]	@ 0x2c
 800611e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8006120:	9003      	str	r0, [sp, #12]
 8006122:	2e00      	cmp	r6, #0
 8006124:	d10f      	bne.n	8006146 <_dtoa_r+0x36>
 8006126:	2010      	movs	r0, #16
 8006128:	f000 fde2 	bl	8006cf0 <malloc>
 800612c:	9b03      	ldr	r3, [sp, #12]
 800612e:	1e02      	subs	r2, r0, #0
 8006130:	61d8      	str	r0, [r3, #28]
 8006132:	d104      	bne.n	800613e <_dtoa_r+0x2e>
 8006134:	21ef      	movs	r1, #239	@ 0xef
 8006136:	4bc7      	ldr	r3, [pc, #796]	@ (8006454 <_dtoa_r+0x344>)
 8006138:	48c7      	ldr	r0, [pc, #796]	@ (8006458 <_dtoa_r+0x348>)
 800613a:	f001 fb99 	bl	8007870 <__assert_func>
 800613e:	6046      	str	r6, [r0, #4]
 8006140:	6086      	str	r6, [r0, #8]
 8006142:	6006      	str	r6, [r0, #0]
 8006144:	60c6      	str	r6, [r0, #12]
 8006146:	9b03      	ldr	r3, [sp, #12]
 8006148:	69db      	ldr	r3, [r3, #28]
 800614a:	6819      	ldr	r1, [r3, #0]
 800614c:	2900      	cmp	r1, #0
 800614e:	d00b      	beq.n	8006168 <_dtoa_r+0x58>
 8006150:	685a      	ldr	r2, [r3, #4]
 8006152:	2301      	movs	r3, #1
 8006154:	4093      	lsls	r3, r2
 8006156:	604a      	str	r2, [r1, #4]
 8006158:	608b      	str	r3, [r1, #8]
 800615a:	9803      	ldr	r0, [sp, #12]
 800615c:	f000 ff7a 	bl	8007054 <_Bfree>
 8006160:	2200      	movs	r2, #0
 8006162:	9b03      	ldr	r3, [sp, #12]
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	601a      	str	r2, [r3, #0]
 8006168:	2d00      	cmp	r5, #0
 800616a:	da1e      	bge.n	80061aa <_dtoa_r+0x9a>
 800616c:	2301      	movs	r3, #1
 800616e:	603b      	str	r3, [r7, #0]
 8006170:	006b      	lsls	r3, r5, #1
 8006172:	085b      	lsrs	r3, r3, #1
 8006174:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006176:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006178:	4bb8      	ldr	r3, [pc, #736]	@ (800645c <_dtoa_r+0x34c>)
 800617a:	4ab8      	ldr	r2, [pc, #736]	@ (800645c <_dtoa_r+0x34c>)
 800617c:	403b      	ands	r3, r7
 800617e:	4293      	cmp	r3, r2
 8006180:	d116      	bne.n	80061b0 <_dtoa_r+0xa0>
 8006182:	4bb7      	ldr	r3, [pc, #732]	@ (8006460 <_dtoa_r+0x350>)
 8006184:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006186:	6013      	str	r3, [r2, #0]
 8006188:	033b      	lsls	r3, r7, #12
 800618a:	0b1b      	lsrs	r3, r3, #12
 800618c:	4323      	orrs	r3, r4
 800618e:	d101      	bne.n	8006194 <_dtoa_r+0x84>
 8006190:	f000 fd80 	bl	8006c94 <_dtoa_r+0xb84>
 8006194:	4bb3      	ldr	r3, [pc, #716]	@ (8006464 <_dtoa_r+0x354>)
 8006196:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006198:	9308      	str	r3, [sp, #32]
 800619a:	2a00      	cmp	r2, #0
 800619c:	d002      	beq.n	80061a4 <_dtoa_r+0x94>
 800619e:	4bb2      	ldr	r3, [pc, #712]	@ (8006468 <_dtoa_r+0x358>)
 80061a0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80061a2:	6013      	str	r3, [r2, #0]
 80061a4:	9808      	ldr	r0, [sp, #32]
 80061a6:	b01d      	add	sp, #116	@ 0x74
 80061a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061aa:	2300      	movs	r3, #0
 80061ac:	603b      	str	r3, [r7, #0]
 80061ae:	e7e2      	b.n	8006176 <_dtoa_r+0x66>
 80061b0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80061b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80061b4:	9212      	str	r2, [sp, #72]	@ 0x48
 80061b6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80061b8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80061ba:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80061bc:	2200      	movs	r2, #0
 80061be:	2300      	movs	r3, #0
 80061c0:	f7fa f942 	bl	8000448 <__aeabi_dcmpeq>
 80061c4:	1e06      	subs	r6, r0, #0
 80061c6:	d00b      	beq.n	80061e0 <_dtoa_r+0xd0>
 80061c8:	2301      	movs	r3, #1
 80061ca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80061cc:	6013      	str	r3, [r2, #0]
 80061ce:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d002      	beq.n	80061da <_dtoa_r+0xca>
 80061d4:	4ba5      	ldr	r3, [pc, #660]	@ (800646c <_dtoa_r+0x35c>)
 80061d6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80061d8:	6013      	str	r3, [r2, #0]
 80061da:	4ba5      	ldr	r3, [pc, #660]	@ (8006470 <_dtoa_r+0x360>)
 80061dc:	9308      	str	r3, [sp, #32]
 80061de:	e7e1      	b.n	80061a4 <_dtoa_r+0x94>
 80061e0:	ab1a      	add	r3, sp, #104	@ 0x68
 80061e2:	9301      	str	r3, [sp, #4]
 80061e4:	ab1b      	add	r3, sp, #108	@ 0x6c
 80061e6:	9300      	str	r3, [sp, #0]
 80061e8:	9803      	ldr	r0, [sp, #12]
 80061ea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80061ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80061ee:	f001 fa29 	bl	8007644 <__d2b>
 80061f2:	007a      	lsls	r2, r7, #1
 80061f4:	9005      	str	r0, [sp, #20]
 80061f6:	0d52      	lsrs	r2, r2, #21
 80061f8:	d100      	bne.n	80061fc <_dtoa_r+0xec>
 80061fa:	e07b      	b.n	80062f4 <_dtoa_r+0x1e4>
 80061fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80061fe:	9618      	str	r6, [sp, #96]	@ 0x60
 8006200:	0319      	lsls	r1, r3, #12
 8006202:	4b9c      	ldr	r3, [pc, #624]	@ (8006474 <_dtoa_r+0x364>)
 8006204:	0b09      	lsrs	r1, r1, #12
 8006206:	430b      	orrs	r3, r1
 8006208:	499b      	ldr	r1, [pc, #620]	@ (8006478 <_dtoa_r+0x368>)
 800620a:	1857      	adds	r7, r2, r1
 800620c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800620e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006210:	0019      	movs	r1, r3
 8006212:	2200      	movs	r2, #0
 8006214:	4b99      	ldr	r3, [pc, #612]	@ (800647c <_dtoa_r+0x36c>)
 8006216:	f7fb fd17 	bl	8001c48 <__aeabi_dsub>
 800621a:	4a99      	ldr	r2, [pc, #612]	@ (8006480 <_dtoa_r+0x370>)
 800621c:	4b99      	ldr	r3, [pc, #612]	@ (8006484 <_dtoa_r+0x374>)
 800621e:	f7fb fa2d 	bl	800167c <__aeabi_dmul>
 8006222:	4a99      	ldr	r2, [pc, #612]	@ (8006488 <_dtoa_r+0x378>)
 8006224:	4b99      	ldr	r3, [pc, #612]	@ (800648c <_dtoa_r+0x37c>)
 8006226:	f7fa fa29 	bl	800067c <__aeabi_dadd>
 800622a:	0004      	movs	r4, r0
 800622c:	0038      	movs	r0, r7
 800622e:	000d      	movs	r5, r1
 8006230:	f7fc f972 	bl	8002518 <__aeabi_i2d>
 8006234:	4a96      	ldr	r2, [pc, #600]	@ (8006490 <_dtoa_r+0x380>)
 8006236:	4b97      	ldr	r3, [pc, #604]	@ (8006494 <_dtoa_r+0x384>)
 8006238:	f7fb fa20 	bl	800167c <__aeabi_dmul>
 800623c:	0002      	movs	r2, r0
 800623e:	000b      	movs	r3, r1
 8006240:	0020      	movs	r0, r4
 8006242:	0029      	movs	r1, r5
 8006244:	f7fa fa1a 	bl	800067c <__aeabi_dadd>
 8006248:	0004      	movs	r4, r0
 800624a:	000d      	movs	r5, r1
 800624c:	f7fc f928 	bl	80024a0 <__aeabi_d2iz>
 8006250:	2200      	movs	r2, #0
 8006252:	9004      	str	r0, [sp, #16]
 8006254:	2300      	movs	r3, #0
 8006256:	0020      	movs	r0, r4
 8006258:	0029      	movs	r1, r5
 800625a:	f7fa f8fb 	bl	8000454 <__aeabi_dcmplt>
 800625e:	2800      	cmp	r0, #0
 8006260:	d00b      	beq.n	800627a <_dtoa_r+0x16a>
 8006262:	9804      	ldr	r0, [sp, #16]
 8006264:	f7fc f958 	bl	8002518 <__aeabi_i2d>
 8006268:	002b      	movs	r3, r5
 800626a:	0022      	movs	r2, r4
 800626c:	f7fa f8ec 	bl	8000448 <__aeabi_dcmpeq>
 8006270:	4243      	negs	r3, r0
 8006272:	4158      	adcs	r0, r3
 8006274:	9b04      	ldr	r3, [sp, #16]
 8006276:	1a1b      	subs	r3, r3, r0
 8006278:	9304      	str	r3, [sp, #16]
 800627a:	2301      	movs	r3, #1
 800627c:	9315      	str	r3, [sp, #84]	@ 0x54
 800627e:	9b04      	ldr	r3, [sp, #16]
 8006280:	2b16      	cmp	r3, #22
 8006282:	d810      	bhi.n	80062a6 <_dtoa_r+0x196>
 8006284:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006286:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006288:	9a04      	ldr	r2, [sp, #16]
 800628a:	4b83      	ldr	r3, [pc, #524]	@ (8006498 <_dtoa_r+0x388>)
 800628c:	00d2      	lsls	r2, r2, #3
 800628e:	189b      	adds	r3, r3, r2
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	f7fa f8de 	bl	8000454 <__aeabi_dcmplt>
 8006298:	2800      	cmp	r0, #0
 800629a:	d047      	beq.n	800632c <_dtoa_r+0x21c>
 800629c:	9b04      	ldr	r3, [sp, #16]
 800629e:	3b01      	subs	r3, #1
 80062a0:	9304      	str	r3, [sp, #16]
 80062a2:	2300      	movs	r3, #0
 80062a4:	9315      	str	r3, [sp, #84]	@ 0x54
 80062a6:	2200      	movs	r2, #0
 80062a8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80062aa:	9206      	str	r2, [sp, #24]
 80062ac:	1bdb      	subs	r3, r3, r7
 80062ae:	1e5a      	subs	r2, r3, #1
 80062b0:	d53e      	bpl.n	8006330 <_dtoa_r+0x220>
 80062b2:	2201      	movs	r2, #1
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	9306      	str	r3, [sp, #24]
 80062b8:	2300      	movs	r3, #0
 80062ba:	930d      	str	r3, [sp, #52]	@ 0x34
 80062bc:	9b04      	ldr	r3, [sp, #16]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	db38      	blt.n	8006334 <_dtoa_r+0x224>
 80062c2:	9a04      	ldr	r2, [sp, #16]
 80062c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80062c6:	4694      	mov	ip, r2
 80062c8:	4463      	add	r3, ip
 80062ca:	930d      	str	r3, [sp, #52]	@ 0x34
 80062cc:	2300      	movs	r3, #0
 80062ce:	9214      	str	r2, [sp, #80]	@ 0x50
 80062d0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80062d2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80062d4:	2401      	movs	r4, #1
 80062d6:	2b09      	cmp	r3, #9
 80062d8:	d862      	bhi.n	80063a0 <_dtoa_r+0x290>
 80062da:	2b05      	cmp	r3, #5
 80062dc:	dd02      	ble.n	80062e4 <_dtoa_r+0x1d4>
 80062de:	2400      	movs	r4, #0
 80062e0:	3b04      	subs	r3, #4
 80062e2:	9322      	str	r3, [sp, #136]	@ 0x88
 80062e4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80062e6:	1e98      	subs	r0, r3, #2
 80062e8:	2803      	cmp	r0, #3
 80062ea:	d863      	bhi.n	80063b4 <_dtoa_r+0x2a4>
 80062ec:	f7f9 ff12 	bl	8000114 <__gnu_thumb1_case_uqi>
 80062f0:	2b385654 	.word	0x2b385654
 80062f4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80062f6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80062f8:	18f6      	adds	r6, r6, r3
 80062fa:	4b68      	ldr	r3, [pc, #416]	@ (800649c <_dtoa_r+0x38c>)
 80062fc:	18f2      	adds	r2, r6, r3
 80062fe:	2a20      	cmp	r2, #32
 8006300:	dd0f      	ble.n	8006322 <_dtoa_r+0x212>
 8006302:	2340      	movs	r3, #64	@ 0x40
 8006304:	1a9b      	subs	r3, r3, r2
 8006306:	409f      	lsls	r7, r3
 8006308:	4b65      	ldr	r3, [pc, #404]	@ (80064a0 <_dtoa_r+0x390>)
 800630a:	0038      	movs	r0, r7
 800630c:	18f3      	adds	r3, r6, r3
 800630e:	40dc      	lsrs	r4, r3
 8006310:	4320      	orrs	r0, r4
 8006312:	f7fc f92f 	bl	8002574 <__aeabi_ui2d>
 8006316:	2201      	movs	r2, #1
 8006318:	4b62      	ldr	r3, [pc, #392]	@ (80064a4 <_dtoa_r+0x394>)
 800631a:	1e77      	subs	r7, r6, #1
 800631c:	18cb      	adds	r3, r1, r3
 800631e:	9218      	str	r2, [sp, #96]	@ 0x60
 8006320:	e776      	b.n	8006210 <_dtoa_r+0x100>
 8006322:	2320      	movs	r3, #32
 8006324:	0020      	movs	r0, r4
 8006326:	1a9b      	subs	r3, r3, r2
 8006328:	4098      	lsls	r0, r3
 800632a:	e7f2      	b.n	8006312 <_dtoa_r+0x202>
 800632c:	9015      	str	r0, [sp, #84]	@ 0x54
 800632e:	e7ba      	b.n	80062a6 <_dtoa_r+0x196>
 8006330:	920d      	str	r2, [sp, #52]	@ 0x34
 8006332:	e7c3      	b.n	80062bc <_dtoa_r+0x1ac>
 8006334:	9b06      	ldr	r3, [sp, #24]
 8006336:	9a04      	ldr	r2, [sp, #16]
 8006338:	1a9b      	subs	r3, r3, r2
 800633a:	9306      	str	r3, [sp, #24]
 800633c:	4253      	negs	r3, r2
 800633e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006340:	2300      	movs	r3, #0
 8006342:	9314      	str	r3, [sp, #80]	@ 0x50
 8006344:	e7c5      	b.n	80062d2 <_dtoa_r+0x1c2>
 8006346:	2301      	movs	r3, #1
 8006348:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800634a:	9310      	str	r3, [sp, #64]	@ 0x40
 800634c:	4694      	mov	ip, r2
 800634e:	9b04      	ldr	r3, [sp, #16]
 8006350:	4463      	add	r3, ip
 8006352:	930e      	str	r3, [sp, #56]	@ 0x38
 8006354:	3301      	adds	r3, #1
 8006356:	9309      	str	r3, [sp, #36]	@ 0x24
 8006358:	2b00      	cmp	r3, #0
 800635a:	dc08      	bgt.n	800636e <_dtoa_r+0x25e>
 800635c:	2301      	movs	r3, #1
 800635e:	e006      	b.n	800636e <_dtoa_r+0x25e>
 8006360:	2301      	movs	r3, #1
 8006362:	9310      	str	r3, [sp, #64]	@ 0x40
 8006364:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006366:	2b00      	cmp	r3, #0
 8006368:	dd28      	ble.n	80063bc <_dtoa_r+0x2ac>
 800636a:	930e      	str	r3, [sp, #56]	@ 0x38
 800636c:	9309      	str	r3, [sp, #36]	@ 0x24
 800636e:	9a03      	ldr	r2, [sp, #12]
 8006370:	2100      	movs	r1, #0
 8006372:	69d0      	ldr	r0, [r2, #28]
 8006374:	2204      	movs	r2, #4
 8006376:	0015      	movs	r5, r2
 8006378:	3514      	adds	r5, #20
 800637a:	429d      	cmp	r5, r3
 800637c:	d923      	bls.n	80063c6 <_dtoa_r+0x2b6>
 800637e:	6041      	str	r1, [r0, #4]
 8006380:	9803      	ldr	r0, [sp, #12]
 8006382:	f000 fe23 	bl	8006fcc <_Balloc>
 8006386:	9008      	str	r0, [sp, #32]
 8006388:	2800      	cmp	r0, #0
 800638a:	d11f      	bne.n	80063cc <_dtoa_r+0x2bc>
 800638c:	21b0      	movs	r1, #176	@ 0xb0
 800638e:	4b46      	ldr	r3, [pc, #280]	@ (80064a8 <_dtoa_r+0x398>)
 8006390:	4831      	ldr	r0, [pc, #196]	@ (8006458 <_dtoa_r+0x348>)
 8006392:	9a08      	ldr	r2, [sp, #32]
 8006394:	31ff      	adds	r1, #255	@ 0xff
 8006396:	e6d0      	b.n	800613a <_dtoa_r+0x2a>
 8006398:	2300      	movs	r3, #0
 800639a:	e7e2      	b.n	8006362 <_dtoa_r+0x252>
 800639c:	2300      	movs	r3, #0
 800639e:	e7d3      	b.n	8006348 <_dtoa_r+0x238>
 80063a0:	2300      	movs	r3, #0
 80063a2:	9410      	str	r4, [sp, #64]	@ 0x40
 80063a4:	9322      	str	r3, [sp, #136]	@ 0x88
 80063a6:	3b01      	subs	r3, #1
 80063a8:	2200      	movs	r2, #0
 80063aa:	930e      	str	r3, [sp, #56]	@ 0x38
 80063ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80063ae:	3313      	adds	r3, #19
 80063b0:	9223      	str	r2, [sp, #140]	@ 0x8c
 80063b2:	e7dc      	b.n	800636e <_dtoa_r+0x25e>
 80063b4:	2301      	movs	r3, #1
 80063b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80063b8:	3b02      	subs	r3, #2
 80063ba:	e7f5      	b.n	80063a8 <_dtoa_r+0x298>
 80063bc:	2301      	movs	r3, #1
 80063be:	001a      	movs	r2, r3
 80063c0:	930e      	str	r3, [sp, #56]	@ 0x38
 80063c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80063c4:	e7f4      	b.n	80063b0 <_dtoa_r+0x2a0>
 80063c6:	3101      	adds	r1, #1
 80063c8:	0052      	lsls	r2, r2, #1
 80063ca:	e7d4      	b.n	8006376 <_dtoa_r+0x266>
 80063cc:	9b03      	ldr	r3, [sp, #12]
 80063ce:	9a08      	ldr	r2, [sp, #32]
 80063d0:	69db      	ldr	r3, [r3, #28]
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063d6:	2b0e      	cmp	r3, #14
 80063d8:	d900      	bls.n	80063dc <_dtoa_r+0x2cc>
 80063da:	e0d6      	b.n	800658a <_dtoa_r+0x47a>
 80063dc:	2c00      	cmp	r4, #0
 80063de:	d100      	bne.n	80063e2 <_dtoa_r+0x2d2>
 80063e0:	e0d3      	b.n	800658a <_dtoa_r+0x47a>
 80063e2:	9b04      	ldr	r3, [sp, #16]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	dd63      	ble.n	80064b0 <_dtoa_r+0x3a0>
 80063e8:	210f      	movs	r1, #15
 80063ea:	9a04      	ldr	r2, [sp, #16]
 80063ec:	4b2a      	ldr	r3, [pc, #168]	@ (8006498 <_dtoa_r+0x388>)
 80063ee:	400a      	ands	r2, r1
 80063f0:	00d2      	lsls	r2, r2, #3
 80063f2:	189b      	adds	r3, r3, r2
 80063f4:	681e      	ldr	r6, [r3, #0]
 80063f6:	685f      	ldr	r7, [r3, #4]
 80063f8:	9b04      	ldr	r3, [sp, #16]
 80063fa:	2402      	movs	r4, #2
 80063fc:	111d      	asrs	r5, r3, #4
 80063fe:	05db      	lsls	r3, r3, #23
 8006400:	d50a      	bpl.n	8006418 <_dtoa_r+0x308>
 8006402:	4b2a      	ldr	r3, [pc, #168]	@ (80064ac <_dtoa_r+0x39c>)
 8006404:	400d      	ands	r5, r1
 8006406:	6a1a      	ldr	r2, [r3, #32]
 8006408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800640a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800640c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800640e:	f7fa fcfb 	bl	8000e08 <__aeabi_ddiv>
 8006412:	900a      	str	r0, [sp, #40]	@ 0x28
 8006414:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006416:	3401      	adds	r4, #1
 8006418:	4b24      	ldr	r3, [pc, #144]	@ (80064ac <_dtoa_r+0x39c>)
 800641a:	930c      	str	r3, [sp, #48]	@ 0x30
 800641c:	2d00      	cmp	r5, #0
 800641e:	d108      	bne.n	8006432 <_dtoa_r+0x322>
 8006420:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006422:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006424:	0032      	movs	r2, r6
 8006426:	003b      	movs	r3, r7
 8006428:	f7fa fcee 	bl	8000e08 <__aeabi_ddiv>
 800642c:	900a      	str	r0, [sp, #40]	@ 0x28
 800642e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006430:	e059      	b.n	80064e6 <_dtoa_r+0x3d6>
 8006432:	2301      	movs	r3, #1
 8006434:	421d      	tst	r5, r3
 8006436:	d009      	beq.n	800644c <_dtoa_r+0x33c>
 8006438:	18e4      	adds	r4, r4, r3
 800643a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800643c:	0030      	movs	r0, r6
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	0039      	movs	r1, r7
 8006444:	f7fb f91a 	bl	800167c <__aeabi_dmul>
 8006448:	0006      	movs	r6, r0
 800644a:	000f      	movs	r7, r1
 800644c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800644e:	106d      	asrs	r5, r5, #1
 8006450:	3308      	adds	r3, #8
 8006452:	e7e2      	b.n	800641a <_dtoa_r+0x30a>
 8006454:	080080a1 	.word	0x080080a1
 8006458:	080080b8 	.word	0x080080b8
 800645c:	7ff00000 	.word	0x7ff00000
 8006460:	0000270f 	.word	0x0000270f
 8006464:	0800809d 	.word	0x0800809d
 8006468:	080080a0 	.word	0x080080a0
 800646c:	08008071 	.word	0x08008071
 8006470:	08008070 	.word	0x08008070
 8006474:	3ff00000 	.word	0x3ff00000
 8006478:	fffffc01 	.word	0xfffffc01
 800647c:	3ff80000 	.word	0x3ff80000
 8006480:	636f4361 	.word	0x636f4361
 8006484:	3fd287a7 	.word	0x3fd287a7
 8006488:	8b60c8b3 	.word	0x8b60c8b3
 800648c:	3fc68a28 	.word	0x3fc68a28
 8006490:	509f79fb 	.word	0x509f79fb
 8006494:	3fd34413 	.word	0x3fd34413
 8006498:	08008208 	.word	0x08008208
 800649c:	00000432 	.word	0x00000432
 80064a0:	00000412 	.word	0x00000412
 80064a4:	fe100000 	.word	0xfe100000
 80064a8:	08008110 	.word	0x08008110
 80064ac:	080081e0 	.word	0x080081e0
 80064b0:	9b04      	ldr	r3, [sp, #16]
 80064b2:	2402      	movs	r4, #2
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d016      	beq.n	80064e6 <_dtoa_r+0x3d6>
 80064b8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80064ba:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80064bc:	220f      	movs	r2, #15
 80064be:	425d      	negs	r5, r3
 80064c0:	402a      	ands	r2, r5
 80064c2:	4bd5      	ldr	r3, [pc, #852]	@ (8006818 <_dtoa_r+0x708>)
 80064c4:	00d2      	lsls	r2, r2, #3
 80064c6:	189b      	adds	r3, r3, r2
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	f7fb f8d6 	bl	800167c <__aeabi_dmul>
 80064d0:	2701      	movs	r7, #1
 80064d2:	2300      	movs	r3, #0
 80064d4:	900a      	str	r0, [sp, #40]	@ 0x28
 80064d6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80064d8:	4ed0      	ldr	r6, [pc, #832]	@ (800681c <_dtoa_r+0x70c>)
 80064da:	112d      	asrs	r5, r5, #4
 80064dc:	2d00      	cmp	r5, #0
 80064de:	d000      	beq.n	80064e2 <_dtoa_r+0x3d2>
 80064e0:	e095      	b.n	800660e <_dtoa_r+0x4fe>
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1a2      	bne.n	800642c <_dtoa_r+0x31c>
 80064e6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80064e8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80064ea:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d100      	bne.n	80064f2 <_dtoa_r+0x3e2>
 80064f0:	e098      	b.n	8006624 <_dtoa_r+0x514>
 80064f2:	2200      	movs	r2, #0
 80064f4:	0030      	movs	r0, r6
 80064f6:	0039      	movs	r1, r7
 80064f8:	4bc9      	ldr	r3, [pc, #804]	@ (8006820 <_dtoa_r+0x710>)
 80064fa:	f7f9 ffab 	bl	8000454 <__aeabi_dcmplt>
 80064fe:	2800      	cmp	r0, #0
 8006500:	d100      	bne.n	8006504 <_dtoa_r+0x3f4>
 8006502:	e08f      	b.n	8006624 <_dtoa_r+0x514>
 8006504:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006506:	2b00      	cmp	r3, #0
 8006508:	d100      	bne.n	800650c <_dtoa_r+0x3fc>
 800650a:	e08b      	b.n	8006624 <_dtoa_r+0x514>
 800650c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800650e:	2b00      	cmp	r3, #0
 8006510:	dd37      	ble.n	8006582 <_dtoa_r+0x472>
 8006512:	9b04      	ldr	r3, [sp, #16]
 8006514:	2200      	movs	r2, #0
 8006516:	3b01      	subs	r3, #1
 8006518:	930c      	str	r3, [sp, #48]	@ 0x30
 800651a:	0030      	movs	r0, r6
 800651c:	4bc1      	ldr	r3, [pc, #772]	@ (8006824 <_dtoa_r+0x714>)
 800651e:	0039      	movs	r1, r7
 8006520:	f7fb f8ac 	bl	800167c <__aeabi_dmul>
 8006524:	900a      	str	r0, [sp, #40]	@ 0x28
 8006526:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006528:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800652a:	3401      	adds	r4, #1
 800652c:	0020      	movs	r0, r4
 800652e:	9311      	str	r3, [sp, #68]	@ 0x44
 8006530:	f7fb fff2 	bl	8002518 <__aeabi_i2d>
 8006534:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006536:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006538:	f7fb f8a0 	bl	800167c <__aeabi_dmul>
 800653c:	4bba      	ldr	r3, [pc, #744]	@ (8006828 <_dtoa_r+0x718>)
 800653e:	2200      	movs	r2, #0
 8006540:	f7fa f89c 	bl	800067c <__aeabi_dadd>
 8006544:	4bb9      	ldr	r3, [pc, #740]	@ (800682c <_dtoa_r+0x71c>)
 8006546:	0006      	movs	r6, r0
 8006548:	18cf      	adds	r7, r1, r3
 800654a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800654c:	2b00      	cmp	r3, #0
 800654e:	d16d      	bne.n	800662c <_dtoa_r+0x51c>
 8006550:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006552:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006554:	2200      	movs	r2, #0
 8006556:	4bb6      	ldr	r3, [pc, #728]	@ (8006830 <_dtoa_r+0x720>)
 8006558:	f7fb fb76 	bl	8001c48 <__aeabi_dsub>
 800655c:	0032      	movs	r2, r6
 800655e:	003b      	movs	r3, r7
 8006560:	0004      	movs	r4, r0
 8006562:	000d      	movs	r5, r1
 8006564:	f7f9 ff8a 	bl	800047c <__aeabi_dcmpgt>
 8006568:	2800      	cmp	r0, #0
 800656a:	d000      	beq.n	800656e <_dtoa_r+0x45e>
 800656c:	e2b6      	b.n	8006adc <_dtoa_r+0x9cc>
 800656e:	2180      	movs	r1, #128	@ 0x80
 8006570:	0609      	lsls	r1, r1, #24
 8006572:	187b      	adds	r3, r7, r1
 8006574:	0032      	movs	r2, r6
 8006576:	0020      	movs	r0, r4
 8006578:	0029      	movs	r1, r5
 800657a:	f7f9 ff6b 	bl	8000454 <__aeabi_dcmplt>
 800657e:	2800      	cmp	r0, #0
 8006580:	d128      	bne.n	80065d4 <_dtoa_r+0x4c4>
 8006582:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006584:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8006586:	930a      	str	r3, [sp, #40]	@ 0x28
 8006588:	940b      	str	r4, [sp, #44]	@ 0x2c
 800658a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800658c:	2b00      	cmp	r3, #0
 800658e:	da00      	bge.n	8006592 <_dtoa_r+0x482>
 8006590:	e174      	b.n	800687c <_dtoa_r+0x76c>
 8006592:	9a04      	ldr	r2, [sp, #16]
 8006594:	2a0e      	cmp	r2, #14
 8006596:	dd00      	ble.n	800659a <_dtoa_r+0x48a>
 8006598:	e170      	b.n	800687c <_dtoa_r+0x76c>
 800659a:	4b9f      	ldr	r3, [pc, #636]	@ (8006818 <_dtoa_r+0x708>)
 800659c:	00d2      	lsls	r2, r2, #3
 800659e:	189b      	adds	r3, r3, r2
 80065a0:	685c      	ldr	r4, [r3, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	9306      	str	r3, [sp, #24]
 80065a6:	9407      	str	r4, [sp, #28]
 80065a8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	db00      	blt.n	80065b0 <_dtoa_r+0x4a0>
 80065ae:	e0e7      	b.n	8006780 <_dtoa_r+0x670>
 80065b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	dd00      	ble.n	80065b8 <_dtoa_r+0x4a8>
 80065b6:	e0e3      	b.n	8006780 <_dtoa_r+0x670>
 80065b8:	d10c      	bne.n	80065d4 <_dtoa_r+0x4c4>
 80065ba:	9806      	ldr	r0, [sp, #24]
 80065bc:	9907      	ldr	r1, [sp, #28]
 80065be:	2200      	movs	r2, #0
 80065c0:	4b9b      	ldr	r3, [pc, #620]	@ (8006830 <_dtoa_r+0x720>)
 80065c2:	f7fb f85b 	bl	800167c <__aeabi_dmul>
 80065c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80065c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065ca:	f7f9 ff61 	bl	8000490 <__aeabi_dcmpge>
 80065ce:	2800      	cmp	r0, #0
 80065d0:	d100      	bne.n	80065d4 <_dtoa_r+0x4c4>
 80065d2:	e286      	b.n	8006ae2 <_dtoa_r+0x9d2>
 80065d4:	2600      	movs	r6, #0
 80065d6:	0037      	movs	r7, r6
 80065d8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80065da:	9c08      	ldr	r4, [sp, #32]
 80065dc:	43db      	mvns	r3, r3
 80065de:	930c      	str	r3, [sp, #48]	@ 0x30
 80065e0:	9704      	str	r7, [sp, #16]
 80065e2:	2700      	movs	r7, #0
 80065e4:	0031      	movs	r1, r6
 80065e6:	9803      	ldr	r0, [sp, #12]
 80065e8:	f000 fd34 	bl	8007054 <_Bfree>
 80065ec:	9b04      	ldr	r3, [sp, #16]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d100      	bne.n	80065f4 <_dtoa_r+0x4e4>
 80065f2:	e0bb      	b.n	800676c <_dtoa_r+0x65c>
 80065f4:	2f00      	cmp	r7, #0
 80065f6:	d005      	beq.n	8006604 <_dtoa_r+0x4f4>
 80065f8:	429f      	cmp	r7, r3
 80065fa:	d003      	beq.n	8006604 <_dtoa_r+0x4f4>
 80065fc:	0039      	movs	r1, r7
 80065fe:	9803      	ldr	r0, [sp, #12]
 8006600:	f000 fd28 	bl	8007054 <_Bfree>
 8006604:	9904      	ldr	r1, [sp, #16]
 8006606:	9803      	ldr	r0, [sp, #12]
 8006608:	f000 fd24 	bl	8007054 <_Bfree>
 800660c:	e0ae      	b.n	800676c <_dtoa_r+0x65c>
 800660e:	423d      	tst	r5, r7
 8006610:	d005      	beq.n	800661e <_dtoa_r+0x50e>
 8006612:	6832      	ldr	r2, [r6, #0]
 8006614:	6873      	ldr	r3, [r6, #4]
 8006616:	f7fb f831 	bl	800167c <__aeabi_dmul>
 800661a:	003b      	movs	r3, r7
 800661c:	3401      	adds	r4, #1
 800661e:	106d      	asrs	r5, r5, #1
 8006620:	3608      	adds	r6, #8
 8006622:	e75b      	b.n	80064dc <_dtoa_r+0x3cc>
 8006624:	9b04      	ldr	r3, [sp, #16]
 8006626:	930c      	str	r3, [sp, #48]	@ 0x30
 8006628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800662a:	e77f      	b.n	800652c <_dtoa_r+0x41c>
 800662c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800662e:	4b7a      	ldr	r3, [pc, #488]	@ (8006818 <_dtoa_r+0x708>)
 8006630:	3a01      	subs	r2, #1
 8006632:	00d2      	lsls	r2, r2, #3
 8006634:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8006636:	189b      	adds	r3, r3, r2
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	2900      	cmp	r1, #0
 800663e:	d04c      	beq.n	80066da <_dtoa_r+0x5ca>
 8006640:	2000      	movs	r0, #0
 8006642:	497c      	ldr	r1, [pc, #496]	@ (8006834 <_dtoa_r+0x724>)
 8006644:	f7fa fbe0 	bl	8000e08 <__aeabi_ddiv>
 8006648:	0032      	movs	r2, r6
 800664a:	003b      	movs	r3, r7
 800664c:	f7fb fafc 	bl	8001c48 <__aeabi_dsub>
 8006650:	9a08      	ldr	r2, [sp, #32]
 8006652:	0006      	movs	r6, r0
 8006654:	4694      	mov	ip, r2
 8006656:	000f      	movs	r7, r1
 8006658:	9b08      	ldr	r3, [sp, #32]
 800665a:	9316      	str	r3, [sp, #88]	@ 0x58
 800665c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800665e:	4463      	add	r3, ip
 8006660:	9311      	str	r3, [sp, #68]	@ 0x44
 8006662:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006664:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006666:	f7fb ff1b 	bl	80024a0 <__aeabi_d2iz>
 800666a:	0005      	movs	r5, r0
 800666c:	f7fb ff54 	bl	8002518 <__aeabi_i2d>
 8006670:	0002      	movs	r2, r0
 8006672:	000b      	movs	r3, r1
 8006674:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006676:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006678:	f7fb fae6 	bl	8001c48 <__aeabi_dsub>
 800667c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800667e:	3530      	adds	r5, #48	@ 0x30
 8006680:	1c5c      	adds	r4, r3, #1
 8006682:	701d      	strb	r5, [r3, #0]
 8006684:	0032      	movs	r2, r6
 8006686:	003b      	movs	r3, r7
 8006688:	900a      	str	r0, [sp, #40]	@ 0x28
 800668a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800668c:	f7f9 fee2 	bl	8000454 <__aeabi_dcmplt>
 8006690:	2800      	cmp	r0, #0
 8006692:	d16b      	bne.n	800676c <_dtoa_r+0x65c>
 8006694:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006696:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006698:	2000      	movs	r0, #0
 800669a:	4961      	ldr	r1, [pc, #388]	@ (8006820 <_dtoa_r+0x710>)
 800669c:	f7fb fad4 	bl	8001c48 <__aeabi_dsub>
 80066a0:	0032      	movs	r2, r6
 80066a2:	003b      	movs	r3, r7
 80066a4:	f7f9 fed6 	bl	8000454 <__aeabi_dcmplt>
 80066a8:	2800      	cmp	r0, #0
 80066aa:	d000      	beq.n	80066ae <_dtoa_r+0x59e>
 80066ac:	e0c6      	b.n	800683c <_dtoa_r+0x72c>
 80066ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80066b0:	42a3      	cmp	r3, r4
 80066b2:	d100      	bne.n	80066b6 <_dtoa_r+0x5a6>
 80066b4:	e765      	b.n	8006582 <_dtoa_r+0x472>
 80066b6:	2200      	movs	r2, #0
 80066b8:	0030      	movs	r0, r6
 80066ba:	0039      	movs	r1, r7
 80066bc:	4b59      	ldr	r3, [pc, #356]	@ (8006824 <_dtoa_r+0x714>)
 80066be:	f7fa ffdd 	bl	800167c <__aeabi_dmul>
 80066c2:	2200      	movs	r2, #0
 80066c4:	0006      	movs	r6, r0
 80066c6:	000f      	movs	r7, r1
 80066c8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80066ca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80066cc:	4b55      	ldr	r3, [pc, #340]	@ (8006824 <_dtoa_r+0x714>)
 80066ce:	f7fa ffd5 	bl	800167c <__aeabi_dmul>
 80066d2:	9416      	str	r4, [sp, #88]	@ 0x58
 80066d4:	900a      	str	r0, [sp, #40]	@ 0x28
 80066d6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80066d8:	e7c3      	b.n	8006662 <_dtoa_r+0x552>
 80066da:	0030      	movs	r0, r6
 80066dc:	0039      	movs	r1, r7
 80066de:	f7fa ffcd 	bl	800167c <__aeabi_dmul>
 80066e2:	9d08      	ldr	r5, [sp, #32]
 80066e4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80066e6:	002b      	movs	r3, r5
 80066e8:	4694      	mov	ip, r2
 80066ea:	9016      	str	r0, [sp, #88]	@ 0x58
 80066ec:	9117      	str	r1, [sp, #92]	@ 0x5c
 80066ee:	4463      	add	r3, ip
 80066f0:	9319      	str	r3, [sp, #100]	@ 0x64
 80066f2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80066f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80066f6:	f7fb fed3 	bl	80024a0 <__aeabi_d2iz>
 80066fa:	0004      	movs	r4, r0
 80066fc:	f7fb ff0c 	bl	8002518 <__aeabi_i2d>
 8006700:	000b      	movs	r3, r1
 8006702:	0002      	movs	r2, r0
 8006704:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006706:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006708:	f7fb fa9e 	bl	8001c48 <__aeabi_dsub>
 800670c:	3430      	adds	r4, #48	@ 0x30
 800670e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006710:	702c      	strb	r4, [r5, #0]
 8006712:	3501      	adds	r5, #1
 8006714:	0006      	movs	r6, r0
 8006716:	000f      	movs	r7, r1
 8006718:	42ab      	cmp	r3, r5
 800671a:	d12a      	bne.n	8006772 <_dtoa_r+0x662>
 800671c:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800671e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8006720:	9b08      	ldr	r3, [sp, #32]
 8006722:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8006724:	469c      	mov	ip, r3
 8006726:	2200      	movs	r2, #0
 8006728:	4b42      	ldr	r3, [pc, #264]	@ (8006834 <_dtoa_r+0x724>)
 800672a:	4464      	add	r4, ip
 800672c:	f7f9 ffa6 	bl	800067c <__aeabi_dadd>
 8006730:	0002      	movs	r2, r0
 8006732:	000b      	movs	r3, r1
 8006734:	0030      	movs	r0, r6
 8006736:	0039      	movs	r1, r7
 8006738:	f7f9 fea0 	bl	800047c <__aeabi_dcmpgt>
 800673c:	2800      	cmp	r0, #0
 800673e:	d000      	beq.n	8006742 <_dtoa_r+0x632>
 8006740:	e07c      	b.n	800683c <_dtoa_r+0x72c>
 8006742:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006744:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006746:	2000      	movs	r0, #0
 8006748:	493a      	ldr	r1, [pc, #232]	@ (8006834 <_dtoa_r+0x724>)
 800674a:	f7fb fa7d 	bl	8001c48 <__aeabi_dsub>
 800674e:	0002      	movs	r2, r0
 8006750:	000b      	movs	r3, r1
 8006752:	0030      	movs	r0, r6
 8006754:	0039      	movs	r1, r7
 8006756:	f7f9 fe7d 	bl	8000454 <__aeabi_dcmplt>
 800675a:	2800      	cmp	r0, #0
 800675c:	d100      	bne.n	8006760 <_dtoa_r+0x650>
 800675e:	e710      	b.n	8006582 <_dtoa_r+0x472>
 8006760:	0023      	movs	r3, r4
 8006762:	3c01      	subs	r4, #1
 8006764:	7822      	ldrb	r2, [r4, #0]
 8006766:	2a30      	cmp	r2, #48	@ 0x30
 8006768:	d0fa      	beq.n	8006760 <_dtoa_r+0x650>
 800676a:	001c      	movs	r4, r3
 800676c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800676e:	9304      	str	r3, [sp, #16]
 8006770:	e042      	b.n	80067f8 <_dtoa_r+0x6e8>
 8006772:	2200      	movs	r2, #0
 8006774:	4b2b      	ldr	r3, [pc, #172]	@ (8006824 <_dtoa_r+0x714>)
 8006776:	f7fa ff81 	bl	800167c <__aeabi_dmul>
 800677a:	900a      	str	r0, [sp, #40]	@ 0x28
 800677c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800677e:	e7b8      	b.n	80066f2 <_dtoa_r+0x5e2>
 8006780:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006782:	9d08      	ldr	r5, [sp, #32]
 8006784:	3b01      	subs	r3, #1
 8006786:	195b      	adds	r3, r3, r5
 8006788:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800678a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800678c:	930a      	str	r3, [sp, #40]	@ 0x28
 800678e:	9a06      	ldr	r2, [sp, #24]
 8006790:	9b07      	ldr	r3, [sp, #28]
 8006792:	0030      	movs	r0, r6
 8006794:	0039      	movs	r1, r7
 8006796:	f7fa fb37 	bl	8000e08 <__aeabi_ddiv>
 800679a:	f7fb fe81 	bl	80024a0 <__aeabi_d2iz>
 800679e:	9009      	str	r0, [sp, #36]	@ 0x24
 80067a0:	f7fb feba 	bl	8002518 <__aeabi_i2d>
 80067a4:	9a06      	ldr	r2, [sp, #24]
 80067a6:	9b07      	ldr	r3, [sp, #28]
 80067a8:	f7fa ff68 	bl	800167c <__aeabi_dmul>
 80067ac:	0002      	movs	r2, r0
 80067ae:	000b      	movs	r3, r1
 80067b0:	0030      	movs	r0, r6
 80067b2:	0039      	movs	r1, r7
 80067b4:	f7fb fa48 	bl	8001c48 <__aeabi_dsub>
 80067b8:	002b      	movs	r3, r5
 80067ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067bc:	3501      	adds	r5, #1
 80067be:	3230      	adds	r2, #48	@ 0x30
 80067c0:	701a      	strb	r2, [r3, #0]
 80067c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80067c4:	002c      	movs	r4, r5
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d14b      	bne.n	8006862 <_dtoa_r+0x752>
 80067ca:	0002      	movs	r2, r0
 80067cc:	000b      	movs	r3, r1
 80067ce:	f7f9 ff55 	bl	800067c <__aeabi_dadd>
 80067d2:	9a06      	ldr	r2, [sp, #24]
 80067d4:	9b07      	ldr	r3, [sp, #28]
 80067d6:	0006      	movs	r6, r0
 80067d8:	000f      	movs	r7, r1
 80067da:	f7f9 fe4f 	bl	800047c <__aeabi_dcmpgt>
 80067de:	2800      	cmp	r0, #0
 80067e0:	d12a      	bne.n	8006838 <_dtoa_r+0x728>
 80067e2:	9a06      	ldr	r2, [sp, #24]
 80067e4:	9b07      	ldr	r3, [sp, #28]
 80067e6:	0030      	movs	r0, r6
 80067e8:	0039      	movs	r1, r7
 80067ea:	f7f9 fe2d 	bl	8000448 <__aeabi_dcmpeq>
 80067ee:	2800      	cmp	r0, #0
 80067f0:	d002      	beq.n	80067f8 <_dtoa_r+0x6e8>
 80067f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067f4:	07dd      	lsls	r5, r3, #31
 80067f6:	d41f      	bmi.n	8006838 <_dtoa_r+0x728>
 80067f8:	9905      	ldr	r1, [sp, #20]
 80067fa:	9803      	ldr	r0, [sp, #12]
 80067fc:	f000 fc2a 	bl	8007054 <_Bfree>
 8006800:	2300      	movs	r3, #0
 8006802:	7023      	strb	r3, [r4, #0]
 8006804:	9b04      	ldr	r3, [sp, #16]
 8006806:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006808:	3301      	adds	r3, #1
 800680a:	6013      	str	r3, [r2, #0]
 800680c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800680e:	2b00      	cmp	r3, #0
 8006810:	d100      	bne.n	8006814 <_dtoa_r+0x704>
 8006812:	e4c7      	b.n	80061a4 <_dtoa_r+0x94>
 8006814:	601c      	str	r4, [r3, #0]
 8006816:	e4c5      	b.n	80061a4 <_dtoa_r+0x94>
 8006818:	08008208 	.word	0x08008208
 800681c:	080081e0 	.word	0x080081e0
 8006820:	3ff00000 	.word	0x3ff00000
 8006824:	40240000 	.word	0x40240000
 8006828:	401c0000 	.word	0x401c0000
 800682c:	fcc00000 	.word	0xfcc00000
 8006830:	40140000 	.word	0x40140000
 8006834:	3fe00000 	.word	0x3fe00000
 8006838:	9b04      	ldr	r3, [sp, #16]
 800683a:	930c      	str	r3, [sp, #48]	@ 0x30
 800683c:	0023      	movs	r3, r4
 800683e:	001c      	movs	r4, r3
 8006840:	3b01      	subs	r3, #1
 8006842:	781a      	ldrb	r2, [r3, #0]
 8006844:	2a39      	cmp	r2, #57	@ 0x39
 8006846:	d108      	bne.n	800685a <_dtoa_r+0x74a>
 8006848:	9a08      	ldr	r2, [sp, #32]
 800684a:	429a      	cmp	r2, r3
 800684c:	d1f7      	bne.n	800683e <_dtoa_r+0x72e>
 800684e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006850:	9908      	ldr	r1, [sp, #32]
 8006852:	3201      	adds	r2, #1
 8006854:	920c      	str	r2, [sp, #48]	@ 0x30
 8006856:	2230      	movs	r2, #48	@ 0x30
 8006858:	700a      	strb	r2, [r1, #0]
 800685a:	781a      	ldrb	r2, [r3, #0]
 800685c:	3201      	adds	r2, #1
 800685e:	701a      	strb	r2, [r3, #0]
 8006860:	e784      	b.n	800676c <_dtoa_r+0x65c>
 8006862:	2200      	movs	r2, #0
 8006864:	4bc6      	ldr	r3, [pc, #792]	@ (8006b80 <_dtoa_r+0xa70>)
 8006866:	f7fa ff09 	bl	800167c <__aeabi_dmul>
 800686a:	2200      	movs	r2, #0
 800686c:	2300      	movs	r3, #0
 800686e:	0006      	movs	r6, r0
 8006870:	000f      	movs	r7, r1
 8006872:	f7f9 fde9 	bl	8000448 <__aeabi_dcmpeq>
 8006876:	2800      	cmp	r0, #0
 8006878:	d089      	beq.n	800678e <_dtoa_r+0x67e>
 800687a:	e7bd      	b.n	80067f8 <_dtoa_r+0x6e8>
 800687c:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800687e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8006880:	9c06      	ldr	r4, [sp, #24]
 8006882:	2f00      	cmp	r7, #0
 8006884:	d014      	beq.n	80068b0 <_dtoa_r+0x7a0>
 8006886:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006888:	2a01      	cmp	r2, #1
 800688a:	dd00      	ble.n	800688e <_dtoa_r+0x77e>
 800688c:	e0e4      	b.n	8006a58 <_dtoa_r+0x948>
 800688e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8006890:	2a00      	cmp	r2, #0
 8006892:	d100      	bne.n	8006896 <_dtoa_r+0x786>
 8006894:	e0da      	b.n	8006a4c <_dtoa_r+0x93c>
 8006896:	4abb      	ldr	r2, [pc, #748]	@ (8006b84 <_dtoa_r+0xa74>)
 8006898:	189b      	adds	r3, r3, r2
 800689a:	9a06      	ldr	r2, [sp, #24]
 800689c:	2101      	movs	r1, #1
 800689e:	18d2      	adds	r2, r2, r3
 80068a0:	9206      	str	r2, [sp, #24]
 80068a2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80068a4:	9803      	ldr	r0, [sp, #12]
 80068a6:	18d3      	adds	r3, r2, r3
 80068a8:	930d      	str	r3, [sp, #52]	@ 0x34
 80068aa:	f000 fc8b 	bl	80071c4 <__i2b>
 80068ae:	0007      	movs	r7, r0
 80068b0:	2c00      	cmp	r4, #0
 80068b2:	d00e      	beq.n	80068d2 <_dtoa_r+0x7c2>
 80068b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	dd0b      	ble.n	80068d2 <_dtoa_r+0x7c2>
 80068ba:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80068bc:	0023      	movs	r3, r4
 80068be:	4294      	cmp	r4, r2
 80068c0:	dd00      	ble.n	80068c4 <_dtoa_r+0x7b4>
 80068c2:	0013      	movs	r3, r2
 80068c4:	9a06      	ldr	r2, [sp, #24]
 80068c6:	1ae4      	subs	r4, r4, r3
 80068c8:	1ad2      	subs	r2, r2, r3
 80068ca:	9206      	str	r2, [sp, #24]
 80068cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	930d      	str	r3, [sp, #52]	@ 0x34
 80068d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d021      	beq.n	800691c <_dtoa_r+0x80c>
 80068d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d100      	bne.n	80068e0 <_dtoa_r+0x7d0>
 80068de:	e0d3      	b.n	8006a88 <_dtoa_r+0x978>
 80068e0:	9e05      	ldr	r6, [sp, #20]
 80068e2:	2d00      	cmp	r5, #0
 80068e4:	d014      	beq.n	8006910 <_dtoa_r+0x800>
 80068e6:	0039      	movs	r1, r7
 80068e8:	002a      	movs	r2, r5
 80068ea:	9803      	ldr	r0, [sp, #12]
 80068ec:	f000 fd2c 	bl	8007348 <__pow5mult>
 80068f0:	9a05      	ldr	r2, [sp, #20]
 80068f2:	0001      	movs	r1, r0
 80068f4:	0007      	movs	r7, r0
 80068f6:	9803      	ldr	r0, [sp, #12]
 80068f8:	f000 fc7c 	bl	80071f4 <__multiply>
 80068fc:	0006      	movs	r6, r0
 80068fe:	9905      	ldr	r1, [sp, #20]
 8006900:	9803      	ldr	r0, [sp, #12]
 8006902:	f000 fba7 	bl	8007054 <_Bfree>
 8006906:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006908:	9605      	str	r6, [sp, #20]
 800690a:	1b5b      	subs	r3, r3, r5
 800690c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800690e:	d005      	beq.n	800691c <_dtoa_r+0x80c>
 8006910:	0031      	movs	r1, r6
 8006912:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006914:	9803      	ldr	r0, [sp, #12]
 8006916:	f000 fd17 	bl	8007348 <__pow5mult>
 800691a:	9005      	str	r0, [sp, #20]
 800691c:	2101      	movs	r1, #1
 800691e:	9803      	ldr	r0, [sp, #12]
 8006920:	f000 fc50 	bl	80071c4 <__i2b>
 8006924:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006926:	0006      	movs	r6, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d100      	bne.n	800692e <_dtoa_r+0x81e>
 800692c:	e1bc      	b.n	8006ca8 <_dtoa_r+0xb98>
 800692e:	001a      	movs	r2, r3
 8006930:	0001      	movs	r1, r0
 8006932:	9803      	ldr	r0, [sp, #12]
 8006934:	f000 fd08 	bl	8007348 <__pow5mult>
 8006938:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800693a:	0006      	movs	r6, r0
 800693c:	2500      	movs	r5, #0
 800693e:	2b01      	cmp	r3, #1
 8006940:	dc16      	bgt.n	8006970 <_dtoa_r+0x860>
 8006942:	2500      	movs	r5, #0
 8006944:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006946:	42ab      	cmp	r3, r5
 8006948:	d10e      	bne.n	8006968 <_dtoa_r+0x858>
 800694a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800694c:	031b      	lsls	r3, r3, #12
 800694e:	42ab      	cmp	r3, r5
 8006950:	d10a      	bne.n	8006968 <_dtoa_r+0x858>
 8006952:	4b8d      	ldr	r3, [pc, #564]	@ (8006b88 <_dtoa_r+0xa78>)
 8006954:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006956:	4213      	tst	r3, r2
 8006958:	d006      	beq.n	8006968 <_dtoa_r+0x858>
 800695a:	9b06      	ldr	r3, [sp, #24]
 800695c:	3501      	adds	r5, #1
 800695e:	3301      	adds	r3, #1
 8006960:	9306      	str	r3, [sp, #24]
 8006962:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006964:	3301      	adds	r3, #1
 8006966:	930d      	str	r3, [sp, #52]	@ 0x34
 8006968:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800696a:	2001      	movs	r0, #1
 800696c:	2b00      	cmp	r3, #0
 800696e:	d008      	beq.n	8006982 <_dtoa_r+0x872>
 8006970:	6933      	ldr	r3, [r6, #16]
 8006972:	3303      	adds	r3, #3
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	18f3      	adds	r3, r6, r3
 8006978:	6858      	ldr	r0, [r3, #4]
 800697a:	f000 fbd3 	bl	8007124 <__hi0bits>
 800697e:	2320      	movs	r3, #32
 8006980:	1a18      	subs	r0, r3, r0
 8006982:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006984:	1818      	adds	r0, r3, r0
 8006986:	0002      	movs	r2, r0
 8006988:	231f      	movs	r3, #31
 800698a:	401a      	ands	r2, r3
 800698c:	4218      	tst	r0, r3
 800698e:	d100      	bne.n	8006992 <_dtoa_r+0x882>
 8006990:	e081      	b.n	8006a96 <_dtoa_r+0x986>
 8006992:	3301      	adds	r3, #1
 8006994:	1a9b      	subs	r3, r3, r2
 8006996:	2b04      	cmp	r3, #4
 8006998:	dd79      	ble.n	8006a8e <_dtoa_r+0x97e>
 800699a:	231c      	movs	r3, #28
 800699c:	1a9b      	subs	r3, r3, r2
 800699e:	9a06      	ldr	r2, [sp, #24]
 80069a0:	18e4      	adds	r4, r4, r3
 80069a2:	18d2      	adds	r2, r2, r3
 80069a4:	9206      	str	r2, [sp, #24]
 80069a6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80069a8:	18d3      	adds	r3, r2, r3
 80069aa:	930d      	str	r3, [sp, #52]	@ 0x34
 80069ac:	9b06      	ldr	r3, [sp, #24]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	dd05      	ble.n	80069be <_dtoa_r+0x8ae>
 80069b2:	001a      	movs	r2, r3
 80069b4:	9905      	ldr	r1, [sp, #20]
 80069b6:	9803      	ldr	r0, [sp, #12]
 80069b8:	f000 fd22 	bl	8007400 <__lshift>
 80069bc:	9005      	str	r0, [sp, #20]
 80069be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	dd05      	ble.n	80069d0 <_dtoa_r+0x8c0>
 80069c4:	0031      	movs	r1, r6
 80069c6:	001a      	movs	r2, r3
 80069c8:	9803      	ldr	r0, [sp, #12]
 80069ca:	f000 fd19 	bl	8007400 <__lshift>
 80069ce:	0006      	movs	r6, r0
 80069d0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d061      	beq.n	8006a9a <_dtoa_r+0x98a>
 80069d6:	0031      	movs	r1, r6
 80069d8:	9805      	ldr	r0, [sp, #20]
 80069da:	f000 fd7d 	bl	80074d8 <__mcmp>
 80069de:	2800      	cmp	r0, #0
 80069e0:	da5b      	bge.n	8006a9a <_dtoa_r+0x98a>
 80069e2:	9b04      	ldr	r3, [sp, #16]
 80069e4:	220a      	movs	r2, #10
 80069e6:	3b01      	subs	r3, #1
 80069e8:	930c      	str	r3, [sp, #48]	@ 0x30
 80069ea:	9905      	ldr	r1, [sp, #20]
 80069ec:	2300      	movs	r3, #0
 80069ee:	9803      	ldr	r0, [sp, #12]
 80069f0:	f000 fb54 	bl	800709c <__multadd>
 80069f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80069f6:	9005      	str	r0, [sp, #20]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d100      	bne.n	80069fe <_dtoa_r+0x8ee>
 80069fc:	e15b      	b.n	8006cb6 <_dtoa_r+0xba6>
 80069fe:	2300      	movs	r3, #0
 8006a00:	0039      	movs	r1, r7
 8006a02:	220a      	movs	r2, #10
 8006a04:	9803      	ldr	r0, [sp, #12]
 8006a06:	f000 fb49 	bl	800709c <__multadd>
 8006a0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a0c:	0007      	movs	r7, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	dc4d      	bgt.n	8006aae <_dtoa_r+0x99e>
 8006a12:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	dd46      	ble.n	8006aa6 <_dtoa_r+0x996>
 8006a18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d000      	beq.n	8006a20 <_dtoa_r+0x910>
 8006a1e:	e5db      	b.n	80065d8 <_dtoa_r+0x4c8>
 8006a20:	0031      	movs	r1, r6
 8006a22:	2205      	movs	r2, #5
 8006a24:	9803      	ldr	r0, [sp, #12]
 8006a26:	f000 fb39 	bl	800709c <__multadd>
 8006a2a:	0006      	movs	r6, r0
 8006a2c:	0001      	movs	r1, r0
 8006a2e:	9805      	ldr	r0, [sp, #20]
 8006a30:	f000 fd52 	bl	80074d8 <__mcmp>
 8006a34:	2800      	cmp	r0, #0
 8006a36:	dc00      	bgt.n	8006a3a <_dtoa_r+0x92a>
 8006a38:	e5ce      	b.n	80065d8 <_dtoa_r+0x4c8>
 8006a3a:	9b08      	ldr	r3, [sp, #32]
 8006a3c:	9a08      	ldr	r2, [sp, #32]
 8006a3e:	1c5c      	adds	r4, r3, #1
 8006a40:	2331      	movs	r3, #49	@ 0x31
 8006a42:	7013      	strb	r3, [r2, #0]
 8006a44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006a46:	3301      	adds	r3, #1
 8006a48:	930c      	str	r3, [sp, #48]	@ 0x30
 8006a4a:	e5c9      	b.n	80065e0 <_dtoa_r+0x4d0>
 8006a4c:	2336      	movs	r3, #54	@ 0x36
 8006a4e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006a50:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8006a52:	1a9b      	subs	r3, r3, r2
 8006a54:	9c06      	ldr	r4, [sp, #24]
 8006a56:	e720      	b.n	800689a <_dtoa_r+0x78a>
 8006a58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a5a:	1e5d      	subs	r5, r3, #1
 8006a5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a5e:	42ab      	cmp	r3, r5
 8006a60:	db08      	blt.n	8006a74 <_dtoa_r+0x964>
 8006a62:	1b5d      	subs	r5, r3, r5
 8006a64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	daf4      	bge.n	8006a54 <_dtoa_r+0x944>
 8006a6a:	9b06      	ldr	r3, [sp, #24]
 8006a6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a6e:	1a9c      	subs	r4, r3, r2
 8006a70:	2300      	movs	r3, #0
 8006a72:	e712      	b.n	800689a <_dtoa_r+0x78a>
 8006a74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a76:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006a78:	1aeb      	subs	r3, r5, r3
 8006a7a:	18d3      	adds	r3, r2, r3
 8006a7c:	9314      	str	r3, [sp, #80]	@ 0x50
 8006a7e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8006a80:	9c06      	ldr	r4, [sp, #24]
 8006a82:	2500      	movs	r5, #0
 8006a84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a86:	e708      	b.n	800689a <_dtoa_r+0x78a>
 8006a88:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006a8a:	9905      	ldr	r1, [sp, #20]
 8006a8c:	e742      	b.n	8006914 <_dtoa_r+0x804>
 8006a8e:	2b04      	cmp	r3, #4
 8006a90:	d08c      	beq.n	80069ac <_dtoa_r+0x89c>
 8006a92:	331c      	adds	r3, #28
 8006a94:	e783      	b.n	800699e <_dtoa_r+0x88e>
 8006a96:	0013      	movs	r3, r2
 8006a98:	e7fb      	b.n	8006a92 <_dtoa_r+0x982>
 8006a9a:	9b04      	ldr	r3, [sp, #16]
 8006a9c:	930c      	str	r3, [sp, #48]	@ 0x30
 8006a9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aa0:	930e      	str	r3, [sp, #56]	@ 0x38
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	ddb5      	ble.n	8006a12 <_dtoa_r+0x902>
 8006aa6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d100      	bne.n	8006aae <_dtoa_r+0x99e>
 8006aac:	e107      	b.n	8006cbe <_dtoa_r+0xbae>
 8006aae:	2c00      	cmp	r4, #0
 8006ab0:	dd05      	ble.n	8006abe <_dtoa_r+0x9ae>
 8006ab2:	0039      	movs	r1, r7
 8006ab4:	0022      	movs	r2, r4
 8006ab6:	9803      	ldr	r0, [sp, #12]
 8006ab8:	f000 fca2 	bl	8007400 <__lshift>
 8006abc:	0007      	movs	r7, r0
 8006abe:	9704      	str	r7, [sp, #16]
 8006ac0:	2d00      	cmp	r5, #0
 8006ac2:	d020      	beq.n	8006b06 <_dtoa_r+0x9f6>
 8006ac4:	6879      	ldr	r1, [r7, #4]
 8006ac6:	9803      	ldr	r0, [sp, #12]
 8006ac8:	f000 fa80 	bl	8006fcc <_Balloc>
 8006acc:	1e04      	subs	r4, r0, #0
 8006ace:	d10c      	bne.n	8006aea <_dtoa_r+0x9da>
 8006ad0:	0022      	movs	r2, r4
 8006ad2:	4b2e      	ldr	r3, [pc, #184]	@ (8006b8c <_dtoa_r+0xa7c>)
 8006ad4:	482e      	ldr	r0, [pc, #184]	@ (8006b90 <_dtoa_r+0xa80>)
 8006ad6:	492f      	ldr	r1, [pc, #188]	@ (8006b94 <_dtoa_r+0xa84>)
 8006ad8:	f7ff fb2f 	bl	800613a <_dtoa_r+0x2a>
 8006adc:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8006ade:	0037      	movs	r7, r6
 8006ae0:	e7ab      	b.n	8006a3a <_dtoa_r+0x92a>
 8006ae2:	9b04      	ldr	r3, [sp, #16]
 8006ae4:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8006ae6:	930c      	str	r3, [sp, #48]	@ 0x30
 8006ae8:	e7f9      	b.n	8006ade <_dtoa_r+0x9ce>
 8006aea:	0039      	movs	r1, r7
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	310c      	adds	r1, #12
 8006af0:	3202      	adds	r2, #2
 8006af2:	0092      	lsls	r2, r2, #2
 8006af4:	300c      	adds	r0, #12
 8006af6:	f000 feb1 	bl	800785c <memcpy>
 8006afa:	2201      	movs	r2, #1
 8006afc:	0021      	movs	r1, r4
 8006afe:	9803      	ldr	r0, [sp, #12]
 8006b00:	f000 fc7e 	bl	8007400 <__lshift>
 8006b04:	9004      	str	r0, [sp, #16]
 8006b06:	9b08      	ldr	r3, [sp, #32]
 8006b08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b0a:	9306      	str	r3, [sp, #24]
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	189b      	adds	r3, r3, r2
 8006b10:	2201      	movs	r2, #1
 8006b12:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006b14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b16:	4013      	ands	r3, r2
 8006b18:	930e      	str	r3, [sp, #56]	@ 0x38
 8006b1a:	0031      	movs	r1, r6
 8006b1c:	9805      	ldr	r0, [sp, #20]
 8006b1e:	f7ff fa72 	bl	8006006 <quorem>
 8006b22:	0039      	movs	r1, r7
 8006b24:	0005      	movs	r5, r0
 8006b26:	900a      	str	r0, [sp, #40]	@ 0x28
 8006b28:	9805      	ldr	r0, [sp, #20]
 8006b2a:	f000 fcd5 	bl	80074d8 <__mcmp>
 8006b2e:	9a04      	ldr	r2, [sp, #16]
 8006b30:	900d      	str	r0, [sp, #52]	@ 0x34
 8006b32:	0031      	movs	r1, r6
 8006b34:	9803      	ldr	r0, [sp, #12]
 8006b36:	f000 fceb 	bl	8007510 <__mdiff>
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	68c3      	ldr	r3, [r0, #12]
 8006b3e:	0004      	movs	r4, r0
 8006b40:	3530      	adds	r5, #48	@ 0x30
 8006b42:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d104      	bne.n	8006b52 <_dtoa_r+0xa42>
 8006b48:	0001      	movs	r1, r0
 8006b4a:	9805      	ldr	r0, [sp, #20]
 8006b4c:	f000 fcc4 	bl	80074d8 <__mcmp>
 8006b50:	9009      	str	r0, [sp, #36]	@ 0x24
 8006b52:	0021      	movs	r1, r4
 8006b54:	9803      	ldr	r0, [sp, #12]
 8006b56:	f000 fa7d 	bl	8007054 <_Bfree>
 8006b5a:	9b06      	ldr	r3, [sp, #24]
 8006b5c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006b5e:	1c5c      	adds	r4, r3, #1
 8006b60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b62:	4313      	orrs	r3, r2
 8006b64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b66:	4313      	orrs	r3, r2
 8006b68:	d116      	bne.n	8006b98 <_dtoa_r+0xa88>
 8006b6a:	2d39      	cmp	r5, #57	@ 0x39
 8006b6c:	d02f      	beq.n	8006bce <_dtoa_r+0xabe>
 8006b6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	dd01      	ble.n	8006b78 <_dtoa_r+0xa68>
 8006b74:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8006b76:	3531      	adds	r5, #49	@ 0x31
 8006b78:	9b06      	ldr	r3, [sp, #24]
 8006b7a:	701d      	strb	r5, [r3, #0]
 8006b7c:	e532      	b.n	80065e4 <_dtoa_r+0x4d4>
 8006b7e:	46c0      	nop			@ (mov r8, r8)
 8006b80:	40240000 	.word	0x40240000
 8006b84:	00000433 	.word	0x00000433
 8006b88:	7ff00000 	.word	0x7ff00000
 8006b8c:	08008110 	.word	0x08008110
 8006b90:	080080b8 	.word	0x080080b8
 8006b94:	000002ef 	.word	0x000002ef
 8006b98:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	db04      	blt.n	8006ba8 <_dtoa_r+0xa98>
 8006b9e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	d11e      	bne.n	8006be6 <_dtoa_r+0xad6>
 8006ba8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	dde4      	ble.n	8006b78 <_dtoa_r+0xa68>
 8006bae:	9905      	ldr	r1, [sp, #20]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	9803      	ldr	r0, [sp, #12]
 8006bb4:	f000 fc24 	bl	8007400 <__lshift>
 8006bb8:	0031      	movs	r1, r6
 8006bba:	9005      	str	r0, [sp, #20]
 8006bbc:	f000 fc8c 	bl	80074d8 <__mcmp>
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	dc02      	bgt.n	8006bca <_dtoa_r+0xaba>
 8006bc4:	d1d8      	bne.n	8006b78 <_dtoa_r+0xa68>
 8006bc6:	07eb      	lsls	r3, r5, #31
 8006bc8:	d5d6      	bpl.n	8006b78 <_dtoa_r+0xa68>
 8006bca:	2d39      	cmp	r5, #57	@ 0x39
 8006bcc:	d1d2      	bne.n	8006b74 <_dtoa_r+0xa64>
 8006bce:	2339      	movs	r3, #57	@ 0x39
 8006bd0:	9a06      	ldr	r2, [sp, #24]
 8006bd2:	7013      	strb	r3, [r2, #0]
 8006bd4:	0023      	movs	r3, r4
 8006bd6:	001c      	movs	r4, r3
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	781a      	ldrb	r2, [r3, #0]
 8006bdc:	2a39      	cmp	r2, #57	@ 0x39
 8006bde:	d050      	beq.n	8006c82 <_dtoa_r+0xb72>
 8006be0:	3201      	adds	r2, #1
 8006be2:	701a      	strb	r2, [r3, #0]
 8006be4:	e4fe      	b.n	80065e4 <_dtoa_r+0x4d4>
 8006be6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	dd03      	ble.n	8006bf4 <_dtoa_r+0xae4>
 8006bec:	2d39      	cmp	r5, #57	@ 0x39
 8006bee:	d0ee      	beq.n	8006bce <_dtoa_r+0xabe>
 8006bf0:	3501      	adds	r5, #1
 8006bf2:	e7c1      	b.n	8006b78 <_dtoa_r+0xa68>
 8006bf4:	9b06      	ldr	r3, [sp, #24]
 8006bf6:	9a06      	ldr	r2, [sp, #24]
 8006bf8:	701d      	strb	r5, [r3, #0]
 8006bfa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d02b      	beq.n	8006c58 <_dtoa_r+0xb48>
 8006c00:	2300      	movs	r3, #0
 8006c02:	220a      	movs	r2, #10
 8006c04:	9905      	ldr	r1, [sp, #20]
 8006c06:	9803      	ldr	r0, [sp, #12]
 8006c08:	f000 fa48 	bl	800709c <__multadd>
 8006c0c:	9b04      	ldr	r3, [sp, #16]
 8006c0e:	9005      	str	r0, [sp, #20]
 8006c10:	429f      	cmp	r7, r3
 8006c12:	d109      	bne.n	8006c28 <_dtoa_r+0xb18>
 8006c14:	0039      	movs	r1, r7
 8006c16:	2300      	movs	r3, #0
 8006c18:	220a      	movs	r2, #10
 8006c1a:	9803      	ldr	r0, [sp, #12]
 8006c1c:	f000 fa3e 	bl	800709c <__multadd>
 8006c20:	0007      	movs	r7, r0
 8006c22:	9004      	str	r0, [sp, #16]
 8006c24:	9406      	str	r4, [sp, #24]
 8006c26:	e778      	b.n	8006b1a <_dtoa_r+0xa0a>
 8006c28:	0039      	movs	r1, r7
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	220a      	movs	r2, #10
 8006c2e:	9803      	ldr	r0, [sp, #12]
 8006c30:	f000 fa34 	bl	800709c <__multadd>
 8006c34:	2300      	movs	r3, #0
 8006c36:	0007      	movs	r7, r0
 8006c38:	220a      	movs	r2, #10
 8006c3a:	9904      	ldr	r1, [sp, #16]
 8006c3c:	9803      	ldr	r0, [sp, #12]
 8006c3e:	f000 fa2d 	bl	800709c <__multadd>
 8006c42:	9004      	str	r0, [sp, #16]
 8006c44:	e7ee      	b.n	8006c24 <_dtoa_r+0xb14>
 8006c46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c48:	2401      	movs	r4, #1
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	dd00      	ble.n	8006c50 <_dtoa_r+0xb40>
 8006c4e:	001c      	movs	r4, r3
 8006c50:	9704      	str	r7, [sp, #16]
 8006c52:	2700      	movs	r7, #0
 8006c54:	9b08      	ldr	r3, [sp, #32]
 8006c56:	191c      	adds	r4, r3, r4
 8006c58:	9905      	ldr	r1, [sp, #20]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	9803      	ldr	r0, [sp, #12]
 8006c5e:	f000 fbcf 	bl	8007400 <__lshift>
 8006c62:	0031      	movs	r1, r6
 8006c64:	9005      	str	r0, [sp, #20]
 8006c66:	f000 fc37 	bl	80074d8 <__mcmp>
 8006c6a:	2800      	cmp	r0, #0
 8006c6c:	dcb2      	bgt.n	8006bd4 <_dtoa_r+0xac4>
 8006c6e:	d101      	bne.n	8006c74 <_dtoa_r+0xb64>
 8006c70:	07ed      	lsls	r5, r5, #31
 8006c72:	d4af      	bmi.n	8006bd4 <_dtoa_r+0xac4>
 8006c74:	0023      	movs	r3, r4
 8006c76:	001c      	movs	r4, r3
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	781a      	ldrb	r2, [r3, #0]
 8006c7c:	2a30      	cmp	r2, #48	@ 0x30
 8006c7e:	d0fa      	beq.n	8006c76 <_dtoa_r+0xb66>
 8006c80:	e4b0      	b.n	80065e4 <_dtoa_r+0x4d4>
 8006c82:	9a08      	ldr	r2, [sp, #32]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d1a6      	bne.n	8006bd6 <_dtoa_r+0xac6>
 8006c88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	930c      	str	r3, [sp, #48]	@ 0x30
 8006c8e:	2331      	movs	r3, #49	@ 0x31
 8006c90:	7013      	strb	r3, [r2, #0]
 8006c92:	e4a7      	b.n	80065e4 <_dtoa_r+0x4d4>
 8006c94:	4b14      	ldr	r3, [pc, #80]	@ (8006ce8 <_dtoa_r+0xbd8>)
 8006c96:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006c98:	9308      	str	r3, [sp, #32]
 8006c9a:	4b14      	ldr	r3, [pc, #80]	@ (8006cec <_dtoa_r+0xbdc>)
 8006c9c:	2a00      	cmp	r2, #0
 8006c9e:	d001      	beq.n	8006ca4 <_dtoa_r+0xb94>
 8006ca0:	f7ff fa7e 	bl	80061a0 <_dtoa_r+0x90>
 8006ca4:	f7ff fa7e 	bl	80061a4 <_dtoa_r+0x94>
 8006ca8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	dc00      	bgt.n	8006cb0 <_dtoa_r+0xba0>
 8006cae:	e648      	b.n	8006942 <_dtoa_r+0x832>
 8006cb0:	2001      	movs	r0, #1
 8006cb2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8006cb4:	e665      	b.n	8006982 <_dtoa_r+0x872>
 8006cb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	dc00      	bgt.n	8006cbe <_dtoa_r+0xbae>
 8006cbc:	e6a9      	b.n	8006a12 <_dtoa_r+0x902>
 8006cbe:	2400      	movs	r4, #0
 8006cc0:	0031      	movs	r1, r6
 8006cc2:	9805      	ldr	r0, [sp, #20]
 8006cc4:	f7ff f99f 	bl	8006006 <quorem>
 8006cc8:	9b08      	ldr	r3, [sp, #32]
 8006cca:	3030      	adds	r0, #48	@ 0x30
 8006ccc:	5518      	strb	r0, [r3, r4]
 8006cce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006cd0:	3401      	adds	r4, #1
 8006cd2:	0005      	movs	r5, r0
 8006cd4:	42a3      	cmp	r3, r4
 8006cd6:	ddb6      	ble.n	8006c46 <_dtoa_r+0xb36>
 8006cd8:	2300      	movs	r3, #0
 8006cda:	220a      	movs	r2, #10
 8006cdc:	9905      	ldr	r1, [sp, #20]
 8006cde:	9803      	ldr	r0, [sp, #12]
 8006ce0:	f000 f9dc 	bl	800709c <__multadd>
 8006ce4:	9005      	str	r0, [sp, #20]
 8006ce6:	e7eb      	b.n	8006cc0 <_dtoa_r+0xbb0>
 8006ce8:	08008094 	.word	0x08008094
 8006cec:	0800809c 	.word	0x0800809c

08006cf0 <malloc>:
 8006cf0:	b510      	push	{r4, lr}
 8006cf2:	4b03      	ldr	r3, [pc, #12]	@ (8006d00 <malloc+0x10>)
 8006cf4:	0001      	movs	r1, r0
 8006cf6:	6818      	ldr	r0, [r3, #0]
 8006cf8:	f000 f826 	bl	8006d48 <_malloc_r>
 8006cfc:	bd10      	pop	{r4, pc}
 8006cfe:	46c0      	nop			@ (mov r8, r8)
 8006d00:	20000018 	.word	0x20000018

08006d04 <sbrk_aligned>:
 8006d04:	b570      	push	{r4, r5, r6, lr}
 8006d06:	4e0f      	ldr	r6, [pc, #60]	@ (8006d44 <sbrk_aligned+0x40>)
 8006d08:	000d      	movs	r5, r1
 8006d0a:	6831      	ldr	r1, [r6, #0]
 8006d0c:	0004      	movs	r4, r0
 8006d0e:	2900      	cmp	r1, #0
 8006d10:	d102      	bne.n	8006d18 <sbrk_aligned+0x14>
 8006d12:	f000 fd6b 	bl	80077ec <_sbrk_r>
 8006d16:	6030      	str	r0, [r6, #0]
 8006d18:	0029      	movs	r1, r5
 8006d1a:	0020      	movs	r0, r4
 8006d1c:	f000 fd66 	bl	80077ec <_sbrk_r>
 8006d20:	1c43      	adds	r3, r0, #1
 8006d22:	d103      	bne.n	8006d2c <sbrk_aligned+0x28>
 8006d24:	2501      	movs	r5, #1
 8006d26:	426d      	negs	r5, r5
 8006d28:	0028      	movs	r0, r5
 8006d2a:	bd70      	pop	{r4, r5, r6, pc}
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	1cc5      	adds	r5, r0, #3
 8006d30:	439d      	bics	r5, r3
 8006d32:	42a8      	cmp	r0, r5
 8006d34:	d0f8      	beq.n	8006d28 <sbrk_aligned+0x24>
 8006d36:	1a29      	subs	r1, r5, r0
 8006d38:	0020      	movs	r0, r4
 8006d3a:	f000 fd57 	bl	80077ec <_sbrk_r>
 8006d3e:	3001      	adds	r0, #1
 8006d40:	d1f2      	bne.n	8006d28 <sbrk_aligned+0x24>
 8006d42:	e7ef      	b.n	8006d24 <sbrk_aligned+0x20>
 8006d44:	20000484 	.word	0x20000484

08006d48 <_malloc_r>:
 8006d48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d4a:	2203      	movs	r2, #3
 8006d4c:	1ccb      	adds	r3, r1, #3
 8006d4e:	4393      	bics	r3, r2
 8006d50:	3308      	adds	r3, #8
 8006d52:	0005      	movs	r5, r0
 8006d54:	001f      	movs	r7, r3
 8006d56:	2b0c      	cmp	r3, #12
 8006d58:	d234      	bcs.n	8006dc4 <_malloc_r+0x7c>
 8006d5a:	270c      	movs	r7, #12
 8006d5c:	42b9      	cmp	r1, r7
 8006d5e:	d833      	bhi.n	8006dc8 <_malloc_r+0x80>
 8006d60:	0028      	movs	r0, r5
 8006d62:	f000 f923 	bl	8006fac <__malloc_lock>
 8006d66:	4e37      	ldr	r6, [pc, #220]	@ (8006e44 <_malloc_r+0xfc>)
 8006d68:	6833      	ldr	r3, [r6, #0]
 8006d6a:	001c      	movs	r4, r3
 8006d6c:	2c00      	cmp	r4, #0
 8006d6e:	d12f      	bne.n	8006dd0 <_malloc_r+0x88>
 8006d70:	0039      	movs	r1, r7
 8006d72:	0028      	movs	r0, r5
 8006d74:	f7ff ffc6 	bl	8006d04 <sbrk_aligned>
 8006d78:	0004      	movs	r4, r0
 8006d7a:	1c43      	adds	r3, r0, #1
 8006d7c:	d15f      	bne.n	8006e3e <_malloc_r+0xf6>
 8006d7e:	6834      	ldr	r4, [r6, #0]
 8006d80:	9400      	str	r4, [sp, #0]
 8006d82:	9b00      	ldr	r3, [sp, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d14a      	bne.n	8006e1e <_malloc_r+0xd6>
 8006d88:	2c00      	cmp	r4, #0
 8006d8a:	d052      	beq.n	8006e32 <_malloc_r+0xea>
 8006d8c:	6823      	ldr	r3, [r4, #0]
 8006d8e:	0028      	movs	r0, r5
 8006d90:	18e3      	adds	r3, r4, r3
 8006d92:	9900      	ldr	r1, [sp, #0]
 8006d94:	9301      	str	r3, [sp, #4]
 8006d96:	f000 fd29 	bl	80077ec <_sbrk_r>
 8006d9a:	9b01      	ldr	r3, [sp, #4]
 8006d9c:	4283      	cmp	r3, r0
 8006d9e:	d148      	bne.n	8006e32 <_malloc_r+0xea>
 8006da0:	6823      	ldr	r3, [r4, #0]
 8006da2:	0028      	movs	r0, r5
 8006da4:	1aff      	subs	r7, r7, r3
 8006da6:	0039      	movs	r1, r7
 8006da8:	f7ff ffac 	bl	8006d04 <sbrk_aligned>
 8006dac:	3001      	adds	r0, #1
 8006dae:	d040      	beq.n	8006e32 <_malloc_r+0xea>
 8006db0:	6823      	ldr	r3, [r4, #0]
 8006db2:	19db      	adds	r3, r3, r7
 8006db4:	6023      	str	r3, [r4, #0]
 8006db6:	6833      	ldr	r3, [r6, #0]
 8006db8:	685a      	ldr	r2, [r3, #4]
 8006dba:	2a00      	cmp	r2, #0
 8006dbc:	d133      	bne.n	8006e26 <_malloc_r+0xde>
 8006dbe:	9b00      	ldr	r3, [sp, #0]
 8006dc0:	6033      	str	r3, [r6, #0]
 8006dc2:	e019      	b.n	8006df8 <_malloc_r+0xb0>
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	dac9      	bge.n	8006d5c <_malloc_r+0x14>
 8006dc8:	230c      	movs	r3, #12
 8006dca:	602b      	str	r3, [r5, #0]
 8006dcc:	2000      	movs	r0, #0
 8006dce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006dd0:	6821      	ldr	r1, [r4, #0]
 8006dd2:	1bc9      	subs	r1, r1, r7
 8006dd4:	d420      	bmi.n	8006e18 <_malloc_r+0xd0>
 8006dd6:	290b      	cmp	r1, #11
 8006dd8:	d90a      	bls.n	8006df0 <_malloc_r+0xa8>
 8006dda:	19e2      	adds	r2, r4, r7
 8006ddc:	6027      	str	r7, [r4, #0]
 8006dde:	42a3      	cmp	r3, r4
 8006de0:	d104      	bne.n	8006dec <_malloc_r+0xa4>
 8006de2:	6032      	str	r2, [r6, #0]
 8006de4:	6863      	ldr	r3, [r4, #4]
 8006de6:	6011      	str	r1, [r2, #0]
 8006de8:	6053      	str	r3, [r2, #4]
 8006dea:	e005      	b.n	8006df8 <_malloc_r+0xb0>
 8006dec:	605a      	str	r2, [r3, #4]
 8006dee:	e7f9      	b.n	8006de4 <_malloc_r+0x9c>
 8006df0:	6862      	ldr	r2, [r4, #4]
 8006df2:	42a3      	cmp	r3, r4
 8006df4:	d10e      	bne.n	8006e14 <_malloc_r+0xcc>
 8006df6:	6032      	str	r2, [r6, #0]
 8006df8:	0028      	movs	r0, r5
 8006dfa:	f000 f8df 	bl	8006fbc <__malloc_unlock>
 8006dfe:	0020      	movs	r0, r4
 8006e00:	2207      	movs	r2, #7
 8006e02:	300b      	adds	r0, #11
 8006e04:	1d23      	adds	r3, r4, #4
 8006e06:	4390      	bics	r0, r2
 8006e08:	1ac2      	subs	r2, r0, r3
 8006e0a:	4298      	cmp	r0, r3
 8006e0c:	d0df      	beq.n	8006dce <_malloc_r+0x86>
 8006e0e:	1a1b      	subs	r3, r3, r0
 8006e10:	50a3      	str	r3, [r4, r2]
 8006e12:	e7dc      	b.n	8006dce <_malloc_r+0x86>
 8006e14:	605a      	str	r2, [r3, #4]
 8006e16:	e7ef      	b.n	8006df8 <_malloc_r+0xb0>
 8006e18:	0023      	movs	r3, r4
 8006e1a:	6864      	ldr	r4, [r4, #4]
 8006e1c:	e7a6      	b.n	8006d6c <_malloc_r+0x24>
 8006e1e:	9c00      	ldr	r4, [sp, #0]
 8006e20:	6863      	ldr	r3, [r4, #4]
 8006e22:	9300      	str	r3, [sp, #0]
 8006e24:	e7ad      	b.n	8006d82 <_malloc_r+0x3a>
 8006e26:	001a      	movs	r2, r3
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	42a3      	cmp	r3, r4
 8006e2c:	d1fb      	bne.n	8006e26 <_malloc_r+0xde>
 8006e2e:	2300      	movs	r3, #0
 8006e30:	e7da      	b.n	8006de8 <_malloc_r+0xa0>
 8006e32:	230c      	movs	r3, #12
 8006e34:	0028      	movs	r0, r5
 8006e36:	602b      	str	r3, [r5, #0]
 8006e38:	f000 f8c0 	bl	8006fbc <__malloc_unlock>
 8006e3c:	e7c6      	b.n	8006dcc <_malloc_r+0x84>
 8006e3e:	6007      	str	r7, [r0, #0]
 8006e40:	e7da      	b.n	8006df8 <_malloc_r+0xb0>
 8006e42:	46c0      	nop			@ (mov r8, r8)
 8006e44:	20000488 	.word	0x20000488

08006e48 <__sflush_r>:
 8006e48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e4a:	220c      	movs	r2, #12
 8006e4c:	5e8b      	ldrsh	r3, [r1, r2]
 8006e4e:	0005      	movs	r5, r0
 8006e50:	000c      	movs	r4, r1
 8006e52:	071a      	lsls	r2, r3, #28
 8006e54:	d456      	bmi.n	8006f04 <__sflush_r+0xbc>
 8006e56:	684a      	ldr	r2, [r1, #4]
 8006e58:	2a00      	cmp	r2, #0
 8006e5a:	dc02      	bgt.n	8006e62 <__sflush_r+0x1a>
 8006e5c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8006e5e:	2a00      	cmp	r2, #0
 8006e60:	dd4e      	ble.n	8006f00 <__sflush_r+0xb8>
 8006e62:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006e64:	2f00      	cmp	r7, #0
 8006e66:	d04b      	beq.n	8006f00 <__sflush_r+0xb8>
 8006e68:	2200      	movs	r2, #0
 8006e6a:	2080      	movs	r0, #128	@ 0x80
 8006e6c:	682e      	ldr	r6, [r5, #0]
 8006e6e:	602a      	str	r2, [r5, #0]
 8006e70:	001a      	movs	r2, r3
 8006e72:	0140      	lsls	r0, r0, #5
 8006e74:	6a21      	ldr	r1, [r4, #32]
 8006e76:	4002      	ands	r2, r0
 8006e78:	4203      	tst	r3, r0
 8006e7a:	d033      	beq.n	8006ee4 <__sflush_r+0x9c>
 8006e7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006e7e:	89a3      	ldrh	r3, [r4, #12]
 8006e80:	075b      	lsls	r3, r3, #29
 8006e82:	d506      	bpl.n	8006e92 <__sflush_r+0x4a>
 8006e84:	6863      	ldr	r3, [r4, #4]
 8006e86:	1ad2      	subs	r2, r2, r3
 8006e88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d001      	beq.n	8006e92 <__sflush_r+0x4a>
 8006e8e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006e90:	1ad2      	subs	r2, r2, r3
 8006e92:	2300      	movs	r3, #0
 8006e94:	0028      	movs	r0, r5
 8006e96:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006e98:	6a21      	ldr	r1, [r4, #32]
 8006e9a:	47b8      	blx	r7
 8006e9c:	89a2      	ldrh	r2, [r4, #12]
 8006e9e:	1c43      	adds	r3, r0, #1
 8006ea0:	d106      	bne.n	8006eb0 <__sflush_r+0x68>
 8006ea2:	6829      	ldr	r1, [r5, #0]
 8006ea4:	291d      	cmp	r1, #29
 8006ea6:	d846      	bhi.n	8006f36 <__sflush_r+0xee>
 8006ea8:	4b29      	ldr	r3, [pc, #164]	@ (8006f50 <__sflush_r+0x108>)
 8006eaa:	40cb      	lsrs	r3, r1
 8006eac:	07db      	lsls	r3, r3, #31
 8006eae:	d542      	bpl.n	8006f36 <__sflush_r+0xee>
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	6063      	str	r3, [r4, #4]
 8006eb4:	6923      	ldr	r3, [r4, #16]
 8006eb6:	6023      	str	r3, [r4, #0]
 8006eb8:	04d2      	lsls	r2, r2, #19
 8006eba:	d505      	bpl.n	8006ec8 <__sflush_r+0x80>
 8006ebc:	1c43      	adds	r3, r0, #1
 8006ebe:	d102      	bne.n	8006ec6 <__sflush_r+0x7e>
 8006ec0:	682b      	ldr	r3, [r5, #0]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d100      	bne.n	8006ec8 <__sflush_r+0x80>
 8006ec6:	6560      	str	r0, [r4, #84]	@ 0x54
 8006ec8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006eca:	602e      	str	r6, [r5, #0]
 8006ecc:	2900      	cmp	r1, #0
 8006ece:	d017      	beq.n	8006f00 <__sflush_r+0xb8>
 8006ed0:	0023      	movs	r3, r4
 8006ed2:	3344      	adds	r3, #68	@ 0x44
 8006ed4:	4299      	cmp	r1, r3
 8006ed6:	d002      	beq.n	8006ede <__sflush_r+0x96>
 8006ed8:	0028      	movs	r0, r5
 8006eda:	f000 fd15 	bl	8007908 <_free_r>
 8006ede:	2300      	movs	r3, #0
 8006ee0:	6363      	str	r3, [r4, #52]	@ 0x34
 8006ee2:	e00d      	b.n	8006f00 <__sflush_r+0xb8>
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	0028      	movs	r0, r5
 8006ee8:	47b8      	blx	r7
 8006eea:	0002      	movs	r2, r0
 8006eec:	1c43      	adds	r3, r0, #1
 8006eee:	d1c6      	bne.n	8006e7e <__sflush_r+0x36>
 8006ef0:	682b      	ldr	r3, [r5, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d0c3      	beq.n	8006e7e <__sflush_r+0x36>
 8006ef6:	2b1d      	cmp	r3, #29
 8006ef8:	d001      	beq.n	8006efe <__sflush_r+0xb6>
 8006efa:	2b16      	cmp	r3, #22
 8006efc:	d11a      	bne.n	8006f34 <__sflush_r+0xec>
 8006efe:	602e      	str	r6, [r5, #0]
 8006f00:	2000      	movs	r0, #0
 8006f02:	e01e      	b.n	8006f42 <__sflush_r+0xfa>
 8006f04:	690e      	ldr	r6, [r1, #16]
 8006f06:	2e00      	cmp	r6, #0
 8006f08:	d0fa      	beq.n	8006f00 <__sflush_r+0xb8>
 8006f0a:	680f      	ldr	r7, [r1, #0]
 8006f0c:	600e      	str	r6, [r1, #0]
 8006f0e:	1bba      	subs	r2, r7, r6
 8006f10:	9201      	str	r2, [sp, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	079b      	lsls	r3, r3, #30
 8006f16:	d100      	bne.n	8006f1a <__sflush_r+0xd2>
 8006f18:	694a      	ldr	r2, [r1, #20]
 8006f1a:	60a2      	str	r2, [r4, #8]
 8006f1c:	9b01      	ldr	r3, [sp, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	ddee      	ble.n	8006f00 <__sflush_r+0xb8>
 8006f22:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006f24:	0032      	movs	r2, r6
 8006f26:	001f      	movs	r7, r3
 8006f28:	0028      	movs	r0, r5
 8006f2a:	9b01      	ldr	r3, [sp, #4]
 8006f2c:	6a21      	ldr	r1, [r4, #32]
 8006f2e:	47b8      	blx	r7
 8006f30:	2800      	cmp	r0, #0
 8006f32:	dc07      	bgt.n	8006f44 <__sflush_r+0xfc>
 8006f34:	89a2      	ldrh	r2, [r4, #12]
 8006f36:	2340      	movs	r3, #64	@ 0x40
 8006f38:	2001      	movs	r0, #1
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	b21b      	sxth	r3, r3
 8006f3e:	81a3      	strh	r3, [r4, #12]
 8006f40:	4240      	negs	r0, r0
 8006f42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006f44:	9b01      	ldr	r3, [sp, #4]
 8006f46:	1836      	adds	r6, r6, r0
 8006f48:	1a1b      	subs	r3, r3, r0
 8006f4a:	9301      	str	r3, [sp, #4]
 8006f4c:	e7e6      	b.n	8006f1c <__sflush_r+0xd4>
 8006f4e:	46c0      	nop			@ (mov r8, r8)
 8006f50:	20400001 	.word	0x20400001

08006f54 <_fflush_r>:
 8006f54:	690b      	ldr	r3, [r1, #16]
 8006f56:	b570      	push	{r4, r5, r6, lr}
 8006f58:	0005      	movs	r5, r0
 8006f5a:	000c      	movs	r4, r1
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d102      	bne.n	8006f66 <_fflush_r+0x12>
 8006f60:	2500      	movs	r5, #0
 8006f62:	0028      	movs	r0, r5
 8006f64:	bd70      	pop	{r4, r5, r6, pc}
 8006f66:	2800      	cmp	r0, #0
 8006f68:	d004      	beq.n	8006f74 <_fflush_r+0x20>
 8006f6a:	6a03      	ldr	r3, [r0, #32]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d101      	bne.n	8006f74 <_fflush_r+0x20>
 8006f70:	f7fe ffd0 	bl	8005f14 <__sinit>
 8006f74:	220c      	movs	r2, #12
 8006f76:	5ea3      	ldrsh	r3, [r4, r2]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d0f1      	beq.n	8006f60 <_fflush_r+0xc>
 8006f7c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006f7e:	07d2      	lsls	r2, r2, #31
 8006f80:	d404      	bmi.n	8006f8c <_fflush_r+0x38>
 8006f82:	059b      	lsls	r3, r3, #22
 8006f84:	d402      	bmi.n	8006f8c <_fflush_r+0x38>
 8006f86:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f88:	f7ff f82b 	bl	8005fe2 <__retarget_lock_acquire_recursive>
 8006f8c:	0028      	movs	r0, r5
 8006f8e:	0021      	movs	r1, r4
 8006f90:	f7ff ff5a 	bl	8006e48 <__sflush_r>
 8006f94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f96:	0005      	movs	r5, r0
 8006f98:	07db      	lsls	r3, r3, #31
 8006f9a:	d4e2      	bmi.n	8006f62 <_fflush_r+0xe>
 8006f9c:	89a3      	ldrh	r3, [r4, #12]
 8006f9e:	059b      	lsls	r3, r3, #22
 8006fa0:	d4df      	bmi.n	8006f62 <_fflush_r+0xe>
 8006fa2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006fa4:	f7ff f81e 	bl	8005fe4 <__retarget_lock_release_recursive>
 8006fa8:	e7db      	b.n	8006f62 <_fflush_r+0xe>
	...

08006fac <__malloc_lock>:
 8006fac:	b510      	push	{r4, lr}
 8006fae:	4802      	ldr	r0, [pc, #8]	@ (8006fb8 <__malloc_lock+0xc>)
 8006fb0:	f7ff f817 	bl	8005fe2 <__retarget_lock_acquire_recursive>
 8006fb4:	bd10      	pop	{r4, pc}
 8006fb6:	46c0      	nop			@ (mov r8, r8)
 8006fb8:	20000480 	.word	0x20000480

08006fbc <__malloc_unlock>:
 8006fbc:	b510      	push	{r4, lr}
 8006fbe:	4802      	ldr	r0, [pc, #8]	@ (8006fc8 <__malloc_unlock+0xc>)
 8006fc0:	f7ff f810 	bl	8005fe4 <__retarget_lock_release_recursive>
 8006fc4:	bd10      	pop	{r4, pc}
 8006fc6:	46c0      	nop			@ (mov r8, r8)
 8006fc8:	20000480 	.word	0x20000480

08006fcc <_Balloc>:
 8006fcc:	b570      	push	{r4, r5, r6, lr}
 8006fce:	69c5      	ldr	r5, [r0, #28]
 8006fd0:	0006      	movs	r6, r0
 8006fd2:	000c      	movs	r4, r1
 8006fd4:	2d00      	cmp	r5, #0
 8006fd6:	d10e      	bne.n	8006ff6 <_Balloc+0x2a>
 8006fd8:	2010      	movs	r0, #16
 8006fda:	f7ff fe89 	bl	8006cf0 <malloc>
 8006fde:	1e02      	subs	r2, r0, #0
 8006fe0:	61f0      	str	r0, [r6, #28]
 8006fe2:	d104      	bne.n	8006fee <_Balloc+0x22>
 8006fe4:	216b      	movs	r1, #107	@ 0x6b
 8006fe6:	4b19      	ldr	r3, [pc, #100]	@ (800704c <_Balloc+0x80>)
 8006fe8:	4819      	ldr	r0, [pc, #100]	@ (8007050 <_Balloc+0x84>)
 8006fea:	f000 fc41 	bl	8007870 <__assert_func>
 8006fee:	6045      	str	r5, [r0, #4]
 8006ff0:	6085      	str	r5, [r0, #8]
 8006ff2:	6005      	str	r5, [r0, #0]
 8006ff4:	60c5      	str	r5, [r0, #12]
 8006ff6:	69f5      	ldr	r5, [r6, #28]
 8006ff8:	68eb      	ldr	r3, [r5, #12]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d013      	beq.n	8007026 <_Balloc+0x5a>
 8006ffe:	69f3      	ldr	r3, [r6, #28]
 8007000:	00a2      	lsls	r2, r4, #2
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	189b      	adds	r3, r3, r2
 8007006:	6818      	ldr	r0, [r3, #0]
 8007008:	2800      	cmp	r0, #0
 800700a:	d118      	bne.n	800703e <_Balloc+0x72>
 800700c:	2101      	movs	r1, #1
 800700e:	000d      	movs	r5, r1
 8007010:	40a5      	lsls	r5, r4
 8007012:	1d6a      	adds	r2, r5, #5
 8007014:	0030      	movs	r0, r6
 8007016:	0092      	lsls	r2, r2, #2
 8007018:	f000 fc48 	bl	80078ac <_calloc_r>
 800701c:	2800      	cmp	r0, #0
 800701e:	d00c      	beq.n	800703a <_Balloc+0x6e>
 8007020:	6044      	str	r4, [r0, #4]
 8007022:	6085      	str	r5, [r0, #8]
 8007024:	e00d      	b.n	8007042 <_Balloc+0x76>
 8007026:	2221      	movs	r2, #33	@ 0x21
 8007028:	2104      	movs	r1, #4
 800702a:	0030      	movs	r0, r6
 800702c:	f000 fc3e 	bl	80078ac <_calloc_r>
 8007030:	69f3      	ldr	r3, [r6, #28]
 8007032:	60e8      	str	r0, [r5, #12]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d1e1      	bne.n	8006ffe <_Balloc+0x32>
 800703a:	2000      	movs	r0, #0
 800703c:	bd70      	pop	{r4, r5, r6, pc}
 800703e:	6802      	ldr	r2, [r0, #0]
 8007040:	601a      	str	r2, [r3, #0]
 8007042:	2300      	movs	r3, #0
 8007044:	6103      	str	r3, [r0, #16]
 8007046:	60c3      	str	r3, [r0, #12]
 8007048:	e7f8      	b.n	800703c <_Balloc+0x70>
 800704a:	46c0      	nop			@ (mov r8, r8)
 800704c:	080080a1 	.word	0x080080a1
 8007050:	08008121 	.word	0x08008121

08007054 <_Bfree>:
 8007054:	b570      	push	{r4, r5, r6, lr}
 8007056:	69c6      	ldr	r6, [r0, #28]
 8007058:	0005      	movs	r5, r0
 800705a:	000c      	movs	r4, r1
 800705c:	2e00      	cmp	r6, #0
 800705e:	d10e      	bne.n	800707e <_Bfree+0x2a>
 8007060:	2010      	movs	r0, #16
 8007062:	f7ff fe45 	bl	8006cf0 <malloc>
 8007066:	1e02      	subs	r2, r0, #0
 8007068:	61e8      	str	r0, [r5, #28]
 800706a:	d104      	bne.n	8007076 <_Bfree+0x22>
 800706c:	218f      	movs	r1, #143	@ 0x8f
 800706e:	4b09      	ldr	r3, [pc, #36]	@ (8007094 <_Bfree+0x40>)
 8007070:	4809      	ldr	r0, [pc, #36]	@ (8007098 <_Bfree+0x44>)
 8007072:	f000 fbfd 	bl	8007870 <__assert_func>
 8007076:	6046      	str	r6, [r0, #4]
 8007078:	6086      	str	r6, [r0, #8]
 800707a:	6006      	str	r6, [r0, #0]
 800707c:	60c6      	str	r6, [r0, #12]
 800707e:	2c00      	cmp	r4, #0
 8007080:	d007      	beq.n	8007092 <_Bfree+0x3e>
 8007082:	69eb      	ldr	r3, [r5, #28]
 8007084:	6862      	ldr	r2, [r4, #4]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	0092      	lsls	r2, r2, #2
 800708a:	189b      	adds	r3, r3, r2
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	6022      	str	r2, [r4, #0]
 8007090:	601c      	str	r4, [r3, #0]
 8007092:	bd70      	pop	{r4, r5, r6, pc}
 8007094:	080080a1 	.word	0x080080a1
 8007098:	08008121 	.word	0x08008121

0800709c <__multadd>:
 800709c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800709e:	000f      	movs	r7, r1
 80070a0:	9001      	str	r0, [sp, #4]
 80070a2:	000c      	movs	r4, r1
 80070a4:	001e      	movs	r6, r3
 80070a6:	2000      	movs	r0, #0
 80070a8:	690d      	ldr	r5, [r1, #16]
 80070aa:	3714      	adds	r7, #20
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	3001      	adds	r0, #1
 80070b0:	b299      	uxth	r1, r3
 80070b2:	4351      	muls	r1, r2
 80070b4:	0c1b      	lsrs	r3, r3, #16
 80070b6:	4353      	muls	r3, r2
 80070b8:	1989      	adds	r1, r1, r6
 80070ba:	0c0e      	lsrs	r6, r1, #16
 80070bc:	199b      	adds	r3, r3, r6
 80070be:	0c1e      	lsrs	r6, r3, #16
 80070c0:	b289      	uxth	r1, r1
 80070c2:	041b      	lsls	r3, r3, #16
 80070c4:	185b      	adds	r3, r3, r1
 80070c6:	c708      	stmia	r7!, {r3}
 80070c8:	4285      	cmp	r5, r0
 80070ca:	dcef      	bgt.n	80070ac <__multadd+0x10>
 80070cc:	2e00      	cmp	r6, #0
 80070ce:	d022      	beq.n	8007116 <__multadd+0x7a>
 80070d0:	68a3      	ldr	r3, [r4, #8]
 80070d2:	42ab      	cmp	r3, r5
 80070d4:	dc19      	bgt.n	800710a <__multadd+0x6e>
 80070d6:	6861      	ldr	r1, [r4, #4]
 80070d8:	9801      	ldr	r0, [sp, #4]
 80070da:	3101      	adds	r1, #1
 80070dc:	f7ff ff76 	bl	8006fcc <_Balloc>
 80070e0:	1e07      	subs	r7, r0, #0
 80070e2:	d105      	bne.n	80070f0 <__multadd+0x54>
 80070e4:	003a      	movs	r2, r7
 80070e6:	21ba      	movs	r1, #186	@ 0xba
 80070e8:	4b0c      	ldr	r3, [pc, #48]	@ (800711c <__multadd+0x80>)
 80070ea:	480d      	ldr	r0, [pc, #52]	@ (8007120 <__multadd+0x84>)
 80070ec:	f000 fbc0 	bl	8007870 <__assert_func>
 80070f0:	0021      	movs	r1, r4
 80070f2:	6922      	ldr	r2, [r4, #16]
 80070f4:	310c      	adds	r1, #12
 80070f6:	3202      	adds	r2, #2
 80070f8:	0092      	lsls	r2, r2, #2
 80070fa:	300c      	adds	r0, #12
 80070fc:	f000 fbae 	bl	800785c <memcpy>
 8007100:	0021      	movs	r1, r4
 8007102:	9801      	ldr	r0, [sp, #4]
 8007104:	f7ff ffa6 	bl	8007054 <_Bfree>
 8007108:	003c      	movs	r4, r7
 800710a:	1d2b      	adds	r3, r5, #4
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	18e3      	adds	r3, r4, r3
 8007110:	3501      	adds	r5, #1
 8007112:	605e      	str	r6, [r3, #4]
 8007114:	6125      	str	r5, [r4, #16]
 8007116:	0020      	movs	r0, r4
 8007118:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800711a:	46c0      	nop			@ (mov r8, r8)
 800711c:	08008110 	.word	0x08008110
 8007120:	08008121 	.word	0x08008121

08007124 <__hi0bits>:
 8007124:	2280      	movs	r2, #128	@ 0x80
 8007126:	0003      	movs	r3, r0
 8007128:	0252      	lsls	r2, r2, #9
 800712a:	2000      	movs	r0, #0
 800712c:	4293      	cmp	r3, r2
 800712e:	d201      	bcs.n	8007134 <__hi0bits+0x10>
 8007130:	041b      	lsls	r3, r3, #16
 8007132:	3010      	adds	r0, #16
 8007134:	2280      	movs	r2, #128	@ 0x80
 8007136:	0452      	lsls	r2, r2, #17
 8007138:	4293      	cmp	r3, r2
 800713a:	d201      	bcs.n	8007140 <__hi0bits+0x1c>
 800713c:	3008      	adds	r0, #8
 800713e:	021b      	lsls	r3, r3, #8
 8007140:	2280      	movs	r2, #128	@ 0x80
 8007142:	0552      	lsls	r2, r2, #21
 8007144:	4293      	cmp	r3, r2
 8007146:	d201      	bcs.n	800714c <__hi0bits+0x28>
 8007148:	3004      	adds	r0, #4
 800714a:	011b      	lsls	r3, r3, #4
 800714c:	2280      	movs	r2, #128	@ 0x80
 800714e:	05d2      	lsls	r2, r2, #23
 8007150:	4293      	cmp	r3, r2
 8007152:	d201      	bcs.n	8007158 <__hi0bits+0x34>
 8007154:	3002      	adds	r0, #2
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	2b00      	cmp	r3, #0
 800715a:	db03      	blt.n	8007164 <__hi0bits+0x40>
 800715c:	3001      	adds	r0, #1
 800715e:	4213      	tst	r3, r2
 8007160:	d100      	bne.n	8007164 <__hi0bits+0x40>
 8007162:	2020      	movs	r0, #32
 8007164:	4770      	bx	lr

08007166 <__lo0bits>:
 8007166:	6803      	ldr	r3, [r0, #0]
 8007168:	0001      	movs	r1, r0
 800716a:	2207      	movs	r2, #7
 800716c:	0018      	movs	r0, r3
 800716e:	4010      	ands	r0, r2
 8007170:	4213      	tst	r3, r2
 8007172:	d00d      	beq.n	8007190 <__lo0bits+0x2a>
 8007174:	3a06      	subs	r2, #6
 8007176:	2000      	movs	r0, #0
 8007178:	4213      	tst	r3, r2
 800717a:	d105      	bne.n	8007188 <__lo0bits+0x22>
 800717c:	3002      	adds	r0, #2
 800717e:	4203      	tst	r3, r0
 8007180:	d003      	beq.n	800718a <__lo0bits+0x24>
 8007182:	40d3      	lsrs	r3, r2
 8007184:	0010      	movs	r0, r2
 8007186:	600b      	str	r3, [r1, #0]
 8007188:	4770      	bx	lr
 800718a:	089b      	lsrs	r3, r3, #2
 800718c:	600b      	str	r3, [r1, #0]
 800718e:	e7fb      	b.n	8007188 <__lo0bits+0x22>
 8007190:	b29a      	uxth	r2, r3
 8007192:	2a00      	cmp	r2, #0
 8007194:	d101      	bne.n	800719a <__lo0bits+0x34>
 8007196:	2010      	movs	r0, #16
 8007198:	0c1b      	lsrs	r3, r3, #16
 800719a:	b2da      	uxtb	r2, r3
 800719c:	2a00      	cmp	r2, #0
 800719e:	d101      	bne.n	80071a4 <__lo0bits+0x3e>
 80071a0:	3008      	adds	r0, #8
 80071a2:	0a1b      	lsrs	r3, r3, #8
 80071a4:	071a      	lsls	r2, r3, #28
 80071a6:	d101      	bne.n	80071ac <__lo0bits+0x46>
 80071a8:	3004      	adds	r0, #4
 80071aa:	091b      	lsrs	r3, r3, #4
 80071ac:	079a      	lsls	r2, r3, #30
 80071ae:	d101      	bne.n	80071b4 <__lo0bits+0x4e>
 80071b0:	3002      	adds	r0, #2
 80071b2:	089b      	lsrs	r3, r3, #2
 80071b4:	07da      	lsls	r2, r3, #31
 80071b6:	d4e9      	bmi.n	800718c <__lo0bits+0x26>
 80071b8:	3001      	adds	r0, #1
 80071ba:	085b      	lsrs	r3, r3, #1
 80071bc:	d1e6      	bne.n	800718c <__lo0bits+0x26>
 80071be:	2020      	movs	r0, #32
 80071c0:	e7e2      	b.n	8007188 <__lo0bits+0x22>
	...

080071c4 <__i2b>:
 80071c4:	b510      	push	{r4, lr}
 80071c6:	000c      	movs	r4, r1
 80071c8:	2101      	movs	r1, #1
 80071ca:	f7ff feff 	bl	8006fcc <_Balloc>
 80071ce:	2800      	cmp	r0, #0
 80071d0:	d107      	bne.n	80071e2 <__i2b+0x1e>
 80071d2:	2146      	movs	r1, #70	@ 0x46
 80071d4:	4c05      	ldr	r4, [pc, #20]	@ (80071ec <__i2b+0x28>)
 80071d6:	0002      	movs	r2, r0
 80071d8:	4b05      	ldr	r3, [pc, #20]	@ (80071f0 <__i2b+0x2c>)
 80071da:	0020      	movs	r0, r4
 80071dc:	31ff      	adds	r1, #255	@ 0xff
 80071de:	f000 fb47 	bl	8007870 <__assert_func>
 80071e2:	2301      	movs	r3, #1
 80071e4:	6144      	str	r4, [r0, #20]
 80071e6:	6103      	str	r3, [r0, #16]
 80071e8:	bd10      	pop	{r4, pc}
 80071ea:	46c0      	nop			@ (mov r8, r8)
 80071ec:	08008121 	.word	0x08008121
 80071f0:	08008110 	.word	0x08008110

080071f4 <__multiply>:
 80071f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071f6:	0014      	movs	r4, r2
 80071f8:	690a      	ldr	r2, [r1, #16]
 80071fa:	6923      	ldr	r3, [r4, #16]
 80071fc:	000d      	movs	r5, r1
 80071fe:	b089      	sub	sp, #36	@ 0x24
 8007200:	429a      	cmp	r2, r3
 8007202:	db02      	blt.n	800720a <__multiply+0x16>
 8007204:	0023      	movs	r3, r4
 8007206:	000c      	movs	r4, r1
 8007208:	001d      	movs	r5, r3
 800720a:	6927      	ldr	r7, [r4, #16]
 800720c:	692e      	ldr	r6, [r5, #16]
 800720e:	6861      	ldr	r1, [r4, #4]
 8007210:	19bb      	adds	r3, r7, r6
 8007212:	9300      	str	r3, [sp, #0]
 8007214:	68a3      	ldr	r3, [r4, #8]
 8007216:	19ba      	adds	r2, r7, r6
 8007218:	4293      	cmp	r3, r2
 800721a:	da00      	bge.n	800721e <__multiply+0x2a>
 800721c:	3101      	adds	r1, #1
 800721e:	f7ff fed5 	bl	8006fcc <_Balloc>
 8007222:	4684      	mov	ip, r0
 8007224:	2800      	cmp	r0, #0
 8007226:	d106      	bne.n	8007236 <__multiply+0x42>
 8007228:	21b1      	movs	r1, #177	@ 0xb1
 800722a:	4662      	mov	r2, ip
 800722c:	4b44      	ldr	r3, [pc, #272]	@ (8007340 <__multiply+0x14c>)
 800722e:	4845      	ldr	r0, [pc, #276]	@ (8007344 <__multiply+0x150>)
 8007230:	0049      	lsls	r1, r1, #1
 8007232:	f000 fb1d 	bl	8007870 <__assert_func>
 8007236:	0002      	movs	r2, r0
 8007238:	19bb      	adds	r3, r7, r6
 800723a:	3214      	adds	r2, #20
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	18d3      	adds	r3, r2, r3
 8007240:	9301      	str	r3, [sp, #4]
 8007242:	2100      	movs	r1, #0
 8007244:	0013      	movs	r3, r2
 8007246:	9801      	ldr	r0, [sp, #4]
 8007248:	4283      	cmp	r3, r0
 800724a:	d328      	bcc.n	800729e <__multiply+0xaa>
 800724c:	0023      	movs	r3, r4
 800724e:	00bf      	lsls	r7, r7, #2
 8007250:	3314      	adds	r3, #20
 8007252:	9304      	str	r3, [sp, #16]
 8007254:	3514      	adds	r5, #20
 8007256:	19db      	adds	r3, r3, r7
 8007258:	00b6      	lsls	r6, r6, #2
 800725a:	9302      	str	r3, [sp, #8]
 800725c:	19ab      	adds	r3, r5, r6
 800725e:	9307      	str	r3, [sp, #28]
 8007260:	2304      	movs	r3, #4
 8007262:	9305      	str	r3, [sp, #20]
 8007264:	0023      	movs	r3, r4
 8007266:	9902      	ldr	r1, [sp, #8]
 8007268:	3315      	adds	r3, #21
 800726a:	4299      	cmp	r1, r3
 800726c:	d305      	bcc.n	800727a <__multiply+0x86>
 800726e:	1b0c      	subs	r4, r1, r4
 8007270:	3c15      	subs	r4, #21
 8007272:	08a4      	lsrs	r4, r4, #2
 8007274:	3401      	adds	r4, #1
 8007276:	00a3      	lsls	r3, r4, #2
 8007278:	9305      	str	r3, [sp, #20]
 800727a:	9b07      	ldr	r3, [sp, #28]
 800727c:	429d      	cmp	r5, r3
 800727e:	d310      	bcc.n	80072a2 <__multiply+0xae>
 8007280:	9b00      	ldr	r3, [sp, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	dd05      	ble.n	8007292 <__multiply+0x9e>
 8007286:	9b01      	ldr	r3, [sp, #4]
 8007288:	3b04      	subs	r3, #4
 800728a:	9301      	str	r3, [sp, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d052      	beq.n	8007338 <__multiply+0x144>
 8007292:	4663      	mov	r3, ip
 8007294:	4660      	mov	r0, ip
 8007296:	9a00      	ldr	r2, [sp, #0]
 8007298:	611a      	str	r2, [r3, #16]
 800729a:	b009      	add	sp, #36	@ 0x24
 800729c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800729e:	c302      	stmia	r3!, {r1}
 80072a0:	e7d1      	b.n	8007246 <__multiply+0x52>
 80072a2:	682c      	ldr	r4, [r5, #0]
 80072a4:	b2a4      	uxth	r4, r4
 80072a6:	2c00      	cmp	r4, #0
 80072a8:	d01f      	beq.n	80072ea <__multiply+0xf6>
 80072aa:	2300      	movs	r3, #0
 80072ac:	0017      	movs	r7, r2
 80072ae:	9e04      	ldr	r6, [sp, #16]
 80072b0:	9303      	str	r3, [sp, #12]
 80072b2:	ce08      	ldmia	r6!, {r3}
 80072b4:	6839      	ldr	r1, [r7, #0]
 80072b6:	9306      	str	r3, [sp, #24]
 80072b8:	466b      	mov	r3, sp
 80072ba:	8b1b      	ldrh	r3, [r3, #24]
 80072bc:	b288      	uxth	r0, r1
 80072be:	4363      	muls	r3, r4
 80072c0:	181b      	adds	r3, r3, r0
 80072c2:	9803      	ldr	r0, [sp, #12]
 80072c4:	0c09      	lsrs	r1, r1, #16
 80072c6:	181b      	adds	r3, r3, r0
 80072c8:	9806      	ldr	r0, [sp, #24]
 80072ca:	0c00      	lsrs	r0, r0, #16
 80072cc:	4360      	muls	r0, r4
 80072ce:	1840      	adds	r0, r0, r1
 80072d0:	0c19      	lsrs	r1, r3, #16
 80072d2:	1841      	adds	r1, r0, r1
 80072d4:	0c08      	lsrs	r0, r1, #16
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	0409      	lsls	r1, r1, #16
 80072da:	4319      	orrs	r1, r3
 80072dc:	9b02      	ldr	r3, [sp, #8]
 80072de:	9003      	str	r0, [sp, #12]
 80072e0:	c702      	stmia	r7!, {r1}
 80072e2:	42b3      	cmp	r3, r6
 80072e4:	d8e5      	bhi.n	80072b2 <__multiply+0xbe>
 80072e6:	9b05      	ldr	r3, [sp, #20]
 80072e8:	50d0      	str	r0, [r2, r3]
 80072ea:	682c      	ldr	r4, [r5, #0]
 80072ec:	0c24      	lsrs	r4, r4, #16
 80072ee:	d020      	beq.n	8007332 <__multiply+0x13e>
 80072f0:	2100      	movs	r1, #0
 80072f2:	0010      	movs	r0, r2
 80072f4:	6813      	ldr	r3, [r2, #0]
 80072f6:	9e04      	ldr	r6, [sp, #16]
 80072f8:	9103      	str	r1, [sp, #12]
 80072fa:	6831      	ldr	r1, [r6, #0]
 80072fc:	6807      	ldr	r7, [r0, #0]
 80072fe:	b289      	uxth	r1, r1
 8007300:	4361      	muls	r1, r4
 8007302:	0c3f      	lsrs	r7, r7, #16
 8007304:	19c9      	adds	r1, r1, r7
 8007306:	9f03      	ldr	r7, [sp, #12]
 8007308:	b29b      	uxth	r3, r3
 800730a:	19c9      	adds	r1, r1, r7
 800730c:	040f      	lsls	r7, r1, #16
 800730e:	431f      	orrs	r7, r3
 8007310:	6007      	str	r7, [r0, #0]
 8007312:	ce80      	ldmia	r6!, {r7}
 8007314:	6843      	ldr	r3, [r0, #4]
 8007316:	0c3f      	lsrs	r7, r7, #16
 8007318:	4367      	muls	r7, r4
 800731a:	b29b      	uxth	r3, r3
 800731c:	0c09      	lsrs	r1, r1, #16
 800731e:	18fb      	adds	r3, r7, r3
 8007320:	185b      	adds	r3, r3, r1
 8007322:	0c19      	lsrs	r1, r3, #16
 8007324:	9103      	str	r1, [sp, #12]
 8007326:	9902      	ldr	r1, [sp, #8]
 8007328:	3004      	adds	r0, #4
 800732a:	42b1      	cmp	r1, r6
 800732c:	d8e5      	bhi.n	80072fa <__multiply+0x106>
 800732e:	9905      	ldr	r1, [sp, #20]
 8007330:	5053      	str	r3, [r2, r1]
 8007332:	3504      	adds	r5, #4
 8007334:	3204      	adds	r2, #4
 8007336:	e7a0      	b.n	800727a <__multiply+0x86>
 8007338:	9b00      	ldr	r3, [sp, #0]
 800733a:	3b01      	subs	r3, #1
 800733c:	9300      	str	r3, [sp, #0]
 800733e:	e79f      	b.n	8007280 <__multiply+0x8c>
 8007340:	08008110 	.word	0x08008110
 8007344:	08008121 	.word	0x08008121

08007348 <__pow5mult>:
 8007348:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800734a:	2303      	movs	r3, #3
 800734c:	0015      	movs	r5, r2
 800734e:	0007      	movs	r7, r0
 8007350:	000e      	movs	r6, r1
 8007352:	401a      	ands	r2, r3
 8007354:	421d      	tst	r5, r3
 8007356:	d008      	beq.n	800736a <__pow5mult+0x22>
 8007358:	4925      	ldr	r1, [pc, #148]	@ (80073f0 <__pow5mult+0xa8>)
 800735a:	3a01      	subs	r2, #1
 800735c:	0092      	lsls	r2, r2, #2
 800735e:	5852      	ldr	r2, [r2, r1]
 8007360:	2300      	movs	r3, #0
 8007362:	0031      	movs	r1, r6
 8007364:	f7ff fe9a 	bl	800709c <__multadd>
 8007368:	0006      	movs	r6, r0
 800736a:	10ad      	asrs	r5, r5, #2
 800736c:	d03d      	beq.n	80073ea <__pow5mult+0xa2>
 800736e:	69fc      	ldr	r4, [r7, #28]
 8007370:	2c00      	cmp	r4, #0
 8007372:	d10f      	bne.n	8007394 <__pow5mult+0x4c>
 8007374:	2010      	movs	r0, #16
 8007376:	f7ff fcbb 	bl	8006cf0 <malloc>
 800737a:	1e02      	subs	r2, r0, #0
 800737c:	61f8      	str	r0, [r7, #28]
 800737e:	d105      	bne.n	800738c <__pow5mult+0x44>
 8007380:	21b4      	movs	r1, #180	@ 0xb4
 8007382:	4b1c      	ldr	r3, [pc, #112]	@ (80073f4 <__pow5mult+0xac>)
 8007384:	481c      	ldr	r0, [pc, #112]	@ (80073f8 <__pow5mult+0xb0>)
 8007386:	31ff      	adds	r1, #255	@ 0xff
 8007388:	f000 fa72 	bl	8007870 <__assert_func>
 800738c:	6044      	str	r4, [r0, #4]
 800738e:	6084      	str	r4, [r0, #8]
 8007390:	6004      	str	r4, [r0, #0]
 8007392:	60c4      	str	r4, [r0, #12]
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	689c      	ldr	r4, [r3, #8]
 8007398:	9301      	str	r3, [sp, #4]
 800739a:	2c00      	cmp	r4, #0
 800739c:	d108      	bne.n	80073b0 <__pow5mult+0x68>
 800739e:	0038      	movs	r0, r7
 80073a0:	4916      	ldr	r1, [pc, #88]	@ (80073fc <__pow5mult+0xb4>)
 80073a2:	f7ff ff0f 	bl	80071c4 <__i2b>
 80073a6:	9b01      	ldr	r3, [sp, #4]
 80073a8:	0004      	movs	r4, r0
 80073aa:	6098      	str	r0, [r3, #8]
 80073ac:	2300      	movs	r3, #0
 80073ae:	6003      	str	r3, [r0, #0]
 80073b0:	2301      	movs	r3, #1
 80073b2:	421d      	tst	r5, r3
 80073b4:	d00a      	beq.n	80073cc <__pow5mult+0x84>
 80073b6:	0031      	movs	r1, r6
 80073b8:	0022      	movs	r2, r4
 80073ba:	0038      	movs	r0, r7
 80073bc:	f7ff ff1a 	bl	80071f4 <__multiply>
 80073c0:	0031      	movs	r1, r6
 80073c2:	9001      	str	r0, [sp, #4]
 80073c4:	0038      	movs	r0, r7
 80073c6:	f7ff fe45 	bl	8007054 <_Bfree>
 80073ca:	9e01      	ldr	r6, [sp, #4]
 80073cc:	106d      	asrs	r5, r5, #1
 80073ce:	d00c      	beq.n	80073ea <__pow5mult+0xa2>
 80073d0:	6820      	ldr	r0, [r4, #0]
 80073d2:	2800      	cmp	r0, #0
 80073d4:	d107      	bne.n	80073e6 <__pow5mult+0x9e>
 80073d6:	0022      	movs	r2, r4
 80073d8:	0021      	movs	r1, r4
 80073da:	0038      	movs	r0, r7
 80073dc:	f7ff ff0a 	bl	80071f4 <__multiply>
 80073e0:	2300      	movs	r3, #0
 80073e2:	6020      	str	r0, [r4, #0]
 80073e4:	6003      	str	r3, [r0, #0]
 80073e6:	0004      	movs	r4, r0
 80073e8:	e7e2      	b.n	80073b0 <__pow5mult+0x68>
 80073ea:	0030      	movs	r0, r6
 80073ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80073ee:	46c0      	nop			@ (mov r8, r8)
 80073f0:	080081d4 	.word	0x080081d4
 80073f4:	080080a1 	.word	0x080080a1
 80073f8:	08008121 	.word	0x08008121
 80073fc:	00000271 	.word	0x00000271

08007400 <__lshift>:
 8007400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007402:	000c      	movs	r4, r1
 8007404:	0016      	movs	r6, r2
 8007406:	6923      	ldr	r3, [r4, #16]
 8007408:	1157      	asrs	r7, r2, #5
 800740a:	b085      	sub	sp, #20
 800740c:	18fb      	adds	r3, r7, r3
 800740e:	9301      	str	r3, [sp, #4]
 8007410:	3301      	adds	r3, #1
 8007412:	9300      	str	r3, [sp, #0]
 8007414:	6849      	ldr	r1, [r1, #4]
 8007416:	68a3      	ldr	r3, [r4, #8]
 8007418:	9002      	str	r0, [sp, #8]
 800741a:	9a00      	ldr	r2, [sp, #0]
 800741c:	4293      	cmp	r3, r2
 800741e:	db10      	blt.n	8007442 <__lshift+0x42>
 8007420:	9802      	ldr	r0, [sp, #8]
 8007422:	f7ff fdd3 	bl	8006fcc <_Balloc>
 8007426:	2300      	movs	r3, #0
 8007428:	0001      	movs	r1, r0
 800742a:	0005      	movs	r5, r0
 800742c:	001a      	movs	r2, r3
 800742e:	3114      	adds	r1, #20
 8007430:	4298      	cmp	r0, r3
 8007432:	d10c      	bne.n	800744e <__lshift+0x4e>
 8007434:	21ef      	movs	r1, #239	@ 0xef
 8007436:	002a      	movs	r2, r5
 8007438:	4b25      	ldr	r3, [pc, #148]	@ (80074d0 <__lshift+0xd0>)
 800743a:	4826      	ldr	r0, [pc, #152]	@ (80074d4 <__lshift+0xd4>)
 800743c:	0049      	lsls	r1, r1, #1
 800743e:	f000 fa17 	bl	8007870 <__assert_func>
 8007442:	3101      	adds	r1, #1
 8007444:	005b      	lsls	r3, r3, #1
 8007446:	e7e8      	b.n	800741a <__lshift+0x1a>
 8007448:	0098      	lsls	r0, r3, #2
 800744a:	500a      	str	r2, [r1, r0]
 800744c:	3301      	adds	r3, #1
 800744e:	42bb      	cmp	r3, r7
 8007450:	dbfa      	blt.n	8007448 <__lshift+0x48>
 8007452:	43fb      	mvns	r3, r7
 8007454:	17db      	asrs	r3, r3, #31
 8007456:	401f      	ands	r7, r3
 8007458:	00bf      	lsls	r7, r7, #2
 800745a:	0023      	movs	r3, r4
 800745c:	201f      	movs	r0, #31
 800745e:	19c9      	adds	r1, r1, r7
 8007460:	0037      	movs	r7, r6
 8007462:	6922      	ldr	r2, [r4, #16]
 8007464:	3314      	adds	r3, #20
 8007466:	0092      	lsls	r2, r2, #2
 8007468:	189a      	adds	r2, r3, r2
 800746a:	4007      	ands	r7, r0
 800746c:	4206      	tst	r6, r0
 800746e:	d029      	beq.n	80074c4 <__lshift+0xc4>
 8007470:	3001      	adds	r0, #1
 8007472:	1bc0      	subs	r0, r0, r7
 8007474:	9003      	str	r0, [sp, #12]
 8007476:	468c      	mov	ip, r1
 8007478:	2000      	movs	r0, #0
 800747a:	681e      	ldr	r6, [r3, #0]
 800747c:	40be      	lsls	r6, r7
 800747e:	4306      	orrs	r6, r0
 8007480:	4660      	mov	r0, ip
 8007482:	c040      	stmia	r0!, {r6}
 8007484:	4684      	mov	ip, r0
 8007486:	9e03      	ldr	r6, [sp, #12]
 8007488:	cb01      	ldmia	r3!, {r0}
 800748a:	40f0      	lsrs	r0, r6
 800748c:	429a      	cmp	r2, r3
 800748e:	d8f4      	bhi.n	800747a <__lshift+0x7a>
 8007490:	0026      	movs	r6, r4
 8007492:	3615      	adds	r6, #21
 8007494:	2304      	movs	r3, #4
 8007496:	42b2      	cmp	r2, r6
 8007498:	d304      	bcc.n	80074a4 <__lshift+0xa4>
 800749a:	1b13      	subs	r3, r2, r4
 800749c:	3b15      	subs	r3, #21
 800749e:	089b      	lsrs	r3, r3, #2
 80074a0:	3301      	adds	r3, #1
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	50c8      	str	r0, [r1, r3]
 80074a6:	2800      	cmp	r0, #0
 80074a8:	d002      	beq.n	80074b0 <__lshift+0xb0>
 80074aa:	9b01      	ldr	r3, [sp, #4]
 80074ac:	3302      	adds	r3, #2
 80074ae:	9300      	str	r3, [sp, #0]
 80074b0:	9b00      	ldr	r3, [sp, #0]
 80074b2:	9802      	ldr	r0, [sp, #8]
 80074b4:	3b01      	subs	r3, #1
 80074b6:	0021      	movs	r1, r4
 80074b8:	612b      	str	r3, [r5, #16]
 80074ba:	f7ff fdcb 	bl	8007054 <_Bfree>
 80074be:	0028      	movs	r0, r5
 80074c0:	b005      	add	sp, #20
 80074c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074c4:	cb01      	ldmia	r3!, {r0}
 80074c6:	c101      	stmia	r1!, {r0}
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d8fb      	bhi.n	80074c4 <__lshift+0xc4>
 80074cc:	e7f0      	b.n	80074b0 <__lshift+0xb0>
 80074ce:	46c0      	nop			@ (mov r8, r8)
 80074d0:	08008110 	.word	0x08008110
 80074d4:	08008121 	.word	0x08008121

080074d8 <__mcmp>:
 80074d8:	b530      	push	{r4, r5, lr}
 80074da:	690b      	ldr	r3, [r1, #16]
 80074dc:	6904      	ldr	r4, [r0, #16]
 80074de:	0002      	movs	r2, r0
 80074e0:	1ae0      	subs	r0, r4, r3
 80074e2:	429c      	cmp	r4, r3
 80074e4:	d10f      	bne.n	8007506 <__mcmp+0x2e>
 80074e6:	3214      	adds	r2, #20
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	3114      	adds	r1, #20
 80074ec:	0014      	movs	r4, r2
 80074ee:	18c9      	adds	r1, r1, r3
 80074f0:	18d2      	adds	r2, r2, r3
 80074f2:	3a04      	subs	r2, #4
 80074f4:	3904      	subs	r1, #4
 80074f6:	6815      	ldr	r5, [r2, #0]
 80074f8:	680b      	ldr	r3, [r1, #0]
 80074fa:	429d      	cmp	r5, r3
 80074fc:	d004      	beq.n	8007508 <__mcmp+0x30>
 80074fe:	2001      	movs	r0, #1
 8007500:	429d      	cmp	r5, r3
 8007502:	d200      	bcs.n	8007506 <__mcmp+0x2e>
 8007504:	3802      	subs	r0, #2
 8007506:	bd30      	pop	{r4, r5, pc}
 8007508:	4294      	cmp	r4, r2
 800750a:	d3f2      	bcc.n	80074f2 <__mcmp+0x1a>
 800750c:	e7fb      	b.n	8007506 <__mcmp+0x2e>
	...

08007510 <__mdiff>:
 8007510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007512:	000c      	movs	r4, r1
 8007514:	b087      	sub	sp, #28
 8007516:	9000      	str	r0, [sp, #0]
 8007518:	0011      	movs	r1, r2
 800751a:	0020      	movs	r0, r4
 800751c:	0017      	movs	r7, r2
 800751e:	f7ff ffdb 	bl	80074d8 <__mcmp>
 8007522:	1e05      	subs	r5, r0, #0
 8007524:	d110      	bne.n	8007548 <__mdiff+0x38>
 8007526:	0001      	movs	r1, r0
 8007528:	9800      	ldr	r0, [sp, #0]
 800752a:	f7ff fd4f 	bl	8006fcc <_Balloc>
 800752e:	1e02      	subs	r2, r0, #0
 8007530:	d104      	bne.n	800753c <__mdiff+0x2c>
 8007532:	4b40      	ldr	r3, [pc, #256]	@ (8007634 <__mdiff+0x124>)
 8007534:	4840      	ldr	r0, [pc, #256]	@ (8007638 <__mdiff+0x128>)
 8007536:	4941      	ldr	r1, [pc, #260]	@ (800763c <__mdiff+0x12c>)
 8007538:	f000 f99a 	bl	8007870 <__assert_func>
 800753c:	2301      	movs	r3, #1
 800753e:	6145      	str	r5, [r0, #20]
 8007540:	6103      	str	r3, [r0, #16]
 8007542:	0010      	movs	r0, r2
 8007544:	b007      	add	sp, #28
 8007546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007548:	2600      	movs	r6, #0
 800754a:	42b0      	cmp	r0, r6
 800754c:	da03      	bge.n	8007556 <__mdiff+0x46>
 800754e:	0023      	movs	r3, r4
 8007550:	003c      	movs	r4, r7
 8007552:	001f      	movs	r7, r3
 8007554:	3601      	adds	r6, #1
 8007556:	6861      	ldr	r1, [r4, #4]
 8007558:	9800      	ldr	r0, [sp, #0]
 800755a:	f7ff fd37 	bl	8006fcc <_Balloc>
 800755e:	1e02      	subs	r2, r0, #0
 8007560:	d103      	bne.n	800756a <__mdiff+0x5a>
 8007562:	4b34      	ldr	r3, [pc, #208]	@ (8007634 <__mdiff+0x124>)
 8007564:	4834      	ldr	r0, [pc, #208]	@ (8007638 <__mdiff+0x128>)
 8007566:	4936      	ldr	r1, [pc, #216]	@ (8007640 <__mdiff+0x130>)
 8007568:	e7e6      	b.n	8007538 <__mdiff+0x28>
 800756a:	6923      	ldr	r3, [r4, #16]
 800756c:	3414      	adds	r4, #20
 800756e:	9300      	str	r3, [sp, #0]
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	18e3      	adds	r3, r4, r3
 8007574:	0021      	movs	r1, r4
 8007576:	9401      	str	r4, [sp, #4]
 8007578:	003c      	movs	r4, r7
 800757a:	9302      	str	r3, [sp, #8]
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	3414      	adds	r4, #20
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	18e3      	adds	r3, r4, r3
 8007584:	9303      	str	r3, [sp, #12]
 8007586:	0003      	movs	r3, r0
 8007588:	60c6      	str	r6, [r0, #12]
 800758a:	468c      	mov	ip, r1
 800758c:	2000      	movs	r0, #0
 800758e:	3314      	adds	r3, #20
 8007590:	9304      	str	r3, [sp, #16]
 8007592:	9305      	str	r3, [sp, #20]
 8007594:	4663      	mov	r3, ip
 8007596:	cb20      	ldmia	r3!, {r5}
 8007598:	b2a9      	uxth	r1, r5
 800759a:	000e      	movs	r6, r1
 800759c:	469c      	mov	ip, r3
 800759e:	cc08      	ldmia	r4!, {r3}
 80075a0:	0c2d      	lsrs	r5, r5, #16
 80075a2:	b299      	uxth	r1, r3
 80075a4:	1a71      	subs	r1, r6, r1
 80075a6:	1809      	adds	r1, r1, r0
 80075a8:	0c1b      	lsrs	r3, r3, #16
 80075aa:	1408      	asrs	r0, r1, #16
 80075ac:	1aeb      	subs	r3, r5, r3
 80075ae:	181b      	adds	r3, r3, r0
 80075b0:	1418      	asrs	r0, r3, #16
 80075b2:	b289      	uxth	r1, r1
 80075b4:	041b      	lsls	r3, r3, #16
 80075b6:	4319      	orrs	r1, r3
 80075b8:	9b05      	ldr	r3, [sp, #20]
 80075ba:	c302      	stmia	r3!, {r1}
 80075bc:	9305      	str	r3, [sp, #20]
 80075be:	9b03      	ldr	r3, [sp, #12]
 80075c0:	42a3      	cmp	r3, r4
 80075c2:	d8e7      	bhi.n	8007594 <__mdiff+0x84>
 80075c4:	0039      	movs	r1, r7
 80075c6:	9c03      	ldr	r4, [sp, #12]
 80075c8:	3115      	adds	r1, #21
 80075ca:	2304      	movs	r3, #4
 80075cc:	428c      	cmp	r4, r1
 80075ce:	d304      	bcc.n	80075da <__mdiff+0xca>
 80075d0:	1be3      	subs	r3, r4, r7
 80075d2:	3b15      	subs	r3, #21
 80075d4:	089b      	lsrs	r3, r3, #2
 80075d6:	3301      	adds	r3, #1
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	9901      	ldr	r1, [sp, #4]
 80075dc:	18cd      	adds	r5, r1, r3
 80075de:	9904      	ldr	r1, [sp, #16]
 80075e0:	002e      	movs	r6, r5
 80075e2:	18cb      	adds	r3, r1, r3
 80075e4:	001f      	movs	r7, r3
 80075e6:	9902      	ldr	r1, [sp, #8]
 80075e8:	428e      	cmp	r6, r1
 80075ea:	d311      	bcc.n	8007610 <__mdiff+0x100>
 80075ec:	9c02      	ldr	r4, [sp, #8]
 80075ee:	1ee9      	subs	r1, r5, #3
 80075f0:	2000      	movs	r0, #0
 80075f2:	428c      	cmp	r4, r1
 80075f4:	d304      	bcc.n	8007600 <__mdiff+0xf0>
 80075f6:	0021      	movs	r1, r4
 80075f8:	3103      	adds	r1, #3
 80075fa:	1b49      	subs	r1, r1, r5
 80075fc:	0889      	lsrs	r1, r1, #2
 80075fe:	0088      	lsls	r0, r1, #2
 8007600:	181b      	adds	r3, r3, r0
 8007602:	3b04      	subs	r3, #4
 8007604:	6819      	ldr	r1, [r3, #0]
 8007606:	2900      	cmp	r1, #0
 8007608:	d010      	beq.n	800762c <__mdiff+0x11c>
 800760a:	9b00      	ldr	r3, [sp, #0]
 800760c:	6113      	str	r3, [r2, #16]
 800760e:	e798      	b.n	8007542 <__mdiff+0x32>
 8007610:	4684      	mov	ip, r0
 8007612:	ce02      	ldmia	r6!, {r1}
 8007614:	b288      	uxth	r0, r1
 8007616:	4460      	add	r0, ip
 8007618:	1400      	asrs	r0, r0, #16
 800761a:	0c0c      	lsrs	r4, r1, #16
 800761c:	1904      	adds	r4, r0, r4
 800761e:	4461      	add	r1, ip
 8007620:	1420      	asrs	r0, r4, #16
 8007622:	b289      	uxth	r1, r1
 8007624:	0424      	lsls	r4, r4, #16
 8007626:	4321      	orrs	r1, r4
 8007628:	c702      	stmia	r7!, {r1}
 800762a:	e7dc      	b.n	80075e6 <__mdiff+0xd6>
 800762c:	9900      	ldr	r1, [sp, #0]
 800762e:	3901      	subs	r1, #1
 8007630:	9100      	str	r1, [sp, #0]
 8007632:	e7e6      	b.n	8007602 <__mdiff+0xf2>
 8007634:	08008110 	.word	0x08008110
 8007638:	08008121 	.word	0x08008121
 800763c:	00000237 	.word	0x00000237
 8007640:	00000245 	.word	0x00000245

08007644 <__d2b>:
 8007644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007646:	2101      	movs	r1, #1
 8007648:	0016      	movs	r6, r2
 800764a:	001f      	movs	r7, r3
 800764c:	f7ff fcbe 	bl	8006fcc <_Balloc>
 8007650:	1e04      	subs	r4, r0, #0
 8007652:	d105      	bne.n	8007660 <__d2b+0x1c>
 8007654:	0022      	movs	r2, r4
 8007656:	4b25      	ldr	r3, [pc, #148]	@ (80076ec <__d2b+0xa8>)
 8007658:	4825      	ldr	r0, [pc, #148]	@ (80076f0 <__d2b+0xac>)
 800765a:	4926      	ldr	r1, [pc, #152]	@ (80076f4 <__d2b+0xb0>)
 800765c:	f000 f908 	bl	8007870 <__assert_func>
 8007660:	033b      	lsls	r3, r7, #12
 8007662:	007d      	lsls	r5, r7, #1
 8007664:	0b1b      	lsrs	r3, r3, #12
 8007666:	0d6d      	lsrs	r5, r5, #21
 8007668:	d002      	beq.n	8007670 <__d2b+0x2c>
 800766a:	2280      	movs	r2, #128	@ 0x80
 800766c:	0352      	lsls	r2, r2, #13
 800766e:	4313      	orrs	r3, r2
 8007670:	9301      	str	r3, [sp, #4]
 8007672:	2e00      	cmp	r6, #0
 8007674:	d025      	beq.n	80076c2 <__d2b+0x7e>
 8007676:	4668      	mov	r0, sp
 8007678:	9600      	str	r6, [sp, #0]
 800767a:	f7ff fd74 	bl	8007166 <__lo0bits>
 800767e:	9b01      	ldr	r3, [sp, #4]
 8007680:	9900      	ldr	r1, [sp, #0]
 8007682:	2800      	cmp	r0, #0
 8007684:	d01b      	beq.n	80076be <__d2b+0x7a>
 8007686:	2220      	movs	r2, #32
 8007688:	001e      	movs	r6, r3
 800768a:	1a12      	subs	r2, r2, r0
 800768c:	4096      	lsls	r6, r2
 800768e:	0032      	movs	r2, r6
 8007690:	40c3      	lsrs	r3, r0
 8007692:	430a      	orrs	r2, r1
 8007694:	6162      	str	r2, [r4, #20]
 8007696:	9301      	str	r3, [sp, #4]
 8007698:	9e01      	ldr	r6, [sp, #4]
 800769a:	61a6      	str	r6, [r4, #24]
 800769c:	1e73      	subs	r3, r6, #1
 800769e:	419e      	sbcs	r6, r3
 80076a0:	3601      	adds	r6, #1
 80076a2:	6126      	str	r6, [r4, #16]
 80076a4:	2d00      	cmp	r5, #0
 80076a6:	d014      	beq.n	80076d2 <__d2b+0x8e>
 80076a8:	2635      	movs	r6, #53	@ 0x35
 80076aa:	4b13      	ldr	r3, [pc, #76]	@ (80076f8 <__d2b+0xb4>)
 80076ac:	18ed      	adds	r5, r5, r3
 80076ae:	9b08      	ldr	r3, [sp, #32]
 80076b0:	182d      	adds	r5, r5, r0
 80076b2:	601d      	str	r5, [r3, #0]
 80076b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076b6:	1a36      	subs	r6, r6, r0
 80076b8:	601e      	str	r6, [r3, #0]
 80076ba:	0020      	movs	r0, r4
 80076bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80076be:	6161      	str	r1, [r4, #20]
 80076c0:	e7ea      	b.n	8007698 <__d2b+0x54>
 80076c2:	a801      	add	r0, sp, #4
 80076c4:	f7ff fd4f 	bl	8007166 <__lo0bits>
 80076c8:	9b01      	ldr	r3, [sp, #4]
 80076ca:	2601      	movs	r6, #1
 80076cc:	6163      	str	r3, [r4, #20]
 80076ce:	3020      	adds	r0, #32
 80076d0:	e7e7      	b.n	80076a2 <__d2b+0x5e>
 80076d2:	4b0a      	ldr	r3, [pc, #40]	@ (80076fc <__d2b+0xb8>)
 80076d4:	18c0      	adds	r0, r0, r3
 80076d6:	9b08      	ldr	r3, [sp, #32]
 80076d8:	6018      	str	r0, [r3, #0]
 80076da:	4b09      	ldr	r3, [pc, #36]	@ (8007700 <__d2b+0xbc>)
 80076dc:	18f3      	adds	r3, r6, r3
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	18e3      	adds	r3, r4, r3
 80076e2:	6958      	ldr	r0, [r3, #20]
 80076e4:	f7ff fd1e 	bl	8007124 <__hi0bits>
 80076e8:	0176      	lsls	r6, r6, #5
 80076ea:	e7e3      	b.n	80076b4 <__d2b+0x70>
 80076ec:	08008110 	.word	0x08008110
 80076f0:	08008121 	.word	0x08008121
 80076f4:	0000030f 	.word	0x0000030f
 80076f8:	fffffbcd 	.word	0xfffffbcd
 80076fc:	fffffbce 	.word	0xfffffbce
 8007700:	3fffffff 	.word	0x3fffffff

08007704 <__sread>:
 8007704:	b570      	push	{r4, r5, r6, lr}
 8007706:	000c      	movs	r4, r1
 8007708:	250e      	movs	r5, #14
 800770a:	5f49      	ldrsh	r1, [r1, r5]
 800770c:	f000 f85a 	bl	80077c4 <_read_r>
 8007710:	2800      	cmp	r0, #0
 8007712:	db03      	blt.n	800771c <__sread+0x18>
 8007714:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007716:	181b      	adds	r3, r3, r0
 8007718:	6563      	str	r3, [r4, #84]	@ 0x54
 800771a:	bd70      	pop	{r4, r5, r6, pc}
 800771c:	89a3      	ldrh	r3, [r4, #12]
 800771e:	4a02      	ldr	r2, [pc, #8]	@ (8007728 <__sread+0x24>)
 8007720:	4013      	ands	r3, r2
 8007722:	81a3      	strh	r3, [r4, #12]
 8007724:	e7f9      	b.n	800771a <__sread+0x16>
 8007726:	46c0      	nop			@ (mov r8, r8)
 8007728:	ffffefff 	.word	0xffffefff

0800772c <__swrite>:
 800772c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800772e:	001f      	movs	r7, r3
 8007730:	898b      	ldrh	r3, [r1, #12]
 8007732:	0005      	movs	r5, r0
 8007734:	000c      	movs	r4, r1
 8007736:	0016      	movs	r6, r2
 8007738:	05db      	lsls	r3, r3, #23
 800773a:	d505      	bpl.n	8007748 <__swrite+0x1c>
 800773c:	230e      	movs	r3, #14
 800773e:	5ec9      	ldrsh	r1, [r1, r3]
 8007740:	2200      	movs	r2, #0
 8007742:	2302      	movs	r3, #2
 8007744:	f000 f82a 	bl	800779c <_lseek_r>
 8007748:	89a3      	ldrh	r3, [r4, #12]
 800774a:	4a05      	ldr	r2, [pc, #20]	@ (8007760 <__swrite+0x34>)
 800774c:	0028      	movs	r0, r5
 800774e:	4013      	ands	r3, r2
 8007750:	81a3      	strh	r3, [r4, #12]
 8007752:	0032      	movs	r2, r6
 8007754:	230e      	movs	r3, #14
 8007756:	5ee1      	ldrsh	r1, [r4, r3]
 8007758:	003b      	movs	r3, r7
 800775a:	f000 f859 	bl	8007810 <_write_r>
 800775e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007760:	ffffefff 	.word	0xffffefff

08007764 <__sseek>:
 8007764:	b570      	push	{r4, r5, r6, lr}
 8007766:	000c      	movs	r4, r1
 8007768:	250e      	movs	r5, #14
 800776a:	5f49      	ldrsh	r1, [r1, r5]
 800776c:	f000 f816 	bl	800779c <_lseek_r>
 8007770:	89a3      	ldrh	r3, [r4, #12]
 8007772:	1c42      	adds	r2, r0, #1
 8007774:	d103      	bne.n	800777e <__sseek+0x1a>
 8007776:	4a05      	ldr	r2, [pc, #20]	@ (800778c <__sseek+0x28>)
 8007778:	4013      	ands	r3, r2
 800777a:	81a3      	strh	r3, [r4, #12]
 800777c:	bd70      	pop	{r4, r5, r6, pc}
 800777e:	2280      	movs	r2, #128	@ 0x80
 8007780:	0152      	lsls	r2, r2, #5
 8007782:	4313      	orrs	r3, r2
 8007784:	81a3      	strh	r3, [r4, #12]
 8007786:	6560      	str	r0, [r4, #84]	@ 0x54
 8007788:	e7f8      	b.n	800777c <__sseek+0x18>
 800778a:	46c0      	nop			@ (mov r8, r8)
 800778c:	ffffefff 	.word	0xffffefff

08007790 <__sclose>:
 8007790:	b510      	push	{r4, lr}
 8007792:	230e      	movs	r3, #14
 8007794:	5ec9      	ldrsh	r1, [r1, r3]
 8007796:	f000 f84f 	bl	8007838 <_close_r>
 800779a:	bd10      	pop	{r4, pc}

0800779c <_lseek_r>:
 800779c:	b570      	push	{r4, r5, r6, lr}
 800779e:	0004      	movs	r4, r0
 80077a0:	0008      	movs	r0, r1
 80077a2:	0011      	movs	r1, r2
 80077a4:	001a      	movs	r2, r3
 80077a6:	2300      	movs	r3, #0
 80077a8:	4d05      	ldr	r5, [pc, #20]	@ (80077c0 <_lseek_r+0x24>)
 80077aa:	602b      	str	r3, [r5, #0]
 80077ac:	f7fb fa46 	bl	8002c3c <_lseek>
 80077b0:	1c43      	adds	r3, r0, #1
 80077b2:	d103      	bne.n	80077bc <_lseek_r+0x20>
 80077b4:	682b      	ldr	r3, [r5, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d000      	beq.n	80077bc <_lseek_r+0x20>
 80077ba:	6023      	str	r3, [r4, #0]
 80077bc:	bd70      	pop	{r4, r5, r6, pc}
 80077be:	46c0      	nop			@ (mov r8, r8)
 80077c0:	2000048c 	.word	0x2000048c

080077c4 <_read_r>:
 80077c4:	b570      	push	{r4, r5, r6, lr}
 80077c6:	0004      	movs	r4, r0
 80077c8:	0008      	movs	r0, r1
 80077ca:	0011      	movs	r1, r2
 80077cc:	001a      	movs	r2, r3
 80077ce:	2300      	movs	r3, #0
 80077d0:	4d05      	ldr	r5, [pc, #20]	@ (80077e8 <_read_r+0x24>)
 80077d2:	602b      	str	r3, [r5, #0]
 80077d4:	f7fb f9d8 	bl	8002b88 <_read>
 80077d8:	1c43      	adds	r3, r0, #1
 80077da:	d103      	bne.n	80077e4 <_read_r+0x20>
 80077dc:	682b      	ldr	r3, [r5, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d000      	beq.n	80077e4 <_read_r+0x20>
 80077e2:	6023      	str	r3, [r4, #0]
 80077e4:	bd70      	pop	{r4, r5, r6, pc}
 80077e6:	46c0      	nop			@ (mov r8, r8)
 80077e8:	2000048c 	.word	0x2000048c

080077ec <_sbrk_r>:
 80077ec:	2300      	movs	r3, #0
 80077ee:	b570      	push	{r4, r5, r6, lr}
 80077f0:	4d06      	ldr	r5, [pc, #24]	@ (800780c <_sbrk_r+0x20>)
 80077f2:	0004      	movs	r4, r0
 80077f4:	0008      	movs	r0, r1
 80077f6:	602b      	str	r3, [r5, #0]
 80077f8:	f7fb fa2c 	bl	8002c54 <_sbrk>
 80077fc:	1c43      	adds	r3, r0, #1
 80077fe:	d103      	bne.n	8007808 <_sbrk_r+0x1c>
 8007800:	682b      	ldr	r3, [r5, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d000      	beq.n	8007808 <_sbrk_r+0x1c>
 8007806:	6023      	str	r3, [r4, #0]
 8007808:	bd70      	pop	{r4, r5, r6, pc}
 800780a:	46c0      	nop			@ (mov r8, r8)
 800780c:	2000048c 	.word	0x2000048c

08007810 <_write_r>:
 8007810:	b570      	push	{r4, r5, r6, lr}
 8007812:	0004      	movs	r4, r0
 8007814:	0008      	movs	r0, r1
 8007816:	0011      	movs	r1, r2
 8007818:	001a      	movs	r2, r3
 800781a:	2300      	movs	r3, #0
 800781c:	4d05      	ldr	r5, [pc, #20]	@ (8007834 <_write_r+0x24>)
 800781e:	602b      	str	r3, [r5, #0]
 8007820:	f7fb f9cf 	bl	8002bc2 <_write>
 8007824:	1c43      	adds	r3, r0, #1
 8007826:	d103      	bne.n	8007830 <_write_r+0x20>
 8007828:	682b      	ldr	r3, [r5, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d000      	beq.n	8007830 <_write_r+0x20>
 800782e:	6023      	str	r3, [r4, #0]
 8007830:	bd70      	pop	{r4, r5, r6, pc}
 8007832:	46c0      	nop			@ (mov r8, r8)
 8007834:	2000048c 	.word	0x2000048c

08007838 <_close_r>:
 8007838:	2300      	movs	r3, #0
 800783a:	b570      	push	{r4, r5, r6, lr}
 800783c:	4d06      	ldr	r5, [pc, #24]	@ (8007858 <_close_r+0x20>)
 800783e:	0004      	movs	r4, r0
 8007840:	0008      	movs	r0, r1
 8007842:	602b      	str	r3, [r5, #0]
 8007844:	f7fb f9d9 	bl	8002bfa <_close>
 8007848:	1c43      	adds	r3, r0, #1
 800784a:	d103      	bne.n	8007854 <_close_r+0x1c>
 800784c:	682b      	ldr	r3, [r5, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d000      	beq.n	8007854 <_close_r+0x1c>
 8007852:	6023      	str	r3, [r4, #0]
 8007854:	bd70      	pop	{r4, r5, r6, pc}
 8007856:	46c0      	nop			@ (mov r8, r8)
 8007858:	2000048c 	.word	0x2000048c

0800785c <memcpy>:
 800785c:	2300      	movs	r3, #0
 800785e:	b510      	push	{r4, lr}
 8007860:	429a      	cmp	r2, r3
 8007862:	d100      	bne.n	8007866 <memcpy+0xa>
 8007864:	bd10      	pop	{r4, pc}
 8007866:	5ccc      	ldrb	r4, [r1, r3]
 8007868:	54c4      	strb	r4, [r0, r3]
 800786a:	3301      	adds	r3, #1
 800786c:	e7f8      	b.n	8007860 <memcpy+0x4>
	...

08007870 <__assert_func>:
 8007870:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007872:	0014      	movs	r4, r2
 8007874:	001a      	movs	r2, r3
 8007876:	4b09      	ldr	r3, [pc, #36]	@ (800789c <__assert_func+0x2c>)
 8007878:	0005      	movs	r5, r0
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	000e      	movs	r6, r1
 800787e:	68d8      	ldr	r0, [r3, #12]
 8007880:	4b07      	ldr	r3, [pc, #28]	@ (80078a0 <__assert_func+0x30>)
 8007882:	2c00      	cmp	r4, #0
 8007884:	d101      	bne.n	800788a <__assert_func+0x1a>
 8007886:	4b07      	ldr	r3, [pc, #28]	@ (80078a4 <__assert_func+0x34>)
 8007888:	001c      	movs	r4, r3
 800788a:	4907      	ldr	r1, [pc, #28]	@ (80078a8 <__assert_func+0x38>)
 800788c:	9301      	str	r3, [sp, #4]
 800788e:	9402      	str	r4, [sp, #8]
 8007890:	002b      	movs	r3, r5
 8007892:	9600      	str	r6, [sp, #0]
 8007894:	f000 f894 	bl	80079c0 <fiprintf>
 8007898:	f000 f8af 	bl	80079fa <abort>
 800789c:	20000018 	.word	0x20000018
 80078a0:	08008184 	.word	0x08008184
 80078a4:	080081bf 	.word	0x080081bf
 80078a8:	08008191 	.word	0x08008191

080078ac <_calloc_r>:
 80078ac:	b570      	push	{r4, r5, r6, lr}
 80078ae:	0c0b      	lsrs	r3, r1, #16
 80078b0:	0c15      	lsrs	r5, r2, #16
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d11e      	bne.n	80078f4 <_calloc_r+0x48>
 80078b6:	2d00      	cmp	r5, #0
 80078b8:	d10c      	bne.n	80078d4 <_calloc_r+0x28>
 80078ba:	b289      	uxth	r1, r1
 80078bc:	b294      	uxth	r4, r2
 80078be:	434c      	muls	r4, r1
 80078c0:	0021      	movs	r1, r4
 80078c2:	f7ff fa41 	bl	8006d48 <_malloc_r>
 80078c6:	1e05      	subs	r5, r0, #0
 80078c8:	d01b      	beq.n	8007902 <_calloc_r+0x56>
 80078ca:	0022      	movs	r2, r4
 80078cc:	2100      	movs	r1, #0
 80078ce:	f7fe fb55 	bl	8005f7c <memset>
 80078d2:	e016      	b.n	8007902 <_calloc_r+0x56>
 80078d4:	1c2b      	adds	r3, r5, #0
 80078d6:	1c0c      	adds	r4, r1, #0
 80078d8:	b289      	uxth	r1, r1
 80078da:	b292      	uxth	r2, r2
 80078dc:	434a      	muls	r2, r1
 80078de:	b29b      	uxth	r3, r3
 80078e0:	b2a1      	uxth	r1, r4
 80078e2:	4359      	muls	r1, r3
 80078e4:	0c14      	lsrs	r4, r2, #16
 80078e6:	190c      	adds	r4, r1, r4
 80078e8:	0c23      	lsrs	r3, r4, #16
 80078ea:	d107      	bne.n	80078fc <_calloc_r+0x50>
 80078ec:	0424      	lsls	r4, r4, #16
 80078ee:	b292      	uxth	r2, r2
 80078f0:	4314      	orrs	r4, r2
 80078f2:	e7e5      	b.n	80078c0 <_calloc_r+0x14>
 80078f4:	2d00      	cmp	r5, #0
 80078f6:	d101      	bne.n	80078fc <_calloc_r+0x50>
 80078f8:	1c14      	adds	r4, r2, #0
 80078fa:	e7ed      	b.n	80078d8 <_calloc_r+0x2c>
 80078fc:	230c      	movs	r3, #12
 80078fe:	2500      	movs	r5, #0
 8007900:	6003      	str	r3, [r0, #0]
 8007902:	0028      	movs	r0, r5
 8007904:	bd70      	pop	{r4, r5, r6, pc}
	...

08007908 <_free_r>:
 8007908:	b570      	push	{r4, r5, r6, lr}
 800790a:	0005      	movs	r5, r0
 800790c:	1e0c      	subs	r4, r1, #0
 800790e:	d010      	beq.n	8007932 <_free_r+0x2a>
 8007910:	3c04      	subs	r4, #4
 8007912:	6823      	ldr	r3, [r4, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	da00      	bge.n	800791a <_free_r+0x12>
 8007918:	18e4      	adds	r4, r4, r3
 800791a:	0028      	movs	r0, r5
 800791c:	f7ff fb46 	bl	8006fac <__malloc_lock>
 8007920:	4a1d      	ldr	r2, [pc, #116]	@ (8007998 <_free_r+0x90>)
 8007922:	6813      	ldr	r3, [r2, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d105      	bne.n	8007934 <_free_r+0x2c>
 8007928:	6063      	str	r3, [r4, #4]
 800792a:	6014      	str	r4, [r2, #0]
 800792c:	0028      	movs	r0, r5
 800792e:	f7ff fb45 	bl	8006fbc <__malloc_unlock>
 8007932:	bd70      	pop	{r4, r5, r6, pc}
 8007934:	42a3      	cmp	r3, r4
 8007936:	d908      	bls.n	800794a <_free_r+0x42>
 8007938:	6820      	ldr	r0, [r4, #0]
 800793a:	1821      	adds	r1, r4, r0
 800793c:	428b      	cmp	r3, r1
 800793e:	d1f3      	bne.n	8007928 <_free_r+0x20>
 8007940:	6819      	ldr	r1, [r3, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	1809      	adds	r1, r1, r0
 8007946:	6021      	str	r1, [r4, #0]
 8007948:	e7ee      	b.n	8007928 <_free_r+0x20>
 800794a:	001a      	movs	r2, r3
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d001      	beq.n	8007956 <_free_r+0x4e>
 8007952:	42a3      	cmp	r3, r4
 8007954:	d9f9      	bls.n	800794a <_free_r+0x42>
 8007956:	6811      	ldr	r1, [r2, #0]
 8007958:	1850      	adds	r0, r2, r1
 800795a:	42a0      	cmp	r0, r4
 800795c:	d10b      	bne.n	8007976 <_free_r+0x6e>
 800795e:	6820      	ldr	r0, [r4, #0]
 8007960:	1809      	adds	r1, r1, r0
 8007962:	1850      	adds	r0, r2, r1
 8007964:	6011      	str	r1, [r2, #0]
 8007966:	4283      	cmp	r3, r0
 8007968:	d1e0      	bne.n	800792c <_free_r+0x24>
 800796a:	6818      	ldr	r0, [r3, #0]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	1841      	adds	r1, r0, r1
 8007970:	6011      	str	r1, [r2, #0]
 8007972:	6053      	str	r3, [r2, #4]
 8007974:	e7da      	b.n	800792c <_free_r+0x24>
 8007976:	42a0      	cmp	r0, r4
 8007978:	d902      	bls.n	8007980 <_free_r+0x78>
 800797a:	230c      	movs	r3, #12
 800797c:	602b      	str	r3, [r5, #0]
 800797e:	e7d5      	b.n	800792c <_free_r+0x24>
 8007980:	6820      	ldr	r0, [r4, #0]
 8007982:	1821      	adds	r1, r4, r0
 8007984:	428b      	cmp	r3, r1
 8007986:	d103      	bne.n	8007990 <_free_r+0x88>
 8007988:	6819      	ldr	r1, [r3, #0]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	1809      	adds	r1, r1, r0
 800798e:	6021      	str	r1, [r4, #0]
 8007990:	6063      	str	r3, [r4, #4]
 8007992:	6054      	str	r4, [r2, #4]
 8007994:	e7ca      	b.n	800792c <_free_r+0x24>
 8007996:	46c0      	nop			@ (mov r8, r8)
 8007998:	20000488 	.word	0x20000488

0800799c <__ascii_mbtowc>:
 800799c:	b082      	sub	sp, #8
 800799e:	2900      	cmp	r1, #0
 80079a0:	d100      	bne.n	80079a4 <__ascii_mbtowc+0x8>
 80079a2:	a901      	add	r1, sp, #4
 80079a4:	1e10      	subs	r0, r2, #0
 80079a6:	d006      	beq.n	80079b6 <__ascii_mbtowc+0x1a>
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d006      	beq.n	80079ba <__ascii_mbtowc+0x1e>
 80079ac:	7813      	ldrb	r3, [r2, #0]
 80079ae:	600b      	str	r3, [r1, #0]
 80079b0:	7810      	ldrb	r0, [r2, #0]
 80079b2:	1e43      	subs	r3, r0, #1
 80079b4:	4198      	sbcs	r0, r3
 80079b6:	b002      	add	sp, #8
 80079b8:	4770      	bx	lr
 80079ba:	2002      	movs	r0, #2
 80079bc:	4240      	negs	r0, r0
 80079be:	e7fa      	b.n	80079b6 <__ascii_mbtowc+0x1a>

080079c0 <fiprintf>:
 80079c0:	b40e      	push	{r1, r2, r3}
 80079c2:	b517      	push	{r0, r1, r2, r4, lr}
 80079c4:	4c05      	ldr	r4, [pc, #20]	@ (80079dc <fiprintf+0x1c>)
 80079c6:	ab05      	add	r3, sp, #20
 80079c8:	cb04      	ldmia	r3!, {r2}
 80079ca:	0001      	movs	r1, r0
 80079cc:	6820      	ldr	r0, [r4, #0]
 80079ce:	9301      	str	r3, [sp, #4]
 80079d0:	f000 f842 	bl	8007a58 <_vfiprintf_r>
 80079d4:	bc1e      	pop	{r1, r2, r3, r4}
 80079d6:	bc08      	pop	{r3}
 80079d8:	b003      	add	sp, #12
 80079da:	4718      	bx	r3
 80079dc:	20000018 	.word	0x20000018

080079e0 <__ascii_wctomb>:
 80079e0:	0003      	movs	r3, r0
 80079e2:	1e08      	subs	r0, r1, #0
 80079e4:	d005      	beq.n	80079f2 <__ascii_wctomb+0x12>
 80079e6:	2aff      	cmp	r2, #255	@ 0xff
 80079e8:	d904      	bls.n	80079f4 <__ascii_wctomb+0x14>
 80079ea:	228a      	movs	r2, #138	@ 0x8a
 80079ec:	2001      	movs	r0, #1
 80079ee:	601a      	str	r2, [r3, #0]
 80079f0:	4240      	negs	r0, r0
 80079f2:	4770      	bx	lr
 80079f4:	2001      	movs	r0, #1
 80079f6:	700a      	strb	r2, [r1, #0]
 80079f8:	e7fb      	b.n	80079f2 <__ascii_wctomb+0x12>

080079fa <abort>:
 80079fa:	2006      	movs	r0, #6
 80079fc:	b510      	push	{r4, lr}
 80079fe:	f000 fa7b 	bl	8007ef8 <raise>
 8007a02:	2001      	movs	r0, #1
 8007a04:	f7fb f8b3 	bl	8002b6e <_exit>

08007a08 <__sfputc_r>:
 8007a08:	6893      	ldr	r3, [r2, #8]
 8007a0a:	b510      	push	{r4, lr}
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	6093      	str	r3, [r2, #8]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	da04      	bge.n	8007a1e <__sfputc_r+0x16>
 8007a14:	6994      	ldr	r4, [r2, #24]
 8007a16:	42a3      	cmp	r3, r4
 8007a18:	db07      	blt.n	8007a2a <__sfputc_r+0x22>
 8007a1a:	290a      	cmp	r1, #10
 8007a1c:	d005      	beq.n	8007a2a <__sfputc_r+0x22>
 8007a1e:	6813      	ldr	r3, [r2, #0]
 8007a20:	1c58      	adds	r0, r3, #1
 8007a22:	6010      	str	r0, [r2, #0]
 8007a24:	7019      	strb	r1, [r3, #0]
 8007a26:	0008      	movs	r0, r1
 8007a28:	bd10      	pop	{r4, pc}
 8007a2a:	f000 f931 	bl	8007c90 <__swbuf_r>
 8007a2e:	0001      	movs	r1, r0
 8007a30:	e7f9      	b.n	8007a26 <__sfputc_r+0x1e>

08007a32 <__sfputs_r>:
 8007a32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a34:	0006      	movs	r6, r0
 8007a36:	000f      	movs	r7, r1
 8007a38:	0014      	movs	r4, r2
 8007a3a:	18d5      	adds	r5, r2, r3
 8007a3c:	42ac      	cmp	r4, r5
 8007a3e:	d101      	bne.n	8007a44 <__sfputs_r+0x12>
 8007a40:	2000      	movs	r0, #0
 8007a42:	e007      	b.n	8007a54 <__sfputs_r+0x22>
 8007a44:	7821      	ldrb	r1, [r4, #0]
 8007a46:	003a      	movs	r2, r7
 8007a48:	0030      	movs	r0, r6
 8007a4a:	f7ff ffdd 	bl	8007a08 <__sfputc_r>
 8007a4e:	3401      	adds	r4, #1
 8007a50:	1c43      	adds	r3, r0, #1
 8007a52:	d1f3      	bne.n	8007a3c <__sfputs_r+0xa>
 8007a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a58 <_vfiprintf_r>:
 8007a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a5a:	b0a1      	sub	sp, #132	@ 0x84
 8007a5c:	000f      	movs	r7, r1
 8007a5e:	0015      	movs	r5, r2
 8007a60:	001e      	movs	r6, r3
 8007a62:	9003      	str	r0, [sp, #12]
 8007a64:	2800      	cmp	r0, #0
 8007a66:	d004      	beq.n	8007a72 <_vfiprintf_r+0x1a>
 8007a68:	6a03      	ldr	r3, [r0, #32]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d101      	bne.n	8007a72 <_vfiprintf_r+0x1a>
 8007a6e:	f7fe fa51 	bl	8005f14 <__sinit>
 8007a72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a74:	07db      	lsls	r3, r3, #31
 8007a76:	d405      	bmi.n	8007a84 <_vfiprintf_r+0x2c>
 8007a78:	89bb      	ldrh	r3, [r7, #12]
 8007a7a:	059b      	lsls	r3, r3, #22
 8007a7c:	d402      	bmi.n	8007a84 <_vfiprintf_r+0x2c>
 8007a7e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007a80:	f7fe faaf 	bl	8005fe2 <__retarget_lock_acquire_recursive>
 8007a84:	89bb      	ldrh	r3, [r7, #12]
 8007a86:	071b      	lsls	r3, r3, #28
 8007a88:	d502      	bpl.n	8007a90 <_vfiprintf_r+0x38>
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d113      	bne.n	8007ab8 <_vfiprintf_r+0x60>
 8007a90:	0039      	movs	r1, r7
 8007a92:	9803      	ldr	r0, [sp, #12]
 8007a94:	f000 f93e 	bl	8007d14 <__swsetup_r>
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	d00d      	beq.n	8007ab8 <_vfiprintf_r+0x60>
 8007a9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a9e:	07db      	lsls	r3, r3, #31
 8007aa0:	d503      	bpl.n	8007aaa <_vfiprintf_r+0x52>
 8007aa2:	2001      	movs	r0, #1
 8007aa4:	4240      	negs	r0, r0
 8007aa6:	b021      	add	sp, #132	@ 0x84
 8007aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007aaa:	89bb      	ldrh	r3, [r7, #12]
 8007aac:	059b      	lsls	r3, r3, #22
 8007aae:	d4f8      	bmi.n	8007aa2 <_vfiprintf_r+0x4a>
 8007ab0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007ab2:	f7fe fa97 	bl	8005fe4 <__retarget_lock_release_recursive>
 8007ab6:	e7f4      	b.n	8007aa2 <_vfiprintf_r+0x4a>
 8007ab8:	2300      	movs	r3, #0
 8007aba:	ac08      	add	r4, sp, #32
 8007abc:	6163      	str	r3, [r4, #20]
 8007abe:	3320      	adds	r3, #32
 8007ac0:	7663      	strb	r3, [r4, #25]
 8007ac2:	3310      	adds	r3, #16
 8007ac4:	76a3      	strb	r3, [r4, #26]
 8007ac6:	9607      	str	r6, [sp, #28]
 8007ac8:	002e      	movs	r6, r5
 8007aca:	7833      	ldrb	r3, [r6, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d001      	beq.n	8007ad4 <_vfiprintf_r+0x7c>
 8007ad0:	2b25      	cmp	r3, #37	@ 0x25
 8007ad2:	d148      	bne.n	8007b66 <_vfiprintf_r+0x10e>
 8007ad4:	1b73      	subs	r3, r6, r5
 8007ad6:	9305      	str	r3, [sp, #20]
 8007ad8:	42ae      	cmp	r6, r5
 8007ada:	d00b      	beq.n	8007af4 <_vfiprintf_r+0x9c>
 8007adc:	002a      	movs	r2, r5
 8007ade:	0039      	movs	r1, r7
 8007ae0:	9803      	ldr	r0, [sp, #12]
 8007ae2:	f7ff ffa6 	bl	8007a32 <__sfputs_r>
 8007ae6:	3001      	adds	r0, #1
 8007ae8:	d100      	bne.n	8007aec <_vfiprintf_r+0x94>
 8007aea:	e0ae      	b.n	8007c4a <_vfiprintf_r+0x1f2>
 8007aec:	6963      	ldr	r3, [r4, #20]
 8007aee:	9a05      	ldr	r2, [sp, #20]
 8007af0:	189b      	adds	r3, r3, r2
 8007af2:	6163      	str	r3, [r4, #20]
 8007af4:	7833      	ldrb	r3, [r6, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d100      	bne.n	8007afc <_vfiprintf_r+0xa4>
 8007afa:	e0a6      	b.n	8007c4a <_vfiprintf_r+0x1f2>
 8007afc:	2201      	movs	r2, #1
 8007afe:	2300      	movs	r3, #0
 8007b00:	4252      	negs	r2, r2
 8007b02:	6062      	str	r2, [r4, #4]
 8007b04:	a904      	add	r1, sp, #16
 8007b06:	3254      	adds	r2, #84	@ 0x54
 8007b08:	1852      	adds	r2, r2, r1
 8007b0a:	1c75      	adds	r5, r6, #1
 8007b0c:	6023      	str	r3, [r4, #0]
 8007b0e:	60e3      	str	r3, [r4, #12]
 8007b10:	60a3      	str	r3, [r4, #8]
 8007b12:	7013      	strb	r3, [r2, #0]
 8007b14:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007b16:	4b59      	ldr	r3, [pc, #356]	@ (8007c7c <_vfiprintf_r+0x224>)
 8007b18:	2205      	movs	r2, #5
 8007b1a:	0018      	movs	r0, r3
 8007b1c:	7829      	ldrb	r1, [r5, #0]
 8007b1e:	9305      	str	r3, [sp, #20]
 8007b20:	f7fe fa66 	bl	8005ff0 <memchr>
 8007b24:	1c6e      	adds	r6, r5, #1
 8007b26:	2800      	cmp	r0, #0
 8007b28:	d11f      	bne.n	8007b6a <_vfiprintf_r+0x112>
 8007b2a:	6822      	ldr	r2, [r4, #0]
 8007b2c:	06d3      	lsls	r3, r2, #27
 8007b2e:	d504      	bpl.n	8007b3a <_vfiprintf_r+0xe2>
 8007b30:	2353      	movs	r3, #83	@ 0x53
 8007b32:	a904      	add	r1, sp, #16
 8007b34:	185b      	adds	r3, r3, r1
 8007b36:	2120      	movs	r1, #32
 8007b38:	7019      	strb	r1, [r3, #0]
 8007b3a:	0713      	lsls	r3, r2, #28
 8007b3c:	d504      	bpl.n	8007b48 <_vfiprintf_r+0xf0>
 8007b3e:	2353      	movs	r3, #83	@ 0x53
 8007b40:	a904      	add	r1, sp, #16
 8007b42:	185b      	adds	r3, r3, r1
 8007b44:	212b      	movs	r1, #43	@ 0x2b
 8007b46:	7019      	strb	r1, [r3, #0]
 8007b48:	782b      	ldrb	r3, [r5, #0]
 8007b4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b4c:	d016      	beq.n	8007b7c <_vfiprintf_r+0x124>
 8007b4e:	002e      	movs	r6, r5
 8007b50:	2100      	movs	r1, #0
 8007b52:	200a      	movs	r0, #10
 8007b54:	68e3      	ldr	r3, [r4, #12]
 8007b56:	7832      	ldrb	r2, [r6, #0]
 8007b58:	1c75      	adds	r5, r6, #1
 8007b5a:	3a30      	subs	r2, #48	@ 0x30
 8007b5c:	2a09      	cmp	r2, #9
 8007b5e:	d950      	bls.n	8007c02 <_vfiprintf_r+0x1aa>
 8007b60:	2900      	cmp	r1, #0
 8007b62:	d111      	bne.n	8007b88 <_vfiprintf_r+0x130>
 8007b64:	e017      	b.n	8007b96 <_vfiprintf_r+0x13e>
 8007b66:	3601      	adds	r6, #1
 8007b68:	e7af      	b.n	8007aca <_vfiprintf_r+0x72>
 8007b6a:	9b05      	ldr	r3, [sp, #20]
 8007b6c:	6822      	ldr	r2, [r4, #0]
 8007b6e:	1ac0      	subs	r0, r0, r3
 8007b70:	2301      	movs	r3, #1
 8007b72:	4083      	lsls	r3, r0
 8007b74:	4313      	orrs	r3, r2
 8007b76:	0035      	movs	r5, r6
 8007b78:	6023      	str	r3, [r4, #0]
 8007b7a:	e7cc      	b.n	8007b16 <_vfiprintf_r+0xbe>
 8007b7c:	9b07      	ldr	r3, [sp, #28]
 8007b7e:	1d19      	adds	r1, r3, #4
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	9107      	str	r1, [sp, #28]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	db01      	blt.n	8007b8c <_vfiprintf_r+0x134>
 8007b88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b8a:	e004      	b.n	8007b96 <_vfiprintf_r+0x13e>
 8007b8c:	425b      	negs	r3, r3
 8007b8e:	60e3      	str	r3, [r4, #12]
 8007b90:	2302      	movs	r3, #2
 8007b92:	4313      	orrs	r3, r2
 8007b94:	6023      	str	r3, [r4, #0]
 8007b96:	7833      	ldrb	r3, [r6, #0]
 8007b98:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b9a:	d10c      	bne.n	8007bb6 <_vfiprintf_r+0x15e>
 8007b9c:	7873      	ldrb	r3, [r6, #1]
 8007b9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ba0:	d134      	bne.n	8007c0c <_vfiprintf_r+0x1b4>
 8007ba2:	9b07      	ldr	r3, [sp, #28]
 8007ba4:	3602      	adds	r6, #2
 8007ba6:	1d1a      	adds	r2, r3, #4
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	9207      	str	r2, [sp, #28]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	da01      	bge.n	8007bb4 <_vfiprintf_r+0x15c>
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	425b      	negs	r3, r3
 8007bb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bb6:	4d32      	ldr	r5, [pc, #200]	@ (8007c80 <_vfiprintf_r+0x228>)
 8007bb8:	2203      	movs	r2, #3
 8007bba:	0028      	movs	r0, r5
 8007bbc:	7831      	ldrb	r1, [r6, #0]
 8007bbe:	f7fe fa17 	bl	8005ff0 <memchr>
 8007bc2:	2800      	cmp	r0, #0
 8007bc4:	d006      	beq.n	8007bd4 <_vfiprintf_r+0x17c>
 8007bc6:	2340      	movs	r3, #64	@ 0x40
 8007bc8:	1b40      	subs	r0, r0, r5
 8007bca:	4083      	lsls	r3, r0
 8007bcc:	6822      	ldr	r2, [r4, #0]
 8007bce:	3601      	adds	r6, #1
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	6023      	str	r3, [r4, #0]
 8007bd4:	7831      	ldrb	r1, [r6, #0]
 8007bd6:	2206      	movs	r2, #6
 8007bd8:	482a      	ldr	r0, [pc, #168]	@ (8007c84 <_vfiprintf_r+0x22c>)
 8007bda:	1c75      	adds	r5, r6, #1
 8007bdc:	7621      	strb	r1, [r4, #24]
 8007bde:	f7fe fa07 	bl	8005ff0 <memchr>
 8007be2:	2800      	cmp	r0, #0
 8007be4:	d040      	beq.n	8007c68 <_vfiprintf_r+0x210>
 8007be6:	4b28      	ldr	r3, [pc, #160]	@ (8007c88 <_vfiprintf_r+0x230>)
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d122      	bne.n	8007c32 <_vfiprintf_r+0x1da>
 8007bec:	2207      	movs	r2, #7
 8007bee:	9b07      	ldr	r3, [sp, #28]
 8007bf0:	3307      	adds	r3, #7
 8007bf2:	4393      	bics	r3, r2
 8007bf4:	3308      	adds	r3, #8
 8007bf6:	9307      	str	r3, [sp, #28]
 8007bf8:	6963      	ldr	r3, [r4, #20]
 8007bfa:	9a04      	ldr	r2, [sp, #16]
 8007bfc:	189b      	adds	r3, r3, r2
 8007bfe:	6163      	str	r3, [r4, #20]
 8007c00:	e762      	b.n	8007ac8 <_vfiprintf_r+0x70>
 8007c02:	4343      	muls	r3, r0
 8007c04:	002e      	movs	r6, r5
 8007c06:	2101      	movs	r1, #1
 8007c08:	189b      	adds	r3, r3, r2
 8007c0a:	e7a4      	b.n	8007b56 <_vfiprintf_r+0xfe>
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	200a      	movs	r0, #10
 8007c10:	0019      	movs	r1, r3
 8007c12:	3601      	adds	r6, #1
 8007c14:	6063      	str	r3, [r4, #4]
 8007c16:	7832      	ldrb	r2, [r6, #0]
 8007c18:	1c75      	adds	r5, r6, #1
 8007c1a:	3a30      	subs	r2, #48	@ 0x30
 8007c1c:	2a09      	cmp	r2, #9
 8007c1e:	d903      	bls.n	8007c28 <_vfiprintf_r+0x1d0>
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d0c8      	beq.n	8007bb6 <_vfiprintf_r+0x15e>
 8007c24:	9109      	str	r1, [sp, #36]	@ 0x24
 8007c26:	e7c6      	b.n	8007bb6 <_vfiprintf_r+0x15e>
 8007c28:	4341      	muls	r1, r0
 8007c2a:	002e      	movs	r6, r5
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	1889      	adds	r1, r1, r2
 8007c30:	e7f1      	b.n	8007c16 <_vfiprintf_r+0x1be>
 8007c32:	aa07      	add	r2, sp, #28
 8007c34:	9200      	str	r2, [sp, #0]
 8007c36:	0021      	movs	r1, r4
 8007c38:	003a      	movs	r2, r7
 8007c3a:	4b14      	ldr	r3, [pc, #80]	@ (8007c8c <_vfiprintf_r+0x234>)
 8007c3c:	9803      	ldr	r0, [sp, #12]
 8007c3e:	f7fd fd1f 	bl	8005680 <_printf_float>
 8007c42:	9004      	str	r0, [sp, #16]
 8007c44:	9b04      	ldr	r3, [sp, #16]
 8007c46:	3301      	adds	r3, #1
 8007c48:	d1d6      	bne.n	8007bf8 <_vfiprintf_r+0x1a0>
 8007c4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c4c:	07db      	lsls	r3, r3, #31
 8007c4e:	d405      	bmi.n	8007c5c <_vfiprintf_r+0x204>
 8007c50:	89bb      	ldrh	r3, [r7, #12]
 8007c52:	059b      	lsls	r3, r3, #22
 8007c54:	d402      	bmi.n	8007c5c <_vfiprintf_r+0x204>
 8007c56:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007c58:	f7fe f9c4 	bl	8005fe4 <__retarget_lock_release_recursive>
 8007c5c:	89bb      	ldrh	r3, [r7, #12]
 8007c5e:	065b      	lsls	r3, r3, #25
 8007c60:	d500      	bpl.n	8007c64 <_vfiprintf_r+0x20c>
 8007c62:	e71e      	b.n	8007aa2 <_vfiprintf_r+0x4a>
 8007c64:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007c66:	e71e      	b.n	8007aa6 <_vfiprintf_r+0x4e>
 8007c68:	aa07      	add	r2, sp, #28
 8007c6a:	9200      	str	r2, [sp, #0]
 8007c6c:	0021      	movs	r1, r4
 8007c6e:	003a      	movs	r2, r7
 8007c70:	4b06      	ldr	r3, [pc, #24]	@ (8007c8c <_vfiprintf_r+0x234>)
 8007c72:	9803      	ldr	r0, [sp, #12]
 8007c74:	f7fd ffb2 	bl	8005bdc <_printf_i>
 8007c78:	e7e3      	b.n	8007c42 <_vfiprintf_r+0x1ea>
 8007c7a:	46c0      	nop			@ (mov r8, r8)
 8007c7c:	080081c0 	.word	0x080081c0
 8007c80:	080081c6 	.word	0x080081c6
 8007c84:	080081ca 	.word	0x080081ca
 8007c88:	08005681 	.word	0x08005681
 8007c8c:	08007a33 	.word	0x08007a33

08007c90 <__swbuf_r>:
 8007c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c92:	0006      	movs	r6, r0
 8007c94:	000d      	movs	r5, r1
 8007c96:	0014      	movs	r4, r2
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	d004      	beq.n	8007ca6 <__swbuf_r+0x16>
 8007c9c:	6a03      	ldr	r3, [r0, #32]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d101      	bne.n	8007ca6 <__swbuf_r+0x16>
 8007ca2:	f7fe f937 	bl	8005f14 <__sinit>
 8007ca6:	69a3      	ldr	r3, [r4, #24]
 8007ca8:	60a3      	str	r3, [r4, #8]
 8007caa:	89a3      	ldrh	r3, [r4, #12]
 8007cac:	071b      	lsls	r3, r3, #28
 8007cae:	d502      	bpl.n	8007cb6 <__swbuf_r+0x26>
 8007cb0:	6923      	ldr	r3, [r4, #16]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d109      	bne.n	8007cca <__swbuf_r+0x3a>
 8007cb6:	0021      	movs	r1, r4
 8007cb8:	0030      	movs	r0, r6
 8007cba:	f000 f82b 	bl	8007d14 <__swsetup_r>
 8007cbe:	2800      	cmp	r0, #0
 8007cc0:	d003      	beq.n	8007cca <__swbuf_r+0x3a>
 8007cc2:	2501      	movs	r5, #1
 8007cc4:	426d      	negs	r5, r5
 8007cc6:	0028      	movs	r0, r5
 8007cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cca:	6923      	ldr	r3, [r4, #16]
 8007ccc:	6820      	ldr	r0, [r4, #0]
 8007cce:	b2ef      	uxtb	r7, r5
 8007cd0:	1ac0      	subs	r0, r0, r3
 8007cd2:	6963      	ldr	r3, [r4, #20]
 8007cd4:	b2ed      	uxtb	r5, r5
 8007cd6:	4283      	cmp	r3, r0
 8007cd8:	dc05      	bgt.n	8007ce6 <__swbuf_r+0x56>
 8007cda:	0021      	movs	r1, r4
 8007cdc:	0030      	movs	r0, r6
 8007cde:	f7ff f939 	bl	8006f54 <_fflush_r>
 8007ce2:	2800      	cmp	r0, #0
 8007ce4:	d1ed      	bne.n	8007cc2 <__swbuf_r+0x32>
 8007ce6:	68a3      	ldr	r3, [r4, #8]
 8007ce8:	3001      	adds	r0, #1
 8007cea:	3b01      	subs	r3, #1
 8007cec:	60a3      	str	r3, [r4, #8]
 8007cee:	6823      	ldr	r3, [r4, #0]
 8007cf0:	1c5a      	adds	r2, r3, #1
 8007cf2:	6022      	str	r2, [r4, #0]
 8007cf4:	701f      	strb	r7, [r3, #0]
 8007cf6:	6963      	ldr	r3, [r4, #20]
 8007cf8:	4283      	cmp	r3, r0
 8007cfa:	d004      	beq.n	8007d06 <__swbuf_r+0x76>
 8007cfc:	89a3      	ldrh	r3, [r4, #12]
 8007cfe:	07db      	lsls	r3, r3, #31
 8007d00:	d5e1      	bpl.n	8007cc6 <__swbuf_r+0x36>
 8007d02:	2d0a      	cmp	r5, #10
 8007d04:	d1df      	bne.n	8007cc6 <__swbuf_r+0x36>
 8007d06:	0021      	movs	r1, r4
 8007d08:	0030      	movs	r0, r6
 8007d0a:	f7ff f923 	bl	8006f54 <_fflush_r>
 8007d0e:	2800      	cmp	r0, #0
 8007d10:	d0d9      	beq.n	8007cc6 <__swbuf_r+0x36>
 8007d12:	e7d6      	b.n	8007cc2 <__swbuf_r+0x32>

08007d14 <__swsetup_r>:
 8007d14:	4b2d      	ldr	r3, [pc, #180]	@ (8007dcc <__swsetup_r+0xb8>)
 8007d16:	b570      	push	{r4, r5, r6, lr}
 8007d18:	0005      	movs	r5, r0
 8007d1a:	6818      	ldr	r0, [r3, #0]
 8007d1c:	000c      	movs	r4, r1
 8007d1e:	2800      	cmp	r0, #0
 8007d20:	d004      	beq.n	8007d2c <__swsetup_r+0x18>
 8007d22:	6a03      	ldr	r3, [r0, #32]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d101      	bne.n	8007d2c <__swsetup_r+0x18>
 8007d28:	f7fe f8f4 	bl	8005f14 <__sinit>
 8007d2c:	220c      	movs	r2, #12
 8007d2e:	5ea3      	ldrsh	r3, [r4, r2]
 8007d30:	071a      	lsls	r2, r3, #28
 8007d32:	d423      	bmi.n	8007d7c <__swsetup_r+0x68>
 8007d34:	06da      	lsls	r2, r3, #27
 8007d36:	d407      	bmi.n	8007d48 <__swsetup_r+0x34>
 8007d38:	2209      	movs	r2, #9
 8007d3a:	602a      	str	r2, [r5, #0]
 8007d3c:	2240      	movs	r2, #64	@ 0x40
 8007d3e:	2001      	movs	r0, #1
 8007d40:	4313      	orrs	r3, r2
 8007d42:	81a3      	strh	r3, [r4, #12]
 8007d44:	4240      	negs	r0, r0
 8007d46:	e03a      	b.n	8007dbe <__swsetup_r+0xaa>
 8007d48:	075b      	lsls	r3, r3, #29
 8007d4a:	d513      	bpl.n	8007d74 <__swsetup_r+0x60>
 8007d4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d4e:	2900      	cmp	r1, #0
 8007d50:	d008      	beq.n	8007d64 <__swsetup_r+0x50>
 8007d52:	0023      	movs	r3, r4
 8007d54:	3344      	adds	r3, #68	@ 0x44
 8007d56:	4299      	cmp	r1, r3
 8007d58:	d002      	beq.n	8007d60 <__swsetup_r+0x4c>
 8007d5a:	0028      	movs	r0, r5
 8007d5c:	f7ff fdd4 	bl	8007908 <_free_r>
 8007d60:	2300      	movs	r3, #0
 8007d62:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d64:	2224      	movs	r2, #36	@ 0x24
 8007d66:	89a3      	ldrh	r3, [r4, #12]
 8007d68:	4393      	bics	r3, r2
 8007d6a:	81a3      	strh	r3, [r4, #12]
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	6063      	str	r3, [r4, #4]
 8007d70:	6923      	ldr	r3, [r4, #16]
 8007d72:	6023      	str	r3, [r4, #0]
 8007d74:	2308      	movs	r3, #8
 8007d76:	89a2      	ldrh	r2, [r4, #12]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	81a3      	strh	r3, [r4, #12]
 8007d7c:	6923      	ldr	r3, [r4, #16]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d10b      	bne.n	8007d9a <__swsetup_r+0x86>
 8007d82:	21a0      	movs	r1, #160	@ 0xa0
 8007d84:	2280      	movs	r2, #128	@ 0x80
 8007d86:	89a3      	ldrh	r3, [r4, #12]
 8007d88:	0089      	lsls	r1, r1, #2
 8007d8a:	0092      	lsls	r2, r2, #2
 8007d8c:	400b      	ands	r3, r1
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d003      	beq.n	8007d9a <__swsetup_r+0x86>
 8007d92:	0021      	movs	r1, r4
 8007d94:	0028      	movs	r0, r5
 8007d96:	f000 f845 	bl	8007e24 <__smakebuf_r>
 8007d9a:	220c      	movs	r2, #12
 8007d9c:	5ea3      	ldrsh	r3, [r4, r2]
 8007d9e:	2101      	movs	r1, #1
 8007da0:	001a      	movs	r2, r3
 8007da2:	400a      	ands	r2, r1
 8007da4:	420b      	tst	r3, r1
 8007da6:	d00b      	beq.n	8007dc0 <__swsetup_r+0xac>
 8007da8:	2200      	movs	r2, #0
 8007daa:	60a2      	str	r2, [r4, #8]
 8007dac:	6962      	ldr	r2, [r4, #20]
 8007dae:	4252      	negs	r2, r2
 8007db0:	61a2      	str	r2, [r4, #24]
 8007db2:	2000      	movs	r0, #0
 8007db4:	6922      	ldr	r2, [r4, #16]
 8007db6:	4282      	cmp	r2, r0
 8007db8:	d101      	bne.n	8007dbe <__swsetup_r+0xaa>
 8007dba:	061a      	lsls	r2, r3, #24
 8007dbc:	d4be      	bmi.n	8007d3c <__swsetup_r+0x28>
 8007dbe:	bd70      	pop	{r4, r5, r6, pc}
 8007dc0:	0799      	lsls	r1, r3, #30
 8007dc2:	d400      	bmi.n	8007dc6 <__swsetup_r+0xb2>
 8007dc4:	6962      	ldr	r2, [r4, #20]
 8007dc6:	60a2      	str	r2, [r4, #8]
 8007dc8:	e7f3      	b.n	8007db2 <__swsetup_r+0x9e>
 8007dca:	46c0      	nop			@ (mov r8, r8)
 8007dcc:	20000018 	.word	0x20000018

08007dd0 <__swhatbuf_r>:
 8007dd0:	b570      	push	{r4, r5, r6, lr}
 8007dd2:	000e      	movs	r6, r1
 8007dd4:	001d      	movs	r5, r3
 8007dd6:	230e      	movs	r3, #14
 8007dd8:	5ec9      	ldrsh	r1, [r1, r3]
 8007dda:	0014      	movs	r4, r2
 8007ddc:	b096      	sub	sp, #88	@ 0x58
 8007dde:	2900      	cmp	r1, #0
 8007de0:	da0c      	bge.n	8007dfc <__swhatbuf_r+0x2c>
 8007de2:	89b2      	ldrh	r2, [r6, #12]
 8007de4:	2380      	movs	r3, #128	@ 0x80
 8007de6:	0011      	movs	r1, r2
 8007de8:	4019      	ands	r1, r3
 8007dea:	421a      	tst	r2, r3
 8007dec:	d114      	bne.n	8007e18 <__swhatbuf_r+0x48>
 8007dee:	2380      	movs	r3, #128	@ 0x80
 8007df0:	00db      	lsls	r3, r3, #3
 8007df2:	2000      	movs	r0, #0
 8007df4:	6029      	str	r1, [r5, #0]
 8007df6:	6023      	str	r3, [r4, #0]
 8007df8:	b016      	add	sp, #88	@ 0x58
 8007dfa:	bd70      	pop	{r4, r5, r6, pc}
 8007dfc:	466a      	mov	r2, sp
 8007dfe:	f000 f8ad 	bl	8007f5c <_fstat_r>
 8007e02:	2800      	cmp	r0, #0
 8007e04:	dbed      	blt.n	8007de2 <__swhatbuf_r+0x12>
 8007e06:	23f0      	movs	r3, #240	@ 0xf0
 8007e08:	9901      	ldr	r1, [sp, #4]
 8007e0a:	021b      	lsls	r3, r3, #8
 8007e0c:	4019      	ands	r1, r3
 8007e0e:	4b04      	ldr	r3, [pc, #16]	@ (8007e20 <__swhatbuf_r+0x50>)
 8007e10:	18c9      	adds	r1, r1, r3
 8007e12:	424b      	negs	r3, r1
 8007e14:	4159      	adcs	r1, r3
 8007e16:	e7ea      	b.n	8007dee <__swhatbuf_r+0x1e>
 8007e18:	2100      	movs	r1, #0
 8007e1a:	2340      	movs	r3, #64	@ 0x40
 8007e1c:	e7e9      	b.n	8007df2 <__swhatbuf_r+0x22>
 8007e1e:	46c0      	nop			@ (mov r8, r8)
 8007e20:	ffffe000 	.word	0xffffe000

08007e24 <__smakebuf_r>:
 8007e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e26:	2602      	movs	r6, #2
 8007e28:	898b      	ldrh	r3, [r1, #12]
 8007e2a:	0005      	movs	r5, r0
 8007e2c:	000c      	movs	r4, r1
 8007e2e:	b085      	sub	sp, #20
 8007e30:	4233      	tst	r3, r6
 8007e32:	d007      	beq.n	8007e44 <__smakebuf_r+0x20>
 8007e34:	0023      	movs	r3, r4
 8007e36:	3347      	adds	r3, #71	@ 0x47
 8007e38:	6023      	str	r3, [r4, #0]
 8007e3a:	6123      	str	r3, [r4, #16]
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	6163      	str	r3, [r4, #20]
 8007e40:	b005      	add	sp, #20
 8007e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e44:	ab03      	add	r3, sp, #12
 8007e46:	aa02      	add	r2, sp, #8
 8007e48:	f7ff ffc2 	bl	8007dd0 <__swhatbuf_r>
 8007e4c:	9f02      	ldr	r7, [sp, #8]
 8007e4e:	9001      	str	r0, [sp, #4]
 8007e50:	0039      	movs	r1, r7
 8007e52:	0028      	movs	r0, r5
 8007e54:	f7fe ff78 	bl	8006d48 <_malloc_r>
 8007e58:	2800      	cmp	r0, #0
 8007e5a:	d108      	bne.n	8007e6e <__smakebuf_r+0x4a>
 8007e5c:	220c      	movs	r2, #12
 8007e5e:	5ea3      	ldrsh	r3, [r4, r2]
 8007e60:	059a      	lsls	r2, r3, #22
 8007e62:	d4ed      	bmi.n	8007e40 <__smakebuf_r+0x1c>
 8007e64:	2203      	movs	r2, #3
 8007e66:	4393      	bics	r3, r2
 8007e68:	431e      	orrs	r6, r3
 8007e6a:	81a6      	strh	r6, [r4, #12]
 8007e6c:	e7e2      	b.n	8007e34 <__smakebuf_r+0x10>
 8007e6e:	2380      	movs	r3, #128	@ 0x80
 8007e70:	89a2      	ldrh	r2, [r4, #12]
 8007e72:	6020      	str	r0, [r4, #0]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	81a3      	strh	r3, [r4, #12]
 8007e78:	9b03      	ldr	r3, [sp, #12]
 8007e7a:	6120      	str	r0, [r4, #16]
 8007e7c:	6167      	str	r7, [r4, #20]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00c      	beq.n	8007e9c <__smakebuf_r+0x78>
 8007e82:	0028      	movs	r0, r5
 8007e84:	230e      	movs	r3, #14
 8007e86:	5ee1      	ldrsh	r1, [r4, r3]
 8007e88:	f000 f840 	bl	8007f0c <_isatty_r>
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	d005      	beq.n	8007e9c <__smakebuf_r+0x78>
 8007e90:	2303      	movs	r3, #3
 8007e92:	89a2      	ldrh	r2, [r4, #12]
 8007e94:	439a      	bics	r2, r3
 8007e96:	3b02      	subs	r3, #2
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	81a3      	strh	r3, [r4, #12]
 8007e9c:	89a3      	ldrh	r3, [r4, #12]
 8007e9e:	9a01      	ldr	r2, [sp, #4]
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	81a3      	strh	r3, [r4, #12]
 8007ea4:	e7cc      	b.n	8007e40 <__smakebuf_r+0x1c>

08007ea6 <_raise_r>:
 8007ea6:	b570      	push	{r4, r5, r6, lr}
 8007ea8:	0004      	movs	r4, r0
 8007eaa:	000d      	movs	r5, r1
 8007eac:	291f      	cmp	r1, #31
 8007eae:	d904      	bls.n	8007eba <_raise_r+0x14>
 8007eb0:	2316      	movs	r3, #22
 8007eb2:	6003      	str	r3, [r0, #0]
 8007eb4:	2001      	movs	r0, #1
 8007eb6:	4240      	negs	r0, r0
 8007eb8:	bd70      	pop	{r4, r5, r6, pc}
 8007eba:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d004      	beq.n	8007eca <_raise_r+0x24>
 8007ec0:	008a      	lsls	r2, r1, #2
 8007ec2:	189b      	adds	r3, r3, r2
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	2a00      	cmp	r2, #0
 8007ec8:	d108      	bne.n	8007edc <_raise_r+0x36>
 8007eca:	0020      	movs	r0, r4
 8007ecc:	f000 f842 	bl	8007f54 <_getpid_r>
 8007ed0:	002a      	movs	r2, r5
 8007ed2:	0001      	movs	r1, r0
 8007ed4:	0020      	movs	r0, r4
 8007ed6:	f000 f82b 	bl	8007f30 <_kill_r>
 8007eda:	e7ed      	b.n	8007eb8 <_raise_r+0x12>
 8007edc:	2a01      	cmp	r2, #1
 8007ede:	d009      	beq.n	8007ef4 <_raise_r+0x4e>
 8007ee0:	1c51      	adds	r1, r2, #1
 8007ee2:	d103      	bne.n	8007eec <_raise_r+0x46>
 8007ee4:	2316      	movs	r3, #22
 8007ee6:	6003      	str	r3, [r0, #0]
 8007ee8:	2001      	movs	r0, #1
 8007eea:	e7e5      	b.n	8007eb8 <_raise_r+0x12>
 8007eec:	2100      	movs	r1, #0
 8007eee:	0028      	movs	r0, r5
 8007ef0:	6019      	str	r1, [r3, #0]
 8007ef2:	4790      	blx	r2
 8007ef4:	2000      	movs	r0, #0
 8007ef6:	e7df      	b.n	8007eb8 <_raise_r+0x12>

08007ef8 <raise>:
 8007ef8:	b510      	push	{r4, lr}
 8007efa:	4b03      	ldr	r3, [pc, #12]	@ (8007f08 <raise+0x10>)
 8007efc:	0001      	movs	r1, r0
 8007efe:	6818      	ldr	r0, [r3, #0]
 8007f00:	f7ff ffd1 	bl	8007ea6 <_raise_r>
 8007f04:	bd10      	pop	{r4, pc}
 8007f06:	46c0      	nop			@ (mov r8, r8)
 8007f08:	20000018 	.word	0x20000018

08007f0c <_isatty_r>:
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	b570      	push	{r4, r5, r6, lr}
 8007f10:	4d06      	ldr	r5, [pc, #24]	@ (8007f2c <_isatty_r+0x20>)
 8007f12:	0004      	movs	r4, r0
 8007f14:	0008      	movs	r0, r1
 8007f16:	602b      	str	r3, [r5, #0]
 8007f18:	f7fa fe87 	bl	8002c2a <_isatty>
 8007f1c:	1c43      	adds	r3, r0, #1
 8007f1e:	d103      	bne.n	8007f28 <_isatty_r+0x1c>
 8007f20:	682b      	ldr	r3, [r5, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d000      	beq.n	8007f28 <_isatty_r+0x1c>
 8007f26:	6023      	str	r3, [r4, #0]
 8007f28:	bd70      	pop	{r4, r5, r6, pc}
 8007f2a:	46c0      	nop			@ (mov r8, r8)
 8007f2c:	2000048c 	.word	0x2000048c

08007f30 <_kill_r>:
 8007f30:	2300      	movs	r3, #0
 8007f32:	b570      	push	{r4, r5, r6, lr}
 8007f34:	4d06      	ldr	r5, [pc, #24]	@ (8007f50 <_kill_r+0x20>)
 8007f36:	0004      	movs	r4, r0
 8007f38:	0008      	movs	r0, r1
 8007f3a:	0011      	movs	r1, r2
 8007f3c:	602b      	str	r3, [r5, #0]
 8007f3e:	f7fa fe06 	bl	8002b4e <_kill>
 8007f42:	1c43      	adds	r3, r0, #1
 8007f44:	d103      	bne.n	8007f4e <_kill_r+0x1e>
 8007f46:	682b      	ldr	r3, [r5, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d000      	beq.n	8007f4e <_kill_r+0x1e>
 8007f4c:	6023      	str	r3, [r4, #0]
 8007f4e:	bd70      	pop	{r4, r5, r6, pc}
 8007f50:	2000048c 	.word	0x2000048c

08007f54 <_getpid_r>:
 8007f54:	b510      	push	{r4, lr}
 8007f56:	f7fa fdf4 	bl	8002b42 <_getpid>
 8007f5a:	bd10      	pop	{r4, pc}

08007f5c <_fstat_r>:
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	b570      	push	{r4, r5, r6, lr}
 8007f60:	4d06      	ldr	r5, [pc, #24]	@ (8007f7c <_fstat_r+0x20>)
 8007f62:	0004      	movs	r4, r0
 8007f64:	0008      	movs	r0, r1
 8007f66:	0011      	movs	r1, r2
 8007f68:	602b      	str	r3, [r5, #0]
 8007f6a:	f7fa fe50 	bl	8002c0e <_fstat>
 8007f6e:	1c43      	adds	r3, r0, #1
 8007f70:	d103      	bne.n	8007f7a <_fstat_r+0x1e>
 8007f72:	682b      	ldr	r3, [r5, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d000      	beq.n	8007f7a <_fstat_r+0x1e>
 8007f78:	6023      	str	r3, [r4, #0]
 8007f7a:	bd70      	pop	{r4, r5, r6, pc}
 8007f7c:	2000048c 	.word	0x2000048c

08007f80 <_init>:
 8007f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f82:	46c0      	nop			@ (mov r8, r8)
 8007f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f86:	bc08      	pop	{r3}
 8007f88:	469e      	mov	lr, r3
 8007f8a:	4770      	bx	lr

08007f8c <_fini>:
 8007f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f8e:	46c0      	nop			@ (mov r8, r8)
 8007f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f92:	bc08      	pop	{r3}
 8007f94:	469e      	mov	lr, r3
 8007f96:	4770      	bx	lr
